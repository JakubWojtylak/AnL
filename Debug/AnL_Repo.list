
AnL_Repo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a938  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00099880  0800aae8  0800aae8  0001aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080a4368  080a4368  000b4368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080a4370  080a4370  000b4370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080a4374  080a4374  000b4374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  080a4378  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000c00b0  2**0
                  CONTENTS
  8 .bss          00000680  200000b0  200000b0  000c00b0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000730  20000730  000c00b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000c00b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00026b7b  00000000  00000000  000c00e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004ccd  00000000  00000000  000e6c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c50  00000000  00000000  000eb928  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019f0  00000000  00000000  000ed578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d874  00000000  00000000  000eef68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007f90  00000000  00000000  000fc7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0010476c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c8c  00000000  00000000  001047e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aad0 	.word	0x0800aad0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	0800aad0 	.word	0x0800aad0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b97a 	b.w	8000d80 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	9e08      	ldr	r6, [sp, #32]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d151      	bne.n	8000b58 <__udivmoddi4+0xb4>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	d96d      	bls.n	8000b96 <__udivmoddi4+0xf2>
 8000aba:	fab2 fe82 	clz	lr, r2
 8000abe:	f1be 0f00 	cmp.w	lr, #0
 8000ac2:	d00b      	beq.n	8000adc <__udivmoddi4+0x38>
 8000ac4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ac8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ad0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ad4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ad8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ae6:	fa1f f987 	uxth.w	r9, r7
 8000aea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000af2:	fb08 f309 	mul.w	r3, r8, r9
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x6c>
 8000afa:	19ed      	adds	r5, r5, r7
 8000afc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b00:	f080 8123 	bcs.w	8000d4a <__udivmoddi4+0x2a6>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f240 8120 	bls.w	8000d4a <__udivmoddi4+0x2a6>
 8000b0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0e:	443d      	add	r5, r7
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b20:	fb00 f909 	mul.w	r9, r0, r9
 8000b24:	45a1      	cmp	r9, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x98>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	f080 810a 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8107 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 0409 	sub.w	r4, r4, r9
 8000b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d061      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6034      	str	r4, [r6, #0]
 8000b52:	6073      	str	r3, [r6, #4]
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0xc8>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d054      	beq.n	8000c0a <__udivmoddi4+0x166>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b66:	4608      	mov	r0, r1
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	fab3 f183 	clz	r1, r3
 8000b70:	2900      	cmp	r1, #0
 8000b72:	f040 808e 	bne.w	8000c92 <__udivmoddi4+0x1ee>
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xdc>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80fa 	bhi.w	8000d74 <__udivmoddi4+0x2d0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb65 0503 	sbc.w	r5, r5, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	46ac      	mov	ip, r5
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d03f      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	b912      	cbnz	r2, 8000b9e <__udivmoddi4+0xfa>
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b9e:	fab7 fe87 	clz	lr, r7
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d134      	bne.n	8000c12 <__udivmoddi4+0x16e>
 8000ba8:	1beb      	subs	r3, r5, r7
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bb6:	0c25      	lsrs	r5, r4, #16
 8000bb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc0:	fb0c f308 	mul.w	r3, ip, r8
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x134>
 8000bc8:	19ed      	adds	r5, r5, r7
 8000bca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x132>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	f200 80d1 	bhi.w	8000d78 <__udivmoddi4+0x2d4>
 8000bd6:	4680      	mov	r8, r0
 8000bd8:	1aed      	subs	r5, r5, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000be0:	fb02 5510 	mls	r5, r2, r0, r5
 8000be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000be8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x15c>
 8000bf0:	19e4      	adds	r4, r4, r7
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x15a>
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	f200 80b8 	bhi.w	8000d6e <__udivmoddi4+0x2ca>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c08:	e79d      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1ce 0420 	rsb	r4, lr, #32
 8000c16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	fa25 f404 	lsr.w	r4, r5, r4
 8000c28:	ea48 0803 	orr.w	r8, r8, r3
 8000c2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c34:	fb02 4411 	mls	r4, r2, r1, r4
 8000c38:	fa1f fc87 	uxth.w	ip, r7
 8000c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c40:	fb01 f30c 	mul.w	r3, r1, ip
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x1bc>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c52:	f080 808a 	bcs.w	8000d6a <__udivmoddi4+0x2c6>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	f240 8087 	bls.w	8000d6a <__udivmoddi4+0x2c6>
 8000c5c:	3902      	subs	r1, #2
 8000c5e:	443d      	add	r5, r7
 8000c60:	1aeb      	subs	r3, r5, r3
 8000c62:	fa1f f588 	uxth.w	r5, r8
 8000c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c72:	fb00 f30c 	mul.w	r3, r0, ip
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x1e6>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c80:	d26f      	bcs.n	8000d62 <__udivmoddi4+0x2be>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0x2be>
 8000c86:	3802      	subs	r0, #2
 8000c88:	443d      	add	r5, r7
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	e78f      	b.n	8000bb2 <__udivmoddi4+0x10e>
 8000c92:	f1c1 0720 	rsb	r7, r1, #32
 8000c96:	fa22 f807 	lsr.w	r8, r2, r7
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca0:	ea48 0303 	orr.w	r3, r8, r3
 8000ca4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cbe:	fa1f f883 	uxth.w	r8, r3
 8000cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cc6:	fb09 f408 	mul.w	r4, r9, r8
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x244>
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	d243      	bcs.n	8000d66 <__udivmoddi4+0x2c2>
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d941      	bls.n	8000d66 <__udivmoddi4+0x2c2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	441d      	add	r5, r3
 8000ce8:	1b2d      	subs	r5, r5, r4
 8000cea:	fa1f fe8e 	uxth.w	lr, lr
 8000cee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cf2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cfa:	fb00 f808 	mul.w	r8, r0, r8
 8000cfe:	45a0      	cmp	r8, r4
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x26e>
 8000d02:	18e4      	adds	r4, r4, r3
 8000d04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d08:	d229      	bcs.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0a:	45a0      	cmp	r8, r4
 8000d0c:	d927      	bls.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	441c      	add	r4, r3
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c6      	mov	lr, r8
 8000d22:	464d      	mov	r5, r9
 8000d24:	d315      	bcc.n	8000d52 <__udivmoddi4+0x2ae>
 8000d26:	d012      	beq.n	8000d4e <__udivmoddi4+0x2aa>
 8000d28:	b156      	cbz	r6, 8000d40 <__udivmoddi4+0x29c>
 8000d2a:	ebba 030e 	subs.w	r3, sl, lr
 8000d2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d32:	fa04 f707 	lsl.w	r7, r4, r7
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	40cc      	lsrs	r4, r1
 8000d3c:	6037      	str	r7, [r6, #0]
 8000d3e:	6074      	str	r4, [r6, #4]
 8000d40:	2100      	movs	r1, #0
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4618      	mov	r0, r3
 8000d48:	e6f8      	b.n	8000b3c <__udivmoddi4+0x98>
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	e6e0      	b.n	8000b10 <__udivmoddi4+0x6c>
 8000d4e:	45c2      	cmp	sl, r8
 8000d50:	d2ea      	bcs.n	8000d28 <__udivmoddi4+0x284>
 8000d52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d56:	eb69 0503 	sbc.w	r5, r9, r3
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7e4      	b.n	8000d28 <__udivmoddi4+0x284>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	e7d7      	b.n	8000d12 <__udivmoddi4+0x26e>
 8000d62:	4640      	mov	r0, r8
 8000d64:	e791      	b.n	8000c8a <__udivmoddi4+0x1e6>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e7be      	b.n	8000ce8 <__udivmoddi4+0x244>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	e778      	b.n	8000c60 <__udivmoddi4+0x1bc>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	e745      	b.n	8000c00 <__udivmoddi4+0x15c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e708      	b.n	8000b8a <__udivmoddi4+0xe6>
 8000d78:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	e72b      	b.n	8000bd8 <__udivmoddi4+0x134>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d88:	f000 fa5c 	bl	8001244 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d8c:	20ca      	movs	r0, #202	; 0xca
 8000d8e:	f000 f95d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d92:	20c3      	movs	r0, #195	; 0xc3
 8000d94:	f000 f967 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d98:	2008      	movs	r0, #8
 8000d9a:	f000 f964 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000d9e:	2050      	movs	r0, #80	; 0x50
 8000da0:	f000 f961 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000da4:	20cf      	movs	r0, #207	; 0xcf
 8000da6:	f000 f951 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f95b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000db0:	20c1      	movs	r0, #193	; 0xc1
 8000db2:	f000 f958 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000db6:	2030      	movs	r0, #48	; 0x30
 8000db8:	f000 f955 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000dbc:	20ed      	movs	r0, #237	; 0xed
 8000dbe:	f000 f945 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 f94f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 f949 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dd4:	2081      	movs	r0, #129	; 0x81
 8000dd6:	f000 f946 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000dda:	20e8      	movs	r0, #232	; 0xe8
 8000ddc:	f000 f936 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000de0:	2085      	movs	r0, #133	; 0x85
 8000de2:	f000 f940 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f93d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000dec:	2078      	movs	r0, #120	; 0x78
 8000dee:	f000 f93a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000df2:	20cb      	movs	r0, #203	; 0xcb
 8000df4:	f000 f92a 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000df8:	2039      	movs	r0, #57	; 0x39
 8000dfa:	f000 f934 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f000 f931 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f92e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e0a:	2034      	movs	r0, #52	; 0x34
 8000e0c:	f000 f92b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f000 f928 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e16:	20f7      	movs	r0, #247	; 0xf7
 8000e18:	f000 f918 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f000 f922 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e22:	20ea      	movs	r0, #234	; 0xea
 8000e24:	f000 f912 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f91c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f919 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e34:	20b1      	movs	r0, #177	; 0xb1
 8000e36:	f000 f909 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f913 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e40:	201b      	movs	r0, #27
 8000e42:	f000 f910 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e46:	20b6      	movs	r0, #182	; 0xb6
 8000e48:	f000 f900 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f000 f90a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e52:	20a2      	movs	r0, #162	; 0xa2
 8000e54:	f000 f907 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e58:	20c0      	movs	r0, #192	; 0xc0
 8000e5a:	f000 f8f7 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f000 f901 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e64:	20c1      	movs	r0, #193	; 0xc1
 8000e66:	f000 f8f1 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f000 f8fb 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e70:	20c5      	movs	r0, #197	; 0xc5
 8000e72:	f000 f8eb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e76:	2045      	movs	r0, #69	; 0x45
 8000e78:	f000 f8f5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f000 f8f2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e82:	20c7      	movs	r0, #199	; 0xc7
 8000e84:	f000 f8e2 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e88:	2090      	movs	r0, #144	; 0x90
 8000e8a:	f000 f8ec 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f000 f8dc 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 f8e6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000e9a:	20f2      	movs	r0, #242	; 0xf2
 8000e9c:	f000 f8d6 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 f8e0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ea6:	20b0      	movs	r0, #176	; 0xb0
 8000ea8:	f000 f8d0 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000eac:	20c2      	movs	r0, #194	; 0xc2
 8000eae:	f000 f8da 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eb2:	20b6      	movs	r0, #182	; 0xb6
 8000eb4:	f000 f8ca 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f000 f8d4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ebe:	20a7      	movs	r0, #167	; 0xa7
 8000ec0:	f000 f8d1 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 f8ce 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f000 f8cb 	bl	8001066 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ed0:	202a      	movs	r0, #42	; 0x2a
 8000ed2:	f000 f8bb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8c5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f8c2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f8bf 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ee8:	20ef      	movs	r0, #239	; 0xef
 8000eea:	f000 f8bc 	bl	8001066 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000eee:	202b      	movs	r0, #43	; 0x2b
 8000ef0:	f000 f8ac 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f8b6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f8b3 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f8b0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f8ad 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f0c:	20f6      	movs	r0, #246	; 0xf6
 8000f0e:	f000 f89d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f8a7 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f8a4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 f8a1 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f24:	202c      	movs	r0, #44	; 0x2c
 8000f26:	f000 f891 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8000f2a:	20c8      	movs	r0, #200	; 0xc8
 8000f2c:	f000 fa78 	bl	8001420 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f000 f88b 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f895 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f3c:	20e0      	movs	r0, #224	; 0xe0
 8000f3e:	f000 f885 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f88f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f48:	2029      	movs	r0, #41	; 0x29
 8000f4a:	f000 f88c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f4e:	2024      	movs	r0, #36	; 0x24
 8000f50:	f000 f889 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 f886 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f000 f883 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f60:	2009      	movs	r0, #9
 8000f62:	f000 f880 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f66:	204e      	movs	r0, #78	; 0x4e
 8000f68:	f000 f87d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f6c:	2078      	movs	r0, #120	; 0x78
 8000f6e:	f000 f87a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f72:	203c      	movs	r0, #60	; 0x3c
 8000f74:	f000 f877 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f000 f874 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f7e:	2013      	movs	r0, #19
 8000f80:	f000 f871 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f000 f86e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f000 f86b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f90:	2011      	movs	r0, #17
 8000f92:	f000 f868 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f865 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000f9c:	20e1      	movs	r0, #225	; 0xe1
 8000f9e:	f000 f855 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f85f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fa8:	2016      	movs	r0, #22
 8000faa:	f000 f85c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 f859 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f856 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 f853 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f000 f850 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000fc6:	2031      	movs	r0, #49	; 0x31
 8000fc8:	f000 f84d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fcc:	2033      	movs	r0, #51	; 0x33
 8000fce:	f000 f84a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000fd2:	2042      	movs	r0, #66	; 0x42
 8000fd4:	f000 f847 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f000 f844 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f841 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 f83e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 f83b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000ff0:	202f      	movs	r0, #47	; 0x2f
 8000ff2:	f000 f838 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f835 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ffc:	2011      	movs	r0, #17
 8000ffe:	f000 f825 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f000 fa0c 	bl	8001420 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001008:	2029      	movs	r0, #41	; 0x29
 800100a:	f000 f81f 	bl	800104c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f000 f81c 	bl	800104c <ili9341_WriteReg>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800101c:	f000 f912 	bl	8001244 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001020:	2103      	movs	r1, #3
 8001022:	20d3      	movs	r0, #211	; 0xd3
 8001024:	f000 f82c 	bl	8001080 <ili9341_ReadData>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001034:	2029      	movs	r0, #41	; 0x29
 8001036:	f000 f809 	bl	800104c <ili9341_WriteReg>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 f802 	bl	800104c <ili9341_WriteReg>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f98d 	bl	8001378 <LCD_IO_WriteReg>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f95e 	bl	8001334 <LCD_IO_WriteData>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4613      	mov	r3, r2
 800108e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001090:	797a      	ldrb	r2, [r7, #5]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f990 	bl	80013bc <LCD_IO_ReadData>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <SPIx_Init+0x6c>)
 80010ce:	f004 fc8d 	bl	80059ec <HAL_SPI_GetState>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d12b      	bne.n	8001130 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <SPIx_Init+0x6c>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <SPIx_Init+0x70>)
 80010dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <SPIx_Init+0x6c>)
 80010e0:	2218      	movs	r2, #24
 80010e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <SPIx_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <SPIx_Init+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <SPIx_Init+0x6c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <SPIx_Init+0x6c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <SPIx_Init+0x6c>)
 80010fe:	2207      	movs	r2, #7
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <SPIx_Init+0x6c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <SPIx_Init+0x6c>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <SPIx_Init+0x6c>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <SPIx_Init+0x6c>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SPIx_Init+0x6c>)
 800111e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001122:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <SPIx_Init+0x6c>)
 8001126:	f000 f853 	bl	80011d0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <SPIx_Init+0x6c>)
 800112c:	f003 fffb 	bl	8005126 <HAL_SPI_Init>
  } 
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000cc 	.word	0x200000cc
 8001138:	40015000 	.word	0x40015000

0800113c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <SPIx_Read+0x38>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f107 0108 	add.w	r1, r7, #8
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <SPIx_Read+0x3c>)
 8001158:	f004 f9a2 	bl	80054a0 <HAL_SPI_Receive>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001166:	f000 f827 	bl	80011b8 <SPIx_Error>
  }
  
  return readvalue;
 800116a:	68bb      	ldr	r3, [r7, #8]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000040 	.word	0x20000040
 8001178:	200000cc 	.word	0x200000cc

0800117c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <SPIx_Write+0x34>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1db9      	adds	r1, r7, #6
 8001190:	2201      	movs	r2, #1
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <SPIx_Write+0x38>)
 8001194:	f004 f852 	bl	800523c <HAL_SPI_Transmit>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011a2:	f000 f809 	bl	80011b8 <SPIx_Error>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000040 	.word	0x20000040
 80011b4:	200000cc 	.word	0x200000cc

080011b8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <SPIx_Error+0x14>)
 80011be:	f004 f815 	bl	80051ec <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80011c2:	f7ff ff81 	bl	80010c8 <SPIx_Init>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000cc 	.word	0x200000cc

080011d0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <SPIx_MspInit+0x6c>)
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <SPIx_MspInit+0x6c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e6:	6453      	str	r3, [r2, #68]	; 0x44
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SPIx_MspInit+0x6c>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <SPIx_MspInit+0x6c>)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <SPIx_MspInit+0x6c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f043 0320 	orr.w	r3, r3, #32
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <SPIx_MspInit+0x6c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001210:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001222:	2305      	movs	r3, #5
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <SPIx_MspInit+0x70>)
 800122e:	f002 f87d 	bl	800332c <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40021400 	.word	0x40021400

08001244 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <LCD_IO_Init+0xe0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d164      	bne.n	800131c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <LCD_IO_Init+0xe0>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <LCD_IO_Init+0xe4>)
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <LCD_IO_Init+0xe4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <LCD_IO_Init+0xe4>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4827      	ldr	r0, [pc, #156]	; (800132c <LCD_IO_Init+0xe8>)
 800128e:	f002 f84d 	bl	800332c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4a24      	ldr	r2, [pc, #144]	; (8001328 <LCD_IO_Init+0xe4>)
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <LCD_IO_Init+0xe4>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <LCD_IO_Init+0xe4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4819      	ldr	r0, [pc, #100]	; (800132c <LCD_IO_Init+0xe8>)
 80012c8:	f002 f830 	bl	800332c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <LCD_IO_Init+0xe4>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <LCD_IO_Init+0xe4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <LCD_IO_Init+0xe4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80012e8:	2304      	movs	r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <LCD_IO_Init+0xec>)
 8001300:	f002 f814 	bl	800332c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001304:	2200      	movs	r2, #0
 8001306:	2104      	movs	r1, #4
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <LCD_IO_Init+0xec>)
 800130a:	f002 fadd 	bl	80038c8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800130e:	2201      	movs	r2, #1
 8001310:	2104      	movs	r1, #4
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <LCD_IO_Init+0xec>)
 8001314:	f002 fad8 	bl	80038c8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001318:	f7ff fed6 	bl	80010c8 <SPIx_Init>
  }
}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000124 	.word	0x20000124
 8001328:	40023800 	.word	0x40023800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40020800 	.word	0x40020800

08001334 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <LCD_IO_WriteData+0x3c>)
 8001346:	f002 fabf 	bl	80038c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <LCD_IO_WriteData+0x40>)
 8001350:	f002 faba 	bl	80038c8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff10 	bl	800117c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800135c:	2201      	movs	r2, #1
 800135e:	2104      	movs	r1, #4
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <LCD_IO_WriteData+0x40>)
 8001362:	f002 fab1 	bl	80038c8 <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40020800 	.word	0x40020800

08001378 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <LCD_IO_WriteReg+0x3c>)
 800138a:	f002 fa9d 	bl	80038c8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800138e:	2200      	movs	r2, #0
 8001390:	2104      	movs	r1, #4
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <LCD_IO_WriteReg+0x40>)
 8001394:	f002 fa98 	bl	80038c8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feed 	bl	800117c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <LCD_IO_WriteReg+0x40>)
 80013a8:	f002 fa8e 	bl	80038c8 <HAL_GPIO_WritePin>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40020800 	.word	0x40020800

080013bc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <LCD_IO_ReadData+0x5c>)
 80013d6:	f002 fa77 	bl	80038c8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <LCD_IO_ReadData+0x60>)
 80013e2:	f002 fa71 	bl	80038c8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fec7 	bl	800117c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fea3 	bl	800113c <SPIx_Read>
 80013f6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <LCD_IO_ReadData+0x60>)
 8001400:	f002 fa62 	bl	80038c8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001404:	2201      	movs	r2, #1
 8001406:	2104      	movs	r1, #4
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <LCD_IO_ReadData+0x5c>)
 800140a:	f002 fa5d 	bl	80038c8 <HAL_GPIO_WritePin>
  
  return readvalue;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00

08001420 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f001 f907 	bl	800263c <HAL_Delay>
  //wait_ms(Delay);
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <BSP_LCD_Init+0xc0>)
 8001440:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001444:	2209      	movs	r2, #9
 8001446:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800144a:	2201      	movs	r2, #1
 800144c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001450:	221d      	movs	r2, #29
 8001452:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001456:	2203      	movs	r2, #3
 8001458:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800145c:	f240 120d 	movw	r2, #269	; 0x10d
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001464:	f240 1243 	movw	r2, #323	; 0x143
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800146c:	f240 1217 	movw	r2, #279	; 0x117
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001474:	f240 1247 	movw	r2, #327	; 0x147
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <BSP_LCD_Init+0xc4>)
 8001494:	2208      	movs	r2, #8
 8001496:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <BSP_LCD_Init+0xc4>)
 800149a:	22c0      	movs	r2, #192	; 0xc0
 800149c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014ae:	f003 fc17 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80014ca:	f000 fc79 	bl	8001dc0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014d0:	f002 fbb8 	bl	8003c44 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <BSP_LCD_Init+0xc8>)
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <BSP_LCD_Init+0xcc>)
 80014d8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <BSP_LCD_Init+0xc8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80014e2:	f000 fe9f 	bl	8002224 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <BSP_LCD_Init+0xd0>)
 80014e8:	f000 f8b4 	bl	8001654 <BSP_LCD_SetFont>

  return LCD_OK;
 80014ec:	2300      	movs	r3, #0
}  
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000288 	.word	0x20000288
 80014f8:	40016800 	.word	0x40016800
 80014fc:	20000168 	.word	0x20000168
 8001500:	20000330 	.word	0x20000330
 8001504:	20000000 	.word	0x20000000
 8001508:	20000038 	.word	0x20000038

0800150c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <BSP_LCD_GetXSize+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	4798      	blx	r3
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000330 	.word	0x20000330

08001524 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <BSP_LCD_GetYSize+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	4798      	blx	r3
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000330 	.word	0x20000330

0800153c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800154c:	f7ff ffde 	bl	800150c <BSP_LCD_GetXSize>
 8001550:	4603      	mov	r3, r0
 8001552:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001558:	f7ff ffe4 	bl	8001524 <BSP_LCD_GetYSize>
 800155c:	4603      	mov	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001588:	2307      	movs	r3, #7
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800158c:	f7ff ffbe 	bl	800150c <BSP_LCD_GetXSize>
 8001590:	4603      	mov	r3, r0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001594:	f7ff ffc6 	bl	8001524 <BSP_LCD_GetYSize>
 8001598:	4603      	mov	r3, r0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015a6:	f002 fcdf 	bl	8003f68 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4913      	ldr	r1, [pc, #76]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3304      	adds	r3, #4
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <BSP_LCD_LayerDefaultInit+0xc4>)
 80015d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	4909      	ldr	r1, [pc, #36]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015e6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015ea:	f002 fcfb 	bl	8003fe4 <HAL_LTDC_EnableDither>
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000288 	.word	0x20000288
 80015fc:	2000019c 	.word	0x2000019c
 8001600:	20000038 	.word	0x20000038

08001604 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <BSP_LCD_SelectLayer+0x1c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000198 	.word	0x20000198

08001624 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <BSP_LCD_SetTextColor+0x28>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <BSP_LCD_SetTextColor+0x2c>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000198 	.word	0x20000198
 8001650:	2000019c 	.word	0x2000019c

08001654 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <BSP_LCD_SetFont+0x2c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <BSP_LCD_SetFont+0x30>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3308      	adds	r3, #8
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000198 	.word	0x20000198
 8001684:	2000019c 	.word	0x2000019c

08001688 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <BSP_LCD_Clear+0x48>)
 8001692:	681c      	ldr	r4, [r3, #0]
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <BSP_LCD_Clear+0x48>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <BSP_LCD_Clear+0x4c>)
 800169a:	2134      	movs	r1, #52	; 0x34
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	335c      	adds	r3, #92	; 0x5c
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461d      	mov	r5, r3
 80016a8:	f7ff ff30 	bl	800150c <BSP_LCD_GetXSize>
 80016ac:	4606      	mov	r6, r0
 80016ae:	f7ff ff39 	bl	8001524 <BSP_LCD_GetYSize>
 80016b2:	4602      	mov	r2, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2300      	movs	r3, #0
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4613      	mov	r3, r2
 80016be:	4632      	mov	r2, r6
 80016c0:	4629      	mov	r1, r5
 80016c2:	4620      	mov	r0, r4
 80016c4:	f000 fd32 	bl	800212c <FillBuffer>
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d0:	20000198 	.word	0x20000198
 80016d4:	20000288 	.word	0x20000288

080016d8 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 80016e0:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	492d      	ldr	r1, [pc, #180]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 80016fa:	6819      	ldr	r1, [r3, #0]
 80016fc:	4827      	ldr	r0, [pc, #156]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 80016fe:	460b      	mov	r3, r1
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	440b      	add	r3, r1
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4403      	add	r3, r0
 8001708:	3304      	adds	r3, #4
 800170a:	6819      	ldr	r1, [r3, #0]
 800170c:	4823      	ldr	r0, [pc, #140]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4403      	add	r3, r0
 8001718:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	491f      	ldr	r1, [pc, #124]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	88da      	ldrh	r2, [r3, #6]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	b29b      	uxth	r3, r3
 8001734:	fb12 f303 	smulbb	r3, r2, r3
 8001738:	b29c      	uxth	r4, r3
 800173a:	f7ff fee7 	bl	800150c <BSP_LCD_GetXSize>
 800173e:	4603      	mov	r3, r0
 8001740:	b298      	uxth	r0, r3
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4915      	ldr	r1, [pc, #84]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	440b      	add	r3, r1
 8001752:	3308      	adds	r3, #8
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	88db      	ldrh	r3, [r3, #6]
 8001758:	4602      	mov	r2, r0
 800175a:	4621      	mov	r1, r4
 800175c:	2000      	movs	r0, #0
 800175e:	f000 fa25 	bl	8001bac <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <BSP_LCD_ClearStringLine+0xc0>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <BSP_LCD_ClearStringLine+0xc4>)
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff4b 	bl	8001624 <BSP_LCD_SetTextColor>
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop
 8001798:	20000198 	.word	0x20000198
 800179c:	2000019c 	.word	0x2000019c

080017a0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
 80017aa:	460b      	mov	r3, r1
 80017ac:	80bb      	strh	r3, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <BSP_LCD_DisplayChar+0x80>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	491b      	ldr	r1, [pc, #108]	; (8001824 <BSP_LCD_DisplayChar+0x84>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6819      	ldr	r1, [r3, #0]
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017ce:	4b14      	ldr	r3, [pc, #80]	; (8001820 <BSP_LCD_DisplayChar+0x80>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4c14      	ldr	r4, [pc, #80]	; (8001824 <BSP_LCD_DisplayChar+0x84>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4423      	add	r3, r4
 80017de:	3308      	adds	r3, #8
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017e4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <BSP_LCD_DisplayChar+0x80>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4c0d      	ldr	r4, [pc, #52]	; (8001824 <BSP_LCD_DisplayChar+0x84>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4423      	add	r3, r4
 80017f8:	3308      	adds	r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	889b      	ldrh	r3, [r3, #4]
 80017fe:	3307      	adds	r3, #7
 8001800:	2b00      	cmp	r3, #0
 8001802:	da00      	bge.n	8001806 <BSP_LCD_DisplayChar+0x66>
 8001804:	3307      	adds	r3, #7
 8001806:	10db      	asrs	r3, r3, #3
 8001808:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800180c:	18ca      	adds	r2, r1, r3
 800180e:	88b9      	ldrh	r1, [r7, #4]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fbd0 	bl	8001fb8 <DrawChar>
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	20000198 	.word	0x20000198
 8001824:	2000019c 	.word	0x2000019c

08001828 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af02      	add	r7, sp, #8
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	460b      	mov	r3, r1
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <BSP_LCD_DrawHLine+0x70>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a16      	ldr	r2, [pc, #88]	; (800189c <BSP_LCD_DrawHLine+0x74>)
 8001844:	2134      	movs	r1, #52	; 0x34
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	335c      	adds	r3, #92	; 0x5c
 800184e:	681c      	ldr	r4, [r3, #0]
 8001850:	f7ff fe5c 	bl	800150c <BSP_LCD_GetXSize>
 8001854:	4602      	mov	r2, r0
 8001856:	88bb      	ldrh	r3, [r7, #4]
 8001858:	fb03 f202 	mul.w	r2, r3, r2
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4423      	add	r3, r4
 8001864:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <BSP_LCD_DrawHLine+0x70>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	68fc      	ldr	r4, [r7, #12]
 800186c:	887d      	ldrh	r5, [r7, #2]
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <BSP_LCD_DrawHLine+0x70>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	490b      	ldr	r1, [pc, #44]	; (80018a0 <BSP_LCD_DrawHLine+0x78>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	462a      	mov	r2, r5
 800188a:	4621      	mov	r1, r4
 800188c:	f000 fc4e 	bl	800212c <FillBuffer>
}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}
 8001898:	20000198 	.word	0x20000198
 800189c:	20000288 	.word	0x20000288
 80018a0:	2000019c 	.word	0x2000019c

080018a4 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
 80018ae:	460b      	mov	r3, r1
 80018b0:	80bb      	strh	r3, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	f1c3 0303 	rsb	r3, r3, #3
 80018be:	617b      	str	r3, [r7, #20]
  curx = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80018c8:	e0cf      	b.n	8001a6a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4413      	add	r3, r2
 80018d2:	b298      	uxth	r0, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	88ba      	ldrh	r2, [r7, #4]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b29c      	uxth	r4, r3
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4967      	ldr	r1, [pc, #412]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4621      	mov	r1, r4
 80018f4:	f000 fb3a 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b298      	uxth	r0, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	b29b      	uxth	r3, r3
 8001906:	88ba      	ldrh	r2, [r7, #4]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	b29c      	uxth	r4, r3
 800190c:	4b5b      	ldr	r3, [pc, #364]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	495b      	ldr	r1, [pc, #364]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	4621      	mov	r1, r4
 8001922:	f000 fb23 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	b29a      	uxth	r2, r3
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4413      	add	r3, r2
 800192e:	b298      	uxth	r0, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	b29b      	uxth	r3, r3
 8001934:	88ba      	ldrh	r2, [r7, #4]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	b29c      	uxth	r4, r3
 800193a:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4950      	ldr	r1, [pc, #320]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4621      	mov	r1, r4
 8001950:	f000 fb0c 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	b29b      	uxth	r3, r3
 8001958:	88fa      	ldrh	r2, [r7, #6]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	b298      	uxth	r0, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	b29b      	uxth	r3, r3
 8001962:	88ba      	ldrh	r2, [r7, #4]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29c      	uxth	r4, r3
 8001968:	4b44      	ldr	r3, [pc, #272]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4944      	ldr	r1, [pc, #272]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4621      	mov	r1, r4
 800197e:	f000 faf5 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	b29a      	uxth	r2, r3
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	4413      	add	r3, r2
 800198a:	b298      	uxth	r0, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	b29a      	uxth	r2, r3
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	b29c      	uxth	r4, r3
 8001996:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4939      	ldr	r1, [pc, #228]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	440b      	add	r3, r1
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4621      	mov	r1, r4
 80019ac:	f000 fade 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b298      	uxth	r0, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	88bb      	ldrh	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29c      	uxth	r4, r3
 80019c4:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	492d      	ldr	r1, [pc, #180]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4621      	mov	r1, r4
 80019da:	f000 fac7 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4413      	add	r3, r2
 80019e6:	b298      	uxth	r0, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	88bb      	ldrh	r3, [r7, #4]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29c      	uxth	r4, r3
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4922      	ldr	r1, [pc, #136]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	f000 fab0 	bl	8001f6c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	88fa      	ldrh	r2, [r7, #6]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	b298      	uxth	r0, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29c      	uxth	r4, r3
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <BSP_LCD_DrawCircle+0x1d8>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4916      	ldr	r1, [pc, #88]	; (8001a80 <BSP_LCD_DrawCircle+0x1dc>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4621      	mov	r1, r4
 8001a36:	f000 fa99 	bl	8001f6c <BSP_LCD_DrawPixel>

    if (d < 0)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da06      	bge.n	8001a4e <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	4413      	add	r3, r2
 8001a48:	3306      	adds	r3, #6
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	009a      	lsls	r2, r3, #2
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4413      	add	r3, r2
 8001a5a:	330a      	adds	r3, #10
 8001a5c:	617b      	str	r3, [r7, #20]
      cury--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	3301      	adds	r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	f67f af2b 	bls.w	80018ca <BSP_LCD_DrawCircle+0x26>
  } 
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	20000198 	.word	0x20000198
 8001a80:	2000019c 	.word	0x2000019c

08001a84 <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b08b      	sub	sp, #44	; 0x2c
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (pBmp + 10);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	330a      	adds	r3, #10
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (pBmp + 12)) << 16;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	461a      	mov	r2, r3
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	4313      	orrs	r3, r2
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (pBmp + 18);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3312      	adds	r3, #18
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	61bb      	str	r3, [r7, #24]
  width |= (*(uint16_t *) (pBmp + 20)) << 16;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3314      	adds	r3, #20
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	041b      	lsls	r3, r3, #16
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = *(uint16_t *) (pBmp + 22);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3316      	adds	r3, #22
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	617b      	str	r3, [r7, #20]
  height |= (*(uint16_t *) (pBmp + 24)) << 16; 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	461a      	mov	r2, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
 
  /* Read bit/pixel */
  bitpixel = *(uint16_t *) (pBmp + 28);   
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	331c      	adds	r3, #28
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <BSP_LCD_DrawBitmap+0x120>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <BSP_LCD_DrawBitmap+0x124>)
 8001afe:	2134      	movs	r1, #52	; 0x34
 8001b00:	fb01 f303 	mul.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	335c      	adds	r3, #92	; 0x5c
 8001b08:	681c      	ldr	r4, [r3, #0]
 8001b0a:	f7ff fcff 	bl	800150c <BSP_LCD_GetXSize>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	fb03 f202 	mul.w	r2, r3, r2
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4423      	add	r3, r4
 8001b1e:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	3b20      	subs	r3, #32
 8001b24:	2b07      	cmp	r3, #7
 8001b26:	d802      	bhi.n	8001b2e <BSP_LCD_DrawBitmap+0xaa>
  {
    inputcolormode = CM_ARGB8888;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	e008      	b.n	8001b40 <BSP_LCD_DrawBitmap+0xbc>
  }
  else if ((bitpixel/8) == 2)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3b10      	subs	r3, #16
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d802      	bhi.n	8001b3c <BSP_LCD_DrawBitmap+0xb8>
  {
    inputcolormode = CM_RGB565;
 8001b36:	2302      	movs	r3, #2
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e001      	b.n	8001b40 <BSP_LCD_DrawBitmap+0xbc>
  }
  else
  {
    inputcolormode = CM_RGB888;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	fb02 f303 	mul.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	08d2      	lsrs	r2, r2, #3
 8001b4e:	fb02 f203 	mul.w	r2, r2, r3
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	4413      	add	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b60:	e018      	b.n	8001b94 <BSP_LCD_DrawBitmap+0x110>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8001b62:	6a39      	ldr	r1, [r7, #32]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fb17 	bl	800219c <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001b6e:	f7ff fccd 	bl	800150c <BSP_LCD_GetXSize>
 8001b72:	4603      	mov	r3, r0
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	6a3a      	ldr	r2, [r7, #32]
 8001b78:	4413      	add	r3, r2
 8001b7a:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	425b      	negs	r3, r3
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	3301      	adds	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3e2      	bcc.n	8001b62 <BSP_LCD_DrawBitmap+0xde>
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	372c      	adds	r7, #44	; 0x2c
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	20000198 	.word	0x20000198
 8001ba8:	20000288 	.word	0x20000288

08001bac <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80bb      	strh	r3, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <BSP_LCD_FillRect+0xa8>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4920      	ldr	r1, [pc, #128]	; (8001c58 <BSP_LCD_FillRect+0xac>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fd1e 	bl	8001624 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <BSP_LCD_FillRect+0xa8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <BSP_LCD_FillRect+0xb0>)
 8001bee:	2134      	movs	r1, #52	; 0x34
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	335c      	adds	r3, #92	; 0x5c
 8001bf8:	681c      	ldr	r4, [r3, #0]
 8001bfa:	f7ff fc87 	bl	800150c <BSP_LCD_GetXSize>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	88bb      	ldrh	r3, [r7, #4]
 8001c02:	fb03 f202 	mul.w	r2, r3, r2
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4423      	add	r3, r4
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <BSP_LCD_FillRect+0xa8>)
 8001c12:	681c      	ldr	r4, [r3, #0]
 8001c14:	68fd      	ldr	r5, [r7, #12]
 8001c16:	887e      	ldrh	r6, [r7, #2]
 8001c18:	f8b7 8000 	ldrh.w	r8, [r7]
 8001c1c:	f7ff fc76 	bl	800150c <BSP_LCD_GetXSize>
 8001c20:	4602      	mov	r2, r0
 8001c22:	887b      	ldrh	r3, [r7, #2]
 8001c24:	1ad1      	subs	r1, r2, r3
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <BSP_LCD_FillRect+0xa8>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <BSP_LCD_FillRect+0xac>)
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4403      	add	r3, r0
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9100      	str	r1, [sp, #0]
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	4632      	mov	r2, r6
 8001c40:	4629      	mov	r1, r5
 8001c42:	4620      	mov	r0, r4
 8001c44:	f000 fa72 	bl	800212c <FillBuffer>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c52:	bf00      	nop
 8001c54:	20000198 	.word	0x20000198
 8001c58:	2000019c 	.word	0x2000019c
 8001c5c:	20000288 	.word	0x20000288

08001c60 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	80fb      	strh	r3, [r7, #6]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	80bb      	strh	r3, [r7, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	f1c3 0303 	rsb	r3, r3, #3
 8001c7a:	617b      	str	r3, [r7, #20]

  curx = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <BSP_LCD_FillCircle+0x138>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4944      	ldr	r1, [pc, #272]	; (8001d9c <BSP_LCD_FillCircle+0x13c>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	440b      	add	r3, r1
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fcc4 	bl	8001624 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8001c9c:	e061      	b.n	8001d62 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d021      	beq.n	8001ce8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	88fa      	ldrh	r2, [r7, #6]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	b298      	uxth	r0, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	88bb      	ldrh	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	b299      	uxth	r1, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f7ff fdb1 	bl	8001828 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	88ba      	ldrh	r2, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f7ff fda0 	bl	8001828 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d021      	beq.n	8001d32 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	88fa      	ldrh	r2, [r7, #6]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	b298      	uxth	r0, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	88ba      	ldrh	r2, [r7, #4]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	b299      	uxth	r1, r3
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	f7ff fd8c 	bl	8001828 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b298      	uxth	r0, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	b299      	uxth	r1, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	f7ff fd7b 	bl	8001828 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	da06      	bge.n	8001d46 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	009a      	lsls	r2, r3, #2
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3306      	adds	r3, #6
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	e00a      	b.n	8001d5c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	009a      	lsls	r2, r3, #2
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4413      	add	r3, r2
 8001d52:	330a      	adds	r3, #10
 8001d54:	617b      	str	r3, [r7, #20]
      cury--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d999      	bls.n	8001c9e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <BSP_LCD_FillCircle+0x138>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	490b      	ldr	r1, [pc, #44]	; (8001d9c <BSP_LCD_FillCircle+0x13c>)
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fc51 	bl	8001624 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	88b9      	ldrh	r1, [r7, #4]
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fd8b 	bl	80018a4 <BSP_LCD_DrawCircle>
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000198 	.word	0x20000198
 8001d9c:	2000019c 	.word	0x2000019c

08001da0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <BSP_LCD_DisplayOn+0x1c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001dae:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <BSP_LCD_DisplayOn+0x1c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	4798      	blx	r3
  }
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000330 	.word	0x20000330

08001dc0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	; 0x38
 8001dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
 8001dca:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b5e      	ldr	r3, [pc, #376]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	4a5a      	ldr	r2, [pc, #360]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	4a53      	ldr	r2, [pc, #332]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e04:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b50      	ldr	r3, [pc, #320]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	4a4c      	ldr	r2, [pc, #304]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4a45      	ldr	r2, [pc, #276]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e3c:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4a3e      	ldr	r2, [pc, #248]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e58:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f043 0320 	orr.w	r3, r3, #32
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4a30      	ldr	r2, [pc, #192]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <BSP_LCD_MspInit+0x190>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001ea6:	f641 0358 	movw	r3, #6232	; 0x1858
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001eb8:	230e      	movs	r3, #14
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4824      	ldr	r0, [pc, #144]	; (8001f54 <BSP_LCD_MspInit+0x194>)
 8001ec4:	f001 fa32 	bl	800332c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001ec8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4820      	ldr	r0, [pc, #128]	; (8001f58 <BSP_LCD_MspInit+0x198>)
 8001ed6:	f001 fa29 	bl	800332c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001eda:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	481d      	ldr	r0, [pc, #116]	; (8001f5c <BSP_LCD_MspInit+0x19c>)
 8001ee8:	f001 fa20 	bl	800332c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001eec:	2348      	movs	r3, #72	; 0x48
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481a      	ldr	r0, [pc, #104]	; (8001f60 <BSP_LCD_MspInit+0x1a0>)
 8001ef8:	f001 fa18 	bl	800332c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4816      	ldr	r0, [pc, #88]	; (8001f64 <BSP_LCD_MspInit+0x1a4>)
 8001f0a:	f001 fa0f 	bl	800332c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001f0e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4813      	ldr	r0, [pc, #76]	; (8001f68 <BSP_LCD_MspInit+0x1a8>)
 8001f1c:	f001 fa06 	bl	800332c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001f20:	2303      	movs	r3, #3
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001f24:	2309      	movs	r3, #9
 8001f26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <BSP_LCD_MspInit+0x198>)
 8001f30:	f001 f9fc 	bl	800332c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4809      	ldr	r0, [pc, #36]	; (8001f68 <BSP_LCD_MspInit+0x1a8>)
 8001f42:	f001 f9f3 	bl	800332c <HAL_GPIO_Init>
}
 8001f46:	bf00      	nop
 8001f48:	3738      	adds	r7, #56	; 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020000 	.word	0x40020000
 8001f58:	40020400 	.word	0x40020400
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020c00 	.word	0x40020c00
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021800 	.word	0x40021800

08001f6c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	80fb      	strh	r3, [r7, #6]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <BSP_LCD_DrawPixel+0x44>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <BSP_LCD_DrawPixel+0x48>)
 8001f82:	2134      	movs	r1, #52	; 0x34
 8001f84:	fb01 f303 	mul.w	r3, r1, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	335c      	adds	r3, #92	; 0x5c
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	88bd      	ldrh	r5, [r7, #4]
 8001f90:	f7ff fabc 	bl	800150c <BSP_LCD_GetXSize>
 8001f94:	4603      	mov	r3, r0
 8001f96:	fb03 f205 	mul.w	r2, r3, r5
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4423      	add	r3, r4
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	20000198 	.word	0x20000198
 8001fb4:	20000288 	.word	0x20000288

08001fb8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	603a      	str	r2, [r7, #0]
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001fd4:	4b53      	ldr	r3, [pc, #332]	; (8002124 <DrawChar+0x16c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4953      	ldr	r1, [pc, #332]	; (8002128 <DrawChar+0x170>)
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3308      	adds	r3, #8
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	88db      	ldrh	r3, [r3, #6]
 8001fea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001fec:	4b4d      	ldr	r3, [pc, #308]	; (8002124 <DrawChar+0x16c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <DrawChar+0x170>)
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	889b      	ldrh	r3, [r3, #4]
 8002002:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002004:	8a3b      	ldrh	r3, [r7, #16]
 8002006:	3307      	adds	r3, #7
 8002008:	2b00      	cmp	r3, #0
 800200a:	da00      	bge.n	800200e <DrawChar+0x56>
 800200c:	3307      	adds	r3, #7
 800200e:	10db      	asrs	r3, r3, #3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	b2da      	uxtb	r2, r3
 8002016:	8a3b      	ldrh	r3, [r7, #16]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e076      	b.n	8002112 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002024:	8a3b      	ldrh	r3, [r7, #16]
 8002026:	3307      	adds	r3, #7
 8002028:	2b00      	cmp	r3, #0
 800202a:	da00      	bge.n	800202e <DrawChar+0x76>
 800202c:	3307      	adds	r3, #7
 800202e:	10db      	asrs	r3, r3, #3
 8002030:	461a      	mov	r2, r3
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fb03 f302 	mul.w	r3, r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800203e:	8a3b      	ldrh	r3, [r7, #16]
 8002040:	3307      	adds	r3, #7
 8002042:	2b00      	cmp	r3, #0
 8002044:	da00      	bge.n	8002048 <DrawChar+0x90>
 8002046:	3307      	adds	r3, #7
 8002048:	10db      	asrs	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d002      	beq.n	8002054 <DrawChar+0x9c>
 800204e:	2b02      	cmp	r3, #2
 8002050:	d004      	beq.n	800205c <DrawChar+0xa4>
 8002052:	e00c      	b.n	800206e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	617b      	str	r3, [r7, #20]
      break;
 800205a:	e016      	b.n	800208a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	3201      	adds	r2, #1
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
      break;
 800206c:	e00d      	b.n	800208a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	041a      	lsls	r2, r3, #16
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3301      	adds	r3, #1
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	4313      	orrs	r3, r2
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	3202      	adds	r2, #2
 8002082:	7812      	ldrb	r2, [r2, #0]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
      break;
 8002088:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e036      	b.n	80020fe <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002090:	8a3a      	ldrh	r2, [r7, #16]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	1ad2      	subs	r2, r2, r3
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	4413      	add	r3, r2
 800209a:	3b01      	subs	r3, #1
 800209c:	2201      	movs	r2, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	88fb      	ldrh	r3, [r7, #6]
 80020b2:	4413      	add	r3, r2
 80020b4:	b298      	uxth	r0, r3
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <DrawChar+0x16c>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	491b      	ldr	r1, [pc, #108]	; (8002128 <DrawChar+0x170>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	f7ff ff4e 	bl	8001f6c <BSP_LCD_DrawPixel>
 80020d0:	e012      	b.n	80020f8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4413      	add	r3, r2
 80020da:	b298      	uxth	r0, r3
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <DrawChar+0x16c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4911      	ldr	r1, [pc, #68]	; (8002128 <DrawChar+0x170>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3304      	adds	r3, #4
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	88bb      	ldrh	r3, [r7, #4]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7ff ff3a 	bl	8001f6c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	3301      	adds	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
 80020fe:	8a3a      	ldrh	r2, [r7, #16]
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	429a      	cmp	r2, r3
 8002104:	d8c4      	bhi.n	8002090 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	3301      	adds	r3, #1
 800210a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	8a7a      	ldrh	r2, [r7, #18]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	429a      	cmp	r2, r3
 8002118:	d884      	bhi.n	8002024 <DrawChar+0x6c>
  }
}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000198 	.word	0x20000198
 8002128:	2000019c 	.word	0x2000019c

0800212c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <FillBuffer+0x68>)
 800213c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002140:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002142:	4b14      	ldr	r3, [pc, #80]	; (8002194 <FillBuffer+0x68>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002148:	4a12      	ldr	r2, [pc, #72]	; (8002194 <FillBuffer+0x68>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800214e:	4b11      	ldr	r3, [pc, #68]	; (8002194 <FillBuffer+0x68>)
 8002150:	4a11      	ldr	r2, [pc, #68]	; (8002198 <FillBuffer+0x6c>)
 8002152:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <FillBuffer+0x68>)
 8002156:	f000 fd4f 	bl	8002bf8 <HAL_DMA2D_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d115      	bne.n	800218c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <FillBuffer+0x68>)
 8002164:	f000 ffb6 	bl	80030d4 <HAL_DMA2D_ConfigLayer>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69f9      	ldr	r1, [r7, #28]
 8002178:	4806      	ldr	r0, [pc, #24]	; (8002194 <FillBuffer+0x68>)
 800217a:	f000 fd86 	bl	8002c8a <HAL_DMA2D_Start>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002184:	210a      	movs	r1, #10
 8002186:	4803      	ldr	r0, [pc, #12]	; (8002194 <FillBuffer+0x68>)
 8002188:	f000 fdaa 	bl	8002ce0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000128 	.word	0x20000128
 8002198:	4002b000 	.word	0x4002b000

0800219c <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80021aa:	4b1c      	ldr	r3, [pc, #112]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 80021b8:	4b18      	ldr	r3, [pc, #96]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80021be:	4b17      	ldr	r3, [pc, #92]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80021c4:	4b15      	ldr	r3, [pc, #84]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021c6:	22ff      	movs	r2, #255	; 0xff
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 80021d0:	4b12      	ldr	r3, [pc, #72]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021d8:	4a11      	ldr	r2, [pc, #68]	; (8002220 <ConvertLineToARGB8888+0x84>)
 80021da:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80021dc:	480f      	ldr	r0, [pc, #60]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021de:	f000 fd0b 	bl	8002bf8 <HAL_DMA2D_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 80021e8:	2101      	movs	r1, #1
 80021ea:	480c      	ldr	r0, [pc, #48]	; (800221c <ConvertLineToARGB8888+0x80>)
 80021ec:	f000 ff72 	bl	80030d4 <HAL_DMA2D_ConfigLayer>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10e      	bne.n	8002214 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <ConvertLineToARGB8888+0x80>)
 8002202:	f000 fd42 	bl	8002c8a <HAL_DMA2D_Start>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800220c:	210a      	movs	r1, #10
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <ConvertLineToARGB8888+0x80>)
 8002210:	f000 fd66 	bl	8002ce0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000128 	.word	0x20000128
 8002220:	4002b000 	.word	0x4002b000

08002224 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800222a:	4a2a      	ldr	r2, [pc, #168]	; (80022d4 <BSP_SDRAM_Init+0xb0>)
 800222c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002230:	2202      	movs	r2, #2
 8002232:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002236:	2207      	movs	r2, #7
 8002238:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800223c:	2204      	movs	r2, #4
 800223e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002242:	2207      	movs	r2, #7
 8002244:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002248:	2202      	movs	r2, #2
 800224a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 800224e:	2202      	movs	r2, #2
 8002250:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 8002254:	2202      	movs	r2, #2
 8002256:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800225a:	2201      	movs	r2, #1
 800225c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002266:	2204      	movs	r2, #4
 8002268:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800226c:	2210      	movs	r2, #16
 800226e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002278:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800227c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 8002294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800229a:	2100      	movs	r1, #0
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 800229e:	f000 f87f 	bl	80023a0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <BSP_SDRAM_Init+0xb4>)
 80022a4:	480a      	ldr	r0, [pc, #40]	; (80022d0 <BSP_SDRAM_Init+0xac>)
 80022a6:	f002 febf 	bl	8005028 <HAL_SDRAM_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e002      	b.n	80022be <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022be:	f240 506a 	movw	r0, #1386	; 0x56a
 80022c2:	f000 f80d 	bl	80022e0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <BSP_SDRAM_Init+0xb8>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200001b4 	.word	0x200001b4
 80022d4:	a0000140 	.word	0xa0000140
 80022d8:	200001e8 	.word	0x200001e8
 80022dc:	20000044 	.word	0x20000044

080022e0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80022f2:	4b29      	ldr	r3, [pc, #164]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f4:	2208      	movs	r2, #8
 80022f6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80022f8:	4b27      	ldr	r3, [pc, #156]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80022fe:	4b26      	ldr	r3, [pc, #152]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002308:	4923      	ldr	r1, [pc, #140]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800230c:	f002 fec0 	bl	8005090 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002310:	2001      	movs	r0, #1
 8002312:	f000 f993 	bl	800263c <HAL_Delay>
  //wait_ms(1);
  
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002316:	4b20      	ldr	r3, [pc, #128]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002318:	2202      	movs	r2, #2
 800231a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231e:	2208      	movs	r2, #8
 8002320:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002324:	2201      	movs	r2, #1
 8002326:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800232e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002332:	4919      	ldr	r1, [pc, #100]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002334:	4819      	ldr	r0, [pc, #100]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002336:	f002 feab 	bl	8005090 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233c:	2203      	movs	r2, #3
 800233e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002342:	2208      	movs	r2, #8
 8002344:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002348:	2204      	movs	r2, #4
 800234a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002356:	4910      	ldr	r1, [pc, #64]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002358:	4810      	ldr	r0, [pc, #64]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800235a:	f002 fe99 	bl	8005090 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800235e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002362:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002366:	2204      	movs	r2, #4
 8002368:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236c:	2208      	movs	r2, #8
 800236e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	2201      	movs	r2, #1
 8002374:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	4905      	ldr	r1, [pc, #20]	; (8002398 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002384:	f002 fe84 	bl	8005090 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4804      	ldr	r0, [pc, #16]	; (800239c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800238c:	f002 feab 	bl	80050e6 <HAL_SDRAM_ProgramRefreshRate>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000204 	.word	0x20000204
 800239c:	200001b4 	.word	0x200001b4

080023a0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	; 0x40
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ec 	beq.w	800258a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b6:	4a77      	ldr	r2, [pc, #476]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023b8:	4b76      	ldr	r3, [pc, #472]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6393      	str	r3, [r2, #56]	; 0x38
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
 80023d2:	4a70      	ldr	r2, [pc, #448]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023d4:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	4a69      	ldr	r2, [pc, #420]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b66      	ldr	r3, [pc, #408]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	623b      	str	r3, [r7, #32]
 8002404:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	4a62      	ldr	r2, [pc, #392]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800240c:	4b61      	ldr	r3, [pc, #388]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b5f      	ldr	r3, [pc, #380]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	4a5b      	ldr	r2, [pc, #364]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002428:	4b5a      	ldr	r3, [pc, #360]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b58      	ldr	r3, [pc, #352]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	61bb      	str	r3, [r7, #24]
 800243c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	4a54      	ldr	r2, [pc, #336]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002444:	4b53      	ldr	r3, [pc, #332]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f043 0310 	orr.w	r3, r3, #16
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4a4d      	ldr	r2, [pc, #308]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002460:	4b4c      	ldr	r3, [pc, #304]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	f043 0320 	orr.w	r3, r3, #32
 8002468:	6313      	str	r3, [r2, #48]	; 0x30
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	f003 0320 	and.w	r3, r3, #32
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4a46      	ldr	r2, [pc, #280]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <BSP_SDRAM_MspInit+0x1f4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800249e:	230c      	movs	r3, #12
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	483a      	ldr	r0, [pc, #232]	; (8002598 <BSP_SDRAM_MspInit+0x1f8>)
 80024ae:	f000 ff3d 	bl	800332c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80024b2:	2301      	movs	r3, #1
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4837      	ldr	r0, [pc, #220]	; (800259c <BSP_SDRAM_MspInit+0x1fc>)
 80024be:	f000 ff35 	bl	800332c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80024c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024cc:	4619      	mov	r1, r3
 80024ce:	4834      	ldr	r0, [pc, #208]	; (80025a0 <BSP_SDRAM_MspInit+0x200>)
 80024d0:	f000 ff2c 	bl	800332c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80024d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	4619      	mov	r1, r3
 80024e0:	4830      	ldr	r0, [pc, #192]	; (80025a4 <BSP_SDRAM_MspInit+0x204>)
 80024e2:	f000 ff23 	bl	800332c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80024e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	482d      	ldr	r0, [pc, #180]	; (80025a8 <BSP_SDRAM_MspInit+0x208>)
 80024f4:	f000 ff1a 	bl	800332c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80024f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002502:	4619      	mov	r1, r3
 8002504:	4829      	ldr	r0, [pc, #164]	; (80025ac <BSP_SDRAM_MspInit+0x20c>)
 8002506:	f000 ff11 	bl	800332c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800250a:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800250c:	2200      	movs	r2, #0
 800250e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002524:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002528:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800252c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002530:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002534:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002538:	2200      	movs	r2, #0
 800253a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800253e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002542:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800254c:	2203      	movs	r2, #3
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002550:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <BSP_SDRAM_MspInit+0x214>)
 8002560:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800256e:	4810      	ldr	r0, [pc, #64]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002570:	f000 fa34 	bl	80029dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <BSP_SDRAM_MspInit+0x210>)
 8002576:	f000 f983 	bl	8002880 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	210f      	movs	r1, #15
 800257e:	2038      	movs	r0, #56	; 0x38
 8002580:	f000 f934 	bl	80027ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002584:	2038      	movs	r0, #56	; 0x38
 8002586:	f000 f94d 	bl	8002824 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800258a:	bf00      	nop
 800258c:	3740      	adds	r7, #64	; 0x40
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	20000214 	.word	0x20000214
 80025b4:	40026410 	.word	0x40026410

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_Init+0x40>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <HAL_Init+0x40>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_Init+0x40>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f8f8 	bl	80027d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e6:	2000      	movs	r0, #0
 80025e8:	f007 f81c 	bl	8009624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025ec:	f006 fff2 	bl	80095d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_IncTick+0x20>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_IncTick+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	4a04      	ldr	r2, [pc, #16]	; (8002620 <HAL_IncTick+0x24>)
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000045 	.word	0x20000045
 8002620:	20000334 	.word	0x20000334

08002624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return uwTick;
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_GetTick+0x14>)
 800262a:	681b      	ldr	r3, [r3, #0]
}
 800262c:	4618      	mov	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	20000334 	.word	0x20000334

0800263c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002644:	f7ff ffee 	bl	8002624 <HAL_GetTick>
 8002648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d005      	beq.n	8002662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_Delay+0x40>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002662:	bf00      	nop
 8002664:	f7ff ffde 	bl	8002624 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad2      	subs	r2, r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	429a      	cmp	r2, r3
 8002672:	d3f7      	bcc.n	8002664 <HAL_Delay+0x28>
  {
  }
}
 8002674:	bf00      	nop
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000045 	.word	0x20000045

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	4909      	ldr	r1, [pc, #36]	; (800271c <__NVIC_EnableIRQ+0x38>)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	79fa      	ldrb	r2, [r7, #7]
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	490d      	ldr	r1, [pc, #52]	; (800276c <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	; 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	2201      	movs	r2, #1
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	401a      	ands	r2, r3
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ba:	2101      	movs	r1, #1
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	1e59      	subs	r1, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ff4e 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fe:	f7ff ff63 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002802:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68b9      	ldr	r1, [r7, #8]
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f7ff ffb3 	bl	8002774 <NVIC_EncodePriority>
 800280e:	4602      	mov	r2, r0
 8002810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff ff82 	bl	8002720 <__NVIC_SetPriority>
}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff ff56 	bl	80026e4 <__NVIC_EnableIRQ>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e011      	b.n	8002876 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	795b      	ldrb	r3, [r3, #5]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f004 f9e6 	bl	8006c34 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff feca 	bl	8002624 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e099      	b.n	80029d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028bc:	e00f      	b.n	80028de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028be:	f7ff feb1 	bl	8002624 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d908      	bls.n	80028de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e078      	b.n	80029d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e8      	bne.n	80028be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b38      	ldr	r3, [pc, #224]	; (80029d8 <HAL_DMA_Init+0x158>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	2b04      	cmp	r3, #4
 8002936:	d107      	bne.n	8002948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	4313      	orrs	r3, r2
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	f023 0307 	bic.w	r3, r3, #7
 800295e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	2b04      	cmp	r3, #4
 8002970:	d117      	bne.n	80029a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00e      	beq.n	80029a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8bd 	bl	8002b04 <DMA_CheckFifoParam>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2240      	movs	r2, #64	; 0x40
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800299e:	2301      	movs	r3, #1
 80029a0:	e016      	b.n	80029d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f874 	bl	8002a98 <DMA_CalcBaseAndBitshift>
 80029b0:	4603      	mov	r3, r0
 80029b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	f010803f 	.word	0xf010803f

080029dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e050      	b.n	8002a90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e048      	b.n	8002a90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	f022 0201 	bic.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f82a 	bl	8002a98 <DMA_CalcBaseAndBitshift>
 8002a44:	4603      	mov	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	223f      	movs	r2, #63	; 0x3f
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	3b10      	subs	r3, #16
 8002aa8:	4a14      	ldr	r2, [pc, #80]	; (8002afc <DMA_CalcBaseAndBitshift+0x64>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ab2:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d909      	bls.n	8002ada <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	1d1a      	adds	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad8:	e007      	b.n	8002aea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	aaaaaaab 	.word	0xaaaaaaab
 8002b00:	0800c638 	.word	0x0800c638

08002b04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d11f      	bne.n	8002b5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d855      	bhi.n	8002bd0 <DMA_CheckFifoParam+0xcc>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <DMA_CheckFifoParam+0x28>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b4f 	.word	0x08002b4f
 8002b34:	08002b3d 	.word	0x08002b3d
 8002b38:	08002bd1 	.word	0x08002bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d045      	beq.n	8002bd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e042      	b.n	8002bd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b56:	d13f      	bne.n	8002bd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e03c      	b.n	8002bd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	d121      	bne.n	8002bac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d836      	bhi.n	8002bdc <DMA_CheckFifoParam+0xd8>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <DMA_CheckFifoParam+0x70>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b8b 	.word	0x08002b8b
 8002b7c:	08002b85 	.word	0x08002b85
 8002b80:	08002b9d 	.word	0x08002b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
      break;
 8002b88:	e02f      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d024      	beq.n	8002be0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9a:	e021      	b.n	8002be0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba4:	d11e      	bne.n	8002be4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002baa:	e01b      	b.n	8002be4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d902      	bls.n	8002bb8 <DMA_CheckFifoParam+0xb4>
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	d003      	beq.n	8002bbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb6:	e018      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e015      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8002bce:	e00b      	b.n	8002be8 <DMA_CheckFifoParam+0xe4>
      break;
 8002bd0:	bf00      	nop
 8002bd2:	e00a      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bd4:	bf00      	nop
 8002bd6:	e008      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bd8:	bf00      	nop
 8002bda:	e006      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002bdc:	bf00      	nop
 8002bde:	e004      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002be0:	bf00      	nop
 8002be2:	e002      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;   
 8002be4:	bf00      	nop
 8002be6:	e000      	b.n	8002bea <DMA_CheckFifoParam+0xe6>
      break;
 8002be8:	bf00      	nop
    }
  } 
  
  return status; 
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e03b      	b.n	8002c82 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f004 f85c 	bl	8006cdc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6852      	ldr	r2, [r2, #4]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c4c:	f022 0107 	bic.w	r1, r2, #7
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6892      	ldr	r2, [r2, #8]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c66:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	68c9      	ldr	r1, [r1, #12]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af02      	add	r7, sp, #8
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	607a      	str	r2, [r7, #4]
 8002c96:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DMA2D_Start+0x1c>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e018      	b.n	8002cd8 <HAL_DMA2D_Start+0x4e>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fa97 	bl	80031f4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6812      	ldr	r2, [r2, #0]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d056      	beq.n	8002daa <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002cfc:	f7ff fc92 	bl	8002624 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d02:	e04b      	b.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d023      	beq.n	8002d5e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	f043 0202 	orr.w	r2, r3, #2
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2221      	movs	r2, #33	; 0x21
 8002d48:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0a5      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d01a      	beq.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002d66:	f7ff fc5d 	bl	8002624 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	1ad2      	subs	r2, r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d802      	bhi.n	8002d7c <HAL_DMA2D_PollForTransfer+0x9c>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e086      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ac      	beq.n	8002d04 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d061      	beq.n	8002e90 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7ff fc2a 	bl	8002624 <HAL_GetTick>
 8002dd0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002dd2:	e056      	b.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f043 0204 	orr.w	r2, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0320 	and.w	r3, r3, #32
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	f043 0202 	orr.w	r2, r3, #2
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e20:	f043 0201 	orr.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2229      	movs	r2, #41	; 0x29
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e032      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4a:	d01a      	beq.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002e4c:	f7ff fbea 	bl	8002624 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad2      	subs	r2, r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d802      	bhi.n	8002e62 <HAL_DMA2D_PollForTransfer+0x182>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10f      	bne.n	8002e82 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e66:	f043 0220 	orr.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2203      	movs	r2, #3
 8002e72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e013      	b.n	8002eaa <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0a1      	beq.n	8002dd4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2212      	movs	r2, #18
 8002e96:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d026      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d021      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eec:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	f043 0201 	orr.w	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2201      	movs	r2, #1
 8002f00:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2204      	movs	r2, #4
 8002f06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d026      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d021      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d026      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d021      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f9c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	f043 0204 	orr.w	r2, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00e      	beq.n	8003004 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	6812      	ldr	r2, [r2, #0]
 8002ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f853 	bl	80030aa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d024      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01f      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2202      	movs	r2, #2
 800302e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	d01f      	beq.n	80030a2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01a      	beq.n	80030a2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800307a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f80e 	bl	80030be <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d101      	bne.n	80030f4 <HAL_DMA2D_ConfigLayer+0x20>
 80030f0:	2302      	movs	r3, #2
 80030f2:	e077      	b.n	80031e4 <HAL_DMA2D_ConfigLayer+0x110>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	3318      	adds	r3, #24
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	041b      	lsls	r3, r3, #16
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800311e:	4b34      	ldr	r3, [pc, #208]	; (80031f0 <HAL_DMA2D_ConfigLayer+0x11c>)
 8003120:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b0a      	cmp	r3, #10
 8003128:	d003      	beq.n	8003132 <HAL_DMA2D_ConfigLayer+0x5e>
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b09      	cmp	r3, #9
 8003130:	d107      	bne.n	8003142 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e005      	b.n	800314e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	4313      	orrs	r3, r2
 800314c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11f      	bne.n	8003194 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	43d2      	mvns	r2, r2
 8003162:	4011      	ands	r1, r2
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	430a      	orrs	r2, r1
 8003168:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b0a      	cmp	r3, #10
 800317a:	d003      	beq.n	8003184 <HAL_DMA2D_ConfigLayer+0xb0>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b09      	cmp	r3, #9
 8003182:	d126      	bne.n	80031d2 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	68d2      	ldr	r2, [r2, #12]
 800318c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
 8003192:	e01e      	b.n	80031d2 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	69d1      	ldr	r1, [r2, #28]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	43d2      	mvns	r2, r2
 80031a2:	4011      	ands	r1, r2
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b0a      	cmp	r3, #10
 80031ba:	d003      	beq.n	80031c4 <HAL_DMA2D_ConfigLayer+0xf0>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d106      	bne.n	80031d2 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68d2      	ldr	r2, [r2, #12]
 80031cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031d0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	ff03000f 	.word	0xff03000f

080031f4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b08b      	sub	sp, #44	; 0x2c
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800320c:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	0410      	lsls	r0, r2, #16
 8003214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003216:	4302      	orrs	r2, r0
 8003218:	430a      	orrs	r2, r1
 800321a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800322c:	d174      	bne.n	8003318 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003234:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800323c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003244:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	431a      	orrs	r2, r3
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	431a      	orrs	r2, r3
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
 8003264:	e053      	b.n	800330e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	431a      	orrs	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	e048      	b.n	800330e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d111      	bne.n	80032a8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	0cdb      	lsrs	r3, r3, #19
 8003288:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	0a9b      	lsrs	r3, r3, #10
 800328e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	02db      	lsls	r3, r3, #11
 800329e:	431a      	orrs	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	e032      	b.n	800330e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	d117      	bne.n	80032e0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	0fdb      	lsrs	r3, r3, #31
 80032b4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	0cdb      	lsrs	r3, r3, #19
 80032ba:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	0adb      	lsrs	r3, r3, #11
 80032c0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	08db      	lsrs	r3, r3, #3
 80032c6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	029b      	lsls	r3, r3, #10
 80032d0:	431a      	orrs	r2, r3
 80032d2:	6a3b      	ldr	r3, [r7, #32]
 80032d4:	03db      	lsls	r3, r3, #15
 80032d6:	431a      	orrs	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
 80032de:	e016      	b.n	800330e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	0f1b      	lsrs	r3, r3, #28
 80032e4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	0d1b      	lsrs	r3, r3, #20
 80032ea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	0b1b      	lsrs	r3, r3, #12
 80032f0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	011a      	lsls	r2, r3, #4
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	431a      	orrs	r2, r3
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	031b      	lsls	r3, r3, #12
 8003306:	431a      	orrs	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003316:	e003      	b.n	8003320 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	60da      	str	r2, [r3, #12]
}
 8003320:	bf00      	nop
 8003322:	372c      	adds	r7, #44	; 0x2c
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800332c:	b480      	push	{r7}
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	e177      	b.n	8003638 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003348:	2201      	movs	r2, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	429a      	cmp	r2, r3
 8003362:	f040 8166 	bne.w	8003632 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x4a>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b12      	cmp	r3, #18
 8003374:	d123      	bne.n	80033be <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0203 	and.w	r2, r3, #3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d00b      	beq.n	8003412 <HAL_GPIO_Init+0xe6>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d007      	beq.n	8003412 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003406:	2b11      	cmp	r3, #17
 8003408:	d003      	beq.n	8003412 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b12      	cmp	r3, #18
 8003410:	d130      	bne.n	8003474 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68da      	ldr	r2, [r3, #12]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 0201 	and.w	r2, r3, #1
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	2203      	movs	r2, #3
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80c0 	beq.w	8003632 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4a65      	ldr	r2, [pc, #404]	; (800364c <HAL_GPIO_Init+0x320>)
 80034b8:	4b64      	ldr	r3, [pc, #400]	; (800364c <HAL_GPIO_Init+0x320>)
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c0:	6453      	str	r3, [r2, #68]	; 0x44
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <HAL_GPIO_Init+0x320>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ce:	4a60      	ldr	r2, [pc, #384]	; (8003650 <HAL_GPIO_Init+0x324>)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	089b      	lsrs	r3, r3, #2
 80034d4:	3302      	adds	r3, #2
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	220f      	movs	r2, #15
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a57      	ldr	r2, [pc, #348]	; (8003654 <HAL_GPIO_Init+0x328>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d037      	beq.n	800356a <HAL_GPIO_Init+0x23e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_GPIO_Init+0x32c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d031      	beq.n	8003566 <HAL_GPIO_Init+0x23a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a55      	ldr	r2, [pc, #340]	; (800365c <HAL_GPIO_Init+0x330>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d02b      	beq.n	8003562 <HAL_GPIO_Init+0x236>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a54      	ldr	r2, [pc, #336]	; (8003660 <HAL_GPIO_Init+0x334>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d025      	beq.n	800355e <HAL_GPIO_Init+0x232>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a53      	ldr	r2, [pc, #332]	; (8003664 <HAL_GPIO_Init+0x338>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01f      	beq.n	800355a <HAL_GPIO_Init+0x22e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_GPIO_Init+0x33c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d019      	beq.n	8003556 <HAL_GPIO_Init+0x22a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_GPIO_Init+0x340>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <HAL_GPIO_Init+0x226>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_GPIO_Init+0x344>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00d      	beq.n	800354e <HAL_GPIO_Init+0x222>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4f      	ldr	r2, [pc, #316]	; (8003674 <HAL_GPIO_Init+0x348>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <HAL_GPIO_Init+0x21e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <HAL_GPIO_Init+0x34c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_GPIO_Init+0x21a>
 8003542:	2309      	movs	r3, #9
 8003544:	e012      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003546:	230a      	movs	r3, #10
 8003548:	e010      	b.n	800356c <HAL_GPIO_Init+0x240>
 800354a:	2308      	movs	r3, #8
 800354c:	e00e      	b.n	800356c <HAL_GPIO_Init+0x240>
 800354e:	2307      	movs	r3, #7
 8003550:	e00c      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003552:	2306      	movs	r3, #6
 8003554:	e00a      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003556:	2305      	movs	r3, #5
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x240>
 800355a:	2304      	movs	r3, #4
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x240>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x240>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x240>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_GPIO_Init+0x324>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358a:	4b3c      	ldr	r3, [pc, #240]	; (800367c <HAL_GPIO_Init+0x350>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ae:	4a33      	ldr	r2, [pc, #204]	; (800367c <HAL_GPIO_Init+0x350>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b4:	4b31      	ldr	r3, [pc, #196]	; (800367c <HAL_GPIO_Init+0x350>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <HAL_GPIO_Init+0x350>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035de:	4b27      	ldr	r3, [pc, #156]	; (800367c <HAL_GPIO_Init+0x350>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003602:	4a1e      	ldr	r2, [pc, #120]	; (800367c <HAL_GPIO_Init+0x350>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_GPIO_Init+0x350>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_GPIO_Init+0x350>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f ae84 	bls.w	8003348 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	3724      	adds	r7, #36	; 0x24
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40023800 	.word	0x40023800
 8003650:	40013800 	.word	0x40013800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40021000 	.word	0x40021000
 8003668:	40021400 	.word	0x40021400
 800366c:	40021800 	.word	0x40021800
 8003670:	40021c00 	.word	0x40021c00
 8003674:	40022000 	.word	0x40022000
 8003678:	40022400 	.word	0x40022400
 800367c:	40013c00 	.word	0x40013c00

08003680 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e0da      	b.n	8003852 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800369c:	2201      	movs	r2, #1
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	f040 80ca 	bne.w	800384c <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036b8:	4a6b      	ldr	r2, [pc, #428]	; (8003868 <HAL_GPIO_DeInit+0x1e8>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	4013      	ands	r3, r2
 80036d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a63      	ldr	r2, [pc, #396]	; (800386c <HAL_GPIO_DeInit+0x1ec>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d037      	beq.n	8003752 <HAL_GPIO_DeInit+0xd2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a62      	ldr	r2, [pc, #392]	; (8003870 <HAL_GPIO_DeInit+0x1f0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d031      	beq.n	800374e <HAL_GPIO_DeInit+0xce>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_GPIO_DeInit+0x1f4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d02b      	beq.n	800374a <HAL_GPIO_DeInit+0xca>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_GPIO_DeInit+0x1f8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d025      	beq.n	8003746 <HAL_GPIO_DeInit+0xc6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a5f      	ldr	r2, [pc, #380]	; (800387c <HAL_GPIO_DeInit+0x1fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d01f      	beq.n	8003742 <HAL_GPIO_DeInit+0xc2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a5e      	ldr	r2, [pc, #376]	; (8003880 <HAL_GPIO_DeInit+0x200>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d019      	beq.n	800373e <HAL_GPIO_DeInit+0xbe>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a5d      	ldr	r2, [pc, #372]	; (8003884 <HAL_GPIO_DeInit+0x204>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_GPIO_DeInit+0xba>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a5c      	ldr	r2, [pc, #368]	; (8003888 <HAL_GPIO_DeInit+0x208>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00d      	beq.n	8003736 <HAL_GPIO_DeInit+0xb6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a5b      	ldr	r2, [pc, #364]	; (800388c <HAL_GPIO_DeInit+0x20c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <HAL_GPIO_DeInit+0xb2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a5a      	ldr	r2, [pc, #360]	; (8003890 <HAL_GPIO_DeInit+0x210>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d101      	bne.n	800372e <HAL_GPIO_DeInit+0xae>
 800372a:	2309      	movs	r3, #9
 800372c:	e012      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 800372e:	230a      	movs	r3, #10
 8003730:	e010      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 8003732:	2308      	movs	r3, #8
 8003734:	e00e      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 8003736:	2307      	movs	r3, #7
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 800373a:	2306      	movs	r3, #6
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_DeInit+0xd4>
 8003752:	2300      	movs	r3, #0
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	fa03 f202 	lsl.w	r2, r3, r2
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	429a      	cmp	r2, r3
 8003764:	d132      	bne.n	80037cc <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	220f      	movs	r2, #15
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003776:	483c      	ldr	r0, [pc, #240]	; (8003868 <HAL_GPIO_DeInit+0x1e8>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	493a      	ldr	r1, [pc, #232]	; (8003868 <HAL_GPIO_DeInit+0x1e8>)
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	0892      	lsrs	r2, r2, #2
 8003782:	3202      	adds	r2, #2
 8003784:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	43d2      	mvns	r2, r2
 800378c:	400a      	ands	r2, r1
 800378e:	3302      	adds	r3, #2
 8003790:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003794:	493f      	ldr	r1, [pc, #252]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	43db      	mvns	r3, r3
 800379e:	4013      	ands	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80037a2:	493c      	ldr	r1, [pc, #240]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4013      	ands	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037b0:	4938      	ldr	r1, [pc, #224]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037b2:	4b38      	ldr	r3, [pc, #224]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	43db      	mvns	r3, r3
 80037ba:	4013      	ands	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037be:	4935      	ldr	r1, [pc, #212]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037c0:	4b34      	ldr	r3, [pc, #208]	; (8003894 <HAL_GPIO_DeInit+0x214>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	4013      	ands	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2103      	movs	r1, #3
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	401a      	ands	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	08da      	lsrs	r2, r3, #3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	08d9      	lsrs	r1, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3108      	adds	r1, #8
 80037ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	200f      	movs	r0, #15
 80037fc:	fa00 f303 	lsl.w	r3, r0, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	4019      	ands	r1, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	2103      	movs	r1, #3
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	401a      	ands	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	2101      	movs	r1, #1
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	401a      	ands	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2103      	movs	r1, #3
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3301      	adds	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	f67f af21 	bls.w	800369c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40013800 	.word	0x40013800
 800386c:	40020000 	.word	0x40020000
 8003870:	40020400 	.word	0x40020400
 8003874:	40020800 	.word	0x40020800
 8003878:	40020c00 	.word	0x40020c00
 800387c:	40021000 	.word	0x40021000
 8003880:	40021400 	.word	0x40021400
 8003884:	40021800 	.word	0x40021800
 8003888:	40021c00 	.word	0x40021c00
 800388c:	40022000 	.word	0x40022000
 8003890:	40022400 	.word	0x40022400
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	887b      	ldrh	r3, [r7, #2]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e001      	b.n	80038ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038b6:	2300      	movs	r3, #0
 80038b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	807b      	strh	r3, [r7, #2]
 80038d4:	4613      	mov	r3, r2
 80038d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e4:	e003      	b.n	80038ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038e6:	887b      	ldrh	r3, [r7, #2]
 80038e8:	041a      	lsls	r2, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	619a      	str	r2, [r3, #24]
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
	...

080038fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e10f      	b.n	8003b2e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f003 fc44 	bl	80071b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	6812      	ldr	r2, [r2, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003940:	f001 f974 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8003944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a7b      	ldr	r2, [pc, #492]	; (8003b38 <HAL_I2C_Init+0x23c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d807      	bhi.n	8003960 <HAL_I2C_Init+0x64>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a7a      	ldr	r2, [pc, #488]	; (8003b3c <HAL_I2C_Init+0x240>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e006      	b.n	800396e <HAL_I2C_Init+0x72>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4a77      	ldr	r2, [pc, #476]	; (8003b40 <HAL_I2C_Init+0x244>)
 8003964:	4293      	cmp	r3, r2
 8003966:	bf94      	ite	ls
 8003968:	2301      	movls	r3, #1
 800396a:	2300      	movhi	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0db      	b.n	8003b2e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4a72      	ldr	r2, [pc, #456]	; (8003b44 <HAL_I2C_Init+0x248>)
 800397a:	fba2 2303 	umull	r2, r3, r2, r3
 800397e:	0c9b      	lsrs	r3, r3, #18
 8003980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6852      	ldr	r2, [r2, #4]
 800398c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4863      	ldr	r0, [pc, #396]	; (8003b38 <HAL_I2C_Init+0x23c>)
 80039aa:	4283      	cmp	r3, r0
 80039ac:	d802      	bhi.n	80039b4 <HAL_I2C_Init+0xb8>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3301      	adds	r3, #1
 80039b2:	e009      	b.n	80039c8 <HAL_I2C_Init+0xcc>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	4862      	ldr	r0, [pc, #392]	; (8003b48 <HAL_I2C_Init+0x24c>)
 80039c0:	fba0 0303 	umull	r0, r3, r0, r3
 80039c4:	099b      	lsrs	r3, r3, #6
 80039c6:	3301      	adds	r3, #1
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4955      	ldr	r1, [pc, #340]	; (8003b38 <HAL_I2C_Init+0x23c>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d80d      	bhi.n	8003a04 <HAL_I2C_Init+0x108>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	1e59      	subs	r1, r3, #1
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	bf38      	it	cc
 8003a00:	2304      	movcc	r3, #4
 8003a02:	e04f      	b.n	8003aa4 <HAL_I2C_Init+0x1a8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d111      	bne.n	8003a30 <HAL_I2C_Init+0x134>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e5c      	subs	r4, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	e012      	b.n	8003a56 <HAL_I2C_Init+0x15a>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1e5c      	subs	r4, r3, #1
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	0099      	lsls	r1, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a46:	3301      	adds	r3, #1
 8003a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf0c      	ite	eq
 8003a50:	2301      	moveq	r3, #1
 8003a52:	2300      	movne	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Init+0x162>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e022      	b.n	8003aa4 <HAL_I2C_Init+0x1a8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_I2C_Init+0x188>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1e5c      	subs	r4, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	460b      	mov	r3, r1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	440b      	add	r3, r1
 8003a74:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	e00f      	b.n	8003aa4 <HAL_I2C_Init+0x1a8>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1e5c      	subs	r4, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	0099      	lsls	r1, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	69d0      	ldr	r0, [r2, #28]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6a12      	ldr	r2, [r2, #32]
 8003abe:	4302      	orrs	r2, r0
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	6908      	ldr	r0, [r1, #16]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	68c9      	ldr	r1, [r1, #12]
 8003ade:	4301      	orrs	r1, r0
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	68d2      	ldr	r2, [r2, #12]
 8003aee:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6950      	ldr	r0, [r2, #20]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	4302      	orrs	r2, r0
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}
 8003b36:	bf00      	nop
 8003b38:	000186a0 	.word	0x000186a0
 8003b3c:	001e847f 	.word	0x001e847f
 8003b40:	003d08ff 	.word	0x003d08ff
 8003b44:	431bde83 	.word	0x431bde83
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d129      	bne.n	8003bb6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b84:	f022 0210 	bic.w	r2, r2, #16
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	f042 0201 	orr.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	d12a      	bne.n	8003c34 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2224      	movs	r2, #36	; 0x24
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	f022 0201 	bic.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bfe:	89fb      	ldrh	r3, [r7, #14]
 8003c00:	f023 030f 	bic.w	r3, r3, #15
 8003c04:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	89fb      	ldrh	r3, [r7, #14]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	89fa      	ldrh	r2, [r7, #14]
 8003c16:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c30:	2300      	movs	r3, #0
 8003c32:	e000      	b.n	8003c36 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0bf      	b.n	8003dd6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f003 fb8a 	bl	8007384 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	6992      	ldr	r2, [r2, #24]
 8003c82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	6991      	ldr	r1, [r2, #24]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6850      	ldr	r0, [r2, #4]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6892      	ldr	r2, [r2, #8]
 8003c9a:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ca0:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6912      	ldr	r2, [r2, #16]
 8003ca6:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6899      	ldr	r1, [r3, #8]
 8003cb6:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_LTDC_Init+0x19c>)
 8003cb8:	400b      	ands	r3, r1
 8003cba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	041b      	lsls	r3, r3, #16
 8003cc2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	6891      	ldr	r1, [r2, #8]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6990      	ldr	r0, [r2, #24]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4302      	orrs	r2, r0
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68d9      	ldr	r1, [r3, #12]
 8003ce4:	4b3e      	ldr	r3, [pc, #248]	; (8003de0 <HAL_LTDC_Init+0x19c>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	041b      	lsls	r3, r3, #16
 8003cf0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6812      	ldr	r2, [r2, #0]
 8003cfa:	68d1      	ldr	r1, [r2, #12]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6a10      	ldr	r0, [r2, #32]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4302      	orrs	r2, r0
 8003d04:	430a      	orrs	r2, r1
 8003d06:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6919      	ldr	r1, [r3, #16]
 8003d12:	4b33      	ldr	r3, [pc, #204]	; (8003de0 <HAL_LTDC_Init+0x19c>)
 8003d14:	400b      	ands	r3, r1
 8003d16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	6911      	ldr	r1, [r2, #16]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	4302      	orrs	r2, r0
 8003d32:	430a      	orrs	r2, r1
 8003d34:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6959      	ldr	r1, [r3, #20]
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <HAL_LTDC_Init+0x19c>)
 8003d42:	400b      	ands	r3, r1
 8003d44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	041b      	lsls	r3, r3, #16
 8003d4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6951      	ldr	r1, [r2, #20]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4302      	orrs	r2, r0
 8003d60:	430a      	orrs	r2, r1
 8003d62:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d74:	041b      	lsls	r3, r3, #16
 8003d76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6812      	ldr	r2, [r2, #0]
 8003d90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d92:	68b8      	ldr	r0, [r7, #8]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4302      	orrs	r2, r0
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003d9e:	4302      	orrs	r2, r0
 8003da0:	430a      	orrs	r2, r1
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dae:	f042 0206 	orr.w	r2, r2, #6
 8003db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	6992      	ldr	r2, [r2, #24]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	f000f800 	.word	0xf000f800

08003de4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d023      	beq.n	8003e4e <HAL_LTDC_IRQHandler+0x6a>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01e      	beq.n	8003e4e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1a:	f022 0204 	bic.w	r2, r2, #4
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2204      	movs	r2, #4
 8003e26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e2e:	f043 0201 	orr.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f86f 	bl	8003f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d023      	beq.n	8003ea0 <HAL_LTDC_IRQHandler+0xbc>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d01e      	beq.n	8003ea0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e6c:	f022 0202 	bic.w	r2, r2, #2
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2202      	movs	r2, #2
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e80:	f043 0202 	orr.w	r2, r3, #2
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f846 	bl	8003f2c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01b      	beq.n	8003ee2 <HAL_LTDC_IRQHandler+0xfe>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d016      	beq.n	8003ee2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ebe:	f022 0201 	bic.w	r2, r2, #1
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f82f 	bl	8003f40 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d01b      	beq.n	8003f24 <HAL_LTDC_IRQHandler+0x140>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f00:	f022 0208 	bic.w	r2, r2, #8
 8003f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f818 	bl	8003f54 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f68:	b5b0      	push	{r4, r5, r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_LTDC_ConfigLayer+0x1a>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e02c      	b.n	8003fdc <HAL_LTDC_ConfigLayer+0x74>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2134      	movs	r1, #52	; 0x34
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	461d      	mov	r5, r3
 8003fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f83b 	bl	8004038 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdb0      	pop	{r4, r5, r7, pc}

08003fe4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_LTDC_EnableDither+0x16>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e016      	b.n	8004028 <HAL_LTDC_EnableDither+0x44>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2202      	movs	r2, #2
 8004006:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800400a:	4a0a      	ldr	r2, [pc, #40]	; (8004034 <HAL_LTDC_EnableDither+0x50>)
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <HAL_LTDC_EnableDither+0x50>)
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40016800 	.word	0x40016800

08004038 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	0c1b      	lsrs	r3, r3, #16
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	4413      	add	r3, r2
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	01db      	lsls	r3, r3, #7
 8004064:	4413      	add	r3, r2
 8004066:	3384      	adds	r3, #132	; 0x84
 8004068:	461a      	mov	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4619      	mov	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	440b      	add	r3, r1
 8004076:	3384      	adds	r3, #132	; 0x84
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800407e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	01db      	lsls	r3, r3, #7
 800408a:	4413      	add	r3, r2
 800408c:	3384      	adds	r3, #132	; 0x84
 800408e:	4619      	mov	r1, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	4413      	add	r3, r2
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040b8:	4413      	add	r3, r2
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	461a      	mov	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	01db      	lsls	r3, r3, #7
 80040d8:	440b      	add	r3, r1
 80040da:	3384      	adds	r3, #132	; 0x84
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	461a      	mov	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	01db      	lsls	r3, r3, #7
 80040ee:	4413      	add	r3, r2
 80040f0:	3384      	adds	r3, #132	; 0x84
 80040f2:	4619      	mov	r1, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004102:	4413      	add	r3, r2
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	4313      	orrs	r3, r2
 800410a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	461a      	mov	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	01db      	lsls	r3, r3, #7
 8004116:	4413      	add	r3, r2
 8004118:	3384      	adds	r3, #132	; 0x84
 800411a:	461a      	mov	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	440b      	add	r3, r1
 8004128:	3384      	adds	r3, #132	; 0x84
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	f023 0307 	bic.w	r3, r3, #7
 8004130:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	01db      	lsls	r3, r3, #7
 800413c:	4413      	add	r3, r2
 800413e:	3384      	adds	r3, #132	; 0x84
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	061b      	lsls	r3, r3, #24
 8004162:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	01db      	lsls	r3, r3, #7
 800416e:	4413      	add	r3, r2
 8004170:	3384      	adds	r3, #132	; 0x84
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	01db      	lsls	r3, r3, #7
 800417e:	4413      	add	r3, r2
 8004180:	3384      	adds	r3, #132	; 0x84
 8004182:	461a      	mov	r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	01db      	lsls	r3, r3, #7
 8004192:	4413      	add	r3, r2
 8004194:	3384      	adds	r3, #132	; 0x84
 8004196:	4619      	mov	r1, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800419e:	461a      	mov	r2, r3
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	4413      	add	r3, r2
 80041ba:	3384      	adds	r3, #132	; 0x84
 80041bc:	461a      	mov	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4619      	mov	r1, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	440b      	add	r3, r1
 80041ca:	3384      	adds	r3, #132	; 0x84
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	01db      	lsls	r3, r3, #7
 80041de:	4413      	add	r3, r2
 80041e0:	3384      	adds	r3, #132	; 0x84
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	4413      	add	r3, r2
 80041f6:	3384      	adds	r3, #132	; 0x84
 80041f8:	461a      	mov	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	01db      	lsls	r3, r3, #7
 8004204:	440b      	add	r3, r1
 8004206:	3384      	adds	r3, #132	; 0x84
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800420e:	f023 0307 	bic.w	r3, r3, #7
 8004212:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	01db      	lsls	r3, r3, #7
 800421e:	4413      	add	r3, r2
 8004220:	3384      	adds	r3, #132	; 0x84
 8004222:	4619      	mov	r1, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	4313      	orrs	r3, r2
 800422e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	; 0x84
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	; 0x84
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	01db      	lsls	r3, r3, #7
 800425e:	4413      	add	r3, r2
 8004260:	3384      	adds	r3, #132	; 0x84
 8004262:	461a      	mov	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8004272:	2304      	movs	r3, #4
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e01b      	b.n	80042b0 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d102      	bne.n	8004286 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004280:	2303      	movs	r3, #3
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e014      	b.n	80042b0 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d00b      	beq.n	80042a6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004292:	2b02      	cmp	r3, #2
 8004294:	d007      	beq.n	80042a6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800429a:	2b03      	cmp	r3, #3
 800429c:	d003      	beq.n	80042a6 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80042a2:	2b07      	cmp	r3, #7
 80042a4:	d102      	bne.n	80042ac <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 80042a6:	2302      	movs	r3, #2
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e001      	b.n	80042b0 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 80042ac:	2301      	movs	r3, #1
 80042ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	01db      	lsls	r3, r3, #7
 80042ba:	4413      	add	r3, r2
 80042bc:	3384      	adds	r3, #132	; 0x84
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4619      	mov	r1, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	01db      	lsls	r3, r3, #7
 80042ca:	440b      	add	r3, r1
 80042cc:	3384      	adds	r3, #132	; 0x84
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80042d4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	3384      	adds	r3, #132	; 0x84
 80042e4:	4618      	mov	r0, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	041a      	lsls	r2, r3, #16
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	1acb      	subs	r3, r1, r3
 80042fc:	69f9      	ldr	r1, [r7, #28]
 80042fe:	fb01 f303 	mul.w	r3, r1, r3
 8004302:	3303      	adds	r3, #3
 8004304:	4313      	orrs	r3, r2
 8004306:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	01db      	lsls	r3, r3, #7
 8004312:	4413      	add	r3, r2
 8004314:	3384      	adds	r3, #132	; 0x84
 8004316:	461a      	mov	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	01db      	lsls	r3, r3, #7
 8004322:	440b      	add	r3, r1
 8004324:	3384      	adds	r3, #132	; 0x84
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800432c:	f023 0307 	bic.w	r3, r3, #7
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	4413      	add	r3, r2
 800433e:	3384      	adds	r3, #132	; 0x84
 8004340:	461a      	mov	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	01db      	lsls	r3, r3, #7
 8004352:	4413      	add	r3, r2
 8004354:	3384      	adds	r3, #132	; 0x84
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	01db      	lsls	r3, r3, #7
 8004362:	440b      	add	r3, r1
 8004364:	3384      	adds	r3, #132	; 0x84
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6013      	str	r3, [r2, #0]
}
 800436e:	bf00      	nop
 8004370:	3724      	adds	r7, #36	; 0x24
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	2300      	movs	r3, #0
 8004388:	603b      	str	r3, [r7, #0]
 800438a:	4a20      	ldr	r2, [pc, #128]	; (800440c <HAL_PWREx_EnableOverDrive+0x90>)
 800438c:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_PWREx_EnableOverDrive+0x90>)
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <HAL_PWREx_EnableOverDrive+0x90>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_PWREx_EnableOverDrive+0x94>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043a8:	f7fe f93c 	bl	8002624 <HAL_GetTick>
 80043ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ae:	e009      	b.n	80043c4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043b0:	f7fe f938 	bl	8002624 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043be:	d901      	bls.n	80043c4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e01f      	b.n	8004404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043c4:	4b13      	ldr	r3, [pc, #76]	; (8004414 <HAL_PWREx_EnableOverDrive+0x98>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d0:	d1ee      	bne.n	80043b0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d8:	f7fe f924 	bl	8002624 <HAL_GetTick>
 80043dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043de:	e009      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043e0:	f7fe f920 	bl	8002624 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ee:	d901      	bls.n	80043f4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e007      	b.n	8004404 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <HAL_PWREx_EnableOverDrive+0x98>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004400:	d1ee      	bne.n	80043e0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3708      	adds	r7, #8
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	420e0040 	.word	0x420e0040
 8004414:	40007000 	.word	0x40007000
 8004418:	420e0044 	.word	0x420e0044

0800441c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e22d      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d075      	beq.n	8004526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443a:	4ba3      	ldr	r3, [pc, #652]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4ba0      	ldr	r3, [pc, #640]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	2b08      	cmp	r3, #8
 8004450:	d112      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004452:	4b9d      	ldr	r3, [pc, #628]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800445e:	d10b      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b99      	ldr	r3, [pc, #612]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0x108>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d157      	bne.n	8004524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e208      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x74>
 8004482:	4a91      	ldr	r2, [pc, #580]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	4b90      	ldr	r3, [pc, #576]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x98>
 800449a:	4a8b      	ldr	r2, [pc, #556]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	4b8a      	ldr	r3, [pc, #552]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4a88      	ldr	r2, [pc, #544]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	4b87      	ldr	r3, [pc, #540]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 80044b4:	4a84      	ldr	r2, [pc, #528]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044b6:	4b84      	ldr	r3, [pc, #528]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044c2:	4b81      	ldr	r3, [pc, #516]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe f8a6 	bl	8002624 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fe f8a2 	bl	8002624 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e1cd      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fe f892 	bl	8002624 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe f88e 	bl	8002624 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1b9      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b6c      	ldr	r3, [pc, #432]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0xe8>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d063      	beq.n	80045fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004532:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b62      	ldr	r3, [pc, #392]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454a:	4b5f      	ldr	r3, [pc, #380]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b5c      	ldr	r3, [pc, #368]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e18d      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4956      	ldr	r1, [pc, #344]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004570:	4b55      	ldr	r3, [pc, #340]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e03a      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b4f      	ldr	r3, [pc, #316]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fe f847 	bl	8002624 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fe f843 	bl	8002624 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e16e      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4943      	ldr	r1, [pc, #268]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <HAL_RCC_OscConfig+0x2b0>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe f826 	bl	8002624 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fe f822 	bl	8002624 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e14d      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d030      	beq.n	8004668 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b30      	ldr	r3, [pc, #192]	; (80046d0 <HAL_RCC_OscConfig+0x2b4>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fe f806 	bl	8002624 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461c:	f7fe f802 	bl	8002624 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e12d      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x200>
 800463a:	e015      	b.n	8004668 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <HAL_RCC_OscConfig+0x2b4>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fd ffef 	bl	8002624 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464a:	f7fd ffeb 	bl	8002624 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e116      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a0 	beq.w	80047b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10f      	bne.n	80046a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4a0f      	ldr	r2, [pc, #60]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800468c:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004694:	6413      	str	r3, [r2, #64]	; 0x40
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCC_OscConfig+0x2b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d121      	bne.n	80046f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046b2:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <HAL_RCC_OscConfig+0x2b8>)
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <HAL_RCC_OscConfig+0x2b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046be:	f7fd ffb1 	bl	8002624 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c4:	e011      	b.n	80046ea <HAL_RCC_OscConfig+0x2ce>
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	42470000 	.word	0x42470000
 80046d0:	42470e80 	.word	0x42470e80
 80046d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d8:	f7fd ffa4 	bl	8002624 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e0cf      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ea:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_OscConfig+0x478>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x2f0>
 80046fe:	4a66      	ldr	r2, [pc, #408]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f043 0301 	orr.w	r3, r3, #1
 8004708:	6713      	str	r3, [r2, #112]	; 0x70
 800470a:	e01c      	b.n	8004746 <HAL_RCC_OscConfig+0x32a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d10c      	bne.n	800472e <HAL_RCC_OscConfig+0x312>
 8004714:	4a60      	ldr	r2, [pc, #384]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004716:	4b60      	ldr	r3, [pc, #384]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	f043 0304 	orr.w	r3, r3, #4
 800471e:	6713      	str	r3, [r2, #112]	; 0x70
 8004720:	4a5d      	ldr	r2, [pc, #372]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004722:	4b5d      	ldr	r3, [pc, #372]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	f043 0301 	orr.w	r3, r3, #1
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
 800472c:	e00b      	b.n	8004746 <HAL_RCC_OscConfig+0x32a>
 800472e:	4a5a      	ldr	r2, [pc, #360]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	4a57      	ldr	r2, [pc, #348]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 800473c:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	f023 0304 	bic.w	r3, r3, #4
 8004744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d015      	beq.n	800477a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd ff69 	bl	8002624 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd ff65 	bl	8002624 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e08e      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCC_OscConfig+0x33a>
 8004778:	e014      	b.n	80047a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd ff53 	bl	8002624 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd ff4f 	bl	8002624 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e078      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004798:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ee      	bne.n	8004782 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047aa:	4a3b      	ldr	r2, [pc, #236]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 80047ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d064      	beq.n	8004888 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047be:	4b36      	ldr	r3, [pc, #216]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d05c      	beq.n	8004884 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d141      	bne.n	8004856 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d2:	4b32      	ldr	r3, [pc, #200]	; (800489c <HAL_RCC_OscConfig+0x480>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd ff24 	bl	8002624 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e0:	f7fd ff20 	bl	8002624 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e04b      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	4b29      	ldr	r3, [pc, #164]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fe:	4926      	ldr	r1, [pc, #152]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69da      	ldr	r2, [r3, #28]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	019b      	lsls	r3, r3, #6
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	3b01      	subs	r3, #1
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004828:	4b1c      	ldr	r3, [pc, #112]	; (800489c <HAL_RCC_OscConfig+0x480>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482e:	f7fd fef9 	bl	8002624 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004836:	f7fd fef5 	bl	8002624 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e020      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x41a>
 8004854:	e018      	b.n	8004888 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004856:	4b11      	ldr	r3, [pc, #68]	; (800489c <HAL_RCC_OscConfig+0x480>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd fee2 	bl	8002624 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004864:	f7fd fede 	bl	8002624 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e009      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <HAL_RCC_OscConfig+0x47c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x448>
 8004882:	e001      	b.n	8004888 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40007000 	.word	0x40007000
 8004898:	40023800 	.word	0x40023800
 800489c:	42470060 	.word	0x42470060

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0ca      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b67      	ldr	r3, [pc, #412]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d20c      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b64      	ldr	r3, [pc, #400]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b62      	ldr	r3, [pc, #392]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b6      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4a58      	ldr	r2, [pc, #352]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048f6:	4b58      	ldr	r3, [pc, #352]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 800490e:	4b52      	ldr	r3, [pc, #328]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	494f      	ldr	r1, [pc, #316]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	4b4f      	ldr	r3, [pc, #316]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d044      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b46      	ldr	r3, [pc, #280]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07d      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06d      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e065      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4936      	ldr	r1, [pc, #216]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 0203 	bic.w	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fd fe48 	bl	8002624 <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fd fe44 	bl	8002624 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04d      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2a      	ldr	r3, [pc, #168]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d90c      	bls.n	80049e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b21      	ldr	r3, [pc, #132]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b1f      	ldr	r3, [pc, #124]	; (8004a54 <HAL_RCC_ClockConfig+0x1b4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e030      	b.n	8004a4a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4918      	ldr	r1, [pc, #96]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4911      	ldr	r1, [pc, #68]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f81d 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a2a:	4601      	mov	r1, r0
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a38:	5cd3      	ldrb	r3, [r2, r3]
 8004a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a3e:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a42:	2000      	movs	r0, #0
 8004a44:	f004 fdee 	bl	8009624 <HAL_InitTick>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40023c00 	.word	0x40023c00
 8004a58:	40023800 	.word	0x40023800
 8004a5c:	080a42b8 	.word	0x080a42b8
 8004a60:	20000048 	.word	0x20000048

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	b08f      	sub	sp, #60	; 0x3c
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a70:	2300      	movs	r3, #0
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
 8004a74:	2300      	movs	r3, #0
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b62      	ldr	r3, [pc, #392]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d007      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 80b2 	bne.w	8004bf6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a92:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a94:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004a96:	e0b1      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a98:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a9c:	e0ae      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a9e:	4b5a      	ldr	r3, [pc, #360]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d04e      	beq.n	8004b52 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab4:	4b54      	ldr	r3, [pc, #336]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	f04f 0400 	mov.w	r4, #0
 8004abe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	ea01 0103 	and.w	r1, r1, r3
 8004aca:	ea02 0204 	and.w	r2, r2, r4
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4614      	mov	r4, r2
 8004ad2:	0160      	lsls	r0, r4, #5
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ad6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004adc:	6278      	str	r0, [r7, #36]	; 0x24
 8004ade:	015b      	lsls	r3, r3, #5
 8004ae0:	623b      	str	r3, [r7, #32]
 8004ae2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ae6:	1a5b      	subs	r3, r3, r1
 8004ae8:	eb64 0402 	sbc.w	r4, r4, r2
 8004aec:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8004af0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8004af4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8004af8:	ebb8 0803 	subs.w	r8, r8, r3
 8004afc:	eb69 0904 	sbc.w	r9, r9, r4
 8004b00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b04:	61fb      	str	r3, [r7, #28]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004b12:	61bb      	str	r3, [r7, #24]
 8004b14:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004b18:	eb18 0801 	adds.w	r8, r8, r1
 8004b1c:	eb49 0902 	adc.w	r9, r9, r2
 8004b20:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004b38:	4640      	mov	r0, r8
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	f04f 0400 	mov.w	r4, #0
 8004b42:	461a      	mov	r2, r3
 8004b44:	4623      	mov	r3, r4
 8004b46:	f7fb ff95 	bl	8000a74 <__aeabi_uldivmod>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	e043      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b52:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	099b      	lsrs	r3, r3, #6
 8004b58:	f04f 0400 	mov.w	r4, #0
 8004b5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	ea01 0103 	and.w	r1, r1, r3
 8004b68:	ea02 0204 	and.w	r2, r2, r4
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4614      	mov	r4, r2
 8004b70:	0160      	lsls	r0, r4, #5
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	015b      	lsls	r3, r3, #5
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b84:	1a5b      	subs	r3, r3, r1
 8004b86:	eb64 0402 	sbc.w	r4, r4, r2
 8004b8a:	01a6      	lsls	r6, r4, #6
 8004b8c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004b90:	019d      	lsls	r5, r3, #6
 8004b92:	1aed      	subs	r5, r5, r3
 8004b94:	eb66 0604 	sbc.w	r6, r6, r4
 8004b98:	00f3      	lsls	r3, r6, #3
 8004b9a:	607b      	str	r3, [r7, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004ba2:	607b      	str	r3, [r7, #4]
 8004ba4:	00eb      	lsls	r3, r5, #3
 8004ba6:	603b      	str	r3, [r7, #0]
 8004ba8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004bac:	186d      	adds	r5, r5, r1
 8004bae:	eb46 0602 	adc.w	r6, r6, r2
 8004bb2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004bb6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004bba:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8004bbe:	4655      	mov	r5, sl
 8004bc0:	465e      	mov	r6, fp
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	4631      	mov	r1, r6
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	f04f 0400 	mov.w	r4, #0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	f7fb ff50 	bl	8000a74 <__aeabi_uldivmod>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bda:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	3301      	adds	r3, #1
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8004bea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bf4:	e002      	b.n	8004bfc <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf6:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	373c      	adds	r7, #60	; 0x3c
 8004c02:	46bd      	mov	sp, r7
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	00f42400 	.word	0x00f42400
 8004c10:	007a1200 	.word	0x007a1200

08004c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c18:	4b03      	ldr	r3, [pc, #12]	; (8004c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000048 	.word	0x20000048

08004c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c30:	f7ff fff0 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c34:	4601      	mov	r1, r0
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	0a9b      	lsrs	r3, r3, #10
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	4a03      	ldr	r2, [pc, #12]	; (8004c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c42:	5cd3      	ldrb	r3, [r2, r3]
 8004c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40023800 	.word	0x40023800
 8004c50:	080a42c8 	.word	0x080a42c8

08004c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c58:	f7ff ffdc 	bl	8004c14 <HAL_RCC_GetHCLKFreq>
 8004c5c:	4601      	mov	r1, r0
 8004c5e:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	0b5b      	lsrs	r3, r3, #13
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	4a03      	ldr	r2, [pc, #12]	; (8004c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	080a42c8 	.word	0x080a42c8

08004c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	220f      	movs	r2, #15
 8004c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c8c:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f003 0203 	and.w	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004cb0:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	08db      	lsrs	r3, r3, #3
 8004cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cbe:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <HAL_RCC_GetClockConfig+0x60>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	601a      	str	r2, [r3, #0]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40023c00 	.word	0x40023c00

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d061      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d08:	4ba3      	ldr	r3, [pc, #652]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0e:	f7fd fc89 	bl	8002624 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d16:	f7fd fc85 	bl	8002624 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e177      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d28:	4b9c      	ldr	r3, [pc, #624]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d40:	4996      	ldr	r1, [pc, #600]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	019a      	lsls	r2, r3, #6
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	071b      	lsls	r3, r3, #28
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d01f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d60:	4b8e      	ldr	r3, [pc, #568]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d6e:	498b      	ldr	r1, [pc, #556]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	019a      	lsls	r2, r3, #6
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	061b      	lsls	r3, r3, #24
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	071b      	lsls	r3, r3, #28
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d88:	4984      	ldr	r1, [pc, #528]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d8a:	4b84      	ldr	r3, [pc, #528]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d90:	f023 021f 	bic.w	r2, r3, #31
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004da0:	4b7d      	ldr	r3, [pc, #500]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004da6:	f7fd fc3d 	bl	8002624 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dae:	f7fd fc39 	bl	8002624 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e12b      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dc0:	4b76      	ldr	r3, [pc, #472]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d105      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d079      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004de4:	4b6e      	ldr	r3, [pc, #440]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fd fc1b 	bl	8002624 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004df2:	f7fd fc17 	bl	8002624 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e109      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e04:	4b65      	ldr	r3, [pc, #404]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e10:	d0ef      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e1e:	4b5f      	ldr	r3, [pc, #380]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e24:	0f1b      	lsrs	r3, r3, #28
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e2c:	495b      	ldr	r1, [pc, #364]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	019a      	lsls	r2, r3, #6
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	071b      	lsls	r3, r3, #28
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e46:	4955      	ldr	r1, [pc, #340]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e48:	4b54      	ldr	r3, [pc, #336]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0308 	and.w	r3, r3, #8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e6c:	4b4b      	ldr	r3, [pc, #300]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	0e1b      	lsrs	r3, r3, #24
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e7a:	4948      	ldr	r1, [pc, #288]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	019a      	lsls	r2, r3, #6
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	061b      	lsls	r3, r3, #24
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e94:	4941      	ldr	r1, [pc, #260]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e96:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eb0:	f7fd fbb8 	bl	8002624 <HAL_GetTick>
 8004eb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004eb8:	f7fd fbb4 	bl	8002624 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e0a6      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eca:	4b34      	ldr	r3, [pc, #208]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed6:	d1ef      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 808d 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004eec:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ef6:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f02:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f04:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f0e:	f7fd fb89 	bl	8002624 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fd fb85 	bl	8002624 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e077      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d039      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f48:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d032      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f5c:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f68:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d11e      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f7a:	f7fd fb53 	bl	8002624 <HAL_GetTick>
 8004f7e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f80:	e014      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f82:	f7fd fb4f 	bl	8002624 <HAL_GetTick>
 8004f86:	4602      	mov	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d90b      	bls.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e03f      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004f98:	42470068 	.word	0x42470068
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470070 	.word	0x42470070
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b1c      	ldr	r3, [pc, #112]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0e4      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc4:	d10d      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004fc6:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fc8:	4b15      	ldr	r3, [pc, #84]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]
 8004fe0:	e005      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004fe2:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fe4:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	490c      	ldr	r1, [pc, #48]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ff2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800500c:	4a05      	ldr	r2, [pc, #20]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005014:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40023800 	.word	0x40023800
 8005024:	424711e0 	.word	0x424711e0

08005028 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e025      	b.n	8005088 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 ff3f 	bl	8006ed4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f001 fc8d 	bl	8006988 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	f001 fcf8 	bl	8006a6e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d101      	bne.n	80050ac <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80050a8:	2302      	movs	r3, #2
 80050aa:	e018      	b.n	80050de <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 fd55 	bl	8006b6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d104      	bne.n	80050d4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2205      	movs	r2, #5
 80050ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80050d2:	e003      	b.n	80050dc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d101      	bne.n	8005100 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
 80050fe:	e00e      	b.n	800511e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f001 fd68 	bl	8006be4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e055      	b.n	80051e4 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f004 f9d8 	bl	8009508 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6851      	ldr	r1, [r2, #4]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6912      	ldr	r2, [r2, #16]
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6952      	ldr	r2, [r2, #20]
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6992      	ldr	r2, [r2, #24]
 8005194:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005198:	4311      	orrs	r1, r2
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	69d2      	ldr	r2, [r2, #28]
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6a12      	ldr	r2, [r2, #32]
 80051a4:	4311      	orrs	r1, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6992      	ldr	r2, [r2, #24]
 80051b6:	0c12      	lsrs	r2, r2, #16
 80051b8:	f002 0104 	and.w	r1, r2, #4
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	69d2      	ldr	r2, [r2, #28]
 80051ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e01a      	b.n	8005234 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	6812      	ldr	r2, [r2, #0]
 8005210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005214:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f004 f9be 	bl	8009598 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800524c:	2300      	movs	r3, #0
 800524e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_SPI_Transmit+0x22>
 800525a:	2302      	movs	r3, #2
 800525c:	e11c      	b.n	8005498 <HAL_SPI_Transmit+0x25c>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005266:	f7fd f9dd 	bl	8002624 <HAL_GetTick>
 800526a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d002      	beq.n	8005282 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005280:	e101      	b.n	8005486 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_SPI_Transmit+0x52>
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005292:	e0f8      	b.n	8005486 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2203      	movs	r2, #3
 8005298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	88fa      	ldrh	r2, [r7, #6]
 80052ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	88fa      	ldrh	r2, [r7, #6]
 80052b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052da:	d107      	bne.n	80052ec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	6812      	ldr	r2, [r2, #0]
 80052e4:	6812      	ldr	r2, [r2, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d007      	beq.n	800530a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d14b      	bne.n	80053ac <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_Transmit+0xe6>
 800531c:	8afb      	ldrh	r3, [r7, #22]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d13e      	bne.n	80053a0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800532a:	8812      	ldrh	r2, [r2, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005346:	e02b      	b.n	80053a0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d112      	bne.n	800537c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800535e:	8812      	ldrh	r2, [r2, #0]
 8005360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	86da      	strh	r2, [r3, #54]	; 0x36
 800537a:	e011      	b.n	80053a0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537c:	f7fd f952 	bl	8002624 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad2      	subs	r2, r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d303      	bcc.n	8005394 <HAL_SPI_Transmit+0x158>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d102      	bne.n	800539a <HAL_SPI_Transmit+0x15e>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d102      	bne.n	80053a0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800539e:	e072      	b.n	8005486 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1ce      	bne.n	8005348 <HAL_SPI_Transmit+0x10c>
 80053aa:	e04c      	b.n	8005446 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <HAL_SPI_Transmit+0x17e>
 80053b4:	8afb      	ldrh	r3, [r7, #22]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d140      	bne.n	800543c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	330c      	adds	r3, #12
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053e0:	e02c      	b.n	800543c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d113      	bne.n	8005418 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	330c      	adds	r3, #12
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053fa:	7812      	ldrb	r2, [r2, #0]
 80053fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	86da      	strh	r2, [r3, #54]	; 0x36
 8005416:	e011      	b.n	800543c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005418:	f7fd f904 	bl	8002624 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	d303      	bcc.n	8005430 <HAL_SPI_Transmit+0x1f4>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d102      	bne.n	8005436 <HAL_SPI_Transmit+0x1fa>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d102      	bne.n	800543c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	77fb      	strb	r3, [r7, #31]
          goto error;
 800543a:	e024      	b.n	8005486 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1cd      	bne.n	80053e2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	6839      	ldr	r1, [r7, #0]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 fb7b 	bl	8005b46 <SPI_EndRxTxTransaction>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005464:	2300      	movs	r3, #0
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005496:	7ffb      	ldrb	r3, [r7, #31]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d112      	bne.n	80054e4 <HAL_SPI_Receive+0x44>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10e      	bne.n	80054e4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2204      	movs	r2, #4
 80054ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f8e6 	bl	80056ac <HAL_SPI_TransmitReceive>
 80054e0:	4603      	mov	r3, r0
 80054e2:	e0df      	b.n	80056a4 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_SPI_Receive+0x52>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0d8      	b.n	80056a4 <HAL_SPI_Receive+0x204>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054fa:	f7fd f893 	bl	8002624 <HAL_GetTick>
 80054fe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b01      	cmp	r3, #1
 800550a:	d002      	beq.n	8005512 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005510:	e0bf      	b.n	8005692 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <HAL_SPI_Receive+0x7e>
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d102      	bne.n	8005524 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005522:	e0b6      	b.n	8005692 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2204      	movs	r2, #4
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	88fa      	ldrh	r2, [r7, #6]
 800553c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	88fa      	ldrh	r2, [r7, #6]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800556a:	d107      	bne.n	800557c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800557a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005586:	2b40      	cmp	r3, #64	; 0x40
 8005588:	d007      	beq.n	800559a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	6812      	ldr	r2, [r2, #0]
 8005592:	6812      	ldr	r2, [r2, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d161      	bne.n	8005666 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055a2:	e02d      	b.n	8005600 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d114      	bne.n	80055dc <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	68fa      	ldr	r2, [r7, #12]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	320c      	adds	r2, #12
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055da:	e011      	b.n	8005600 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055dc:	f7fd f822 	bl	8002624 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad2      	subs	r2, r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d303      	bcc.n	80055f4 <HAL_SPI_Receive+0x154>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d102      	bne.n	80055fa <HAL_SPI_Receive+0x15a>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055fe:	e048      	b.n	8005692 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cc      	bne.n	80055a4 <HAL_SPI_Receive+0x104>
 800560a:	e031      	b.n	8005670 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d113      	bne.n	8005642 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	68d2      	ldr	r2, [r2, #12]
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005640:	e011      	b.n	8005666 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fc ffef 	bl	8002624 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad2      	subs	r2, r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d303      	bcc.n	800565a <HAL_SPI_Receive+0x1ba>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d102      	bne.n	8005660 <HAL_SPI_Receive+0x1c0>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005664:	e015      	b.n	8005692 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1cd      	bne.n	800560c <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fa31 	bl	8005adc <SPI_EndRxTransaction>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056ba:	2301      	movs	r3, #1
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d101      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x26>
 80056ce:	2302      	movs	r3, #2
 80056d0:	e188      	b.n	80059e4 <HAL_SPI_TransmitReceive+0x338>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056da:	f7fc ffa3 	bl	8002624 <HAL_GetTick>
 80056de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056f0:	887b      	ldrh	r3, [r7, #2]
 80056f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d00f      	beq.n	800571c <HAL_SPI_TransmitReceive+0x70>
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005702:	d107      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d103      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x68>
 800570c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005710:	2b04      	cmp	r3, #4
 8005712:	d003      	beq.n	800571c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005714:	2302      	movs	r3, #2
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800571a:	e159      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_SPI_TransmitReceive+0x82>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <HAL_SPI_TransmitReceive+0x82>
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d103      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005734:	e14c      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b04      	cmp	r3, #4
 8005740:	d003      	beq.n	800574a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2205      	movs	r2, #5
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	887a      	ldrh	r2, [r7, #2]
 800575a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	887a      	ldrh	r2, [r7, #2]
 8005760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	887a      	ldrh	r2, [r7, #2]
 8005772:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d007      	beq.n	800579e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	6812      	ldr	r2, [r2, #0]
 8005798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800579c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a6:	d178      	bne.n	800589a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_TransmitReceive+0x10a>
 80057b0:	8b7b      	ldrh	r3, [r7, #26]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d166      	bne.n	8005884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	1c9a      	adds	r2, r3, #2
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057da:	e053      	b.n	8005884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d11b      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x176>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d016      	beq.n	8005822 <HAL_SPI_TransmitReceive+0x176>
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d113      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005802:	8812      	ldrh	r2, [r2, #0]
 8005804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	1c9a      	adds	r2, r3, #2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005814:	b29b      	uxth	r3, r3
 8005816:	3b01      	subs	r3, #1
 8005818:	b29a      	uxth	r2, r3
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b01      	cmp	r3, #1
 800582e:	d119      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x1b8>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	6812      	ldr	r2, [r2, #0]
 8005842:	68d2      	ldr	r2, [r2, #12]
 8005844:	b292      	uxth	r2, r2
 8005846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005856:	b29b      	uxth	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005860:	2301      	movs	r3, #1
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005864:	f7fc fede 	bl	8002624 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad2      	subs	r2, r2, r3
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	429a      	cmp	r2, r3
 8005872:	d307      	bcc.n	8005884 <HAL_SPI_TransmitReceive+0x1d8>
 8005874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587a:	d003      	beq.n	8005884 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005882:	e0a5      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1a6      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x130>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1a1      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x130>
 8005898:	e07c      	b.n	8005994 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x1fc>
 80058a2:	8b7b      	ldrh	r3, [r7, #26]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d16b      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058b2:	7812      	ldrb	r2, [r2, #0]
 80058b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ce:	e057      	b.n	8005980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d11c      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x26c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d017      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x26c>
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d114      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058f8:	7812      	ldrb	r2, [r2, #0]
 80058fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590a:	b29b      	uxth	r3, r3
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d119      	bne.n	800595a <HAL_SPI_TransmitReceive+0x2ae>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d014      	beq.n	800595a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	6812      	ldr	r2, [r2, #0]
 8005938:	68d2      	ldr	r2, [r2, #12]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800594c:	b29b      	uxth	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005956:	2301      	movs	r3, #1
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800595a:	f7fc fe63 	bl	8002624 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	1ad2      	subs	r2, r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	429a      	cmp	r2, r3
 8005968:	d303      	bcc.n	8005972 <HAL_SPI_TransmitReceive+0x2c6>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005970:	d102      	bne.n	8005978 <HAL_SPI_TransmitReceive+0x2cc>
 8005972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005974:	2b00      	cmp	r3, #0
 8005976:	d103      	bne.n	8005980 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800597e:	e027      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1a2      	bne.n	80058d0 <HAL_SPI_TransmitReceive+0x224>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d19d      	bne.n	80058d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f8d4 	bl	8005b46 <SPI_EndRxTxTransaction>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d006      	beq.n	80059b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2220      	movs	r2, #32
 80059ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059b0:	e00e      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	617b      	str	r3, [r7, #20]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3730      	adds	r7, #48	; 0x30
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059fa:	b2db      	uxtb	r3, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4613      	mov	r3, r2
 8005a16:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a18:	e04c      	b.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d048      	beq.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a22:	f7fc fdff 	bl	8002624 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	1ad2      	subs	r2, r2, r3
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d202      	bcs.n	8005a38 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d13d      	bne.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	6812      	ldr	r2, [r2, #0]
 8005a40:	6852      	ldr	r2, [r2, #4]
 8005a42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a50:	d111      	bne.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a5a:	d004      	beq.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d107      	bne.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7e:	d10f      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	6812      	ldr	r2, [r2, #0]
 8005a9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e00f      	b.n	8005ad4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	401a      	ands	r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	bf0c      	ite	eq
 8005ac4:	2301      	moveq	r3, #1
 8005ac6:	2300      	movne	r3, #0
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	79fb      	ldrb	r3, [r7, #7]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d1a3      	bne.n	8005a1a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af0:	d111      	bne.n	8005b16 <SPI_EndRxTransaction+0x3a>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afa:	d004      	beq.n	8005b06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b04:	d107      	bne.n	8005b16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff ff71 	bl	8005a08 <SPI_WaitFlagStateUntilTimeout>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	f043 0220 	orr.w	r2, r3, #32
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b38:	2303      	movs	r3, #3
 8005b3a:	e000      	b.n	8005b3e <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b086      	sub	sp, #24
 8005b4a:	af02      	add	r7, sp, #8
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f7ff ff53 	bl	8005a08 <SPI_WaitFlagStateUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d007      	beq.n	8005b78 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	f043 0220 	orr.w	r2, r3, #32
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e000      	b.n	8005b7a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e01d      	b.n	8005bd0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f003 ff5f 	bl	8009a6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 fa15 	bl	8005ff0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	68d2      	ldr	r2, [r2, #12]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b06      	cmp	r3, #6
 8005c00:	d007      	beq.n	8005c12 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	6812      	ldr	r2, [r2, #0]
 8005c0c:	f042 0201 	orr.w	r2, r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0202 	mvn.w	r2, #2
 8005c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9a5 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f997 	bl	8005f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9a8 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b04      	cmp	r3, #4
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0204 	mvn.w	r2, #4
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f97b 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f96d 	bl	8005f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f97e 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b08      	cmp	r3, #8
 8005cdc:	d122      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d11b      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0208 	mvn.w	r2, #8
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f951 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f943 	bl	8005f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f954 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0310 	and.w	r3, r3, #16
 8005d2e:	2b10      	cmp	r3, #16
 8005d30:	d122      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0310 	and.w	r3, r3, #16
 8005d3c:	2b10      	cmp	r3, #16
 8005d3e:	d11b      	bne.n	8005d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0210 	mvn.w	r2, #16
 8005d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f927 	bl	8005fb2 <HAL_TIM_IC_CaptureCallback>
 8005d64:	e005      	b.n	8005d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f919 	bl	8005f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f92a 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10e      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d107      	bne.n	8005da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f06f 0201 	mvn.w	r2, #1
 8005d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f002 f820 	bl	8007de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b80      	cmp	r3, #128	; 0x80
 8005db0:	d10e      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d107      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa99 	bl	8006302 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dda:	2b40      	cmp	r3, #64	; 0x40
 8005ddc:	d10e      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b40      	cmp	r3, #64	; 0x40
 8005dea:	d107      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f8ef 	bl	8005fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0220 	mvn.w	r2, #32
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fa63 	bl	80062ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e28:	bf00      	nop
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIM_ConfigClockSource+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e0a6      	b.n	8005f96 <HAL_TIM_ConfigClockSource+0x166>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d067      	beq.n	8005f50 <HAL_TIM_ConfigClockSource+0x120>
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d80b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x6c>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d073      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d802      	bhi.n	8005e92 <HAL_TIM_ConfigClockSource+0x62>
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d06f      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e90:	e078      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d06c      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d06a      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e9a:	e073      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9c:	2b70      	cmp	r3, #112	; 0x70
 8005e9e:	d00d      	beq.n	8005ebc <HAL_TIM_ConfigClockSource+0x8c>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d804      	bhi.n	8005eae <HAL_TIM_ConfigClockSource+0x7e>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d033      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xe0>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d041      	beq.n	8005f30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005eac:	e06a      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d066      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0x152>
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d017      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eba:	e063      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	6899      	ldr	r1, [r3, #8]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f000 f9aa 	bl	8006224 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ede:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
      break;
 8005ee8:	e04c      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6899      	ldr	r1, [r3, #8]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f000 f993 	bl	8006224 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6812      	ldr	r2, [r2, #0]
 8005f06:	6892      	ldr	r2, [r2, #8]
 8005f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e039      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6859      	ldr	r1, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f000 f907 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2150      	movs	r1, #80	; 0x50
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f000 f960 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f2e:	e029      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f000 f926 	bl	800618e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2160      	movs	r1, #96	; 0x60
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 f950 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f4e:	e019      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6818      	ldr	r0, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	6859      	ldr	r1, [r3, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f000 f8e7 	bl	8006130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2140      	movs	r1, #64	; 0x40
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f940 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f6e:	e009      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f000 f937 	bl	80061ee <TIM_ITRx_SetConfig>
      break;
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a40      	ldr	r2, [pc, #256]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600e:	d00f      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3d      	ldr	r2, [pc, #244]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00b      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3c      	ldr	r2, [pc, #240]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a3b      	ldr	r2, [pc, #236]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_Base_SetConfig+0x40>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a3a      	ldr	r2, [pc, #232]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d108      	bne.n	8006042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2f      	ldr	r2, [pc, #188]	; (8006104 <TIM_Base_SetConfig+0x114>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006050:	d027      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2c      	ldr	r2, [pc, #176]	; (8006108 <TIM_Base_SetConfig+0x118>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d023      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a2b      	ldr	r2, [pc, #172]	; (800610c <TIM_Base_SetConfig+0x11c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <TIM_Base_SetConfig+0x120>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a29      	ldr	r2, [pc, #164]	; (8006114 <TIM_Base_SetConfig+0x124>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a28      	ldr	r2, [pc, #160]	; (8006118 <TIM_Base_SetConfig+0x128>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a27      	ldr	r2, [pc, #156]	; (800611c <TIM_Base_SetConfig+0x12c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a26      	ldr	r2, [pc, #152]	; (8006120 <TIM_Base_SetConfig+0x130>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a25      	ldr	r2, [pc, #148]	; (8006124 <TIM_Base_SetConfig+0x134>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a24      	ldr	r2, [pc, #144]	; (8006128 <TIM_Base_SetConfig+0x138>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0xb2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <TIM_Base_SetConfig+0x13c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0a      	ldr	r2, [pc, #40]	; (8006104 <TIM_Base_SetConfig+0x114>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_Base_SetConfig+0xf8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0c      	ldr	r2, [pc, #48]	; (8006114 <TIM_Base_SetConfig+0x124>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d103      	bne.n	80060f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	615a      	str	r2, [r3, #20]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	40010000 	.word	0x40010000
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	40010400 	.word	0x40010400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	40001800 	.word	0x40001800
 8006128:	40001c00 	.word	0x40001c00
 800612c:	40002000 	.word	0x40002000

08006130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800615a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 030a 	bic.w	r3, r3, #10
 800616c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b087      	sub	sp, #28
 8006192:	af00      	add	r7, sp, #0
 8006194:	60f8      	str	r0, [r7, #12]
 8006196:	60b9      	str	r1, [r7, #8]
 8006198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0210 	bic.w	r2, r3, #16
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	031b      	lsls	r3, r3, #12
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	621a      	str	r2, [r3, #32]
}
 80061e2:	bf00      	nop
 80061e4:	371c      	adds	r7, #28
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4313      	orrs	r3, r2
 800620c:	f043 0307 	orr.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	431a      	orrs	r2, r3
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	4313      	orrs	r3, r2
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	4313      	orrs	r3, r2
 8006250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	609a      	str	r2, [r3, #8]
}
 8006258:	bf00      	nop
 800625a:	371c      	adds	r7, #28
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006278:	2302      	movs	r3, #2
 800627a:	e032      	b.n	80062e2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	4313      	orrs	r3, r2
 80062be:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b082      	sub	sp, #8
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e03f      	b.n	80063a8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d106      	bne.n	8006342 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f003 fc2b 	bl	8009b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	; 0x24
 8006346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	68d2      	ldr	r2, [r2, #12]
 8006354:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006358:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f90a 	bl	8006574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	6912      	ldr	r2, [r2, #16]
 800636a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800636e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	6952      	ldr	r2, [r2, #20]
 800637a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800637e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800638e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b088      	sub	sp, #32
 80063b4:	af02      	add	r7, sp, #8
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	603b      	str	r3, [r7, #0]
 80063bc:	4613      	mov	r3, r2
 80063be:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	f040 8082 	bne.w	80064d6 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Transmit+0x2e>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e07a      	b.n	80064d8 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_UART_Transmit+0x40>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e073      	b.n	80064d8 <HAL_UART_Transmit+0x128>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2221      	movs	r2, #33	; 0x21
 8006402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006406:	f7fc f90d 	bl	8002624 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006418:	e041      	b.n	800649e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800641e:	b29b      	uxth	r3, r3
 8006420:	3b01      	subs	r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006430:	d121      	bne.n	8006476 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2200      	movs	r2, #0
 800643a:	2180      	movs	r1, #128	; 0x80
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f84f 	bl	80064e0 <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e045      	b.n	80064d8 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	8812      	ldrh	r2, [r2, #0]
 8006458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	3302      	adds	r3, #2
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	e017      	b.n	800649e <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3301      	adds	r3, #1
 8006472:	60bb      	str	r3, [r7, #8]
 8006474:	e013      	b.n	800649e <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2200      	movs	r2, #0
 800647e:	2180      	movs	r1, #128	; 0x80
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f82d 	bl	80064e0 <UART_WaitOnFlagUntilTimeout>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e023      	b.n	80064d8 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	1c59      	adds	r1, r3, #1
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1b8      	bne.n	800641a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2200      	movs	r2, #0
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 f814 	bl	80064e0 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e00a      	b.n	80064d8 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	e000      	b.n	80064d8 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80064d6:	2302      	movs	r3, #2
  }
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	603b      	str	r3, [r7, #0]
 80064ec:	4613      	mov	r3, r2
 80064ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f0:	e02c      	b.n	800654c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f8:	d028      	beq.n	800654c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <UART_WaitOnFlagUntilTimeout+0x30>
 8006500:	f7fc f890 	bl	8002624 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	1ad2      	subs	r2, r2, r3
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d91d      	bls.n	800654c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	68d2      	ldr	r2, [r2, #12]
 800651a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800651e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	6952      	ldr	r2, [r2, #20]
 800652a:	f022 0201 	bic.w	r2, r2, #1
 800652e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2220      	movs	r2, #32
 8006534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2220      	movs	r2, #32
 800653c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e00f      	b.n	800656c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	401a      	ands	r2, r3
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	bf0c      	ite	eq
 800655c:	2301      	moveq	r3, #1
 800655e:	2300      	movne	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	461a      	mov	r2, r3
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	429a      	cmp	r2, r3
 8006568:	d0c3      	beq.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	6912      	ldr	r2, [r2, #16]
 8006586:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68d2      	ldr	r2, [r2, #12]
 800658e:	430a      	orrs	r2, r1
 8006590:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065b8:	f023 030c 	bic.w	r3, r3, #12
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	430b      	orrs	r3, r1
 80065c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	6952      	ldr	r2, [r2, #20]
 80065cc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6992      	ldr	r2, [r2, #24]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e0:	f040 80e4 	bne.w	80067ac <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4aab      	ldr	r2, [pc, #684]	; (8006898 <UART_SetConfig+0x324>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <UART_SetConfig+0x84>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4aaa      	ldr	r2, [pc, #680]	; (800689c <UART_SetConfig+0x328>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d16c      	bne.n	80066d2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681c      	ldr	r4, [r3, #0]
 80065fc:	f7fe fb2a 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006600:	4602      	mov	r2, r0
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009a      	lsls	r2, r3, #2
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	fbb2 f3f3 	udiv	r3, r2, r3
 8006616:	4aa2      	ldr	r2, [pc, #648]	; (80068a0 <UART_SetConfig+0x32c>)
 8006618:	fba2 2303 	umull	r2, r3, r2, r3
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	011d      	lsls	r5, r3, #4
 8006620:	f7fe fb18 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006624:	4602      	mov	r2, r0
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009a      	lsls	r2, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	fbb2 f6f3 	udiv	r6, r2, r3
 800663a:	f7fe fb0b 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 800663e:	4602      	mov	r2, r0
 8006640:	4613      	mov	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	009a      	lsls	r2, r3, #2
 8006648:	441a      	add	r2, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	4a92      	ldr	r2, [pc, #584]	; (80068a0 <UART_SetConfig+0x32c>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2264      	movs	r2, #100	; 0x64
 800665e:	fb02 f303 	mul.w	r3, r2, r3
 8006662:	1af3      	subs	r3, r6, r3
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	3332      	adds	r3, #50	; 0x32
 8006668:	4a8d      	ldr	r2, [pc, #564]	; (80068a0 <UART_SetConfig+0x32c>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006676:	441d      	add	r5, r3
 8006678:	f7fe faec 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 800667c:	4602      	mov	r2, r0
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009a      	lsls	r2, r3, #2
 8006686:	441a      	add	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006692:	f7fe fadf 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006696:	4602      	mov	r2, r0
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009a      	lsls	r2, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ac:	4a7c      	ldr	r2, [pc, #496]	; (80068a0 <UART_SetConfig+0x32c>)
 80066ae:	fba2 2303 	umull	r2, r3, r2, r3
 80066b2:	095b      	lsrs	r3, r3, #5
 80066b4:	2264      	movs	r2, #100	; 0x64
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	1af3      	subs	r3, r6, r3
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	3332      	adds	r3, #50	; 0x32
 80066c0:	4a77      	ldr	r2, [pc, #476]	; (80068a0 <UART_SetConfig+0x32c>)
 80066c2:	fba2 2303 	umull	r2, r3, r2, r3
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	442b      	add	r3, r5
 80066ce:	60a3      	str	r3, [r4, #8]
 80066d0:	e154      	b.n	800697c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681c      	ldr	r4, [r3, #0]
 80066d6:	f7fe faa9 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80066da:	4602      	mov	r2, r0
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009a      	lsls	r2, r3, #2
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f0:	4a6b      	ldr	r2, [pc, #428]	; (80068a0 <UART_SetConfig+0x32c>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	011d      	lsls	r5, r3, #4
 80066fa:	f7fe fa97 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80066fe:	4602      	mov	r2, r0
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009a      	lsls	r2, r3, #2
 8006708:	441a      	add	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	fbb2 f6f3 	udiv	r6, r2, r3
 8006714:	f7fe fa8a 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006718:	4602      	mov	r2, r0
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009a      	lsls	r2, r3, #2
 8006722:	441a      	add	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	fbb2 f3f3 	udiv	r3, r2, r3
 800672e:	4a5c      	ldr	r2, [pc, #368]	; (80068a0 <UART_SetConfig+0x32c>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	2264      	movs	r2, #100	; 0x64
 8006738:	fb02 f303 	mul.w	r3, r2, r3
 800673c:	1af3      	subs	r3, r6, r3
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	3332      	adds	r3, #50	; 0x32
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <UART_SetConfig+0x32c>)
 8006744:	fba2 2303 	umull	r2, r3, r2, r3
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006750:	441d      	add	r5, r3
 8006752:	f7fe fa6b 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006756:	4602      	mov	r2, r0
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	009a      	lsls	r2, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	fbb2 f6f3 	udiv	r6, r2, r3
 800676c:	f7fe fa5e 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006770:	4602      	mov	r2, r0
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009a      	lsls	r2, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	005b      	lsls	r3, r3, #1
 8006782:	fbb2 f3f3 	udiv	r3, r2, r3
 8006786:	4a46      	ldr	r2, [pc, #280]	; (80068a0 <UART_SetConfig+0x32c>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	2264      	movs	r2, #100	; 0x64
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	1af3      	subs	r3, r6, r3
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	3332      	adds	r3, #50	; 0x32
 800679a:	4a41      	ldr	r2, [pc, #260]	; (80068a0 <UART_SetConfig+0x32c>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	095b      	lsrs	r3, r3, #5
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	442b      	add	r3, r5
 80067a8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80067aa:	e0e7      	b.n	800697c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a39      	ldr	r2, [pc, #228]	; (8006898 <UART_SetConfig+0x324>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d004      	beq.n	80067c0 <UART_SetConfig+0x24c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a38      	ldr	r2, [pc, #224]	; (800689c <UART_SetConfig+0x328>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d171      	bne.n	80068a4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681c      	ldr	r4, [r3, #0]
 80067c4:	f7fe fa46 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4613      	mov	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4413      	add	r3, r2
 80067d0:	009a      	lsls	r2, r3, #2
 80067d2:	441a      	add	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	4a30      	ldr	r2, [pc, #192]	; (80068a0 <UART_SetConfig+0x32c>)
 80067e0:	fba2 2303 	umull	r2, r3, r2, r3
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	011d      	lsls	r5, r3, #4
 80067e8:	f7fe fa34 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 80067ec:	4602      	mov	r2, r0
 80067ee:	4613      	mov	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	009a      	lsls	r2, r3, #2
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006802:	f7fe fa27 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006806:	4602      	mov	r2, r0
 8006808:	4613      	mov	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	4a20      	ldr	r2, [pc, #128]	; (80068a0 <UART_SetConfig+0x32c>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	095b      	lsrs	r3, r3, #5
 8006824:	2264      	movs	r2, #100	; 0x64
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	1af3      	subs	r3, r6, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	3332      	adds	r3, #50	; 0x32
 8006830:	4a1b      	ldr	r2, [pc, #108]	; (80068a0 <UART_SetConfig+0x32c>)
 8006832:	fba2 2303 	umull	r2, r3, r2, r3
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800683c:	441d      	add	r5, r3
 800683e:	f7fe fa09 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 8006842:	4602      	mov	r2, r0
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009a      	lsls	r2, r3, #2
 800684c:	441a      	add	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	fbb2 f6f3 	udiv	r6, r2, r3
 8006858:	f7fe f9fc 	bl	8004c54 <HAL_RCC_GetPCLK2Freq>
 800685c:	4602      	mov	r2, r0
 800685e:	4613      	mov	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4413      	add	r3, r2
 8006864:	009a      	lsls	r2, r3, #2
 8006866:	441a      	add	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006872:	4a0b      	ldr	r2, [pc, #44]	; (80068a0 <UART_SetConfig+0x32c>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2264      	movs	r2, #100	; 0x64
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	1af3      	subs	r3, r6, r3
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <UART_SetConfig+0x32c>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 030f 	and.w	r3, r3, #15
 8006892:	442b      	add	r3, r5
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	e071      	b.n	800697c <UART_SetConfig+0x408>
 8006898:	40011000 	.word	0x40011000
 800689c:	40011400 	.word	0x40011400
 80068a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681c      	ldr	r4, [r3, #0]
 80068a8:	f7fe f9c0 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80068ac:	4602      	mov	r2, r0
 80068ae:	4613      	mov	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	009a      	lsls	r2, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	4a30      	ldr	r2, [pc, #192]	; (8006984 <UART_SetConfig+0x410>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	011d      	lsls	r5, r3, #4
 80068cc:	f7fe f9ae 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009a      	lsls	r2, r3, #2
 80068da:	441a      	add	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	fbb2 f6f3 	udiv	r6, r2, r3
 80068e6:	f7fe f9a1 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 80068ea:	4602      	mov	r2, r0
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009a      	lsls	r2, r3, #2
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <UART_SetConfig+0x410>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	095b      	lsrs	r3, r3, #5
 8006908:	2264      	movs	r2, #100	; 0x64
 800690a:	fb02 f303 	mul.w	r3, r2, r3
 800690e:	1af3      	subs	r3, r6, r3
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	3332      	adds	r3, #50	; 0x32
 8006914:	4a1b      	ldr	r2, [pc, #108]	; (8006984 <UART_SetConfig+0x410>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006920:	441d      	add	r5, r3
 8006922:	f7fe f983 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006926:	4602      	mov	r2, r0
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009a      	lsls	r2, r3, #2
 8006930:	441a      	add	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	fbb2 f6f3 	udiv	r6, r2, r3
 800693c:	f7fe f976 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8006940:	4602      	mov	r2, r0
 8006942:	4613      	mov	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4413      	add	r3, r2
 8006948:	009a      	lsls	r2, r3, #2
 800694a:	441a      	add	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	fbb2 f3f3 	udiv	r3, r2, r3
 8006956:	4a0b      	ldr	r2, [pc, #44]	; (8006984 <UART_SetConfig+0x410>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	2264      	movs	r2, #100	; 0x64
 8006960:	fb02 f303 	mul.w	r3, r2, r3
 8006964:	1af3      	subs	r3, r6, r3
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	3332      	adds	r3, #50	; 0x32
 800696a:	4a06      	ldr	r2, [pc, #24]	; (8006984 <UART_SetConfig+0x410>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	095b      	lsrs	r3, r3, #5
 8006972:	f003 030f 	and.w	r3, r3, #15
 8006976:	442b      	add	r3, r5
 8006978:	60a3      	str	r3, [r4, #8]
}
 800697a:	e7ff      	b.n	800697c <UART_SetConfig+0x408>
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006984:	51eb851f 	.word	0x51eb851f

08006988 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d029      	beq.n	80069f6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80069ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069b2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069bc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80069c2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80069c8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80069ce:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80069d4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80069da:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80069e0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80069e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e034      	b.n	8006a60 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a02:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a0c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006a12:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a2a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a34:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006a3a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006a40:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006a46:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006a4c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b087      	sub	sp, #28
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d02e      	beq.n	8006ae6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a94:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006aa4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006aae:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006ab8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ac2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006acc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	609a      	str	r2, [r3, #8]
 8006ae4:	e03b      	b.n	8006b5e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006af2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006af6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b1c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b2c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b36:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b88:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006b92:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006ba4:	f7fb fd3e 	bl	8002624 <HAL_GetTick>
 8006ba8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006baa:	e010      	b.n	8006bce <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb2:	d00c      	beq.n	8006bce <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <FMC_SDRAM_SendCommand+0x5e>
 8006bba:	f7fb fd33 	bl	8002624 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d901      	bls.n	8006bce <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f003 0320 	and.w	r3, r3, #32
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d0e8      	beq.n	8006bac <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
	...

08006c0c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006c10:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <MX_CRC_Init+0x20>)
 8006c12:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <MX_CRC_Init+0x24>)
 8006c14:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <MX_CRC_Init+0x20>)
 8006c18:	f7fb fe12 	bl	8002840 <HAL_CRC_Init>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006c22:	f002 fc33 	bl	800948c <Error_Handler>
  }

}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000338 	.word	0x20000338
 8006c30:	40023000 	.word	0x40023000

08006c34 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0b      	ldr	r2, [pc, #44]	; (8006c70 <HAL_CRC_MspInit+0x3c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d10d      	bne.n	8006c62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006c46:	2300      	movs	r3, #0
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <HAL_CRC_MspInit+0x40>)
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_CRC_MspInit+0x40>)
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c54:	6313      	str	r3, [r2, #48]	; 0x30
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <HAL_CRC_MspInit+0x40>)
 8006c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40023000 	.word	0x40023000
 8006c74:	40023800 	.word	0x40023800

08006c78 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8006c7c:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c7e:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <MX_DMA2D_Init+0x60>)
 8006c80:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006c82:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006c88:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006c8e:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006cac:	4809      	ldr	r0, [pc, #36]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006cae:	f7fb ffa3 	bl	8002bf8 <HAL_DMA2D_Init>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006cb8:	f002 fbe8 	bl	800948c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006cbc:	2101      	movs	r1, #1
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <MX_DMA2D_Init+0x5c>)
 8006cc0:	f7fc fa08 	bl	80030d4 <HAL_DMA2D_ConfigLayer>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006cca:	f002 fbdf 	bl	800948c <Error_Handler>
  }

}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20000340 	.word	0x20000340
 8006cd8:	4002b000 	.word	0x4002b000

08006cdc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <HAL_DMA2D_MspInit+0x48>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d115      	bne.n	8006d1a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <HAL_DMA2D_MspInit+0x4c>)
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <HAL_DMA2D_MspInit+0x4c>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfe:	4b0a      	ldr	r3, [pc, #40]	; (8006d28 <HAL_DMA2D_MspInit+0x4c>)
 8006d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2105      	movs	r1, #5
 8006d0e:	205a      	movs	r0, #90	; 0x5a
 8006d10:	f7fb fd6c 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006d14:	205a      	movs	r0, #90	; 0x5a
 8006d16:	f7fb fd85 	bl	8002824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	4002b000 	.word	0x4002b000
 8006d28:	40023800 	.word	0x40023800

08006d2c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006d32:	4b20      	ldr	r3, [pc, #128]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d34:	4a20      	ldr	r2, [pc, #128]	; (8006db8 <MX_FMC_Init+0x8c>)
 8006d36:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006d38:	4b1e      	ldr	r3, [pc, #120]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006d3e:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006d44:	4b1b      	ldr	r3, [pc, #108]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d46:	2204      	movs	r2, #4
 8006d48:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006d4a:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006d50:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d52:	2240      	movs	r2, #64	; 0x40
 8006d54:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006d56:	4b17      	ldr	r3, [pc, #92]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d58:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006d5c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006d5e:	4b15      	ldr	r3, [pc, #84]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006d64:	4b13      	ldr	r3, [pc, #76]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d6a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006d6c:	4b11      	ldr	r3, [pc, #68]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8006d72:	4b10      	ldr	r3, [pc, #64]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d78:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006d7e:	2307      	movs	r3, #7
 8006d80:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006d82:	2304      	movs	r3, #4
 8006d84:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006d86:	2307      	movs	r3, #7
 8006d88:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006d92:	2302      	movs	r3, #2
 8006d94:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4806      	ldr	r0, [pc, #24]	; (8006db4 <MX_FMC_Init+0x88>)
 8006d9c:	f7fe f944 	bl	8005028 <HAL_SDRAM_Init>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8006da6:	f002 fb71 	bl	800948c <Error_Handler>
  }

}
 8006daa:	bf00      	nop
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000380 	.word	0x20000380
 8006db8:	a0000140 	.word	0xa0000140

08006dbc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8006dc2:	4b3c      	ldr	r3, [pc, #240]	; (8006eb4 <HAL_FMC_MspInit+0xf8>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d16f      	bne.n	8006eaa <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8006dca:	4b3a      	ldr	r3, [pc, #232]	; (8006eb4 <HAL_FMC_MspInit+0xf8>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	4a38      	ldr	r2, [pc, #224]	; (8006eb8 <HAL_FMC_MspInit+0xfc>)
 8006dd6:	4b38      	ldr	r3, [pc, #224]	; (8006eb8 <HAL_FMC_MspInit+0xfc>)
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	6393      	str	r3, [r2, #56]	; 0x38
 8006de0:	4b35      	ldr	r3, [pc, #212]	; (8006eb8 <HAL_FMC_MspInit+0xfc>)
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006dec:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006df0:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006df2:	2302      	movs	r3, #2
 8006df4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006dfe:	230c      	movs	r3, #12
 8006e00:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e02:	1d3b      	adds	r3, r7, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	482d      	ldr	r0, [pc, #180]	; (8006ebc <HAL_FMC_MspInit+0x100>)
 8006e08:	f7fc fa90 	bl	800332c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e1c:	230c      	movs	r3, #12
 8006e1e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	4619      	mov	r1, r3
 8006e24:	4826      	ldr	r0, [pc, #152]	; (8006ec0 <HAL_FMC_MspInit+0x104>)
 8006e26:	f7fc fa81 	bl	800332c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006e2a:	f248 1333 	movw	r3, #33075	; 0x8133
 8006e2e:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e30:	2302      	movs	r3, #2
 8006e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e40:	1d3b      	adds	r3, r7, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	481f      	ldr	r0, [pc, #124]	; (8006ec4 <HAL_FMC_MspInit+0x108>)
 8006e46:	f7fc fa71 	bl	800332c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006e4a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006e4e:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e50:	2302      	movs	r3, #2
 8006e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e60:	1d3b      	adds	r3, r7, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4818      	ldr	r0, [pc, #96]	; (8006ec8 <HAL_FMC_MspInit+0x10c>)
 8006e66:	f7fc fa61 	bl	800332c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006e6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006e6e:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e70:	2302      	movs	r3, #2
 8006e72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e7c:	230c      	movs	r3, #12
 8006e7e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e80:	1d3b      	adds	r3, r7, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	4811      	ldr	r0, [pc, #68]	; (8006ecc <HAL_FMC_MspInit+0x110>)
 8006e86:	f7fc fa51 	bl	800332c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006e8a:	2360      	movs	r3, #96	; 0x60
 8006e8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e96:	2303      	movs	r3, #3
 8006e98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e9e:	1d3b      	adds	r3, r7, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	480b      	ldr	r0, [pc, #44]	; (8006ed0 <HAL_FMC_MspInit+0x114>)
 8006ea4:	f7fc fa42 	bl	800332c <HAL_GPIO_Init>
 8006ea8:	e000      	b.n	8006eac <HAL_FMC_MspInit+0xf0>
    return;
 8006eaa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	20000274 	.word	0x20000274
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40021400 	.word	0x40021400
 8006ec0:	40020800 	.word	0x40020800
 8006ec4:	40021800 	.word	0x40021800
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	40020c00 	.word	0x40020c00
 8006ed0:	40020400 	.word	0x40020400

08006ed4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006edc:	f7ff ff6e 	bl	8006dbc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	af00      	add	r7, sp, #0

}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
	...

08006ef8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	605a      	str	r2, [r3, #4]
 8006f08:	609a      	str	r2, [r3, #8]
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	623b      	str	r3, [r7, #32]
 8006f12:	4a80      	ldr	r2, [pc, #512]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f14:	4b7f      	ldr	r3, [pc, #508]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	f043 0320 	orr.w	r3, r3, #32
 8006f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1e:	4b7d      	ldr	r3, [pc, #500]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	623b      	str	r3, [r7, #32]
 8006f28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
 8006f2e:	4a79      	ldr	r2, [pc, #484]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f30:	4b78      	ldr	r3, [pc, #480]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f38:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3a:	4b76      	ldr	r3, [pc, #472]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f46:	2300      	movs	r3, #0
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	4a72      	ldr	r2, [pc, #456]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f4c:	4b71      	ldr	r3, [pc, #452]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	f043 0304 	orr.w	r3, r3, #4
 8006f54:	6313      	str	r3, [r2, #48]	; 0x30
 8006f56:	4b6f      	ldr	r3, [pc, #444]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	4a6b      	ldr	r2, [pc, #428]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f68:	4b6a      	ldr	r3, [pc, #424]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	6313      	str	r3, [r2, #48]	; 0x30
 8006f72:	4b68      	ldr	r3, [pc, #416]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	617b      	str	r3, [r7, #20]
 8006f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	4a64      	ldr	r2, [pc, #400]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f84:	4b63      	ldr	r3, [pc, #396]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8e:	4b61      	ldr	r3, [pc, #388]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	613b      	str	r3, [r7, #16]
 8006f98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
 8006f9e:	4a5d      	ldr	r2, [pc, #372]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fa0:	4b5c      	ldr	r3, [pc, #368]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006faa:	4b5a      	ldr	r3, [pc, #360]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb2:	60fb      	str	r3, [r7, #12]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]
 8006fba:	4a56      	ldr	r2, [pc, #344]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fbc:	4b55      	ldr	r3, [pc, #340]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	f043 0310 	orr.w	r3, r3, #16
 8006fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc6:	4b53      	ldr	r3, [pc, #332]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f003 0310 	and.w	r3, r3, #16
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	607b      	str	r3, [r7, #4]
 8006fd6:	4a4f      	ldr	r2, [pc, #316]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fd8:	4b4e      	ldr	r3, [pc, #312]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	f043 0308 	orr.w	r3, r3, #8
 8006fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe2:	4b4c      	ldr	r3, [pc, #304]	; (8007114 <MX_GPIO_Init+0x21c>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	607b      	str	r3, [r7, #4]
 8006fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2116      	movs	r1, #22
 8006ff2:	4849      	ldr	r0, [pc, #292]	; (8007118 <MX_GPIO_Init+0x220>)
 8006ff4:	f7fc fc68 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2180      	movs	r1, #128	; 0x80
 8006ffc:	4847      	ldr	r0, [pc, #284]	; (800711c <MX_GPIO_Init+0x224>)
 8006ffe:	f7fc fc63 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8007002:	2200      	movs	r2, #0
 8007004:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007008:	4845      	ldr	r0, [pc, #276]	; (8007120 <MX_GPIO_Init+0x228>)
 800700a:	f7fc fc5d 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800700e:	2200      	movs	r2, #0
 8007010:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8007014:	4843      	ldr	r0, [pc, #268]	; (8007124 <MX_GPIO_Init+0x22c>)
 8007016:	f7fc fc57 	bl	80038c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800701a:	2316      	movs	r3, #22
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800701e:	2301      	movs	r3, #1
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007022:	2300      	movs	r3, #0
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007026:	2300      	movs	r3, #0
 8007028:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800702a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702e:	4619      	mov	r1, r3
 8007030:	4839      	ldr	r0, [pc, #228]	; (8007118 <MX_GPIO_Init+0x220>)
 8007032:	f7fc f97b 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BB_Pin;
 8007036:	2301      	movs	r3, #1
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800703a:	2300      	movs	r3, #0
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703e:	2300      	movs	r3, #0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BB_GPIO_Port, &GPIO_InitStruct);
 8007042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007046:	4619      	mov	r1, r3
 8007048:	4834      	ldr	r0, [pc, #208]	; (800711c <MX_GPIO_Init+0x224>)
 800704a:	f7fc f96f 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800704e:	2380      	movs	r3, #128	; 0x80
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007052:	2301      	movs	r3, #1
 8007054:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007056:	2300      	movs	r3, #0
 8007058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800705a:	2300      	movs	r3, #0
 800705c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	4619      	mov	r1, r3
 8007064:	482d      	ldr	r0, [pc, #180]	; (800711c <MX_GPIO_Init+0x224>)
 8007066:	f7fc f961 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800706a:	2320      	movs	r3, #32
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800706e:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <MX_GPIO_Init+0x230>)
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800707a:	4619      	mov	r1, r3
 800707c:	4826      	ldr	r0, [pc, #152]	; (8007118 <MX_GPIO_Init+0x220>)
 800707e:	f7fc f955 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007082:	2304      	movs	r3, #4
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007086:	2300      	movs	r3, #0
 8007088:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800708a:	2300      	movs	r3, #0
 800708c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800708e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007092:	4619      	mov	r1, r3
 8007094:	4825      	ldr	r0, [pc, #148]	; (800712c <MX_GPIO_Init+0x234>)
 8007096:	f7fc f949 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 800709a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070a0:	2300      	movs	r3, #0
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80070a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ac:	4619      	mov	r1, r3
 80070ae:	481c      	ldr	r0, [pc, #112]	; (8007120 <MX_GPIO_Init+0x228>)
 80070b0:	f7fc f93c 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80070b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070ba:	2301      	movs	r3, #1
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070c2:	2300      	movs	r3, #0
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ca:	4619      	mov	r1, r3
 80070cc:	4814      	ldr	r0, [pc, #80]	; (8007120 <MX_GPIO_Init+0x228>)
 80070ce:	f7fc f92d 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT1_Pin;
 80070d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80070d8:	4b13      	ldr	r3, [pc, #76]	; (8007128 <MX_GPIO_Init+0x230>)
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070dc:	2300      	movs	r3, #0
 80070de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT1_GPIO_Port, &GPIO_InitStruct);
 80070e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e4:	4619      	mov	r1, r3
 80070e6:	480d      	ldr	r0, [pc, #52]	; (800711c <MX_GPIO_Init+0x224>)
 80070e8:	f7fc f920 	bl	800332c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80070ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070f2:	2301      	movs	r3, #1
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070fa:	2300      	movs	r3, #0
 80070fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	4619      	mov	r1, r3
 8007104:	4807      	ldr	r0, [pc, #28]	; (8007124 <MX_GPIO_Init+0x22c>)
 8007106:	f7fc f911 	bl	800332c <HAL_GPIO_Init>

}
 800710a:	bf00      	nop
 800710c:	3738      	adds	r7, #56	; 0x38
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40023800 	.word	0x40023800
 8007118:	40020800 	.word	0x40020800
 800711c:	40020000 	.word	0x40020000
 8007120:	40020c00 	.word	0x40020c00
 8007124:	40021800 	.word	0x40021800
 8007128:	10120000 	.word	0x10120000
 800712c:	40020400 	.word	0x40020400

08007130 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007134:	4b1b      	ldr	r3, [pc, #108]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007136:	4a1c      	ldr	r2, [pc, #112]	; (80071a8 <MX_I2C3_Init+0x78>)
 8007138:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800713a:	4b1a      	ldr	r3, [pc, #104]	; (80071a4 <MX_I2C3_Init+0x74>)
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <MX_I2C3_Init+0x7c>)
 800713e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007140:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007146:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007148:	2200      	movs	r2, #0
 800714a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800714c:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <MX_I2C3_Init+0x74>)
 800714e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007152:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007154:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007156:	2200      	movs	r2, #0
 8007158:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800715a:	4b12      	ldr	r3, [pc, #72]	; (80071a4 <MX_I2C3_Init+0x74>)
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007160:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007166:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007168:	2200      	movs	r2, #0
 800716a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800716c:	480d      	ldr	r0, [pc, #52]	; (80071a4 <MX_I2C3_Init+0x74>)
 800716e:	f7fc fbc5 	bl	80038fc <HAL_I2C_Init>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007178:	f002 f988 	bl	800948c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800717c:	2100      	movs	r1, #0
 800717e:	4809      	ldr	r0, [pc, #36]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007180:	f7fc fce4 	bl	8003b4c <HAL_I2CEx_ConfigAnalogFilter>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800718a:	f002 f97f 	bl	800948c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800718e:	2100      	movs	r1, #0
 8007190:	4804      	ldr	r0, [pc, #16]	; (80071a4 <MX_I2C3_Init+0x74>)
 8007192:	f7fc fd17 	bl	8003bc4 <HAL_I2CEx_ConfigDigitalFilter>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800719c:	f002 f976 	bl	800948c <Error_Handler>
  }

}
 80071a0:	bf00      	nop
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	200003b4 	.word	0x200003b4
 80071a8:	40005c00 	.word	0x40005c00
 80071ac:	000186a0 	.word	0x000186a0

080071b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a29      	ldr	r2, [pc, #164]	; (8007274 <HAL_I2C_MspInit+0xc4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d14b      	bne.n	800726a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	4a28      	ldr	r2, [pc, #160]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 80071d8:	4b27      	ldr	r3, [pc, #156]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	f043 0304 	orr.w	r3, r3, #4
 80071e0:	6313      	str	r3, [r2, #48]	; 0x30
 80071e2:	4b25      	ldr	r3, [pc, #148]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	613b      	str	r3, [r7, #16]
 80071ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 80071f4:	4b20      	ldr	r3, [pc, #128]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	6313      	str	r3, [r2, #48]	; 0x30
 80071fe:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	60fb      	str	r3, [r7, #12]
 8007208:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800720a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800720e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007210:	2312      	movs	r3, #18
 8007212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007214:	2301      	movs	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007218:	2303      	movs	r3, #3
 800721a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800721c:	2304      	movs	r3, #4
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4619      	mov	r1, r3
 8007226:	4815      	ldr	r0, [pc, #84]	; (800727c <HAL_I2C_MspInit+0xcc>)
 8007228:	f7fc f880 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800722c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007232:	2312      	movs	r3, #18
 8007234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007236:	2301      	movs	r3, #1
 8007238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800723a:	2303      	movs	r3, #3
 800723c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800723e:	2304      	movs	r3, #4
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	4619      	mov	r1, r3
 8007248:	480d      	ldr	r0, [pc, #52]	; (8007280 <HAL_I2C_MspInit+0xd0>)
 800724a:	f7fc f86f 	bl	800332c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	4a09      	ldr	r2, [pc, #36]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 8007254:	4b08      	ldr	r3, [pc, #32]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 8007256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_I2C_MspInit+0xc8>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800726a:	bf00      	nop
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	40005c00 	.word	0x40005c00
 8007278:	40023800 	.word	0x40023800
 800727c:	40020800 	.word	0x40020800
 8007280:	40020000 	.word	0x40020000

08007284 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08e      	sub	sp, #56	; 0x38
 8007288:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	2234      	movs	r2, #52	; 0x34
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f002 fd1d 	bl	8009cd0 <memset>

  hltdc.Instance = LTDC;
 8007296:	4b39      	ldr	r3, [pc, #228]	; (800737c <MX_LTDC_Init+0xf8>)
 8007298:	4a39      	ldr	r2, [pc, #228]	; (8007380 <MX_LTDC_Init+0xfc>)
 800729a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800729c:	4b37      	ldr	r3, [pc, #220]	; (800737c <MX_LTDC_Init+0xf8>)
 800729e:	2200      	movs	r2, #0
 80072a0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <MX_LTDC_Init+0xf8>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80072a8:	4b34      	ldr	r3, [pc, #208]	; (800737c <MX_LTDC_Init+0xf8>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80072ae:	4b33      	ldr	r3, [pc, #204]	; (800737c <MX_LTDC_Init+0xf8>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80072b4:	4b31      	ldr	r3, [pc, #196]	; (800737c <MX_LTDC_Init+0xf8>)
 80072b6:	2209      	movs	r2, #9
 80072b8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80072ba:	4b30      	ldr	r3, [pc, #192]	; (800737c <MX_LTDC_Init+0xf8>)
 80072bc:	2201      	movs	r2, #1
 80072be:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80072c0:	4b2e      	ldr	r3, [pc, #184]	; (800737c <MX_LTDC_Init+0xf8>)
 80072c2:	221d      	movs	r2, #29
 80072c4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80072c6:	4b2d      	ldr	r3, [pc, #180]	; (800737c <MX_LTDC_Init+0xf8>)
 80072c8:	2203      	movs	r2, #3
 80072ca:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <MX_LTDC_Init+0xf8>)
 80072ce:	f240 120d 	movw	r2, #269	; 0x10d
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80072d4:	4b29      	ldr	r3, [pc, #164]	; (800737c <MX_LTDC_Init+0xf8>)
 80072d6:	f240 1243 	movw	r2, #323	; 0x143
 80072da:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80072dc:	4b27      	ldr	r3, [pc, #156]	; (800737c <MX_LTDC_Init+0xf8>)
 80072de:	f240 1217 	movw	r2, #279	; 0x117
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80072e4:	4b25      	ldr	r3, [pc, #148]	; (800737c <MX_LTDC_Init+0xf8>)
 80072e6:	f240 1247 	movw	r2, #327	; 0x147
 80072ea:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80072ec:	4b23      	ldr	r3, [pc, #140]	; (800737c <MX_LTDC_Init+0xf8>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80072f4:	4b21      	ldr	r3, [pc, #132]	; (800737c <MX_LTDC_Init+0xf8>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80072fc:	4b1f      	ldr	r3, [pc, #124]	; (800737c <MX_LTDC_Init+0xf8>)
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007304:	481d      	ldr	r0, [pc, #116]	; (800737c <MX_LTDC_Init+0xf8>)
 8007306:	f7fc fc9d 	bl	8003c44 <HAL_LTDC_Init>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8007310:	f002 f8bc 	bl	800948c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007314:	2300      	movs	r3, #0
 8007316:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8007318:	23f0      	movs	r3, #240	; 0xf0
 800731a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8007320:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007324:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007326:	2302      	movs	r3, #2
 8007328:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800732a:	23ff      	movs	r3, #255	; 0xff
 800732c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007332:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007336:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007338:	2307      	movs	r3, #7
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800733c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007340:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007342:	23f0      	movs	r3, #240	; 0xf0
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8007346:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800734a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	2200      	movs	r2, #0
 8007362:	4619      	mov	r1, r3
 8007364:	4805      	ldr	r0, [pc, #20]	; (800737c <MX_LTDC_Init+0xf8>)
 8007366:	f7fc fdff 	bl	8003f68 <HAL_LTDC_ConfigLayer>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007370:	f002 f88c 	bl	800948c <Error_Handler>
  }

}
 8007374:	bf00      	nop
 8007376:	3738      	adds	r7, #56	; 0x38
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000408 	.word	0x20000408
 8007380:	40016800 	.word	0x40016800

08007384 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08e      	sub	sp, #56	; 0x38
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800738c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a7b      	ldr	r2, [pc, #492]	; (8007590 <HAL_LTDC_MspInit+0x20c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	f040 80f0 	bne.w	8007588 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80073a8:	2300      	movs	r3, #0
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	4a79      	ldr	r2, [pc, #484]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073ae:	4b79      	ldr	r3, [pc, #484]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073b6:	6453      	str	r3, [r2, #68]	; 0x44
 80073b8:	4b76      	ldr	r3, [pc, #472]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073c0:	623b      	str	r3, [r7, #32]
 80073c2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	4a72      	ldr	r2, [pc, #456]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073ca:	4b72      	ldr	r3, [pc, #456]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ce:	f043 0320 	orr.w	r3, r3, #32
 80073d2:	6313      	str	r3, [r2, #48]	; 0x30
 80073d4:	4b6f      	ldr	r3, [pc, #444]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	61fb      	str	r3, [r7, #28]
 80073de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073e0:	2300      	movs	r3, #0
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	4a6b      	ldr	r2, [pc, #428]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073e6:	4b6b      	ldr	r3, [pc, #428]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	6313      	str	r3, [r2, #48]	; 0x30
 80073f0:	4b68      	ldr	r3, [pc, #416]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	4a64      	ldr	r2, [pc, #400]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007402:	4b64      	ldr	r3, [pc, #400]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f043 0302 	orr.w	r3, r3, #2
 800740a:	6313      	str	r3, [r2, #48]	; 0x30
 800740c:	4b61      	ldr	r3, [pc, #388]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007418:	2300      	movs	r3, #0
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	4a5d      	ldr	r2, [pc, #372]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 800741e:	4b5d      	ldr	r3, [pc, #372]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007426:	6313      	str	r3, [r2, #48]	; 0x30
 8007428:	4b5a      	ldr	r3, [pc, #360]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	4a56      	ldr	r2, [pc, #344]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 800743a:	4b56      	ldr	r3, [pc, #344]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	f043 0304 	orr.w	r3, r3, #4
 8007442:	6313      	str	r3, [r2, #48]	; 0x30
 8007444:	4b53      	ldr	r3, [pc, #332]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007450:	2300      	movs	r3, #0
 8007452:	60bb      	str	r3, [r7, #8]
 8007454:	4a4f      	ldr	r2, [pc, #316]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007456:	4b4f      	ldr	r3, [pc, #316]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f043 0308 	orr.w	r3, r3, #8
 800745e:	6313      	str	r3, [r2, #48]	; 0x30
 8007460:	4b4c      	ldr	r3, [pc, #304]	; (8007594 <HAL_LTDC_MspInit+0x210>)
 8007462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800746c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007472:	2302      	movs	r3, #2
 8007474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007476:	2300      	movs	r3, #0
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800747a:	2300      	movs	r3, #0
 800747c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800747e:	230e      	movs	r3, #14
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007486:	4619      	mov	r1, r3
 8007488:	4843      	ldr	r0, [pc, #268]	; (8007598 <HAL_LTDC_MspInit+0x214>)
 800748a:	f7fb ff4f 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 800748e:	f641 0358 	movw	r3, #6232	; 0x1858
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007494:	2302      	movs	r3, #2
 8007496:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007498:	2300      	movs	r3, #0
 800749a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800749c:	2300      	movs	r3, #0
 800749e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074a0:	230e      	movs	r3, #14
 80074a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a8:	4619      	mov	r1, r3
 80074aa:	483c      	ldr	r0, [pc, #240]	; (800759c <HAL_LTDC_MspInit+0x218>)
 80074ac:	f7fb ff3e 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80074b0:	2303      	movs	r3, #3
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074b4:	2302      	movs	r3, #2
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074bc:	2300      	movs	r3, #0
 80074be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80074c0:	2309      	movs	r3, #9
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c8:	4619      	mov	r1, r3
 80074ca:	4835      	ldr	r0, [pc, #212]	; (80075a0 <HAL_LTDC_MspInit+0x21c>)
 80074cc:	f7fb ff2e 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80074d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d6:	2302      	movs	r3, #2
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074de:	2300      	movs	r3, #0
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074e2:	230e      	movs	r3, #14
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ea:	4619      	mov	r1, r3
 80074ec:	482c      	ldr	r0, [pc, #176]	; (80075a0 <HAL_LTDC_MspInit+0x21c>)
 80074ee:	f7fb ff1d 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80074f2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f8:	2302      	movs	r3, #2
 80074fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007500:	2300      	movs	r3, #0
 8007502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007504:	230e      	movs	r3, #14
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750c:	4619      	mov	r1, r3
 800750e:	4825      	ldr	r0, [pc, #148]	; (80075a4 <HAL_LTDC_MspInit+0x220>)
 8007510:	f7fb ff0c 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|GPIO_PIN_10;
 8007514:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751a:	2302      	movs	r3, #2
 800751c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751e:	2300      	movs	r3, #0
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007522:	2300      	movs	r3, #0
 8007524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007526:	230e      	movs	r3, #14
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800752a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752e:	4619      	mov	r1, r3
 8007530:	481d      	ldr	r0, [pc, #116]	; (80075a8 <HAL_LTDC_MspInit+0x224>)
 8007532:	f7fb fefb 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|GPIO_PIN_6;
 8007536:	2348      	movs	r3, #72	; 0x48
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753a:	2302      	movs	r3, #2
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753e:	2300      	movs	r3, #0
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007542:	2300      	movs	r3, #0
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007546:	230e      	movs	r3, #14
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800754a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800754e:	4619      	mov	r1, r3
 8007550:	4816      	ldr	r0, [pc, #88]	; (80075ac <HAL_LTDC_MspInit+0x228>)
 8007552:	f7fb feeb 	bl	800332c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007556:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755c:	2302      	movs	r3, #2
 800755e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007560:	2300      	movs	r3, #0
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007564:	2300      	movs	r3, #0
 8007566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007568:	2309      	movs	r3, #9
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800756c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007570:	4619      	mov	r1, r3
 8007572:	480c      	ldr	r0, [pc, #48]	; (80075a4 <HAL_LTDC_MspInit+0x220>)
 8007574:	f7fb feda 	bl	800332c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8007578:	2200      	movs	r2, #0
 800757a:	2105      	movs	r1, #5
 800757c:	2058      	movs	r0, #88	; 0x58
 800757e:	f7fb f935 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007582:	2058      	movs	r0, #88	; 0x58
 8007584:	f7fb f94e 	bl	8002824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007588:	bf00      	nop
 800758a:	3738      	adds	r7, #56	; 0x38
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40016800 	.word	0x40016800
 8007594:	40023800 	.word	0x40023800
 8007598:	40021400 	.word	0x40021400
 800759c:	40020000 	.word	0x40020000
 80075a0:	40020400 	.word	0x40020400
 80075a4:	40021800 	.word	0x40021800
 80075a8:	40020800 	.word	0x40020800
 80075ac:	40020c00 	.word	0x40020c00

080075b0 <spi5_sendrecv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi5_sendrecv(uint8_t byte) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af02      	add	r7, sp, #8
 80075b6:	4603      	mov	r3, r0
 80075b8:	71fb      	strb	r3, [r7, #7]
	uint8_t answer;

	HAL_SPI_TransmitReceive(&hspi5, &byte, &answer, 1, HAL_MAX_DELAY);
 80075ba:	f107 020f 	add.w	r2, r7, #15
 80075be:	1df9      	adds	r1, r7, #7
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	2301      	movs	r3, #1
 80075c8:	4803      	ldr	r0, [pc, #12]	; (80075d8 <spi5_sendrecv+0x28>)
 80075ca:	f7fe f86f 	bl	80056ac <HAL_SPI_TransmitReceive>

	return answer;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200004dc 	.word	0x200004dc

080075dc <SPI5_read>:

uint8_t SPI5_read(uint8_t address) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	71fb      	strb	r3, [r7, #7]
	uint8_t dane;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80075e6:	2200      	movs	r2, #0
 80075e8:	2102      	movs	r1, #2
 80075ea:	480c      	ldr	r0, [pc, #48]	; (800761c <SPI5_read+0x40>)
 80075ec:	f7fc f96c 	bl	80038c8 <HAL_GPIO_WritePin>
	spi5_sendrecv(address | 0x80);
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7ff ffd9 	bl	80075b0 <spi5_sendrecv>
	dane = spi5_sendrecv(0xFF);
 80075fe:	20ff      	movs	r0, #255	; 0xff
 8007600:	f7ff ffd6 	bl	80075b0 <spi5_sendrecv>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8007608:	2201      	movs	r2, #1
 800760a:	2102      	movs	r1, #2
 800760c:	4803      	ldr	r0, [pc, #12]	; (800761c <SPI5_read+0x40>)
 800760e:	f7fc f95b 	bl	80038c8 <HAL_GPIO_WritePin>

	return dane;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40020800 	.word	0x40020800

08007620 <SPI5_write>:

void SPI5_write(uint8_t address, uint8_t data) {
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	460a      	mov	r2, r1
 800762a:	71fb      	strb	r3, [r7, #7]
 800762c:	4613      	mov	r3, r2
 800762e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8007630:	2200      	movs	r2, #0
 8007632:	2102      	movs	r1, #2
 8007634:	480a      	ldr	r0, [pc, #40]	; (8007660 <SPI5_write+0x40>)
 8007636:	f7fc f947 	bl	80038c8 <HAL_GPIO_WritePin>
	spi5_sendrecv(address);
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff ffb7 	bl	80075b0 <spi5_sendrecv>
	data = spi5_sendrecv(data);
 8007642:	79bb      	ldrb	r3, [r7, #6]
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff ffb3 	bl	80075b0 <spi5_sendrecv>
 800764a:	4603      	mov	r3, r0
 800764c:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800764e:	2201      	movs	r2, #1
 8007650:	2102      	movs	r1, #2
 8007652:	4803      	ldr	r0, [pc, #12]	; (8007660 <SPI5_write+0x40>)
 8007654:	f7fc f938 	bl	80038c8 <HAL_GPIO_WritePin>

}
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40020800 	.word	0x40020800

08007664 <OurL3GD20_Init>:

uint8_t OurL3GD20_Init() {
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
	if (SPI5_read(0x0F) != 0b11010100) {
 8007668:	200f      	movs	r0, #15
 800766a:	f7ff ffb7 	bl	80075dc <SPI5_read>
 800766e:	4603      	mov	r3, r0
 8007670:	2bd4      	cmp	r3, #212	; 0xd4
 8007672:	d001      	beq.n	8007678 <OurL3GD20_Init+0x14>

		return 1;
 8007674:	2301      	movs	r3, #1
 8007676:	e010      	b.n	800769a <OurL3GD20_Init+0x36>
	}

	//Enable L3GD20 Power bit
	SPI5_write(0x20, 0xFF);
 8007678:	21ff      	movs	r1, #255	; 0xff
 800767a:	2020      	movs	r0, #32
 800767c:	f7ff ffd0 	bl	8007620 <SPI5_write>

	//Set L3GD20 scale

	SPI5_write(0x23, 0x00);
 8007680:	2100      	movs	r1, #0
 8007682:	2023      	movs	r0, #35	; 0x23
 8007684:	f7ff ffcc 	bl	8007620 <SPI5_write>

	//Set high-pass filter settings
	SPI5_write(0x21, 0x00);
 8007688:	2100      	movs	r1, #0
 800768a:	2021      	movs	r0, #33	; 0x21
 800768c:	f7ff ffc8 	bl	8007620 <SPI5_write>

	//Enable high-pass filter
	SPI5_write(0x24, 0x10);
 8007690:	2110      	movs	r1, #16
 8007692:	2024      	movs	r0, #36	; 0x24
 8007694:	f7ff ffc4 	bl	8007620 <SPI5_write>

	//Everything OK
	return 0;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	bd80      	pop	{r7, pc}
	...

080076a0 <OurL3GD20_Read>:

void OurL3GD20_Read() {
 80076a0:	b590      	push	{r4, r7, lr}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
	float s;
	short temp1, temp2, temp3;

	// Read X axis

	temp1 = (SPI5_read(0x28) | SPI5_read(0x29) << 8);
 80076a6:	2028      	movs	r0, #40	; 0x28
 80076a8:	f7ff ff98 	bl	80075dc <SPI5_read>
 80076ac:	4603      	mov	r3, r0
 80076ae:	b21c      	sxth	r4, r3
 80076b0:	2029      	movs	r0, #41	; 0x29
 80076b2:	f7ff ff93 	bl	80075dc <SPI5_read>
 80076b6:	4603      	mov	r3, r0
 80076b8:	021b      	lsls	r3, r3, #8
 80076ba:	b21b      	sxth	r3, r3
 80076bc:	4323      	orrs	r3, r4
 80076be:	82fb      	strh	r3, [r7, #22]
	temp2 = (SPI5_read(0x2A) | SPI5_read(0x2B) << 8);
 80076c0:	202a      	movs	r0, #42	; 0x2a
 80076c2:	f7ff ff8b 	bl	80075dc <SPI5_read>
 80076c6:	4603      	mov	r3, r0
 80076c8:	b21c      	sxth	r4, r3
 80076ca:	202b      	movs	r0, #43	; 0x2b
 80076cc:	f7ff ff86 	bl	80075dc <SPI5_read>
 80076d0:	4603      	mov	r3, r0
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	b21b      	sxth	r3, r3
 80076d6:	4323      	orrs	r3, r4
 80076d8:	82bb      	strh	r3, [r7, #20]
	temp3 = (SPI5_read(0x2C) | SPI5_read(0x2D) << 8);
 80076da:	202c      	movs	r0, #44	; 0x2c
 80076dc:	f7ff ff7e 	bl	80075dc <SPI5_read>
 80076e0:	4603      	mov	r3, r0
 80076e2:	b21c      	sxth	r4, r3
 80076e4:	202d      	movs	r0, #45	; 0x2d
 80076e6:	f7ff ff79 	bl	80075dc <SPI5_read>
 80076ea:	4603      	mov	r3, r0
 80076ec:	021b      	lsls	r3, r3, #8
 80076ee:	b21b      	sxth	r3, r3
 80076f0:	4323      	orrs	r3, r4
 80076f2:	827b      	strh	r3, [r7, #18]

	// Sensitivity at 250 range = 8.75 mdps/digit
	s = 8.75 * 0.001;
 80076f4:	4b1d      	ldr	r3, [pc, #116]	; (800776c <OurL3GD20_Read+0xcc>)
 80076f6:	60fb      	str	r3, [r7, #12]

	DataNow.OsX = (short) ((float) temp1 * s);
 80076f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80076fc:	ee07 3a90 	vmov	s15, r3
 8007700:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007704:	edd7 7a03 	vldr	s15, [r7, #12]
 8007708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007710:	edc7 7a01 	vstr	s15, [r7, #4]
 8007714:	88bb      	ldrh	r3, [r7, #4]
 8007716:	b21a      	sxth	r2, r3
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <OurL3GD20_Read+0xd0>)
 800771a:	801a      	strh	r2, [r3, #0]
	DataNow.OsY = (short) ((float) temp2 * s);
 800771c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007728:	edd7 7a03 	vldr	s15, [r7, #12]
 800772c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007734:	edc7 7a01 	vstr	s15, [r7, #4]
 8007738:	88bb      	ldrh	r3, [r7, #4]
 800773a:	b21a      	sxth	r2, r3
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <OurL3GD20_Read+0xd0>)
 800773e:	805a      	strh	r2, [r3, #2]
	DataNow.OsZ = (short) ((float) temp3 * s);
 8007740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800774c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007758:	edc7 7a01 	vstr	s15, [r7, #4]
 800775c:	88bb      	ldrh	r3, [r7, #4]
 800775e:	b21a      	sxth	r2, r3
 8007760:	4b03      	ldr	r3, [pc, #12]	; (8007770 <OurL3GD20_Read+0xd0>)
 8007762:	809a      	strh	r2, [r3, #4]

}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}
 800776c:	3c0f5c29 	.word	0x3c0f5c29
 8007770:	20000580 	.word	0x20000580

08007774 <send_char>:

void send_char(char c) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1000);
 800777e:	1df9      	adds	r1, r7, #7
 8007780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007784:	2201      	movs	r2, #1
 8007786:	4803      	ldr	r0, [pc, #12]	; (8007794 <send_char+0x20>)
 8007788:	f7fe fe12 	bl	80063b0 <HAL_UART_Transmit>
}
 800778c:	bf00      	nop
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	200006ec 	.word	0x200006ec

08007798 <__io_putchar>:

int __io_putchar(int ch) {
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
	send_char(ch);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff ffe5 	bl	8007774 <send_char>
	return ch;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3708      	adds	r7, #8
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80077ba:	f7fa fefd 	bl	80025b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80077be:	f000 fa87 	bl	8007cd0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80077c2:	f7ff fb99 	bl	8006ef8 <MX_GPIO_Init>
	MX_CRC_Init();
 80077c6:	f7ff fa21 	bl	8006c0c <MX_CRC_Init>
	MX_DMA2D_Init();
 80077ca:	f7ff fa55 	bl	8006c78 <MX_DMA2D_Init>
	MX_FMC_Init();
 80077ce:	f7ff faad 	bl	8006d2c <MX_FMC_Init>
	MX_LTDC_Init();
 80077d2:	f7ff fd57 	bl	8007284 <MX_LTDC_Init>
	MX_SPI5_Init();
 80077d6:	f001 fe61 	bl	800949c <MX_SPI5_Init>
	MX_TIM1_Init();
 80077da:	f002 f8af 	bl	800993c <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80077de:	f002 f9b1 	bl	8009b44 <MX_USART1_UART_Init>
	MX_I2C3_Init();
 80077e2:	f7ff fca5 	bl	8007130 <MX_I2C3_Init>
	MX_TIM10_Init();
 80077e6:	f002 f8f9 	bl	80099dc <MX_TIM10_Init>
	MX_TIM11_Init();
 80077ea:	f002 f91b 	bl	8009a24 <MX_TIM11_Init>
	MX_GFXSIMULATOR_Init();
 80077ee:	f7ff fb7b 	bl	8006ee8 <MX_GFXSIMULATOR_Init>
	/* USER CODE BEGIN 2 */

	__HAL_SPI_ENABLE(&hspi5);
 80077f2:	4bb6      	ldr	r3, [pc, #728]	; (8007acc <main+0x318>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4ab5      	ldr	r2, [pc, #724]	; (8007acc <main+0x318>)
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007800:	601a      	str	r2, [r3, #0]

	//Do testu*************
	LicznikPomocniczy = 0;
 8007802:	4bb3      	ldr	r3, [pc, #716]	; (8007ad0 <main+0x31c>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
	LicznikPomocniczyRomberg = 0;
 8007808:	4bb2      	ldr	r3, [pc, #712]	; (8007ad4 <main+0x320>)
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
	//*********************

	//Poczatkowy stan gry**
	StanGry = Menu;
 800780e:	4bb2      	ldr	r3, [pc, #712]	; (8007ad8 <main+0x324>)
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
	StanMenu = NowaGra;
 8007814:	4bb1      	ldr	r3, [pc, #708]	; (8007adc <main+0x328>)
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
	ZmienionoStanMenu = 1;
 800781a:	4bb1      	ldr	r3, [pc, #708]	; (8007ae0 <main+0x32c>)
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
	ZmienionoStanPoziomow = 1;
 8007820:	4bb0      	ldr	r3, [pc, #704]	; (8007ae4 <main+0x330>)
 8007822:	2201      	movs	r2, #1
 8007824:	701a      	strb	r2, [r3, #0]
	WybranyPoziom = 0;
 8007826:	4bb0      	ldr	r3, [pc, #704]	; (8007ae8 <main+0x334>)
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
	RozpoczetoNowaGre = 0;
 800782c:	4baf      	ldr	r3, [pc, #700]	; (8007aec <main+0x338>)
 800782e:	2200      	movs	r2, #0
 8007830:	701a      	strb	r2, [r3, #0]
	//*********************

	Animacja = 0;
 8007832:	4baf      	ldr	r3, [pc, #700]	; (8007af0 <main+0x33c>)
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
	Direction = 1;
 8007838:	4bae      	ldr	r3, [pc, #696]	; (8007af4 <main+0x340>)
 800783a:	2201      	movs	r2, #1
 800783c:	701a      	strb	r2, [r3, #0]
	X = 120;
 800783e:	4bae      	ldr	r3, [pc, #696]	; (8007af8 <main+0x344>)
 8007840:	2278      	movs	r2, #120	; 0x78
 8007842:	801a      	strh	r2, [r3, #0]
	Y = 170;
 8007844:	4bad      	ldr	r3, [pc, #692]	; (8007afc <main+0x348>)
 8007846:	22aa      	movs	r2, #170	; 0xaa
 8007848:	801a      	strh	r2, [r3, #0]
	dT = 0.001;
 800784a:	4bad      	ldr	r3, [pc, #692]	; (8007b00 <main+0x34c>)
 800784c:	4aad      	ldr	r2, [pc, #692]	; (8007b04 <main+0x350>)
 800784e:	601a      	str	r2, [r3, #0]
	fMovedX = 0;
 8007850:	4bad      	ldr	r3, [pc, #692]	; (8007b08 <main+0x354>)
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
	fMovedY = 0;
 8007856:	4bad      	ldr	r3, [pc, #692]	; (8007b0c <main+0x358>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
	ResetTimeX = 0;
 800785c:	4bac      	ldr	r3, [pc, #688]	; (8007b10 <main+0x35c>)
 800785e:	2200      	movs	r2, #0
 8007860:	801a      	strh	r2, [r3, #0]
	ResetTimeY = 0;
 8007862:	4bac      	ldr	r3, [pc, #688]	; (8007b14 <main+0x360>)
 8007864:	2200      	movs	r2, #0
 8007866:	801a      	strh	r2, [r3, #0]

	BSP_LCD_Init();
 8007868:	f7f9 fde6 	bl	8001438 <BSP_LCD_Init>
	//BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER+1024*1024*4);
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 800786c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8007870:	2000      	movs	r0, #0
 8007872:	f7f9 fe63 	bl	800153c <BSP_LCD_LayerDefaultInit>

	BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8007876:	2000      	movs	r0, #0
 8007878:	f7f9 fec4 	bl	8001604 <BSP_LCD_SelectLayer>

	BSP_LCD_DisplayOn();
 800787c:	f7fa fa90 	bl	8001da0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8007880:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007884:	f7f9 ff00 	bl	8001688 <BSP_LCD_Clear>

	//BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
	//BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello");

//	HAL_Delay(2000);
	BSP_LCD_ClearStringLine(5);
 8007888:	2005      	movs	r0, #5
 800788a:	f7f9 ff25 	bl	80016d8 <BSP_LCD_ClearStringLine>

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800788e:	f04f 30ff 	mov.w	r0, #4294967295
 8007892:	f7f9 fef9 	bl	8001688 <BSP_LCD_Clear>
//	BSP_LCD_FillRect(0, 305, 240, 15);
//	BSP_LCD_FillRect(0, 15, 15, 290);
//	BSP_LCD_FillRect(225, 15, 15, 290);
	//*********************************

	OurL3GD20_Init();
 8007896:	f7ff fee5 	bl	8007664 <OurL3GD20_Init>
	czasZmiany=0;
 800789a:	4b9f      	ldr	r3, [pc, #636]	; (8007b18 <main+0x364>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 80078a0:	489e      	ldr	r0, [pc, #632]	; (8007b1c <main+0x368>)
 80078a2:	f7fe f999 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80078a6:	489e      	ldr	r0, [pc, #632]	; (8007b20 <main+0x36c>)
 80078a8:	f7fe f996 	bl	8005bd8 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

if(HAL_GetTick()-czasZmiany > 2000){
 80078ac:	f7fa feba 	bl	8002624 <HAL_GetTick>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b99      	ldr	r3, [pc, #612]	; (8007b18 <main+0x364>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80078bc:	d935      	bls.n	800792a <main+0x176>
		if (StanGry == Menu) {
 80078be:	4b86      	ldr	r3, [pc, #536]	; (8007ad8 <main+0x324>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d113      	bne.n	80078f0 <main+0x13c>

				StanMenu = (StanMenu + 1) % 3;
 80078c8:	4b84      	ldr	r3, [pc, #528]	; (8007adc <main+0x328>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	4b94      	ldr	r3, [pc, #592]	; (8007b24 <main+0x370>)
 80078d2:	fb83 3102 	smull	r3, r1, r3, r2
 80078d6:	17d3      	asrs	r3, r2, #31
 80078d8:	1ac9      	subs	r1, r1, r3
 80078da:	460b      	mov	r3, r1
 80078dc:	005b      	lsls	r3, r3, #1
 80078de:	440b      	add	r3, r1
 80078e0:	1ad1      	subs	r1, r2, r3
 80078e2:	b2ca      	uxtb	r2, r1
 80078e4:	4b7d      	ldr	r3, [pc, #500]	; (8007adc <main+0x328>)
 80078e6:	701a      	strb	r2, [r3, #0]
				ZmienionoStanMenu = 1;
 80078e8:	4b7d      	ldr	r3, [pc, #500]	; (8007ae0 <main+0x32c>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	e017      	b.n	8007920 <main+0x16c>

			} else if (StanGry == WyborPoziomu) {
 80078f0:	4b79      	ldr	r3, [pc, #484]	; (8007ad8 <main+0x324>)
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d112      	bne.n	8007920 <main+0x16c>
				WybranyPoziom = (WybranyPoziom + 1) % 3;
 80078fa:	4b7b      	ldr	r3, [pc, #492]	; (8007ae8 <main+0x334>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	4b88      	ldr	r3, [pc, #544]	; (8007b24 <main+0x370>)
 8007904:	fb83 3102 	smull	r3, r1, r3, r2
 8007908:	17d3      	asrs	r3, r2, #31
 800790a:	1ac9      	subs	r1, r1, r3
 800790c:	460b      	mov	r3, r1
 800790e:	005b      	lsls	r3, r3, #1
 8007910:	440b      	add	r3, r1
 8007912:	1ad1      	subs	r1, r2, r3
 8007914:	b2ca      	uxtb	r2, r1
 8007916:	4b74      	ldr	r3, [pc, #464]	; (8007ae8 <main+0x334>)
 8007918:	701a      	strb	r2, [r3, #0]
				ZmienionoStanPoziomow = 1;
 800791a:	4b72      	ldr	r3, [pc, #456]	; (8007ae4 <main+0x330>)
 800791c:	2201      	movs	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
			}

		czasZmiany = HAL_GetTick();
 8007920:	f7fa fe80 	bl	8002624 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	4b7c      	ldr	r3, [pc, #496]	; (8007b18 <main+0x364>)
 8007928:	601a      	str	r2, [r3, #0]
}
		//Sprawdzanie stanu przycisku*****************
		OdczytanyStanPrzycisku = HAL_GPIO_ReadPin(BB_GPIO_Port, BB_Pin);
 800792a:	2101      	movs	r1, #1
 800792c:	487e      	ldr	r0, [pc, #504]	; (8007b28 <main+0x374>)
 800792e:	f7fb ffb3 	bl	8003898 <HAL_GPIO_ReadPin>
 8007932:	4603      	mov	r3, r0
 8007934:	71fb      	strb	r3, [r7, #7]

		if (OdczytanyStanPrzycisku != PoprzedniStanPrzycisku) {
 8007936:	4b7d      	ldr	r3, [pc, #500]	; (8007b2c <main+0x378>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	79fa      	ldrb	r2, [r7, #7]
 800793c:	429a      	cmp	r2, r3
 800793e:	d004      	beq.n	800794a <main+0x196>
			PoprzedniCzasPrzycisku = HAL_GetTick();
 8007940:	f7fa fe70 	bl	8002624 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	4b7a      	ldr	r3, [pc, #488]	; (8007b30 <main+0x37c>)
 8007948:	601a      	str	r2, [r3, #0]
		}

		if ((HAL_GetTick() - PoprzedniCzasPrzycisku) > 10) {
 800794a:	f7fa fe6b 	bl	8002624 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	4b77      	ldr	r3, [pc, #476]	; (8007b30 <main+0x37c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b0a      	cmp	r3, #10
 8007958:	d946      	bls.n	80079e8 <main+0x234>
			if (OdczytanyStanPrzycisku != StanPrzycisku) {
 800795a:	4b76      	ldr	r3, [pc, #472]	; (8007b34 <main+0x380>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	79fa      	ldrb	r2, [r7, #7]
 8007960:	429a      	cmp	r2, r3
 8007962:	d041      	beq.n	80079e8 <main+0x234>
				StanPrzycisku = OdczytanyStanPrzycisku;
 8007964:	4a73      	ldr	r2, [pc, #460]	; (8007b34 <main+0x380>)
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	7013      	strb	r3, [r2, #0]
//					}
				//}

				//Przetestowac !!!!!!!!!!!!!!!!!
				//Jezeli przytrzymamy przycisk dluzej nastapi przejscie miedzy gra, a menu
				if (StanPrzycisku == GPIO_PIN_SET) {
 800796a:	4b72      	ldr	r3, [pc, #456]	; (8007b34 <main+0x380>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d13a      	bne.n	80079e8 <main+0x234>

					if (StanGry == Menu && StanMenu == NowaGra) {
 8007972:	4b59      	ldr	r3, [pc, #356]	; (8007ad8 <main+0x324>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <main+0x1e0>
 800797c:	4b57      	ldr	r3, [pc, #348]	; (8007adc <main+0x328>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d106      	bne.n	8007994 <main+0x1e0>
						StanGry = Gra;
 8007986:	4b54      	ldr	r3, [pc, #336]	; (8007ad8 <main+0x324>)
 8007988:	2201      	movs	r2, #1
 800798a:	701a      	strb	r2, [r3, #0]
						RozpoczetoNowaGre = 1;
 800798c:	4b57      	ldr	r3, [pc, #348]	; (8007aec <main+0x338>)
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e024      	b.n	80079de <main+0x22a>

					} else if (StanGry == Menu && StanMenu == ZmienPoziom) {
 8007994:	4b50      	ldr	r3, [pc, #320]	; (8007ad8 <main+0x324>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10e      	bne.n	80079bc <main+0x208>
 800799e:	4b4f      	ldr	r3, [pc, #316]	; (8007adc <main+0x328>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d109      	bne.n	80079bc <main+0x208>
						StanGry = WyborPoziomu;
 80079a8:	4b4b      	ldr	r3, [pc, #300]	; (8007ad8 <main+0x324>)
 80079aa:	2202      	movs	r2, #2
 80079ac:	701a      	strb	r2, [r3, #0]
						WybranyPoziom = 0;
 80079ae:	4b4e      	ldr	r3, [pc, #312]	; (8007ae8 <main+0x334>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
						ZmienionoStanPoziomow = 1;
 80079b4:	4b4b      	ldr	r3, [pc, #300]	; (8007ae4 <main+0x330>)
 80079b6:	2201      	movs	r2, #1
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	e010      	b.n	80079de <main+0x22a>


					} else if (StanGry == WyborPoziomu) {
 80079bc:	4b46      	ldr	r3, [pc, #280]	; (8007ad8 <main+0x324>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d103      	bne.n	80079ce <main+0x21a>
						StanGry = Menu;
 80079c6:	4b44      	ldr	r3, [pc, #272]	; (8007ad8 <main+0x324>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e007      	b.n	80079de <main+0x22a>


					} else if (StanGry == Gra) {
 80079ce:	4b42      	ldr	r3, [pc, #264]	; (8007ad8 <main+0x324>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d102      	bne.n	80079de <main+0x22a>
						StanGry = Menu;
 80079d8:	4b3f      	ldr	r3, [pc, #252]	; (8007ad8 <main+0x324>)
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
					}

					PoprzedniCzasPrzycisku = HAL_GetTick();
 80079de:	f7fa fe21 	bl	8002624 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b52      	ldr	r3, [pc, #328]	; (8007b30 <main+0x37c>)
 80079e6:	601a      	str	r2, [r3, #0]

				}
			}
		}

		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;
 80079e8:	4a50      	ldr	r2, [pc, #320]	; (8007b2c <main+0x378>)
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	7013      	strb	r3, [r2, #0]

		//Koniec sprawdzania stanu przycisku**********

		//Petla gry***********************************

		if (StanGry == Menu) {
 80079ee:	4b3a      	ldr	r3, [pc, #232]	; (8007ad8 <main+0x324>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d124      	bne.n	8007a42 <main+0x28e>
			if (ZmienionoStanMenu == 1) {
 80079f8:	4b39      	ldr	r3, [pc, #228]	; (8007ae0 <main+0x32c>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	f040 8107 	bne.w	8007c12 <main+0x45e>
				switch (StanMenu) {
 8007a04:	4b35      	ldr	r3, [pc, #212]	; (8007adc <main+0x328>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d009      	beq.n	8007a22 <main+0x26e>
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d00d      	beq.n	8007a2e <main+0x27a>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d111      	bne.n	8007a3a <main+0x286>
				case NowaGra:
					BSP_LCD_DrawBitmap(0, 0,
 8007a16:	4a48      	ldr	r2, [pc, #288]	; (8007b38 <main+0x384>)
 8007a18:	2100      	movs	r1, #0
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f7fa f832 	bl	8001a84 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_nowagra);
					break;
 8007a20:	e00b      	b.n	8007a3a <main+0x286>

				case KontynuujGre:
					BSP_LCD_DrawBitmap(0, 0,
 8007a22:	4a46      	ldr	r2, [pc, #280]	; (8007b3c <main+0x388>)
 8007a24:	2100      	movs	r1, #0
 8007a26:	2000      	movs	r0, #0
 8007a28:	f7fa f82c 	bl	8001a84 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_kontynuuj);
					break;
 8007a2c:	e005      	b.n	8007a3a <main+0x286>

				case ZmienPoziom:

					BSP_LCD_DrawBitmap(0, 0,
 8007a2e:	4a44      	ldr	r2, [pc, #272]	; (8007b40 <main+0x38c>)
 8007a30:	2100      	movs	r1, #0
 8007a32:	2000      	movs	r0, #0
 8007a34:	f7fa f826 	bl	8001a84 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_poziomy);
					break;
 8007a38:	bf00      	nop
				}

				ZmienionoStanMenu = 0;
 8007a3a:	4b29      	ldr	r3, [pc, #164]	; (8007ae0 <main+0x32c>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
 8007a40:	e0e7      	b.n	8007c12 <main+0x45e>
			}

		} else if (StanGry == WyborPoziomu) {
 8007a42:	4b25      	ldr	r3, [pc, #148]	; (8007ad8 <main+0x324>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	f040 80e2 	bne.w	8007c12 <main+0x45e>
			if (ZmienionoStanPoziomow == 1) {
 8007a4e:	4b25      	ldr	r3, [pc, #148]	; (8007ae4 <main+0x330>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	f040 80dc 	bne.w	8007c12 <main+0x45e>
				switch (WybranyPoziom) {
 8007a5a:	4b23      	ldr	r3, [pc, #140]	; (8007ae8 <main+0x334>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d06f      	beq.n	8007b44 <main+0x390>
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	f000 809f 	beq.w	8007ba8 <main+0x3f4>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d000      	beq.n	8007a70 <main+0x2bc>
					BSP_LCD_FillRect(160, 20, 60, 60);
					BSP_LCD_DisplayChar(170, 30, 51);
					break;

				default:
					break;
 8007a6e:	e0cd      	b.n	8007c0c <main+0x458>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	f7f9 fe08 	bl	8001688 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007a78:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007a7c:	f7f9 fdd2 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8007a80:	233c      	movs	r3, #60	; 0x3c
 8007a82:	223c      	movs	r2, #60	; 0x3c
 8007a84:	2114      	movs	r1, #20
 8007a86:	2014      	movs	r0, #20
 8007a88:	f7fa f890 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8007a8c:	2231      	movs	r2, #49	; 0x31
 8007a8e:	211e      	movs	r1, #30
 8007a90:	201e      	movs	r0, #30
 8007a92:	f7f9 fe85 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007a96:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007a9a:	f7f9 fdc3 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8007a9e:	233c      	movs	r3, #60	; 0x3c
 8007aa0:	223c      	movs	r2, #60	; 0x3c
 8007aa2:	2114      	movs	r1, #20
 8007aa4:	205a      	movs	r0, #90	; 0x5a
 8007aa6:	f7fa f881 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8007aaa:	2232      	movs	r2, #50	; 0x32
 8007aac:	211e      	movs	r1, #30
 8007aae:	2064      	movs	r0, #100	; 0x64
 8007ab0:	f7f9 fe76 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8007ab4:	233c      	movs	r3, #60	; 0x3c
 8007ab6:	223c      	movs	r2, #60	; 0x3c
 8007ab8:	2114      	movs	r1, #20
 8007aba:	20a0      	movs	r0, #160	; 0xa0
 8007abc:	f7fa f876 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 8007ac0:	2233      	movs	r2, #51	; 0x33
 8007ac2:	211e      	movs	r1, #30
 8007ac4:	20aa      	movs	r0, #170	; 0xaa
 8007ac6:	f7f9 fe6b 	bl	80017a0 <BSP_LCD_DisplayChar>
					break;
 8007aca:	e09f      	b.n	8007c0c <main+0x458>
 8007acc:	200004dc 	.word	0x200004dc
 8007ad0:	200005b8 	.word	0x200005b8
 8007ad4:	20000540 	.word	0x20000540
 8007ad8:	200005c9 	.word	0x200005c9
 8007adc:	200005a9 	.word	0x200005a9
 8007ae0:	200005ca 	.word	0x200005ca
 8007ae4:	20000558 	.word	0x20000558
 8007ae8:	200005de 	.word	0x200005de
 8007aec:	200005c0 	.word	0x200005c0
 8007af0:	200005a8 	.word	0x200005a8
 8007af4:	200004b6 	.word	0x200004b6
 8007af8:	200005e8 	.word	0x200005e8
 8007afc:	20000578 	.word	0x20000578
 8007b00:	20000550 	.word	0x20000550
 8007b04:	3a83126f 	.word	0x3a83126f
 8007b08:	20000590 	.word	0x20000590
 8007b0c:	200005c8 	.word	0x200005c8
 8007b10:	20000586 	.word	0x20000586
 8007b14:	200005dc 	.word	0x200005dc
 8007b18:	200005b4 	.word	0x200005b4
 8007b1c:	2000062c 	.word	0x2000062c
 8007b20:	2000066c 	.word	0x2000066c
 8007b24:	55555556 	.word	0x55555556
 8007b28:	40020000 	.word	0x40020000
 8007b2c:	20000278 	.word	0x20000278
 8007b30:	20000534 	.word	0x20000534
 8007b34:	20000538 	.word	0x20000538
 8007b38:	08031e60 	.word	0x08031e60
 8007b3c:	0800c640 	.word	0x0800c640
 8007b40:	08057680 	.word	0x08057680
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007b44:	f04f 30ff 	mov.w	r0, #4294967295
 8007b48:	f7f9 fd9e 	bl	8001688 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007b4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007b50:	f7f9 fd68 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8007b54:	233c      	movs	r3, #60	; 0x3c
 8007b56:	223c      	movs	r2, #60	; 0x3c
 8007b58:	2114      	movs	r1, #20
 8007b5a:	2014      	movs	r0, #20
 8007b5c:	f7fa f826 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8007b60:	2231      	movs	r2, #49	; 0x31
 8007b62:	211e      	movs	r1, #30
 8007b64:	201e      	movs	r0, #30
 8007b66:	f7f9 fe1b 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007b6a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007b6e:	f7f9 fd59 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8007b72:	233c      	movs	r3, #60	; 0x3c
 8007b74:	223c      	movs	r2, #60	; 0x3c
 8007b76:	2114      	movs	r1, #20
 8007b78:	205a      	movs	r0, #90	; 0x5a
 8007b7a:	f7fa f817 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8007b7e:	2232      	movs	r2, #50	; 0x32
 8007b80:	211e      	movs	r1, #30
 8007b82:	2064      	movs	r0, #100	; 0x64
 8007b84:	f7f9 fe0c 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007b88:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007b8c:	f7f9 fd4a 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8007b90:	233c      	movs	r3, #60	; 0x3c
 8007b92:	223c      	movs	r2, #60	; 0x3c
 8007b94:	2114      	movs	r1, #20
 8007b96:	20a0      	movs	r0, #160	; 0xa0
 8007b98:	f7fa f808 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 8007b9c:	2233      	movs	r2, #51	; 0x33
 8007b9e:	211e      	movs	r1, #30
 8007ba0:	20aa      	movs	r0, #170	; 0xaa
 8007ba2:	f7f9 fdfd 	bl	80017a0 <BSP_LCD_DisplayChar>
					break;
 8007ba6:	e031      	b.n	8007c0c <main+0x458>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bac:	f7f9 fd6c 	bl	8001688 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007bb0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007bb4:	f7f9 fd36 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8007bb8:	233c      	movs	r3, #60	; 0x3c
 8007bba:	223c      	movs	r2, #60	; 0x3c
 8007bbc:	2114      	movs	r1, #20
 8007bbe:	2014      	movs	r0, #20
 8007bc0:	f7f9 fff4 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8007bc4:	2231      	movs	r2, #49	; 0x31
 8007bc6:	211e      	movs	r1, #30
 8007bc8:	201e      	movs	r0, #30
 8007bca:	f7f9 fde9 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007bce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007bd2:	f7f9 fd27 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8007bd6:	233c      	movs	r3, #60	; 0x3c
 8007bd8:	223c      	movs	r2, #60	; 0x3c
 8007bda:	2114      	movs	r1, #20
 8007bdc:	205a      	movs	r0, #90	; 0x5a
 8007bde:	f7f9 ffe5 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8007be2:	2232      	movs	r2, #50	; 0x32
 8007be4:	211e      	movs	r1, #30
 8007be6:	2064      	movs	r0, #100	; 0x64
 8007be8:	f7f9 fdda 	bl	80017a0 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007bec:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8007bf0:	f7f9 fd18 	bl	8001624 <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8007bf4:	233c      	movs	r3, #60	; 0x3c
 8007bf6:	223c      	movs	r2, #60	; 0x3c
 8007bf8:	2114      	movs	r1, #20
 8007bfa:	20a0      	movs	r0, #160	; 0xa0
 8007bfc:	f7f9 ffd6 	bl	8001bac <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 8007c00:	2233      	movs	r2, #51	; 0x33
 8007c02:	211e      	movs	r1, #30
 8007c04:	20aa      	movs	r0, #170	; 0xaa
 8007c06:	f7f9 fdcb 	bl	80017a0 <BSP_LCD_DisplayChar>
					break;
 8007c0a:	bf00      	nop
				}

				ZmienionoStanPoziomow = 0;
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <main+0x4d4>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
			}
		}

		//Koniec petli gry****************************

		printf("Angle X: %li\n\r", AngleX);
 8007c12:	4b1e      	ldr	r3, [pc, #120]	; (8007c8c <main+0x4d8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4619      	mov	r1, r3
 8007c18:	481d      	ldr	r0, [pc, #116]	; (8007c90 <main+0x4dc>)
 8007c1a:	f002 f861 	bl	8009ce0 <iprintf>
		printf("Angle Y: %li\n\r", AngleY);
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <main+0x4e0>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4619      	mov	r1, r3
 8007c24:	481c      	ldr	r0, [pc, #112]	; (8007c98 <main+0x4e4>)
 8007c26:	f002 f85b 	bl	8009ce0 <iprintf>
		printf("Angle Z: %li\n\r", AngleZ);
 8007c2a:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <main+0x4e8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4619      	mov	r1, r3
 8007c30:	481b      	ldr	r0, [pc, #108]	; (8007ca0 <main+0x4ec>)
 8007c32:	f002 f855 	bl	8009ce0 <iprintf>
		printf("CzasX: %d\n\r", ResetTimeX);
 8007c36:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <main+0x4f0>)
 8007c38:	881b      	ldrh	r3, [r3, #0]
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	481a      	ldr	r0, [pc, #104]	; (8007ca8 <main+0x4f4>)
 8007c40:	f002 f84e 	bl	8009ce0 <iprintf>
		printf("CzasY: %d\n\r", ResetTimeY);
 8007c44:	4b19      	ldr	r3, [pc, #100]	; (8007cac <main+0x4f8>)
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <main+0x4fc>)
 8007c4e:	f002 f847 	bl	8009ce0 <iprintf>
		printf("Predkosc X: %d\n\r", DataNow.OsX);
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <main+0x500>)
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	b21b      	sxth	r3, r3
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4817      	ldr	r0, [pc, #92]	; (8007cb8 <main+0x504>)
 8007c5c:	f002 f840 	bl	8009ce0 <iprintf>
		printf("Predkosc Y: %d\n\r", DataNow.OsY);
 8007c60:	4b14      	ldr	r3, [pc, #80]	; (8007cb4 <main+0x500>)
 8007c62:	885b      	ldrh	r3, [r3, #2]
 8007c64:	b21b      	sxth	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	4814      	ldr	r0, [pc, #80]	; (8007cbc <main+0x508>)
 8007c6a:	f002 f839 	bl	8009ce0 <iprintf>
		printf("CalkaTrap Y: %li\n\r", CalkaTrapY);

		printf("CalkaRicha X: %li\n\r", CalkaRichaX);
		printf("CalkaRicha Y: %li\n\r", CalkaRichaY);*/

		printf("CalkaRomb X: %li\n\r", CalkaRombX);
 8007c6e:	4b14      	ldr	r3, [pc, #80]	; (8007cc0 <main+0x50c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4813      	ldr	r0, [pc, #76]	; (8007cc4 <main+0x510>)
 8007c76:	f002 f833 	bl	8009ce0 <iprintf>
		printf("CalkaRomb Y: %li\n\r", CalkaRombY);
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <main+0x514>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4812      	ldr	r0, [pc, #72]	; (8007ccc <main+0x518>)
 8007c82:	f002 f82d 	bl	8009ce0 <iprintf>
if(HAL_GetTick()-czasZmiany > 2000){
 8007c86:	e611      	b.n	80078ac <main+0xf8>
 8007c88:	20000558 	.word	0x20000558
 8007c8c:	2000057c 	.word	0x2000057c
 8007c90:	0800aae8 	.word	0x0800aae8
 8007c94:	200005b0 	.word	0x200005b0
 8007c98:	0800aaf8 	.word	0x0800aaf8
 8007c9c:	200005ac 	.word	0x200005ac
 8007ca0:	0800ab08 	.word	0x0800ab08
 8007ca4:	20000586 	.word	0x20000586
 8007ca8:	0800ab18 	.word	0x0800ab18
 8007cac:	200005dc 	.word	0x200005dc
 8007cb0:	0800ab24 	.word	0x0800ab24
 8007cb4:	20000580 	.word	0x20000580
 8007cb8:	0800ab30 	.word	0x0800ab30
 8007cbc:	0800ab44 	.word	0x0800ab44
 8007cc0:	2000053c 	.word	0x2000053c
 8007cc4:	0800ab58 	.word	0x0800ab58
 8007cc8:	200005c4 	.word	0x200005c4
 8007ccc:	0800ab6c 	.word	0x0800ab6c

08007cd0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b0a0      	sub	sp, #128	; 0x80
 8007cd4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8007cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007cda:	2230      	movs	r2, #48	; 0x30
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 fff6 	bl	8009cd0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8007ce4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	609a      	str	r2, [r3, #8]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8007cf4:	f107 030c 	add.w	r3, r7, #12
 8007cf8:	2230      	movs	r2, #48	; 0x30
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 ffe7 	bl	8009cd0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8007d02:	2300      	movs	r3, #0
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	4a35      	ldr	r2, [pc, #212]	; (8007ddc <SystemClock_Config+0x10c>)
 8007d08:	4b34      	ldr	r3, [pc, #208]	; (8007ddc <SystemClock_Config+0x10c>)
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6413      	str	r3, [r2, #64]	; 0x40
 8007d12:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <SystemClock_Config+0x10c>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	60bb      	str	r3, [r7, #8]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d1e:	2300      	movs	r3, #0
 8007d20:	607b      	str	r3, [r7, #4]
 8007d22:	4a2f      	ldr	r2, [pc, #188]	; (8007de0 <SystemClock_Config+0x110>)
 8007d24:	4b2e      	ldr	r3, [pc, #184]	; (8007de0 <SystemClock_Config+0x110>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4b2c      	ldr	r3, [pc, #176]	; (8007de0 <SystemClock_Config+0x110>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d36:	607b      	str	r3, [r7, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d42:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d44:	2302      	movs	r3, #2
 8007d46:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8007d4e:	2304      	movs	r3, #4
 8007d50:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 180;
 8007d52:	23b4      	movs	r3, #180	; 0xb4
 8007d54:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007d56:	2302      	movs	r3, #2
 8007d58:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8007d5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fc fb5a 	bl	800441c <HAL_RCC_OscConfig>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <SystemClock_Config+0xa2>
		Error_Handler();
 8007d6e:	f001 fb8d 	bl	800948c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8007d72:	f7fc fb03 	bl	800437c <HAL_PWREx_EnableOverDrive>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <SystemClock_Config+0xb0>
		Error_Handler();
 8007d7c:	f001 fb86 	bl	800948c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007d80:	230f      	movs	r3, #15
 8007d82:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007d84:	2302      	movs	r3, #2
 8007d86:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d96:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8007d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007d9c:	2105      	movs	r1, #5
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fc fd7e 	bl	80048a0 <HAL_RCC_ClockConfig>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <SystemClock_Config+0xde>
		Error_Handler();
 8007daa:	f001 fb6f 	bl	800948c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007dae:	2308      	movs	r3, #8
 8007db0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007db2:	23c0      	movs	r3, #192	; 0xc0
 8007db4:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007db6:	2302      	movs	r3, #2
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8007dbe:	f107 030c 	add.w	r3, r7, #12
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fc ff8c 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <SystemClock_Config+0x102>
		Error_Handler();
 8007dce:	f001 fb5d 	bl	800948c <Error_Handler>
	}
}
 8007dd2:	bf00      	nop
 8007dd4:	3780      	adds	r7, #128	; 0x80
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	40007000 	.word	0x40007000

08007de4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007de4:	b5b0      	push	{r4, r5, r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10) //Przerwanie pochodzi od timera 10
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a7c      	ldr	r2, [pc, #496]	; (8007fe4 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	f040 8321 	bne.w	800843a <HAL_TIM_PeriodElapsedCallback+0x656>
	{
		//Zamienic na if(StanGry == Gra) przy uruchomieniu menu
		if (StanGry == Gra)
 8007df8:	4b7b      	ldr	r3, [pc, #492]	; (8007fe8 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	f040 831b 	bne.w	800843a <HAL_TIM_PeriodElapsedCallback+0x656>
		{
			if(WybranyPoziom == 0 && RozpoczetoNowaGre == 1)
 8007e04:	4b79      	ldr	r3, [pc, #484]	; (8007fec <HAL_TIM_PeriodElapsedCallback+0x208>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f040 8303 	bne.w	8008416 <HAL_TIM_PeriodElapsedCallback+0x632>
 8007e10:	4b77      	ldr	r3, [pc, #476]	; (8007ff0 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	f040 82fd 	bne.w	8008416 <HAL_TIM_PeriodElapsedCallback+0x632>
			{
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 8007e1c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007e20:	f7f9 fc32 	bl	8001688 <BSP_LCD_Clear>
				for(int i = 1; i < 1790; i++)
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e2e2      	b.n	80083f0 <HAL_TIM_PeriodElapsedCallback+0x60c>
					for(int j = -6; j < 7; j++)
 8007e2a:	f06f 0305 	mvn.w	r3, #5
 8007e2e:	60bb      	str	r3, [r7, #8]
 8007e30:	e2d7      	b.n	80083e2 <HAL_TIM_PeriodElapsedCallback+0x5fe>
					{
						if(i < 1788)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f240 62fb 	movw	r2, #1787	; 0x6fb
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	f300 82cf 	bgt.w	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>
						{
							if(Sciezka1[i].X != Sciezka1[i+1].X)
 8007e3e:	4a6d      	ldr	r2, [pc, #436]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	496a      	ldr	r1, [pc, #424]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e4c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d012      	beq.n	8007e7a <HAL_TIM_PeriodElapsedCallback+0x96>
								BSP_LCD_DrawPixel(Sciezka1[i].X, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007e54:	4a67      	ldr	r2, [pc, #412]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8007e5c:	4a65      	ldr	r2, [pc, #404]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	885a      	ldrh	r2, [r3, #2]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	4619      	mov	r1, r3
 8007e74:	f7fa f87a 	bl	8001f6c <BSP_LCD_DrawPixel>
 8007e78:	e011      	b.n	8007e9e <HAL_TIM_PeriodElapsedCallback+0xba>
							else
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y, LCD_COLOR_WHITE);
 8007e7a:	4a5e      	ldr	r2, [pc, #376]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	4413      	add	r3, r2
 8007e88:	b298      	uxth	r0, r3
 8007e8a:	4a5a      	ldr	r2, [pc, #360]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	885b      	ldrh	r3, [r3, #2]
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295
 8007e98:	4619      	mov	r1, r3
 8007e9a:	f7fa f867 	bl	8001f6c <BSP_LCD_DrawPixel>

							if(Sciezka1[i-1].X != Sciezka1[i].X && Sciezka1[i].X == Sciezka1[i+1].X)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	4a54      	ldr	r2, [pc, #336]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007ea4:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8007ea8:	4952      	ldr	r1, [pc, #328]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	f000 80a1 	beq.w	8007ff8 <HAL_TIM_PeriodElapsedCallback+0x214>
 8007eb6:	4a4f      	ldr	r2, [pc, #316]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	494c      	ldr	r1, [pc, #304]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007ec4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	f040 8095 	bne.w	8007ff8 <HAL_TIM_PeriodElapsedCallback+0x214>
							{
								BSP_LCD_DrawPixel(Sciezka1[i].X, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007ece:	4a49      	ldr	r2, [pc, #292]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 8007ed6:	4a47      	ldr	r2, [pc, #284]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	885a      	ldrh	r2, [r3, #2]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eec:	4619      	mov	r1, r3
 8007eee:	f7fa f83d 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+1, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007ef2:	4a40      	ldr	r2, [pc, #256]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007efa:	3301      	adds	r3, #1
 8007efc:	b298      	uxth	r0, r3
 8007efe:	4a3d      	ldr	r2, [pc, #244]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	4413      	add	r3, r2
 8007f06:	885a      	ldrh	r2, [r3, #2]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	f04f 32ff 	mov.w	r2, #4294967295
 8007f14:	4619      	mov	r1, r3
 8007f16:	f7fa f829 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+2, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007f1a:	4a36      	ldr	r2, [pc, #216]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007f22:	3302      	adds	r3, #2
 8007f24:	b298      	uxth	r0, r3
 8007f26:	4a33      	ldr	r2, [pc, #204]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	885a      	ldrh	r2, [r3, #2]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7fa f815 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+3, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007f42:	4a2c      	ldr	r2, [pc, #176]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007f4a:	3303      	adds	r3, #3
 8007f4c:	b298      	uxth	r0, r3
 8007f4e:	4a29      	ldr	r2, [pc, #164]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	885a      	ldrh	r2, [r3, #2]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	4413      	add	r3, r2
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	4619      	mov	r1, r3
 8007f66:	f7fa f801 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+4, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007f6a:	4a22      	ldr	r2, [pc, #136]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007f72:	3304      	adds	r3, #4
 8007f74:	b298      	uxth	r0, r3
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	885a      	ldrh	r2, [r3, #2]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	4413      	add	r3, r2
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f7f9 ffed 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+5, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007f92:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007f9a:	3305      	adds	r3, #5
 8007f9c:	b298      	uxth	r0, r3
 8007f9e:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	885a      	ldrh	r2, [r3, #2]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f7f9 ffd9 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+6, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8007fba:	4a0e      	ldr	r2, [pc, #56]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007fc2:	3306      	adds	r3, #6
 8007fc4:	b298      	uxth	r0, r3
 8007fc6:	4a0b      	ldr	r2, [pc, #44]	; (8007ff4 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	885a      	ldrh	r2, [r3, #2]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	4413      	add	r3, r2
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f7f9 ffc5 	bl	8001f6c <BSP_LCD_DrawPixel>
 8007fe2:	e1fb      	b.n	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>
 8007fe4:	40014400 	.word	0x40014400
 8007fe8:	200005c9 	.word	0x200005c9
 8007fec:	200005de 	.word	0x200005de
 8007ff0:	200005c0 	.word	0x200005c0
 8007ff4:	080a26c0 	.word	0x080a26c0

							}else if(Sciezka1[i-1].Y != Sciezka1[i].Y && Sciezka1[i].Y == Sciezka1[i+1].Y)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	4aa3      	ldr	r2, [pc, #652]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	885a      	ldrh	r2, [r3, #2]
 8008004:	49a1      	ldr	r1, [pc, #644]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	885b      	ldrh	r3, [r3, #2]
 800800e:	429a      	cmp	r2, r3
 8008010:	f000 8099 	beq.w	8008146 <HAL_TIM_PeriodElapsedCallback+0x362>
 8008014:	4a9d      	ldr	r2, [pc, #628]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	885a      	ldrh	r2, [r3, #2]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	499a      	ldr	r1, [pc, #616]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	440b      	add	r3, r1
 8008028:	885b      	ldrh	r3, [r3, #2]
 800802a:	429a      	cmp	r2, r3
 800802c:	f040 808b 	bne.w	8008146 <HAL_TIM_PeriodElapsedCallback+0x362>
							{
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y, LCD_COLOR_WHITE);
 8008030:	4a96      	ldr	r2, [pc, #600]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	b29b      	uxth	r3, r3
 800803c:	4413      	add	r3, r2
 800803e:	b298      	uxth	r0, r3
 8008040:	4a92      	ldr	r2, [pc, #584]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	885b      	ldrh	r3, [r3, #2]
 800804a:	f04f 32ff 	mov.w	r2, #4294967295
 800804e:	4619      	mov	r1, r3
 8008050:	f7f9 ff8c 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+1, LCD_COLOR_WHITE);
 8008054:	4a8d      	ldr	r2, [pc, #564]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	b29b      	uxth	r3, r3
 8008060:	4413      	add	r3, r2
 8008062:	b298      	uxth	r0, r3
 8008064:	4a89      	ldr	r2, [pc, #548]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	885b      	ldrh	r3, [r3, #2]
 800806e:	3301      	adds	r3, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	4619      	mov	r1, r3
 8008078:	f7f9 ff78 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+2, LCD_COLOR_WHITE);
 800807c:	4a83      	ldr	r2, [pc, #524]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	b29b      	uxth	r3, r3
 8008088:	4413      	add	r3, r2
 800808a:	b298      	uxth	r0, r3
 800808c:	4a7f      	ldr	r2, [pc, #508]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	885b      	ldrh	r3, [r3, #2]
 8008096:	3302      	adds	r3, #2
 8008098:	b29b      	uxth	r3, r3
 800809a:	f04f 32ff 	mov.w	r2, #4294967295
 800809e:	4619      	mov	r1, r3
 80080a0:	f7f9 ff64 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+3, LCD_COLOR_WHITE);
 80080a4:	4a79      	ldr	r2, [pc, #484]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	b298      	uxth	r0, r3
 80080b4:	4a75      	ldr	r2, [pc, #468]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	3303      	adds	r3, #3
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	f04f 32ff 	mov.w	r2, #4294967295
 80080c6:	4619      	mov	r1, r3
 80080c8:	f7f9 ff50 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+4, LCD_COLOR_WHITE);
 80080cc:	4a6f      	ldr	r2, [pc, #444]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	4413      	add	r3, r2
 80080da:	b298      	uxth	r0, r3
 80080dc:	4a6b      	ldr	r2, [pc, #428]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	885b      	ldrh	r3, [r3, #2]
 80080e6:	3304      	adds	r3, #4
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	4619      	mov	r1, r3
 80080f0:	f7f9 ff3c 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+5, LCD_COLOR_WHITE);
 80080f4:	4a65      	ldr	r2, [pc, #404]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4413      	add	r3, r2
 8008102:	b298      	uxth	r0, r3
 8008104:	4a61      	ldr	r2, [pc, #388]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	885b      	ldrh	r3, [r3, #2]
 800810e:	3305      	adds	r3, #5
 8008110:	b29b      	uxth	r3, r3
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	4619      	mov	r1, r3
 8008118:	f7f9 ff28 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y+6, LCD_COLOR_WHITE);
 800811c:	4a5b      	ldr	r2, [pc, #364]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	b29b      	uxth	r3, r3
 8008128:	4413      	add	r3, r2
 800812a:	b298      	uxth	r0, r3
 800812c:	4a57      	ldr	r2, [pc, #348]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	885b      	ldrh	r3, [r3, #2]
 8008136:	3306      	adds	r3, #6
 8008138:	b29b      	uxth	r3, r3
 800813a:	f04f 32ff 	mov.w	r2, #4294967295
 800813e:	4619      	mov	r1, r3
 8008140:	f7f9 ff14 	bl	8001f6c <BSP_LCD_DrawPixel>
 8008144:	e14a      	b.n	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>

							}else if(Sciezka1[i-1].X == Sciezka1[i].X && Sciezka1[i].X != Sciezka1[i+1].X)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	3b01      	subs	r3, #1
 800814a:	4a50      	ldr	r2, [pc, #320]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800814c:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008150:	494e      	ldr	r1, [pc, #312]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8008158:	429a      	cmp	r2, r3
 800815a:	f040 8099 	bne.w	8008290 <HAL_TIM_PeriodElapsedCallback+0x4ac>
 800815e:	4a4b      	ldr	r2, [pc, #300]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3301      	adds	r3, #1
 800816a:	4948      	ldr	r1, [pc, #288]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800816c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
 8008170:	429a      	cmp	r2, r3
 8008172:	f000 808d 	beq.w	8008290 <HAL_TIM_PeriodElapsedCallback+0x4ac>
							{
								BSP_LCD_DrawPixel(Sciezka1[i].X, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8008176:	4a45      	ldr	r2, [pc, #276]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 800817e:	4a43      	ldr	r2, [pc, #268]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	885a      	ldrh	r2, [r3, #2]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	b29b      	uxth	r3, r3
 800818c:	4413      	add	r3, r2
 800818e:	b29b      	uxth	r3, r3
 8008190:	f04f 32ff 	mov.w	r2, #4294967295
 8008194:	4619      	mov	r1, r3
 8008196:	f7f9 fee9 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-1, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 800819a:	4a3c      	ldr	r2, [pc, #240]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b298      	uxth	r0, r3
 80081a6:	4a39      	ldr	r2, [pc, #228]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	885a      	ldrh	r2, [r3, #2]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4413      	add	r3, r2
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f04f 32ff 	mov.w	r2, #4294967295
 80081bc:	4619      	mov	r1, r3
 80081be:	f7f9 fed5 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-2, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 80081c2:	4a32      	ldr	r2, [pc, #200]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80081ca:	3b02      	subs	r3, #2
 80081cc:	b298      	uxth	r0, r3
 80081ce:	4a2f      	ldr	r2, [pc, #188]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	885a      	ldrh	r2, [r3, #2]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	4413      	add	r3, r2
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7f9 fec1 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-3, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 80081ea:	4a28      	ldr	r2, [pc, #160]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80081f2:	3b03      	subs	r3, #3
 80081f4:	b298      	uxth	r0, r3
 80081f6:	4a25      	ldr	r2, [pc, #148]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	885a      	ldrh	r2, [r3, #2]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	b29b      	uxth	r3, r3
 8008204:	4413      	add	r3, r2
 8008206:	b29b      	uxth	r3, r3
 8008208:	f04f 32ff 	mov.w	r2, #4294967295
 800820c:	4619      	mov	r1, r3
 800820e:	f7f9 fead 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-4, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8008212:	4a1e      	ldr	r2, [pc, #120]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800821a:	3b04      	subs	r3, #4
 800821c:	b298      	uxth	r0, r3
 800821e:	4a1b      	ldr	r2, [pc, #108]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	885a      	ldrh	r2, [r3, #2]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	b29b      	uxth	r3, r3
 800822c:	4413      	add	r3, r2
 800822e:	b29b      	uxth	r3, r3
 8008230:	f04f 32ff 	mov.w	r2, #4294967295
 8008234:	4619      	mov	r1, r3
 8008236:	f7f9 fe99 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-5, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 800823a:	4a14      	ldr	r2, [pc, #80]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8008242:	3b05      	subs	r3, #5
 8008244:	b298      	uxth	r0, r3
 8008246:	4a11      	ldr	r2, [pc, #68]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	885a      	ldrh	r2, [r3, #2]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	b29b      	uxth	r3, r3
 8008254:	4413      	add	r3, r2
 8008256:	b29b      	uxth	r3, r3
 8008258:	f04f 32ff 	mov.w	r2, #4294967295
 800825c:	4619      	mov	r1, r3
 800825e:	f7f9 fe85 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X-6, Sciezka1[i].Y+j, LCD_COLOR_WHITE);
 8008262:	4a0a      	ldr	r2, [pc, #40]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800826a:	3b06      	subs	r3, #6
 800826c:	b298      	uxth	r0, r3
 800826e:	4a07      	ldr	r2, [pc, #28]	; (800828c <HAL_TIM_PeriodElapsedCallback+0x4a8>)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	885a      	ldrh	r2, [r3, #2]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	b29b      	uxth	r3, r3
 800827c:	4413      	add	r3, r2
 800827e:	b29b      	uxth	r3, r3
 8008280:	f04f 32ff 	mov.w	r2, #4294967295
 8008284:	4619      	mov	r1, r3
 8008286:	f7f9 fe71 	bl	8001f6c <BSP_LCD_DrawPixel>
 800828a:	e0a7      	b.n	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>
 800828c:	080a26c0 	.word	0x080a26c0


							}else if(Sciezka1[i-1].Y == Sciezka1[i].Y && Sciezka1[i].Y != Sciezka1[i+1].Y)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3b01      	subs	r3, #1
 8008294:	4a8d      	ldr	r2, [pc, #564]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	885a      	ldrh	r2, [r3, #2]
 800829c:	498b      	ldr	r1, [pc, #556]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	f040 8098 	bne.w	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>
 80082ac:	4a87      	ldr	r2, [pc, #540]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	885a      	ldrh	r2, [r3, #2]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3301      	adds	r3, #1
 80082ba:	4984      	ldr	r1, [pc, #528]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	885b      	ldrh	r3, [r3, #2]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	f000 808a 	beq.w	80083dc <HAL_TIM_PeriodElapsedCallback+0x5f8>
							{
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y, LCD_COLOR_WHITE);
 80082c8:	4a80      	ldr	r2, [pc, #512]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	4413      	add	r3, r2
 80082d6:	b298      	uxth	r0, r3
 80082d8:	4a7c      	ldr	r2, [pc, #496]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	4619      	mov	r1, r3
 80082e8:	f7f9 fe40 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-1, LCD_COLOR_WHITE);
 80082ec:	4a77      	ldr	r2, [pc, #476]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	4413      	add	r3, r2
 80082fa:	b298      	uxth	r0, r3
 80082fc:	4a73      	ldr	r2, [pc, #460]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	885b      	ldrh	r3, [r3, #2]
 8008306:	3b01      	subs	r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	f04f 32ff 	mov.w	r2, #4294967295
 800830e:	4619      	mov	r1, r3
 8008310:	f7f9 fe2c 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-2, LCD_COLOR_WHITE);
 8008314:	4a6d      	ldr	r2, [pc, #436]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	b29b      	uxth	r3, r3
 8008320:	4413      	add	r3, r2
 8008322:	b298      	uxth	r0, r3
 8008324:	4a69      	ldr	r2, [pc, #420]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	3b02      	subs	r3, #2
 8008330:	b29b      	uxth	r3, r3
 8008332:	f04f 32ff 	mov.w	r2, #4294967295
 8008336:	4619      	mov	r1, r3
 8008338:	f7f9 fe18 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-3, LCD_COLOR_WHITE);
 800833c:	4a63      	ldr	r2, [pc, #396]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	b29b      	uxth	r3, r3
 8008348:	4413      	add	r3, r2
 800834a:	b298      	uxth	r0, r3
 800834c:	4a5f      	ldr	r2, [pc, #380]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	009b      	lsls	r3, r3, #2
 8008352:	4413      	add	r3, r2
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	3b03      	subs	r3, #3
 8008358:	b29b      	uxth	r3, r3
 800835a:	f04f 32ff 	mov.w	r2, #4294967295
 800835e:	4619      	mov	r1, r3
 8008360:	f7f9 fe04 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-4, LCD_COLOR_WHITE);
 8008364:	4a59      	ldr	r2, [pc, #356]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	b29b      	uxth	r3, r3
 8008370:	4413      	add	r3, r2
 8008372:	b298      	uxth	r0, r3
 8008374:	4a55      	ldr	r2, [pc, #340]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	885b      	ldrh	r3, [r3, #2]
 800837e:	3b04      	subs	r3, #4
 8008380:	b29b      	uxth	r3, r3
 8008382:	f04f 32ff 	mov.w	r2, #4294967295
 8008386:	4619      	mov	r1, r3
 8008388:	f7f9 fdf0 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-5, LCD_COLOR_WHITE);
 800838c:	4a4f      	ldr	r2, [pc, #316]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	b29b      	uxth	r3, r3
 8008398:	4413      	add	r3, r2
 800839a:	b298      	uxth	r0, r3
 800839c:	4a4b      	ldr	r2, [pc, #300]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	885b      	ldrh	r3, [r3, #2]
 80083a6:	3b05      	subs	r3, #5
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	4619      	mov	r1, r3
 80083b0:	f7f9 fddc 	bl	8001f6c <BSP_LCD_DrawPixel>
								BSP_LCD_DrawPixel(Sciezka1[i].X+j, Sciezka1[i].Y-6, LCD_COLOR_WHITE);
 80083b4:	4a45      	ldr	r2, [pc, #276]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4413      	add	r3, r2
 80083c2:	b298      	uxth	r0, r3
 80083c4:	4a41      	ldr	r2, [pc, #260]	; (80084cc <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	885b      	ldrh	r3, [r3, #2]
 80083ce:	3b06      	subs	r3, #6
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295
 80083d6:	4619      	mov	r1, r3
 80083d8:	f7f9 fdc8 	bl	8001f6c <BSP_LCD_DrawPixel>
					for(int j = -6; j < 7; j++)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3301      	adds	r3, #1
 80083e0:	60bb      	str	r3, [r7, #8]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	2b06      	cmp	r3, #6
 80083e6:	f77f ad24 	ble.w	8007e32 <HAL_TIM_PeriodElapsedCallback+0x4e>
				for(int i = 1; i < 1790; i++)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f240 62fd 	movw	r2, #1789	; 0x6fd
 80083f6:	4293      	cmp	r3, r2
 80083f8:	f77f ad17 	ble.w	8007e2a <HAL_TIM_PeriodElapsedCallback+0x46>
						}

					}
				//BSP_LCD_DrawBitmap(0, 0, (uint8_t*) image_data_mapa1);

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80083fc:	4834      	ldr	r0, [pc, #208]	; (80084d0 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 80083fe:	f7f9 f911 	bl	8001624 <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(Sciezka1[0].X, Sciezka1[0].Y, 8);
 8008402:	2314      	movs	r3, #20
 8008404:	2114      	movs	r1, #20
 8008406:	2208      	movs	r2, #8
 8008408:	4618      	mov	r0, r3
 800840a:	f7f9 fc29 	bl	8001c60 <BSP_LCD_FillCircle>

				RozpoczetoNowaGre = 0;
 800840e:	4b31      	ldr	r3, [pc, #196]	; (80084d4 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
 8008414:	e011      	b.n	800843a <HAL_TIM_PeriodElapsedCallback+0x656>

			}else if (WybranyPoziom == 1 && RozpoczetoNowaGre == 1)
 8008416:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10c      	bne.n	800843a <HAL_TIM_PeriodElapsedCallback+0x656>
 8008420:	4b2c      	ldr	r3, [pc, #176]	; (80084d4 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	d107      	bne.n	800843a <HAL_TIM_PeriodElapsedCallback+0x656>
			{
				BSP_LCD_DrawBitmap(0, 0, (uint8_t*) image_data_mapa2);
 800842a:	4a2c      	ldr	r2, [pc, #176]	; (80084dc <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 800842c:	2100      	movs	r1, #0
 800842e:	2000      	movs	r0, #0
 8008430:	f7f9 fb28 	bl	8001a84 <BSP_LCD_DrawBitmap>

				RozpoczetoNowaGre = 0;
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8008436:	2200      	movs	r2, #0
 8008438:	701a      	strb	r2, [r3, #0]
			}
*/
		}
	}

	if (htim->Instance == TIM11) {
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a28      	ldr	r2, [pc, #160]	; (80084e0 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8008440:	4293      	cmp	r3, r2
 8008442:	f041 8008 	bne.w	8009456 <HAL_TIM_PeriodElapsedCallback+0x1672>
		OurL3GD20_Read();
 8008446:	f7ff f92b 	bl	80076a0 <OurL3GD20_Read>

		//To mozna wsumie przy testowaniu wywalic za czesc testowa
		if ((DataNow.OsX >= 25 && DataNow.OsY <= 20)
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b21b      	sxth	r3, r3
 8008450:	2b18      	cmp	r3, #24
 8008452:	dd04      	ble.n	800845e <HAL_TIM_PeriodElapsedCallback+0x67a>
 8008454:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8008456:	885b      	ldrh	r3, [r3, #2]
 8008458:	b21b      	sxth	r3, r3
 800845a:	2b14      	cmp	r3, #20
 800845c:	dd0b      	ble.n	8008476 <HAL_TIM_PeriodElapsedCallback+0x692>
				|| (DataNow.OsX <= -25 && DataNow.OsY >= -20))
 800845e:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b21b      	sxth	r3, r3
 8008464:	f113 0f18 	cmn.w	r3, #24
 8008468:	da44      	bge.n	80084f4 <HAL_TIM_PeriodElapsedCallback+0x710>
 800846a:	4b1e      	ldr	r3, [pc, #120]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 800846c:	885b      	ldrh	r3, [r3, #2]
 800846e:	b21b      	sxth	r3, r3
 8008470:	f113 0f14 	cmn.w	r3, #20
 8008474:	db3e      	blt.n	80084f4 <HAL_TIM_PeriodElapsedCallback+0x710>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8008476:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	b21b      	sxth	r3, r3
 800847c:	4618      	mov	r0, r3
 800847e:	f7f8 f859 	bl	8000534 <__aeabi_i2d>
 8008482:	4604      	mov	r4, r0
 8008484:	460d      	mov	r5, r1
 8008486:	4b18      	ldr	r3, [pc, #96]	; (80084e8 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8008488:	881b      	ldrh	r3, [r3, #0]
 800848a:	b21b      	sxth	r3, r3
 800848c:	461a      	mov	r2, r3
 800848e:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8008490:	881b      	ldrh	r3, [r3, #0]
 8008492:	b21b      	sxth	r3, r3
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	4618      	mov	r0, r3
 8008498:	f7f8 f84c 	bl	8000534 <__aeabi_i2d>
 800849c:	f04f 0200 	mov.w	r2, #0
 80084a0:	4b12      	ldr	r3, [pc, #72]	; (80084ec <HAL_TIM_PeriodElapsedCallback+0x708>)
 80084a2:	f7f8 f8ad 	bl	8000600 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4620      	mov	r0, r4
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f7 fef5 	bl	800029c <__adddf3>
 80084b2:	4603      	mov	r3, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	4618      	mov	r0, r3
 80084b8:	4621      	mov	r1, r4
 80084ba:	f7f8 fab3 	bl	8000a24 <__aeabi_d2iz>
 80084be:	4602      	mov	r2, r0
			AngleX +=
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	4a0a      	ldr	r2, [pc, #40]	; (80084f0 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 80084c8:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 80084ca:	e053      	b.n	8008574 <HAL_TIM_PeriodElapsedCallback+0x790>
 80084cc:	080a26c0 	.word	0x080a26c0
 80084d0:	ffff0000 	.word	0xffff0000
 80084d4:	200005c0 	.word	0x200005c0
 80084d8:	200005de 	.word	0x200005de
 80084dc:	0807cea0 	.word	0x0807cea0
 80084e0:	40014800 	.word	0x40014800
 80084e4:	20000580 	.word	0x20000580
 80084e8:	200004b0 	.word	0x200004b0
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	2000057c 	.word	0x2000057c
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 80084f4:	4b8a      	ldr	r3, [pc, #552]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	b21b      	sxth	r3, r3
 80084fa:	2b18      	cmp	r3, #24
 80084fc:	dd04      	ble.n	8008508 <HAL_TIM_PeriodElapsedCallback+0x724>
 80084fe:	4b88      	ldr	r3, [pc, #544]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008500:	885b      	ldrh	r3, [r3, #2]
 8008502:	b21b      	sxth	r3, r3
 8008504:	2b18      	cmp	r3, #24
 8008506:	dc0b      	bgt.n	8008520 <HAL_TIM_PeriodElapsedCallback+0x73c>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 8008508:	4b85      	ldr	r3, [pc, #532]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b21b      	sxth	r3, r3
 800850e:	f113 0f18 	cmn.w	r3, #24
 8008512:	da2f      	bge.n	8008574 <HAL_TIM_PeriodElapsedCallback+0x790>
 8008514:	4b82      	ldr	r3, [pc, #520]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008516:	885b      	ldrh	r3, [r3, #2]
 8008518:	b21b      	sxth	r3, r3
 800851a:	f113 0f18 	cmn.w	r3, #24
 800851e:	da29      	bge.n	8008574 <HAL_TIM_PeriodElapsedCallback+0x790>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8008520:	4b7f      	ldr	r3, [pc, #508]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b21b      	sxth	r3, r3
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 f804 	bl	8000534 <__aeabi_i2d>
 800852c:	4604      	mov	r4, r0
 800852e:	460d      	mov	r5, r1
 8008530:	4b7c      	ldr	r3, [pc, #496]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b21b      	sxth	r3, r3
 8008536:	461a      	mov	r2, r3
 8008538:	4b79      	ldr	r3, [pc, #484]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b21b      	sxth	r3, r3
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	4618      	mov	r0, r3
 8008542:	f7f7 fff7 	bl	8000534 <__aeabi_i2d>
 8008546:	f04f 0200 	mov.w	r2, #0
 800854a:	4b77      	ldr	r3, [pc, #476]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800854c:	f7f8 f858 	bl	8000600 <__aeabi_dmul>
 8008550:	4602      	mov	r2, r0
 8008552:	460b      	mov	r3, r1
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f7 fea0 	bl	800029c <__adddf3>
 800855c:	4603      	mov	r3, r0
 800855e:	460c      	mov	r4, r1
 8008560:	4618      	mov	r0, r3
 8008562:	4621      	mov	r1, r4
 8008564:	f7f8 fa5e 	bl	8000a24 <__aeabi_d2iz>
 8008568:	4602      	mov	r2, r0
			AngleX +=
 800856a:	4b70      	ldr	r3, [pc, #448]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x948>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4413      	add	r3, r2
 8008570:	4a6e      	ldr	r2, [pc, #440]	; (800872c <HAL_TIM_PeriodElapsedCallback+0x948>)
 8008572:	6013      	str	r3, [r2, #0]

		if ((DataNow.OsY >= 25 && DataNow.OsX <= 20)
 8008574:	4b6a      	ldr	r3, [pc, #424]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008576:	885b      	ldrh	r3, [r3, #2]
 8008578:	b21b      	sxth	r3, r3
 800857a:	2b18      	cmp	r3, #24
 800857c:	dd04      	ble.n	8008588 <HAL_TIM_PeriodElapsedCallback+0x7a4>
 800857e:	4b68      	ldr	r3, [pc, #416]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008580:	881b      	ldrh	r3, [r3, #0]
 8008582:	b21b      	sxth	r3, r3
 8008584:	2b14      	cmp	r3, #20
 8008586:	dd0b      	ble.n	80085a0 <HAL_TIM_PeriodElapsedCallback+0x7bc>
				|| (DataNow.OsY <= -25 && DataNow.OsX >= -20))
 8008588:	4b65      	ldr	r3, [pc, #404]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	b21b      	sxth	r3, r3
 800858e:	f113 0f18 	cmn.w	r3, #24
 8008592:	da30      	bge.n	80085f6 <HAL_TIM_PeriodElapsedCallback+0x812>
 8008594:	4b62      	ldr	r3, [pc, #392]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b21b      	sxth	r3, r3
 800859a:	f113 0f14 	cmn.w	r3, #20
 800859e:	db2a      	blt.n	80085f6 <HAL_TIM_PeriodElapsedCallback+0x812>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 80085a0:	4b5f      	ldr	r3, [pc, #380]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80085a2:	885b      	ldrh	r3, [r3, #2]
 80085a4:	b21b      	sxth	r3, r3
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7f7 ffc4 	bl	8000534 <__aeabi_i2d>
 80085ac:	4604      	mov	r4, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	4b5c      	ldr	r3, [pc, #368]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80085b2:	885b      	ldrh	r3, [r3, #2]
 80085b4:	b21b      	sxth	r3, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	4b59      	ldr	r3, [pc, #356]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80085ba:	885b      	ldrh	r3, [r3, #2]
 80085bc:	b21b      	sxth	r3, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7f7 ffb7 	bl	8000534 <__aeabi_i2d>
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	4b57      	ldr	r3, [pc, #348]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x944>)
 80085cc:	f7f8 f818 	bl	8000600 <__aeabi_dmul>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4620      	mov	r0, r4
 80085d6:	4629      	mov	r1, r5
 80085d8:	f7f7 fe60 	bl	800029c <__adddf3>
 80085dc:	4603      	mov	r3, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	4618      	mov	r0, r3
 80085e2:	4621      	mov	r1, r4
 80085e4:	f7f8 fa1e 	bl	8000a24 <__aeabi_d2iz>
 80085e8:	4602      	mov	r2, r0
			AngleY +=
 80085ea:	4b51      	ldr	r3, [pc, #324]	; (8008730 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4413      	add	r3, r2
 80085f0:	4a4f      	ldr	r2, [pc, #316]	; (8008730 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 80085f2:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 80085f4:	e03f      	b.n	8008676 <HAL_TIM_PeriodElapsedCallback+0x892>
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 80085f6:	4b4a      	ldr	r3, [pc, #296]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b21b      	sxth	r3, r3
 80085fc:	2b18      	cmp	r3, #24
 80085fe:	dd04      	ble.n	800860a <HAL_TIM_PeriodElapsedCallback+0x826>
 8008600:	4b47      	ldr	r3, [pc, #284]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	b21b      	sxth	r3, r3
 8008606:	2b18      	cmp	r3, #24
 8008608:	dc0b      	bgt.n	8008622 <HAL_TIM_PeriodElapsedCallback+0x83e>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 800860a:	4b45      	ldr	r3, [pc, #276]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b21b      	sxth	r3, r3
 8008610:	f113 0f18 	cmn.w	r3, #24
 8008614:	da2f      	bge.n	8008676 <HAL_TIM_PeriodElapsedCallback+0x892>
 8008616:	4b42      	ldr	r3, [pc, #264]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008618:	885b      	ldrh	r3, [r3, #2]
 800861a:	b21b      	sxth	r3, r3
 800861c:	f113 0f18 	cmn.w	r3, #24
 8008620:	da29      	bge.n	8008676 <HAL_TIM_PeriodElapsedCallback+0x892>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8008622:	4b3f      	ldr	r3, [pc, #252]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008624:	885b      	ldrh	r3, [r3, #2]
 8008626:	b21b      	sxth	r3, r3
 8008628:	4618      	mov	r0, r3
 800862a:	f7f7 ff83 	bl	8000534 <__aeabi_i2d>
 800862e:	4604      	mov	r4, r0
 8008630:	460d      	mov	r5, r1
 8008632:	4b3c      	ldr	r3, [pc, #240]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008634:	885b      	ldrh	r3, [r3, #2]
 8008636:	b21b      	sxth	r3, r3
 8008638:	461a      	mov	r2, r3
 800863a:	4b39      	ldr	r3, [pc, #228]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 800863c:	885b      	ldrh	r3, [r3, #2]
 800863e:	b21b      	sxth	r3, r3
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	4618      	mov	r0, r3
 8008644:	f7f7 ff76 	bl	8000534 <__aeabi_i2d>
 8008648:	f04f 0200 	mov.w	r2, #0
 800864c:	4b36      	ldr	r3, [pc, #216]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x944>)
 800864e:	f7f7 ffd7 	bl	8000600 <__aeabi_dmul>
 8008652:	4602      	mov	r2, r0
 8008654:	460b      	mov	r3, r1
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f7f7 fe1f 	bl	800029c <__adddf3>
 800865e:	4603      	mov	r3, r0
 8008660:	460c      	mov	r4, r1
 8008662:	4618      	mov	r0, r3
 8008664:	4621      	mov	r1, r4
 8008666:	f7f8 f9dd 	bl	8000a24 <__aeabi_d2iz>
 800866a:	4602      	mov	r2, r0
			AngleY +=
 800866c:	4b30      	ldr	r3, [pc, #192]	; (8008730 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4413      	add	r3, r2
 8008672:	4a2f      	ldr	r2, [pc, #188]	; (8008730 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8008674:	6013      	str	r3, [r2, #0]
		}
*/
		//koniec

		//Liczenie calki za pomoca metody Romberga
		if (LicznikPomocniczyRomberg == 0) {
 8008676:	4b2f      	ldr	r3, [pc, #188]	; (8008734 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b00      	cmp	r3, #0
 800867e:	d163      	bne.n	8008748 <HAL_TIM_PeriodElapsedCallback+0x964>
			DataTempRom[0] = DataOld;
 8008680:	4b2d      	ldr	r3, [pc, #180]	; (8008738 <HAL_TIM_PeriodElapsedCallback+0x954>)
 8008682:	4a28      	ldr	r2, [pc, #160]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8008684:	6811      	ldr	r1, [r2, #0]
 8008686:	6019      	str	r1, [r3, #0]
 8008688:	8892      	ldrh	r2, [r2, #4]
 800868a:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] = (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 800868c:	4b25      	ldr	r3, [pc, #148]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b21b      	sxth	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	4b22      	ldr	r3, [pc, #136]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	b21b      	sxth	r3, r3
 800869a:	4413      	add	r3, r2
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 ff49 	bl	8000534 <__aeabi_i2d>
 80086a2:	f04f 0200 	mov.w	r2, #0
 80086a6:	4b20      	ldr	r3, [pc, #128]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x944>)
 80086a8:	f7f7 ffaa 	bl	8000600 <__aeabi_dmul>
 80086ac:	4603      	mov	r3, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4618      	mov	r0, r3
 80086b2:	4621      	mov	r1, r4
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	4b20      	ldr	r3, [pc, #128]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x958>)
 80086ba:	f7f7 ffa1 	bl	8000600 <__aeabi_dmul>
 80086be:	4603      	mov	r3, r0
 80086c0:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] = (long) (4
 80086c2:	4618      	mov	r0, r3
 80086c4:	4621      	mov	r1, r4
 80086c6:	f7f8 f9ad 	bl	8000a24 <__aeabi_d2iz>
 80086ca:	4602      	mov	r2, r0
 80086cc:	4b1c      	ldr	r3, [pc, #112]	; (8008740 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 80086ce:	60da      	str	r2, [r3, #12]
			CalkaPosredniaRomY[3] = (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 80086d0:	4b14      	ldr	r3, [pc, #80]	; (8008724 <HAL_TIM_PeriodElapsedCallback+0x940>)
 80086d2:	885b      	ldrh	r3, [r3, #2]
 80086d4:	b21b      	sxth	r3, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	4b11      	ldr	r3, [pc, #68]	; (8008720 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4413      	add	r3, r2
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7f7 ff27 	bl	8000534 <__aeabi_i2d>
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <HAL_TIM_PeriodElapsedCallback+0x944>)
 80086ec:	f7f7 ff88 	bl	8000600 <__aeabi_dmul>
 80086f0:	4603      	mov	r3, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4618      	mov	r0, r3
 80086f6:	4621      	mov	r1, r4
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <HAL_TIM_PeriodElapsedCallback+0x958>)
 80086fe:	f7f7 ff7f 	bl	8000600 <__aeabi_dmul>
 8008702:	4603      	mov	r3, r0
 8008704:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] = (long) (4
 8008706:	4618      	mov	r0, r3
 8008708:	4621      	mov	r1, r4
 800870a:	f7f8 f98b 	bl	8000a24 <__aeabi_d2iz>
 800870e:	4602      	mov	r2, r0
 8008710:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8008712:	60da      	str	r2, [r3, #12]

			LicznikPomocniczyRomberg = 1;
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8008716:	2201      	movs	r2, #1
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	f000 bd7d 	b.w	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>
 800871e:	bf00      	nop
 8008720:	20000580 	.word	0x20000580
 8008724:	200004b0 	.word	0x200004b0
 8008728:	3fe00000 	.word	0x3fe00000
 800872c:	2000057c 	.word	0x2000057c
 8008730:	200005b0 	.word	0x200005b0
 8008734:	20000540 	.word	0x20000540
 8008738:	200004b8 	.word	0x200004b8
 800873c:	40100000 	.word	0x40100000
 8008740:	20000598 	.word	0x20000598
 8008744:	20000568 	.word	0x20000568

		} else if (LicznikPomocniczyRomberg == 1) {
 8008748:	4b79      	ldr	r3, [pc, #484]	; (8008930 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b01      	cmp	r3, #1
 8008750:	f040 8093 	bne.w	800887a <HAL_TIM_PeriodElapsedCallback+0xa96>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008754:	4b77      	ldr	r3, [pc, #476]	; (8008934 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8008756:	881b      	ldrh	r3, [r3, #0]
 8008758:	b21b      	sxth	r3, r3
 800875a:	461a      	mov	r2, r3
 800875c:	4b76      	ldr	r3, [pc, #472]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b21b      	sxth	r3, r3
 8008762:	4413      	add	r3, r2
 8008764:	4618      	mov	r0, r3
 8008766:	f7f7 fee5 	bl	8000534 <__aeabi_i2d>
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	4b73      	ldr	r3, [pc, #460]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8008770:	f7f7 ff46 	bl	8000600 <__aeabi_dmul>
 8008774:	4603      	mov	r3, r0
 8008776:	460c      	mov	r4, r1
 8008778:	4618      	mov	r0, r3
 800877a:	4621      	mov	r1, r4
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	4b6f      	ldr	r3, [pc, #444]	; (8008940 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 8008782:	f7f7 ff3d 	bl	8000600 <__aeabi_dmul>
 8008786:	4603      	mov	r3, r0
 8008788:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 800878a:	4618      	mov	r0, r3
 800878c:	4621      	mov	r1, r4
 800878e:	f7f8 f949 	bl	8000a24 <__aeabi_d2iz>
 8008792:	4602      	mov	r2, r0
 8008794:	4b6b      	ldr	r3, [pc, #428]	; (8008944 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	4413      	add	r3, r2
 800879a:	4a6a      	ldr	r2, [pc, #424]	; (8008944 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 800879c:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 800879e:	4b65      	ldr	r3, [pc, #404]	; (8008934 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b21b      	sxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	4b64      	ldr	r3, [pc, #400]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	b21b      	sxth	r3, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7f7 fec0 	bl	8000534 <__aeabi_i2d>
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	4b60      	ldr	r3, [pc, #384]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 80087ba:	f7f7 ff21 	bl	8000600 <__aeabi_dmul>
 80087be:	4603      	mov	r3, r0
 80087c0:	460c      	mov	r4, r1
 80087c2:	4618      	mov	r0, r3
 80087c4:	4621      	mov	r1, r4
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	4b5d      	ldr	r3, [pc, #372]	; (8008940 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 80087cc:	f7f7 ff18 	bl	8000600 <__aeabi_dmul>
 80087d0:	4603      	mov	r3, r0
 80087d2:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 80087d4:	4618      	mov	r0, r3
 80087d6:	4621      	mov	r1, r4
 80087d8:	f7f8 f924 	bl	8000a24 <__aeabi_d2iz>
 80087dc:	4602      	mov	r2, r0
 80087de:	4b5a      	ldr	r3, [pc, #360]	; (8008948 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	4a58      	ldr	r2, [pc, #352]	; (8008948 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 80087e6:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] = (long) (8
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 80087e8:	4b58      	ldr	r3, [pc, #352]	; (800894c <HAL_TIM_PeriodElapsedCallback+0xb68>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	b21b      	sxth	r3, r3
 80087ee:	461a      	mov	r2, r3
 80087f0:	4b51      	ldr	r3, [pc, #324]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b21b      	sxth	r3, r3
 80087f6:	4413      	add	r3, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7f7 fe9b 	bl	8000534 <__aeabi_i2d>
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	4b4e      	ldr	r3, [pc, #312]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8008804:	f7f7 fefc 	bl	8000600 <__aeabi_dmul>
 8008808:	4603      	mov	r3, r0
 800880a:	460c      	mov	r4, r1
 800880c:	4618      	mov	r0, r3
 800880e:	4621      	mov	r1, r4
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	4b4e      	ldr	r3, [pc, #312]	; (8008950 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 8008816:	f7f7 fef3 	bl	8000600 <__aeabi_dmul>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] = (long) (8
 800881e:	4618      	mov	r0, r3
 8008820:	4621      	mov	r1, r4
 8008822:	f7f8 f8ff 	bl	8000a24 <__aeabi_d2iz>
 8008826:	4602      	mov	r2, r0
 8008828:	4b46      	ldr	r3, [pc, #280]	; (8008944 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 800882a:	609a      	str	r2, [r3, #8]
			CalkaPosredniaRomY[2] = (long) (8
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 800882c:	4b47      	ldr	r3, [pc, #284]	; (800894c <HAL_TIM_PeriodElapsedCallback+0xb68>)
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	b21b      	sxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	4b40      	ldr	r3, [pc, #256]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	b21b      	sxth	r3, r3
 800883a:	4413      	add	r3, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7f7 fe79 	bl	8000534 <__aeabi_i2d>
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	4b3d      	ldr	r3, [pc, #244]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 8008848:	f7f7 feda 	bl	8000600 <__aeabi_dmul>
 800884c:	4603      	mov	r3, r0
 800884e:	460c      	mov	r4, r1
 8008850:	4618      	mov	r0, r3
 8008852:	4621      	mov	r1, r4
 8008854:	f04f 0200 	mov.w	r2, #0
 8008858:	4b3d      	ldr	r3, [pc, #244]	; (8008950 <HAL_TIM_PeriodElapsedCallback+0xb6c>)
 800885a:	f7f7 fed1 	bl	8000600 <__aeabi_dmul>
 800885e:	4603      	mov	r3, r0
 8008860:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] = (long) (8
 8008862:	4618      	mov	r0, r3
 8008864:	4621      	mov	r1, r4
 8008866:	f7f8 f8dd 	bl	8000a24 <__aeabi_d2iz>
 800886a:	4602      	mov	r2, r0
 800886c:	4b36      	ldr	r3, [pc, #216]	; (8008948 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800886e:	609a      	str	r2, [r3, #8]

			LicznikPomocniczyRomberg = 2;
 8008870:	4b2f      	ldr	r3, [pc, #188]	; (8008930 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8008872:	2202      	movs	r2, #2
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	f000 bccf 	b.w	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>

		} else if (LicznikPomocniczyRomberg == 2) {
 800887a:	4b2d      	ldr	r3, [pc, #180]	; (8008930 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b02      	cmp	r3, #2
 8008882:	d167      	bne.n	8008954 <HAL_TIM_PeriodElapsedCallback+0xb70>
			DataTempRom[2] = DataOld;
 8008884:	4b31      	ldr	r3, [pc, #196]	; (800894c <HAL_TIM_PeriodElapsedCallback+0xb68>)
 8008886:	4a2b      	ldr	r2, [pc, #172]	; (8008934 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8008888:	330c      	adds	r3, #12
 800888a:	6811      	ldr	r1, [r2, #0]
 800888c:	6019      	str	r1, [r3, #0]
 800888e:	8892      	ldrh	r2, [r2, #4]
 8008890:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008892:	4b28      	ldr	r3, [pc, #160]	; (8008934 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b21b      	sxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	4b27      	ldr	r3, [pc, #156]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b21b      	sxth	r3, r3
 80088a0:	4413      	add	r3, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7f7 fe46 	bl	8000534 <__aeabi_i2d>
 80088a8:	f04f 0200 	mov.w	r2, #0
 80088ac:	4b23      	ldr	r3, [pc, #140]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 80088ae:	f7f7 fea7 	bl	8000600 <__aeabi_dmul>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	4618      	mov	r0, r3
 80088b8:	4621      	mov	r1, r4
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	4b20      	ldr	r3, [pc, #128]	; (8008940 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 80088c0:	f7f7 fe9e 	bl	8000600 <__aeabi_dmul>
 80088c4:	4603      	mov	r3, r0
 80088c6:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 80088c8:	4618      	mov	r0, r3
 80088ca:	4621      	mov	r1, r4
 80088cc:	f7f8 f8aa 	bl	8000a24 <__aeabi_d2iz>
 80088d0:	4602      	mov	r2, r0
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <HAL_TIM_PeriodElapsedCallback+0xb60>)
 80088da:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 80088dc:	4b15      	ldr	r3, [pc, #84]	; (8008934 <HAL_TIM_PeriodElapsedCallback+0xb50>)
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	b21b      	sxth	r3, r3
 80088e2:	461a      	mov	r2, r3
 80088e4:	4b14      	ldr	r3, [pc, #80]	; (8008938 <HAL_TIM_PeriodElapsedCallback+0xb54>)
 80088e6:	885b      	ldrh	r3, [r3, #2]
 80088e8:	b21b      	sxth	r3, r3
 80088ea:	4413      	add	r3, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7f7 fe21 	bl	8000534 <__aeabi_i2d>
 80088f2:	f04f 0200 	mov.w	r2, #0
 80088f6:	4b11      	ldr	r3, [pc, #68]	; (800893c <HAL_TIM_PeriodElapsedCallback+0xb58>)
 80088f8:	f7f7 fe82 	bl	8000600 <__aeabi_dmul>
 80088fc:	4603      	mov	r3, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4618      	mov	r0, r3
 8008902:	4621      	mov	r1, r4
 8008904:	f04f 0200 	mov.w	r2, #0
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <HAL_TIM_PeriodElapsedCallback+0xb5c>)
 800890a:	f7f7 fe79 	bl	8000600 <__aeabi_dmul>
 800890e:	4603      	mov	r3, r0
 8008910:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008912:	4618      	mov	r0, r3
 8008914:	4621      	mov	r1, r4
 8008916:	f7f8 f885 	bl	8000a24 <__aeabi_d2iz>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0a      	ldr	r3, [pc, #40]	; (8008948 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	4413      	add	r3, r2
 8008922:	4a09      	ldr	r2, [pc, #36]	; (8008948 <HAL_TIM_PeriodElapsedCallback+0xb64>)
 8008924:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 3;
 8008926:	4b02      	ldr	r3, [pc, #8]	; (8008930 <HAL_TIM_PeriodElapsedCallback+0xb4c>)
 8008928:	2203      	movs	r2, #3
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	f000 bc74 	b.w	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>
 8008930:	20000540 	.word	0x20000540
 8008934:	200004b0 	.word	0x200004b0
 8008938:	20000580 	.word	0x20000580
 800893c:	3fe00000 	.word	0x3fe00000
 8008940:	40100000 	.word	0x40100000
 8008944:	20000598 	.word	0x20000598
 8008948:	20000568 	.word	0x20000568
 800894c:	200004b8 	.word	0x200004b8
 8008950:	40200000 	.word	0x40200000

		} else if (LicznikPomocniczyRomberg == 3) {
 8008954:	4b9d      	ldr	r3, [pc, #628]	; (8008bcc <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b03      	cmp	r3, #3
 800895c:	f040 80dc 	bne.w	8008b18 <HAL_TIM_PeriodElapsedCallback+0xd34>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008960:	4b9b      	ldr	r3, [pc, #620]	; (8008bd0 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b21b      	sxth	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	4b9a      	ldr	r3, [pc, #616]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 800896a:	881b      	ldrh	r3, [r3, #0]
 800896c:	b21b      	sxth	r3, r3
 800896e:	4413      	add	r3, r2
 8008970:	4618      	mov	r0, r3
 8008972:	f7f7 fddf 	bl	8000534 <__aeabi_i2d>
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	4b97      	ldr	r3, [pc, #604]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 800897c:	f7f7 fe40 	bl	8000600 <__aeabi_dmul>
 8008980:	4603      	mov	r3, r0
 8008982:	460c      	mov	r4, r1
 8008984:	4618      	mov	r0, r3
 8008986:	4621      	mov	r1, r4
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	4b93      	ldr	r3, [pc, #588]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 800898e:	f7f7 fe37 	bl	8000600 <__aeabi_dmul>
 8008992:	4603      	mov	r3, r0
 8008994:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008996:	4618      	mov	r0, r3
 8008998:	4621      	mov	r1, r4
 800899a:	f7f8 f843 	bl	8000a24 <__aeabi_d2iz>
 800899e:	4602      	mov	r2, r0
 80089a0:	4b8f      	ldr	r3, [pc, #572]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	4413      	add	r3, r2
 80089a6:	4a8e      	ldr	r2, [pc, #568]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 80089a8:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 80089aa:	4b89      	ldr	r3, [pc, #548]	; (8008bd0 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b21b      	sxth	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	4b88      	ldr	r3, [pc, #544]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 80089b4:	885b      	ldrh	r3, [r3, #2]
 80089b6:	b21b      	sxth	r3, r3
 80089b8:	4413      	add	r3, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f7 fdba 	bl	8000534 <__aeabi_i2d>
 80089c0:	f04f 0200 	mov.w	r2, #0
 80089c4:	4b84      	ldr	r3, [pc, #528]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 80089c6:	f7f7 fe1b 	bl	8000600 <__aeabi_dmul>
 80089ca:	4603      	mov	r3, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	4618      	mov	r0, r3
 80089d0:	4621      	mov	r1, r4
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	4b81      	ldr	r3, [pc, #516]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 80089d8:	f7f7 fe12 	bl	8000600 <__aeabi_dmul>
 80089dc:	4603      	mov	r3, r0
 80089de:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 80089e0:	4618      	mov	r0, r3
 80089e2:	4621      	mov	r1, r4
 80089e4:	f7f8 f81e 	bl	8000a24 <__aeabi_d2iz>
 80089e8:	4602      	mov	r2, r0
 80089ea:	4b7e      	ldr	r3, [pc, #504]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	4413      	add	r3, r2
 80089f0:	4a7c      	ldr	r2, [pc, #496]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 80089f2:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[2].OsX + DataNow.OsX) * 0.5));
 80089f4:	4b7c      	ldr	r3, [pc, #496]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 80089f6:	899b      	ldrh	r3, [r3, #12]
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	4b75      	ldr	r3, [pc, #468]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b21b      	sxth	r3, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7f7 fd95 	bl	8000534 <__aeabi_i2d>
 8008a0a:	f04f 0200 	mov.w	r2, #0
 8008a0e:	4b72      	ldr	r3, [pc, #456]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008a10:	f7f7 fdf6 	bl	8000600 <__aeabi_dmul>
 8008a14:	4603      	mov	r3, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	4618      	mov	r0, r3
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	4b72      	ldr	r3, [pc, #456]	; (8008bec <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8008a22:	f7f7 fded 	bl	8000600 <__aeabi_dmul>
 8008a26:	4603      	mov	r3, r0
 8008a28:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	f7f7 fff9 	bl	8000a24 <__aeabi_d2iz>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b6a      	ldr	r3, [pc, #424]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	4413      	add	r3, r2
 8008a3a:	4a69      	ldr	r2, [pc, #420]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8008a3c:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[2].OsY + DataNow.OsY) * 0.5));
 8008a3e:	4b6a      	ldr	r3, [pc, #424]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8008a40:	89db      	ldrh	r3, [r3, #14]
 8008a42:	b21b      	sxth	r3, r3
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b63      	ldr	r3, [pc, #396]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	b21b      	sxth	r3, r3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f7 fd70 	bl	8000534 <__aeabi_i2d>
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	4b5f      	ldr	r3, [pc, #380]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008a5a:	f7f7 fdd1 	bl	8000600 <__aeabi_dmul>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	460c      	mov	r4, r1
 8008a62:	4618      	mov	r0, r3
 8008a64:	4621      	mov	r1, r4
 8008a66:	f04f 0200 	mov.w	r2, #0
 8008a6a:	4b60      	ldr	r3, [pc, #384]	; (8008bec <HAL_TIM_PeriodElapsedCallback+0xe08>)
 8008a6c:	f7f7 fdc8 	bl	8000600 <__aeabi_dmul>
 8008a70:	4603      	mov	r3, r0
 8008a72:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 8008a74:	4618      	mov	r0, r3
 8008a76:	4621      	mov	r1, r4
 8008a78:	f7f7 ffd4 	bl	8000a24 <__aeabi_d2iz>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	4b59      	ldr	r3, [pc, #356]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	4413      	add	r3, r2
 8008a84:	4a57      	ldr	r2, [pc, #348]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8008a86:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] = (long) (16
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 8008a88:	4b57      	ldr	r3, [pc, #348]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	b21b      	sxth	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	4b50      	ldr	r3, [pc, #320]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	b21b      	sxth	r3, r3
 8008a96:	4413      	add	r3, r2
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f7f7 fd4b 	bl	8000534 <__aeabi_i2d>
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	4b4d      	ldr	r3, [pc, #308]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008aa4:	f7f7 fdac 	bl	8000600 <__aeabi_dmul>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	4618      	mov	r0, r3
 8008aae:	4621      	mov	r1, r4
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	4b4e      	ldr	r3, [pc, #312]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8008ab6:	f7f7 fda3 	bl	8000600 <__aeabi_dmul>
 8008aba:	4603      	mov	r3, r0
 8008abc:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] = (long) (16
 8008abe:	4618      	mov	r0, r3
 8008ac0:	4621      	mov	r1, r4
 8008ac2:	f7f7 ffaf 	bl	8000a24 <__aeabi_d2iz>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	4b45      	ldr	r3, [pc, #276]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8008aca:	605a      	str	r2, [r3, #4]
			CalkaPosredniaRomY[1] = (long) (16
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 8008acc:	4b46      	ldr	r3, [pc, #280]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8008ace:	885b      	ldrh	r3, [r3, #2]
 8008ad0:	b21b      	sxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	4b3f      	ldr	r3, [pc, #252]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8008ad6:	885b      	ldrh	r3, [r3, #2]
 8008ad8:	b21b      	sxth	r3, r3
 8008ada:	4413      	add	r3, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7f7 fd29 	bl	8000534 <__aeabi_i2d>
 8008ae2:	f04f 0200 	mov.w	r2, #0
 8008ae6:	4b3c      	ldr	r3, [pc, #240]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008ae8:	f7f7 fd8a 	bl	8000600 <__aeabi_dmul>
 8008aec:	4603      	mov	r3, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	4618      	mov	r0, r3
 8008af2:	4621      	mov	r1, r4
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	4b3d      	ldr	r3, [pc, #244]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0xe0c>)
 8008afa:	f7f7 fd81 	bl	8000600 <__aeabi_dmul>
 8008afe:	4603      	mov	r3, r0
 8008b00:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] = (long) (16
 8008b02:	4618      	mov	r0, r3
 8008b04:	4621      	mov	r1, r4
 8008b06:	f7f7 ff8d 	bl	8000a24 <__aeabi_d2iz>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4b35      	ldr	r3, [pc, #212]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8008b0e:	605a      	str	r2, [r3, #4]

			LicznikPomocniczyRomberg = 4;
 8008b10:	4b2e      	ldr	r3, [pc, #184]	; (8008bcc <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8008b12:	2204      	movs	r2, #4
 8008b14:	701a      	strb	r2, [r3, #0]
 8008b16:	e37f      	b.n	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>

		} else if (LicznikPomocniczyRomberg == 4) {
 8008b18:	4b2c      	ldr	r3, [pc, #176]	; (8008bcc <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d168      	bne.n	8008bf4 <HAL_TIM_PeriodElapsedCallback+0xe10>
			DataTempRom[1] = DataOld;
 8008b22:	4b31      	ldr	r3, [pc, #196]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0xe04>)
 8008b24:	4a2a      	ldr	r2, [pc, #168]	; (8008bd0 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8008b26:	3306      	adds	r3, #6
 8008b28:	6811      	ldr	r1, [r2, #0]
 8008b2a:	6019      	str	r1, [r3, #0]
 8008b2c:	8892      	ldrh	r2, [r2, #4]
 8008b2e:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008b30:	4b27      	ldr	r3, [pc, #156]	; (8008bd0 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b21b      	sxth	r3, r3
 8008b36:	461a      	mov	r2, r3
 8008b38:	4b26      	ldr	r3, [pc, #152]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b21b      	sxth	r3, r3
 8008b3e:	4413      	add	r3, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7f7 fcf7 	bl	8000534 <__aeabi_i2d>
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008b4c:	f7f7 fd58 	bl	8000600 <__aeabi_dmul>
 8008b50:	4603      	mov	r3, r0
 8008b52:	460c      	mov	r4, r1
 8008b54:	4618      	mov	r0, r3
 8008b56:	4621      	mov	r1, r4
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 8008b5e:	f7f7 fd4f 	bl	8000600 <__aeabi_dmul>
 8008b62:	4603      	mov	r3, r0
 8008b64:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008b66:	4618      	mov	r0, r3
 8008b68:	4621      	mov	r1, r4
 8008b6a:	f7f7 ff5b 	bl	8000a24 <__aeabi_d2iz>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b1b      	ldr	r3, [pc, #108]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	4a1a      	ldr	r2, [pc, #104]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0xdfc>)
 8008b78:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <HAL_TIM_PeriodElapsedCallback+0xdec>)
 8008b7c:	885b      	ldrh	r3, [r3, #2]
 8008b7e:	b21b      	sxth	r3, r3
 8008b80:	461a      	mov	r2, r3
 8008b82:	4b14      	ldr	r3, [pc, #80]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0xdf0>)
 8008b84:	885b      	ldrh	r3, [r3, #2]
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	4413      	add	r3, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f7 fcd2 	bl	8000534 <__aeabi_i2d>
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0xdf4>)
 8008b96:	f7f7 fd33 	bl	8000600 <__aeabi_dmul>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	460c      	mov	r4, r1
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0xdf8>)
 8008ba8:	f7f7 fd2a 	bl	8000600 <__aeabi_dmul>
 8008bac:	4603      	mov	r3, r0
 8008bae:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	f7f7 ff36 	bl	8000a24 <__aeabi_d2iz>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0xe00>)
 8008bc2:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 5;
 8008bc4:	4b01      	ldr	r3, [pc, #4]	; (8008bcc <HAL_TIM_PeriodElapsedCallback+0xde8>)
 8008bc6:	2205      	movs	r2, #5
 8008bc8:	701a      	strb	r2, [r3, #0]
 8008bca:	e325      	b.n	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>
 8008bcc:	20000540 	.word	0x20000540
 8008bd0:	200004b0 	.word	0x200004b0
 8008bd4:	20000580 	.word	0x20000580
 8008bd8:	3fe00000 	.word	0x3fe00000
 8008bdc:	40100000 	.word	0x40100000
 8008be0:	20000598 	.word	0x20000598
 8008be4:	20000568 	.word	0x20000568
 8008be8:	200004b8 	.word	0x200004b8
 8008bec:	40200000 	.word	0x40200000
 8008bf0:	40300000 	.word	0x40300000

		} else if (LicznikPomocniczyRomberg == 5) {
 8008bf4:	4b7b      	ldr	r3, [pc, #492]	; (8008de4 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	f040 8098 	bne.w	8008d30 <HAL_TIM_PeriodElapsedCallback+0xf4c>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008c00:	4b79      	ldr	r3, [pc, #484]	; (8008de8 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b21b      	sxth	r3, r3
 8008c06:	461a      	mov	r2, r3
 8008c08:	4b78      	ldr	r3, [pc, #480]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b21b      	sxth	r3, r3
 8008c0e:	4413      	add	r3, r2
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7f7 fc8f 	bl	8000534 <__aeabi_i2d>
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	4b75      	ldr	r3, [pc, #468]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008c1c:	f7f7 fcf0 	bl	8000600 <__aeabi_dmul>
 8008c20:	4603      	mov	r3, r0
 8008c22:	460c      	mov	r4, r1
 8008c24:	4618      	mov	r0, r3
 8008c26:	4621      	mov	r1, r4
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	4b71      	ldr	r3, [pc, #452]	; (8008df4 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8008c2e:	f7f7 fce7 	bl	8000600 <__aeabi_dmul>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008c36:	4618      	mov	r0, r3
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7f7 fef3 	bl	8000a24 <__aeabi_d2iz>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	4b6d      	ldr	r3, [pc, #436]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	4a6c      	ldr	r2, [pc, #432]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008c48:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008c4a:	4b67      	ldr	r3, [pc, #412]	; (8008de8 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	b21b      	sxth	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	4b66      	ldr	r3, [pc, #408]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008c54:	885b      	ldrh	r3, [r3, #2]
 8008c56:	b21b      	sxth	r3, r3
 8008c58:	4413      	add	r3, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7f7 fc6a 	bl	8000534 <__aeabi_i2d>
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	4b62      	ldr	r3, [pc, #392]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008c66:	f7f7 fccb 	bl	8000600 <__aeabi_dmul>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	4618      	mov	r0, r3
 8008c70:	4621      	mov	r1, r4
 8008c72:	f04f 0200 	mov.w	r2, #0
 8008c76:	4b5f      	ldr	r3, [pc, #380]	; (8008df4 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8008c78:	f7f7 fcc2 	bl	8000600 <__aeabi_dmul>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008c80:	4618      	mov	r0, r3
 8008c82:	4621      	mov	r1, r4
 8008c84:	f7f7 fece 	bl	8000a24 <__aeabi_d2iz>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	4b5c      	ldr	r3, [pc, #368]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	4413      	add	r3, r2
 8008c90:	4a5a      	ldr	r2, [pc, #360]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008c92:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 8008c94:	4b5a      	ldr	r3, [pc, #360]	; (8008e00 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8008c96:	88db      	ldrh	r3, [r3, #6]
 8008c98:	b21b      	sxth	r3, r3
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	4b53      	ldr	r3, [pc, #332]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b21b      	sxth	r3, r3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7f7 fc45 	bl	8000534 <__aeabi_i2d>
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	4b50      	ldr	r3, [pc, #320]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008cb0:	f7f7 fca6 	bl	8000600 <__aeabi_dmul>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	4618      	mov	r0, r3
 8008cba:	4621      	mov	r1, r4
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	4b50      	ldr	r3, [pc, #320]	; (8008e04 <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8008cc2:	f7f7 fc9d 	bl	8000600 <__aeabi_dmul>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 8008cca:	4618      	mov	r0, r3
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7f7 fea9 	bl	8000a24 <__aeabi_d2iz>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	4b48      	ldr	r3, [pc, #288]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4413      	add	r3, r2
 8008cda:	4a47      	ldr	r2, [pc, #284]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008cdc:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 8008cde:	4b48      	ldr	r3, [pc, #288]	; (8008e00 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8008ce0:	891b      	ldrh	r3, [r3, #8]
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	4b41      	ldr	r3, [pc, #260]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	b21b      	sxth	r3, r3
 8008cec:	4413      	add	r3, r2
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7f7 fc20 	bl	8000534 <__aeabi_i2d>
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	4b3d      	ldr	r3, [pc, #244]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008cfa:	f7f7 fc81 	bl	8000600 <__aeabi_dmul>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	460c      	mov	r4, r1
 8008d02:	4618      	mov	r0, r3
 8008d04:	4621      	mov	r1, r4
 8008d06:	f04f 0200 	mov.w	r2, #0
 8008d0a:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <HAL_TIM_PeriodElapsedCallback+0x1020>)
 8008d0c:	f7f7 fc78 	bl	8000600 <__aeabi_dmul>
 8008d10:	4603      	mov	r3, r0
 8008d12:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 8008d14:	4618      	mov	r0, r3
 8008d16:	4621      	mov	r1, r4
 8008d18:	f7f7 fe84 	bl	8000a24 <__aeabi_d2iz>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	4b37      	ldr	r3, [pc, #220]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	4413      	add	r3, r2
 8008d24:	4a35      	ldr	r2, [pc, #212]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008d26:	6093      	str	r3, [r2, #8]

			LicznikPomocniczyRomberg = 6;
 8008d28:	4b2e      	ldr	r3, [pc, #184]	; (8008de4 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8008d2a:	2206      	movs	r2, #6
 8008d2c:	701a      	strb	r2, [r3, #0]
 8008d2e:	e273      	b.n	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>

		} else if (LicznikPomocniczyRomberg == 6) {
 8008d30:	4b2c      	ldr	r3, [pc, #176]	; (8008de4 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b06      	cmp	r3, #6
 8008d38:	d166      	bne.n	8008e08 <HAL_TIM_PeriodElapsedCallback+0x1024>
			DataTempRom[3] = DataOld;
 8008d3a:	4b31      	ldr	r3, [pc, #196]	; (8008e00 <HAL_TIM_PeriodElapsedCallback+0x101c>)
 8008d3c:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8008d3e:	3312      	adds	r3, #18
 8008d40:	6811      	ldr	r1, [r2, #0]
 8008d42:	6019      	str	r1, [r3, #0]
 8008d44:	8892      	ldrh	r2, [r2, #4]
 8008d46:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008d48:	4b27      	ldr	r3, [pc, #156]	; (8008de8 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	b21b      	sxth	r3, r3
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4b26      	ldr	r3, [pc, #152]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b21b      	sxth	r3, r3
 8008d56:	4413      	add	r3, r2
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7f7 fbeb 	bl	8000534 <__aeabi_i2d>
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	4b23      	ldr	r3, [pc, #140]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008d64:	f7f7 fc4c 	bl	8000600 <__aeabi_dmul>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	460c      	mov	r4, r1
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	4621      	mov	r1, r4
 8008d70:	f04f 0200 	mov.w	r2, #0
 8008d74:	4b1f      	ldr	r3, [pc, #124]	; (8008df4 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8008d76:	f7f7 fc43 	bl	8000600 <__aeabi_dmul>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008d7e:	4618      	mov	r0, r3
 8008d80:	4621      	mov	r1, r4
 8008d82:	f7f7 fe4f 	bl	8000a24 <__aeabi_d2iz>
 8008d86:	4602      	mov	r2, r0
 8008d88:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <HAL_TIM_PeriodElapsedCallback+0x1014>)
 8008d90:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <HAL_TIM_PeriodElapsedCallback+0x1004>)
 8008d94:	885b      	ldrh	r3, [r3, #2]
 8008d96:	b21b      	sxth	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4b14      	ldr	r3, [pc, #80]	; (8008dec <HAL_TIM_PeriodElapsedCallback+0x1008>)
 8008d9c:	885b      	ldrh	r3, [r3, #2]
 8008d9e:	b21b      	sxth	r3, r3
 8008da0:	4413      	add	r3, r2
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7f7 fbc6 	bl	8000534 <__aeabi_i2d>
 8008da8:	f04f 0200 	mov.w	r2, #0
 8008dac:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <HAL_TIM_PeriodElapsedCallback+0x100c>)
 8008dae:	f7f7 fc27 	bl	8000600 <__aeabi_dmul>
 8008db2:	4603      	mov	r3, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	4618      	mov	r0, r3
 8008db8:	4621      	mov	r1, r4
 8008dba:	f04f 0200 	mov.w	r2, #0
 8008dbe:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <HAL_TIM_PeriodElapsedCallback+0x1010>)
 8008dc0:	f7f7 fc1e 	bl	8000600 <__aeabi_dmul>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008dc8:	4618      	mov	r0, r3
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f7f7 fe2a 	bl	8000a24 <__aeabi_d2iz>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4b0a      	ldr	r3, [pc, #40]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4a08      	ldr	r2, [pc, #32]	; (8008dfc <HAL_TIM_PeriodElapsedCallback+0x1018>)
 8008dda:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 7;
 8008ddc:	4b01      	ldr	r3, [pc, #4]	; (8008de4 <HAL_TIM_PeriodElapsedCallback+0x1000>)
 8008dde:	2207      	movs	r2, #7
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	e219      	b.n	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>
 8008de4:	20000540 	.word	0x20000540
 8008de8:	200004b0 	.word	0x200004b0
 8008dec:	20000580 	.word	0x20000580
 8008df0:	3fe00000 	.word	0x3fe00000
 8008df4:	40100000 	.word	0x40100000
 8008df8:	20000598 	.word	0x20000598
 8008dfc:	20000568 	.word	0x20000568
 8008e00:	200004b8 	.word	0x200004b8
 8008e04:	40200000 	.word	0x40200000

		} else if (LicznikPomocniczyRomberg == 7) {
 8008e08:	4bb8      	ldr	r3, [pc, #736]	; (80090ec <HAL_TIM_PeriodElapsedCallback+0x1308>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b07      	cmp	r3, #7
 8008e10:	f040 8202 	bne.w	8009218 <HAL_TIM_PeriodElapsedCallback+0x1434>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008e14:	4bb6      	ldr	r3, [pc, #728]	; (80090f0 <HAL_TIM_PeriodElapsedCallback+0x130c>)
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b21b      	sxth	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4bb5      	ldr	r3, [pc, #724]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b21b      	sxth	r3, r3
 8008e22:	4413      	add	r3, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7f7 fb85 	bl	8000534 <__aeabi_i2d>
 8008e2a:	f04f 0200 	mov.w	r2, #0
 8008e2e:	4bb2      	ldr	r3, [pc, #712]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008e30:	f7f7 fbe6 	bl	8000600 <__aeabi_dmul>
 8008e34:	4603      	mov	r3, r0
 8008e36:	460c      	mov	r4, r1
 8008e38:	4618      	mov	r0, r3
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	4bae      	ldr	r3, [pc, #696]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x1318>)
 8008e42:	f7f7 fbdd 	bl	8000600 <__aeabi_dmul>
 8008e46:	4603      	mov	r3, r0
 8008e48:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	f7f7 fde9 	bl	8000a24 <__aeabi_d2iz>
 8008e52:	4602      	mov	r2, r0
 8008e54:	4baa      	ldr	r3, [pc, #680]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	4aa9      	ldr	r2, [pc, #676]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008e5c:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008e5e:	4ba4      	ldr	r3, [pc, #656]	; (80090f0 <HAL_TIM_PeriodElapsedCallback+0x130c>)
 8008e60:	885b      	ldrh	r3, [r3, #2]
 8008e62:	b21b      	sxth	r3, r3
 8008e64:	461a      	mov	r2, r3
 8008e66:	4ba3      	ldr	r3, [pc, #652]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008e68:	885b      	ldrh	r3, [r3, #2]
 8008e6a:	b21b      	sxth	r3, r3
 8008e6c:	4413      	add	r3, r2
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f7 fb60 	bl	8000534 <__aeabi_i2d>
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	4b9f      	ldr	r3, [pc, #636]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008e7a:	f7f7 fbc1 	bl	8000600 <__aeabi_dmul>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	4618      	mov	r0, r3
 8008e84:	4621      	mov	r1, r4
 8008e86:	f04f 0200 	mov.w	r2, #0
 8008e8a:	4b9c      	ldr	r3, [pc, #624]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x1318>)
 8008e8c:	f7f7 fbb8 	bl	8000600 <__aeabi_dmul>
 8008e90:	4603      	mov	r3, r0
 8008e92:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008e94:	4618      	mov	r0, r3
 8008e96:	4621      	mov	r1, r4
 8008e98:	f7f7 fdc4 	bl	8000a24 <__aeabi_d2iz>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	4b99      	ldr	r3, [pc, #612]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	4a97      	ldr	r2, [pc, #604]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008ea6:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[3].OsX + DataNow.OsX) * 0.5));
 8008ea8:	4b97      	ldr	r3, [pc, #604]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8008eaa:	8a5b      	ldrh	r3, [r3, #18]
 8008eac:	b21b      	sxth	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	4b90      	ldr	r3, [pc, #576]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	b21b      	sxth	r3, r3
 8008eb6:	4413      	add	r3, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7f7 fb3b 	bl	8000534 <__aeabi_i2d>
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	4b8d      	ldr	r3, [pc, #564]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008ec4:	f7f7 fb9c 	bl	8000600 <__aeabi_dmul>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4618      	mov	r0, r3
 8008ece:	4621      	mov	r1, r4
 8008ed0:	f04f 0200 	mov.w	r2, #0
 8008ed4:	4b8d      	ldr	r3, [pc, #564]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x1328>)
 8008ed6:	f7f7 fb93 	bl	8000600 <__aeabi_dmul>
 8008eda:	4603      	mov	r3, r0
 8008edc:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 8008ede:	4618      	mov	r0, r3
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	f7f7 fd9f 	bl	8000a24 <__aeabi_d2iz>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	4b85      	ldr	r3, [pc, #532]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	4413      	add	r3, r2
 8008eee:	4a84      	ldr	r2, [pc, #528]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008ef0:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[3].OsY + DataNow.OsY) * 0.5));
 8008ef2:	4b85      	ldr	r3, [pc, #532]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8008ef4:	8a9b      	ldrh	r3, [r3, #20]
 8008ef6:	b21b      	sxth	r3, r3
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4b7e      	ldr	r3, [pc, #504]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008efc:	885b      	ldrh	r3, [r3, #2]
 8008efe:	b21b      	sxth	r3, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7f7 fb16 	bl	8000534 <__aeabi_i2d>
 8008f08:	f04f 0200 	mov.w	r2, #0
 8008f0c:	4b7a      	ldr	r3, [pc, #488]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008f0e:	f7f7 fb77 	bl	8000600 <__aeabi_dmul>
 8008f12:	4603      	mov	r3, r0
 8008f14:	460c      	mov	r4, r1
 8008f16:	4618      	mov	r0, r3
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	4b7b      	ldr	r3, [pc, #492]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x1328>)
 8008f20:	f7f7 fb6e 	bl	8000600 <__aeabi_dmul>
 8008f24:	4603      	mov	r3, r0
 8008f26:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	f7f7 fd7a 	bl	8000a24 <__aeabi_d2iz>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4b74      	ldr	r3, [pc, #464]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	4413      	add	r3, r2
 8008f38:	4a72      	ldr	r2, [pc, #456]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008f3a:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] += (long) (16
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 8008f3c:	4b72      	ldr	r3, [pc, #456]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8008f3e:	88db      	ldrh	r3, [r3, #6]
 8008f40:	b21b      	sxth	r3, r3
 8008f42:	461a      	mov	r2, r3
 8008f44:	4b6b      	ldr	r3, [pc, #428]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008f46:	881b      	ldrh	r3, [r3, #0]
 8008f48:	b21b      	sxth	r3, r3
 8008f4a:	4413      	add	r3, r2
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7f7 faf1 	bl	8000534 <__aeabi_i2d>
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008f58:	f7f7 fb52 	bl	8000600 <__aeabi_dmul>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4618      	mov	r0, r3
 8008f62:	4621      	mov	r1, r4
 8008f64:	f04f 0200 	mov.w	r2, #0
 8008f68:	4b69      	ldr	r3, [pc, #420]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x132c>)
 8008f6a:	f7f7 fb49 	bl	8000600 <__aeabi_dmul>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] += (long) (16
 8008f72:	4618      	mov	r0, r3
 8008f74:	4621      	mov	r1, r4
 8008f76:	f7f7 fd55 	bl	8000a24 <__aeabi_d2iz>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b60      	ldr	r3, [pc, #384]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	4a5f      	ldr	r2, [pc, #380]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8008f84:	6053      	str	r3, [r2, #4]
			CalkaPosredniaRomY[1] += (long) (16
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 8008f86:	4b60      	ldr	r3, [pc, #384]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8008f88:	891b      	ldrh	r3, [r3, #8]
 8008f8a:	b21b      	sxth	r3, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	4b59      	ldr	r3, [pc, #356]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008f90:	885b      	ldrh	r3, [r3, #2]
 8008f92:	b21b      	sxth	r3, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7f7 facc 	bl	8000534 <__aeabi_i2d>
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	4b55      	ldr	r3, [pc, #340]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008fa2:	f7f7 fb2d 	bl	8000600 <__aeabi_dmul>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	460c      	mov	r4, r1
 8008faa:	4618      	mov	r0, r3
 8008fac:	4621      	mov	r1, r4
 8008fae:	f04f 0200 	mov.w	r2, #0
 8008fb2:	4b57      	ldr	r3, [pc, #348]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x132c>)
 8008fb4:	f7f7 fb24 	bl	8000600 <__aeabi_dmul>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] += (long) (16
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	f7f7 fd30 	bl	8000a24 <__aeabi_d2iz>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	4b4f      	ldr	r3, [pc, #316]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	4413      	add	r3, r2
 8008fcc:	4a4d      	ldr	r2, [pc, #308]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8008fce:	6053      	str	r3, [r2, #4]

			CalkaPosredniaRomX[0] = (long) (32
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 8008fd0:	4b4d      	ldr	r3, [pc, #308]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b21b      	sxth	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4b46      	ldr	r3, [pc, #280]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 8008fda:	881b      	ldrh	r3, [r3, #0]
 8008fdc:	b21b      	sxth	r3, r3
 8008fde:	4413      	add	r3, r2
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7f7 faa7 	bl	8000534 <__aeabi_i2d>
 8008fe6:	f04f 0200 	mov.w	r2, #0
 8008fea:	4b43      	ldr	r3, [pc, #268]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8008fec:	f7f7 fb08 	bl	8000600 <__aeabi_dmul>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	4621      	mov	r1, r4
 8008ff8:	f04f 0200 	mov.w	r2, #0
 8008ffc:	4b45      	ldr	r3, [pc, #276]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x1330>)
 8008ffe:	f7f7 faff 	bl	8000600 <__aeabi_dmul>
 8009002:	4603      	mov	r3, r0
 8009004:	460c      	mov	r4, r1
			CalkaPosredniaRomX[0] = (long) (32
 8009006:	4618      	mov	r0, r3
 8009008:	4621      	mov	r1, r4
 800900a:	f7f7 fd0b 	bl	8000a24 <__aeabi_d2iz>
 800900e:	4602      	mov	r2, r0
 8009010:	4b3b      	ldr	r3, [pc, #236]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8009012:	601a      	str	r2, [r3, #0]
			CalkaPosredniaRomY[0] = (long) (32
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 8009014:	4b3c      	ldr	r3, [pc, #240]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x1324>)
 8009016:	885b      	ldrh	r3, [r3, #2]
 8009018:	b21b      	sxth	r3, r3
 800901a:	461a      	mov	r2, r3
 800901c:	4b35      	ldr	r3, [pc, #212]	; (80090f4 <HAL_TIM_PeriodElapsedCallback+0x1310>)
 800901e:	885b      	ldrh	r3, [r3, #2]
 8009020:	b21b      	sxth	r3, r3
 8009022:	4413      	add	r3, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f7f7 fa85 	bl	8000534 <__aeabi_i2d>
 800902a:	f04f 0200 	mov.w	r2, #0
 800902e:	4b32      	ldr	r3, [pc, #200]	; (80090f8 <HAL_TIM_PeriodElapsedCallback+0x1314>)
 8009030:	f7f7 fae6 	bl	8000600 <__aeabi_dmul>
 8009034:	4603      	mov	r3, r0
 8009036:	460c      	mov	r4, r1
 8009038:	4618      	mov	r0, r3
 800903a:	4621      	mov	r1, r4
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	4b34      	ldr	r3, [pc, #208]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x1330>)
 8009042:	f7f7 fadd 	bl	8000600 <__aeabi_dmul>
 8009046:	4603      	mov	r3, r0
 8009048:	460c      	mov	r4, r1
			CalkaPosredniaRomY[0] = (long) (32
 800904a:	4618      	mov	r0, r3
 800904c:	4621      	mov	r1, r4
 800904e:	f7f7 fce9 	bl	8000a24 <__aeabi_d2iz>
 8009052:	4602      	mov	r2, r0
 8009054:	4b2b      	ldr	r3, [pc, #172]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 8009056:	601a      	str	r2, [r3, #0]

			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 8009058:	4b29      	ldr	r3, [pc, #164]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800905a:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomX[1] - CalkaPosredniaRomX[0]) / 3));
 800905c:	4b28      	ldr	r3, [pc, #160]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800905e:	6859      	ldr	r1, [r3, #4]
 8009060:	4b27      	ldr	r3, [pc, #156]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	1acb      	subs	r3, r1, r3
 8009066:	492c      	ldr	r1, [pc, #176]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x1334>)
 8009068:	fb81 0103 	smull	r0, r1, r1, r3
 800906c:	17db      	asrs	r3, r3, #31
 800906e:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 8009070:	4413      	add	r3, r2
 8009072:	4a2a      	ldr	r2, [pc, #168]	; (800911c <HAL_TIM_PeriodElapsedCallback+0x1338>)
 8009074:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 8009076:	4b22      	ldr	r3, [pc, #136]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8009078:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomX[2] - CalkaPosredniaRomX[1]) / 3));
 800907a:	4b21      	ldr	r3, [pc, #132]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800907c:	6899      	ldr	r1, [r3, #8]
 800907e:	4b20      	ldr	r3, [pc, #128]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	1acb      	subs	r3, r1, r3
 8009084:	4924      	ldr	r1, [pc, #144]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x1334>)
 8009086:	fb81 0103 	smull	r0, r1, r1, r3
 800908a:	17db      	asrs	r3, r3, #31
 800908c:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 800908e:	4413      	add	r3, r2
 8009090:	4a22      	ldr	r2, [pc, #136]	; (800911c <HAL_TIM_PeriodElapsedCallback+0x1338>)
 8009092:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 8009094:	4b1a      	ldr	r3, [pc, #104]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 8009096:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomX[3] - CalkaPosredniaRomX[2]) / 3));
 8009098:	4b19      	ldr	r3, [pc, #100]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800909a:	68d9      	ldr	r1, [r3, #12]
 800909c:	4b18      	ldr	r3, [pc, #96]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x131c>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	1acb      	subs	r3, r1, r3
 80090a2:	491d      	ldr	r1, [pc, #116]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x1334>)
 80090a4:	fb81 0103 	smull	r0, r1, r1, r3
 80090a8:	17db      	asrs	r3, r3, #31
 80090aa:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 80090ac:	4413      	add	r3, r2
 80090ae:	4a1b      	ldr	r2, [pc, #108]	; (800911c <HAL_TIM_PeriodElapsedCallback+0x1338>)
 80090b0:	6093      	str	r3, [r2, #8]

			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 80090b2:	4b14      	ldr	r3, [pc, #80]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090b4:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomY[1] - CalkaPosredniaRomY[0]) / 3));
 80090b6:	4b13      	ldr	r3, [pc, #76]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090b8:	6859      	ldr	r1, [r3, #4]
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	1acb      	subs	r3, r1, r3
 80090c0:	4915      	ldr	r1, [pc, #84]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x1334>)
 80090c2:	fb81 0103 	smull	r0, r1, r1, r3
 80090c6:	17db      	asrs	r3, r3, #31
 80090c8:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 80090ca:	4413      	add	r3, r2
 80090cc:	4a14      	ldr	r2, [pc, #80]	; (8009120 <HAL_TIM_PeriodElapsedCallback+0x133c>)
 80090ce:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 80090d0:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090d2:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomY[2] - CalkaPosredniaRomY[1]) / 3));
 80090d4:	4b0b      	ldr	r3, [pc, #44]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090d6:	6899      	ldr	r1, [r3, #8]
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x1320>)
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	1acb      	subs	r3, r1, r3
 80090de:	490e      	ldr	r1, [pc, #56]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x1334>)
 80090e0:	fb81 0103 	smull	r0, r1, r1, r3
 80090e4:	17db      	asrs	r3, r3, #31
 80090e6:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 80090e8:	4413      	add	r3, r2
 80090ea:	e01b      	b.n	8009124 <HAL_TIM_PeriodElapsedCallback+0x1340>
 80090ec:	20000540 	.word	0x20000540
 80090f0:	200004b0 	.word	0x200004b0
 80090f4:	20000580 	.word	0x20000580
 80090f8:	3fe00000 	.word	0x3fe00000
 80090fc:	40100000 	.word	0x40100000
 8009100:	20000598 	.word	0x20000598
 8009104:	20000568 	.word	0x20000568
 8009108:	200004b8 	.word	0x200004b8
 800910c:	40200000 	.word	0x40200000
 8009110:	40300000 	.word	0x40300000
 8009114:	40400000 	.word	0x40400000
 8009118:	55555556 	.word	0x55555556
 800911c:	2000055c 	.word	0x2000055c
 8009120:	20000544 	.word	0x20000544
 8009124:	4a9c      	ldr	r2, [pc, #624]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8009126:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 8009128:	4b9c      	ldr	r3, [pc, #624]	; (800939c <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800912a:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomY[3] - CalkaPosredniaRomY[2]) / 3));
 800912c:	4b9b      	ldr	r3, [pc, #620]	; (800939c <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	4b9a      	ldr	r3, [pc, #616]	; (800939c <HAL_TIM_PeriodElapsedCallback+0x15b8>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	1acb      	subs	r3, r1, r3
 8009136:	499a      	ldr	r1, [pc, #616]	; (80093a0 <HAL_TIM_PeriodElapsedCallback+0x15bc>)
 8009138:	fb81 0103 	smull	r0, r1, r1, r3
 800913c:	17db      	asrs	r3, r3, #31
 800913e:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 8009140:	4413      	add	r3, r2
 8009142:	4a95      	ldr	r2, [pc, #596]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8009144:	6093      	str	r3, [r2, #8]

			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 8009146:	4b97      	ldr	r3, [pc, #604]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8009148:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomX[1] - CalkaPomocniczaRomX[0]) / 15));
 800914a:	4b96      	ldr	r3, [pc, #600]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800914c:	6859      	ldr	r1, [r3, #4]
 800914e:	4b95      	ldr	r3, [pc, #596]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	1acb      	subs	r3, r1, r3
 8009154:	4994      	ldr	r1, [pc, #592]	; (80093a8 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 8009156:	fb81 0103 	smull	r0, r1, r1, r3
 800915a:	4419      	add	r1, r3
 800915c:	10c9      	asrs	r1, r1, #3
 800915e:	17db      	asrs	r3, r3, #31
 8009160:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 8009162:	4413      	add	r3, r2
 8009164:	4a91      	ldr	r2, [pc, #580]	; (80093ac <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8009166:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 8009168:	4b8e      	ldr	r3, [pc, #568]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800916a:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomX[2] - CalkaPomocniczaRomX[1]) / 15));
 800916c:	4b8d      	ldr	r3, [pc, #564]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 800916e:	6899      	ldr	r1, [r3, #8]
 8009170:	4b8c      	ldr	r3, [pc, #560]	; (80093a4 <HAL_TIM_PeriodElapsedCallback+0x15c0>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	1acb      	subs	r3, r1, r3
 8009176:	498c      	ldr	r1, [pc, #560]	; (80093a8 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 8009178:	fb81 0103 	smull	r0, r1, r1, r3
 800917c:	4419      	add	r1, r3
 800917e:	10c9      	asrs	r1, r1, #3
 8009180:	17db      	asrs	r3, r3, #31
 8009182:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 8009184:	4413      	add	r3, r2
 8009186:	4a89      	ldr	r2, [pc, #548]	; (80093ac <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 8009188:	6053      	str	r3, [r2, #4]

			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 800918a:	4b83      	ldr	r3, [pc, #524]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 800918c:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomY[1] - CalkaPomocniczaRomY[0]) / 15));
 800918e:	4b82      	ldr	r3, [pc, #520]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	4b81      	ldr	r3, [pc, #516]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1acb      	subs	r3, r1, r3
 8009198:	4983      	ldr	r1, [pc, #524]	; (80093a8 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 800919a:	fb81 0103 	smull	r0, r1, r1, r3
 800919e:	4419      	add	r1, r3
 80091a0:	10c9      	asrs	r1, r1, #3
 80091a2:	17db      	asrs	r3, r3, #31
 80091a4:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 80091a6:	4413      	add	r3, r2
 80091a8:	4a81      	ldr	r2, [pc, #516]	; (80093b0 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 80091aa:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 80091ac:	4b7a      	ldr	r3, [pc, #488]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 80091ae:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomY[2] - CalkaPomocniczaRomY[1]) / 15));
 80091b0:	4b79      	ldr	r3, [pc, #484]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 80091b2:	6899      	ldr	r1, [r3, #8]
 80091b4:	4b78      	ldr	r3, [pc, #480]	; (8009398 <HAL_TIM_PeriodElapsedCallback+0x15b4>)
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	1acb      	subs	r3, r1, r3
 80091ba:	497b      	ldr	r1, [pc, #492]	; (80093a8 <HAL_TIM_PeriodElapsedCallback+0x15c4>)
 80091bc:	fb81 0103 	smull	r0, r1, r1, r3
 80091c0:	4419      	add	r1, r3
 80091c2:	10c9      	asrs	r1, r1, #3
 80091c4:	17db      	asrs	r3, r3, #31
 80091c6:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 80091c8:	4413      	add	r3, r2
 80091ca:	4a79      	ldr	r2, [pc, #484]	; (80093b0 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 80091cc:	6053      	str	r3, [r2, #4]

			CalkaRombX =
					(long) (CalkaPomocnicza2RomX[1]
 80091ce:	4b77      	ldr	r3, [pc, #476]	; (80093ac <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 80091d0:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomX[1]
 80091d2:	4b76      	ldr	r3, [pc, #472]	; (80093ac <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 80091d4:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomX[0]) / 63));
 80091d6:	4b75      	ldr	r3, [pc, #468]	; (80093ac <HAL_TIM_PeriodElapsedCallback+0x15c8>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	1acb      	subs	r3, r1, r3
 80091dc:	4975      	ldr	r1, [pc, #468]	; (80093b4 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 80091de:	fb81 0103 	smull	r0, r1, r1, r3
 80091e2:	4419      	add	r1, r3
 80091e4:	1149      	asrs	r1, r1, #5
 80091e6:	17db      	asrs	r3, r3, #31
 80091e8:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomX[1]
 80091ea:	4413      	add	r3, r2
			CalkaRombX =
 80091ec:	4a72      	ldr	r2, [pc, #456]	; (80093b8 <HAL_TIM_PeriodElapsedCallback+0x15d4>)
 80091ee:	6013      	str	r3, [r2, #0]
			CalkaRombY =
					(long) (CalkaPomocnicza2RomY[1]
 80091f0:	4b6f      	ldr	r3, [pc, #444]	; (80093b0 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 80091f2:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomY[1]
 80091f4:	4b6e      	ldr	r3, [pc, #440]	; (80093b0 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 80091f6:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomY[0]) / 63));
 80091f8:	4b6d      	ldr	r3, [pc, #436]	; (80093b0 <HAL_TIM_PeriodElapsedCallback+0x15cc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	1acb      	subs	r3, r1, r3
 80091fe:	496d      	ldr	r1, [pc, #436]	; (80093b4 <HAL_TIM_PeriodElapsedCallback+0x15d0>)
 8009200:	fb81 0103 	smull	r0, r1, r1, r3
 8009204:	4419      	add	r1, r3
 8009206:	1149      	asrs	r1, r1, #5
 8009208:	17db      	asrs	r3, r3, #31
 800920a:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomY[1]
 800920c:	4413      	add	r3, r2
			CalkaRombY =
 800920e:	4a6b      	ldr	r2, [pc, #428]	; (80093bc <HAL_TIM_PeriodElapsedCallback+0x15d8>)
 8009210:	6013      	str	r3, [r2, #0]

			LicznikPomocniczyRomberg = 0;
 8009212:	4b6b      	ldr	r3, [pc, #428]	; (80093c0 <HAL_TIM_PeriodElapsedCallback+0x15dc>)
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]
		}
		//koniec

//*************KONIEC TESTOWEJ CZESCI*****************************************************************************************

		DataOld = DataNow;
 8009218:	4b6a      	ldr	r3, [pc, #424]	; (80093c4 <HAL_TIM_PeriodElapsedCallback+0x15e0>)
 800921a:	4a6b      	ldr	r2, [pc, #428]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x15e4>)
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	6019      	str	r1, [r3, #0]
 8009220:	8892      	ldrh	r2, [r2, #4]
 8009222:	809a      	strh	r2, [r3, #4]
// movement of the ball
		if (AngleY > 10000) {
 8009224:	4b69      	ldr	r3, [pc, #420]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f242 7210 	movw	r2, #10000	; 0x2710
 800922c:	4293      	cmp	r3, r2
 800922e:	dd12      	ble.n	8009256 <HAL_TIM_PeriodElapsedCallback+0x1472>
			fMovedX = 1;
 8009230:	4b67      	ldr	r3, [pc, #412]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8009232:	2201      	movs	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009236:	4b67      	ldr	r3, [pc, #412]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8009238:	2201      	movs	r2, #1
 800923a:	701a      	strb	r2, [r3, #0]

			if (X < 215)
 800923c:	4b66      	ldr	r3, [pc, #408]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	2bd6      	cmp	r3, #214	; 0xd6
 8009244:	d81e      	bhi.n	8009284 <HAL_TIM_PeriodElapsedCallback+0x14a0>
				X += 1;
 8009246:	4b64      	ldr	r3, [pc, #400]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	3301      	adds	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	4b61      	ldr	r3, [pc, #388]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8009252:	801a      	strh	r2, [r3, #0]
 8009254:	e016      	b.n	8009284 <HAL_TIM_PeriodElapsedCallback+0x14a0>

		} else if (AngleY < -10000) {
 8009256:	4b5d      	ldr	r3, [pc, #372]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a60      	ldr	r2, [pc, #384]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	da11      	bge.n	8009284 <HAL_TIM_PeriodElapsedCallback+0x14a0>
			fMovedX = 1;
 8009260:	4b5b      	ldr	r3, [pc, #364]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8009262:	2201      	movs	r2, #1
 8009264:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009266:	4b5b      	ldr	r3, [pc, #364]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8009268:	2201      	movs	r2, #1
 800926a:	701a      	strb	r2, [r3, #0]

			if (X > 25)
 800926c:	4b5a      	ldr	r3, [pc, #360]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b19      	cmp	r3, #25
 8009274:	d906      	bls.n	8009284 <HAL_TIM_PeriodElapsedCallback+0x14a0>
				X -= 1;
 8009276:	4b58      	ldr	r3, [pc, #352]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	b29a      	uxth	r2, r3
 8009280:	4b55      	ldr	r3, [pc, #340]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x15f4>)
 8009282:	801a      	strh	r2, [r3, #0]

		}

		if (AngleX > 10000) {
 8009284:	4b56      	ldr	r3, [pc, #344]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f242 7210 	movw	r2, #10000	; 0x2710
 800928c:	4293      	cmp	r3, r2
 800928e:	dd13      	ble.n	80092b8 <HAL_TIM_PeriodElapsedCallback+0x14d4>
			fMovedX = 1;
 8009290:	4b4f      	ldr	r3, [pc, #316]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8009292:	2201      	movs	r2, #1
 8009294:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009296:	4b4f      	ldr	r3, [pc, #316]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 8009298:	2201      	movs	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]

			if (Y < 295)
 800929c:	4b51      	ldr	r3, [pc, #324]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 800929e:	881b      	ldrh	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 80092a6:	d81e      	bhi.n	80092e6 <HAL_TIM_PeriodElapsedCallback+0x1502>
				Y += 1;
 80092a8:	4b4e      	ldr	r3, [pc, #312]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	3301      	adds	r3, #1
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	4b4c      	ldr	r3, [pc, #304]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	e016      	b.n	80092e6 <HAL_TIM_PeriodElapsedCallback+0x1502>

		} else if (AngleX < -10000) {
 80092b8:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a47      	ldr	r2, [pc, #284]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	da11      	bge.n	80092e6 <HAL_TIM_PeriodElapsedCallback+0x1502>
			fMovedX = 1;
 80092c2:	4b43      	ldr	r3, [pc, #268]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 80092c4:	2201      	movs	r2, #1
 80092c6:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 80092c8:	4b42      	ldr	r3, [pc, #264]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	701a      	strb	r2, [r3, #0]

			if (Y > 25)
 80092ce:	4b45      	ldr	r3, [pc, #276]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	2b19      	cmp	r3, #25
 80092d6:	d906      	bls.n	80092e6 <HAL_TIM_PeriodElapsedCallback+0x1502>
				Y -= 1;
 80092d8:	4b42      	ldr	r3, [pc, #264]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3b01      	subs	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	4b40      	ldr	r3, [pc, #256]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x1600>)
 80092e4:	801a      	strh	r2, [r3, #0]

		}

		if (fMovedY == 1 && (AngleY <= 10000 && AngleY >= -10000)
 80092e6:	4b3b      	ldr	r3, [pc, #236]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d10a      	bne.n	8009306 <HAL_TIM_PeriodElapsedCallback+0x1522>
 80092f0:	4b36      	ldr	r3, [pc, #216]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80092f8:	4293      	cmp	r3, r2
 80092fa:	dc04      	bgt.n	8009306 <HAL_TIM_PeriodElapsedCallback+0x1522>
 80092fc:	4b33      	ldr	r3, [pc, #204]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a36      	ldr	r2, [pc, #216]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 8009302:	4293      	cmp	r3, r2
 8009304:	da0a      	bge.n	800931c <HAL_TIM_PeriodElapsedCallback+0x1538>
				|| (AngleY > 20000 || AngleY < -20000)) {
 8009306:	4b31      	ldr	r3, [pc, #196]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800930e:	4293      	cmp	r3, r2
 8009310:	dc04      	bgt.n	800931c <HAL_TIM_PeriodElapsedCallback+0x1538>
 8009312:	4b2e      	ldr	r3, [pc, #184]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a34      	ldr	r2, [pc, #208]	; (80093e8 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 8009318:	4293      	cmp	r3, r2
 800931a:	da07      	bge.n	800932c <HAL_TIM_PeriodElapsedCallback+0x1548>
			ResetTimeY += 1;
 800931c:	4b33      	ldr	r3, [pc, #204]	; (80093ec <HAL_TIM_PeriodElapsedCallback+0x1608>)
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29b      	uxth	r3, r3
 8009322:	3301      	adds	r3, #1
 8009324:	b29a      	uxth	r2, r3
 8009326:	4b31      	ldr	r3, [pc, #196]	; (80093ec <HAL_TIM_PeriodElapsedCallback+0x1608>)
 8009328:	801a      	strh	r2, [r3, #0]
 800932a:	e012      	b.n	8009352 <HAL_TIM_PeriodElapsedCallback+0x156e>

		} else if (fMovedY == 1 && (AngleY > 10000 || AngleY < -10000)) {
 800932c:	4b29      	ldr	r3, [pc, #164]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x15f0>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	2b01      	cmp	r3, #1
 8009334:	d10d      	bne.n	8009352 <HAL_TIM_PeriodElapsedCallback+0x156e>
 8009336:	4b25      	ldr	r3, [pc, #148]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f242 7210 	movw	r2, #10000	; 0x2710
 800933e:	4293      	cmp	r3, r2
 8009340:	dc04      	bgt.n	800934c <HAL_TIM_PeriodElapsedCallback+0x1568>
 8009342:	4b22      	ldr	r3, [pc, #136]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x15e8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a25      	ldr	r2, [pc, #148]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	da02      	bge.n	8009352 <HAL_TIM_PeriodElapsedCallback+0x156e>
			ResetTimeY = 0;
 800934c:	4b27      	ldr	r3, [pc, #156]	; (80093ec <HAL_TIM_PeriodElapsedCallback+0x1608>)
 800934e:	2200      	movs	r2, #0
 8009350:	801a      	strh	r2, [r3, #0]
		}

		if (fMovedX == 1 && (AngleX <= 10000 && AngleX >= -10000)
 8009352:	4b1f      	ldr	r3, [pc, #124]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x15ec>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b01      	cmp	r3, #1
 800935a:	d10a      	bne.n	8009372 <HAL_TIM_PeriodElapsedCallback+0x158e>
 800935c:	4b20      	ldr	r3, [pc, #128]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f242 7210 	movw	r2, #10000	; 0x2710
 8009364:	4293      	cmp	r3, r2
 8009366:	dc04      	bgt.n	8009372 <HAL_TIM_PeriodElapsedCallback+0x158e>
 8009368:	4b1d      	ldr	r3, [pc, #116]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a1b      	ldr	r2, [pc, #108]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x15f8>)
 800936e:	4293      	cmp	r3, r2
 8009370:	da0a      	bge.n	8009388 <HAL_TIM_PeriodElapsedCallback+0x15a4>
				|| (AngleX > 20000 || AngleX < -20000)) {
 8009372:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f644 6220 	movw	r2, #20000	; 0x4e20
 800937a:	4293      	cmp	r3, r2
 800937c:	dc04      	bgt.n	8009388 <HAL_TIM_PeriodElapsedCallback+0x15a4>
 800937e:	4b18      	ldr	r3, [pc, #96]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x15fc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a19      	ldr	r2, [pc, #100]	; (80093e8 <HAL_TIM_PeriodElapsedCallback+0x1604>)
 8009384:	4293      	cmp	r3, r2
 8009386:	da35      	bge.n	80093f4 <HAL_TIM_PeriodElapsedCallback+0x1610>
			ResetTimeX += 1;
 8009388:	4b19      	ldr	r3, [pc, #100]	; (80093f0 <HAL_TIM_PeriodElapsedCallback+0x160c>)
 800938a:	881b      	ldrh	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	3301      	adds	r3, #1
 8009390:	b29a      	uxth	r2, r3
 8009392:	4b17      	ldr	r3, [pc, #92]	; (80093f0 <HAL_TIM_PeriodElapsedCallback+0x160c>)
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	e040      	b.n	800941a <HAL_TIM_PeriodElapsedCallback+0x1636>
 8009398:	20000544 	.word	0x20000544
 800939c:	20000568 	.word	0x20000568
 80093a0:	55555556 	.word	0x55555556
 80093a4:	2000055c 	.word	0x2000055c
 80093a8:	88888889 	.word	0x88888889
 80093ac:	200005e0 	.word	0x200005e0
 80093b0:	200004d0 	.word	0x200004d0
 80093b4:	82082083 	.word	0x82082083
 80093b8:	2000053c 	.word	0x2000053c
 80093bc:	200005c4 	.word	0x200005c4
 80093c0:	20000540 	.word	0x20000540
 80093c4:	200004b0 	.word	0x200004b0
 80093c8:	20000580 	.word	0x20000580
 80093cc:	200005b0 	.word	0x200005b0
 80093d0:	20000590 	.word	0x20000590
 80093d4:	200005c8 	.word	0x200005c8
 80093d8:	200005e8 	.word	0x200005e8
 80093dc:	ffffd8f0 	.word	0xffffd8f0
 80093e0:	2000057c 	.word	0x2000057c
 80093e4:	20000578 	.word	0x20000578
 80093e8:	ffffb1e0 	.word	0xffffb1e0
 80093ec:	200005dc 	.word	0x200005dc
 80093f0:	20000586 	.word	0x20000586

		} else if (fMovedX == 1 && (AngleX > 10000 || AngleX < -10000)) {
 80093f4:	4b1d      	ldr	r3, [pc, #116]	; (800946c <HAL_TIM_PeriodElapsedCallback+0x1688>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d10d      	bne.n	800941a <HAL_TIM_PeriodElapsedCallback+0x1636>
 80093fe:	4b1c      	ldr	r3, [pc, #112]	; (8009470 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f242 7210 	movw	r2, #10000	; 0x2710
 8009406:	4293      	cmp	r3, r2
 8009408:	dc04      	bgt.n	8009414 <HAL_TIM_PeriodElapsedCallback+0x1630>
 800940a:	4b19      	ldr	r3, [pc, #100]	; (8009470 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a19      	ldr	r2, [pc, #100]	; (8009474 <HAL_TIM_PeriodElapsedCallback+0x1690>)
 8009410:	4293      	cmp	r3, r2
 8009412:	da02      	bge.n	800941a <HAL_TIM_PeriodElapsedCallback+0x1636>
			ResetTimeX = 0;
 8009414:	4b18      	ldr	r3, [pc, #96]	; (8009478 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8009416:	2200      	movs	r2, #0
 8009418:	801a      	strh	r2, [r3, #0]
		}

		if (ResetTimeX >= 1000) {
 800941a:	4b17      	ldr	r3, [pc, #92]	; (8009478 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009424:	d308      	bcc.n	8009438 <HAL_TIM_PeriodElapsedCallback+0x1654>
			AngleX = 0;
 8009426:	4b12      	ldr	r3, [pc, #72]	; (8009470 <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8009428:	2200      	movs	r2, #0
 800942a:	601a      	str	r2, [r3, #0]

			ResetTimeX = 0;
 800942c:	4b12      	ldr	r3, [pc, #72]	; (8009478 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 800942e:	2200      	movs	r2, #0
 8009430:	801a      	strh	r2, [r3, #0]
			fMovedX = 0;
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <HAL_TIM_PeriodElapsedCallback+0x1688>)
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
		}

		if (ResetTimeY >= 1000) {
 8009438:	4b10      	ldr	r3, [pc, #64]	; (800947c <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b29b      	uxth	r3, r3
 800943e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009442:	d308      	bcc.n	8009456 <HAL_TIM_PeriodElapsedCallback+0x1672>
			AngleY = 0;
 8009444:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <HAL_TIM_PeriodElapsedCallback+0x169c>)
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]

			ResetTimeY = 0;
 800944a:	4b0c      	ldr	r3, [pc, #48]	; (800947c <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800944c:	2200      	movs	r2, #0
 800944e:	801a      	strh	r2, [r3, #0]
			fMovedY = 0;
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <HAL_TIM_PeriodElapsedCallback+0x16a0>)
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
		}

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a0b      	ldr	r2, [pc, #44]	; (8009488 <HAL_TIM_PeriodElapsedCallback+0x16a4>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d101      	bne.n	8009464 <HAL_TIM_PeriodElapsedCallback+0x1680>
		HAL_IncTick();
 8009460:	f7f9 f8cc 	bl	80025fc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bdb0      	pop	{r4, r5, r7, pc}
 800946c:	20000590 	.word	0x20000590
 8009470:	2000057c 	.word	0x2000057c
 8009474:	ffffd8f0 	.word	0xffffd8f0
 8009478:	20000586 	.word	0x20000586
 800947c:	200005dc 	.word	0x200005dc
 8009480:	200005b0 	.word	0x200005b0
 8009484:	200005c8 	.word	0x200005c8
 8009488:	40001000 	.word	0x40001000

0800948c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8009490:	bf00      	nop
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80094a0:	4b17      	ldr	r3, [pc, #92]	; (8009500 <MX_SPI5_Init+0x64>)
 80094a2:	4a18      	ldr	r2, [pc, #96]	; (8009504 <MX_SPI5_Init+0x68>)
 80094a4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80094a6:	4b16      	ldr	r3, [pc, #88]	; (8009500 <MX_SPI5_Init+0x64>)
 80094a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80094ac:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80094ae:	4b14      	ldr	r3, [pc, #80]	; (8009500 <MX_SPI5_Init+0x64>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80094b4:	4b12      	ldr	r3, [pc, #72]	; (8009500 <MX_SPI5_Init+0x64>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80094ba:	4b11      	ldr	r3, [pc, #68]	; (8009500 <MX_SPI5_Init+0x64>)
 80094bc:	2200      	movs	r2, #0
 80094be:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80094c0:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <MX_SPI5_Init+0x64>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <MX_SPI5_Init+0x64>)
 80094c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094cc:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80094ce:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <MX_SPI5_Init+0x64>)
 80094d0:	2218      	movs	r2, #24
 80094d2:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80094d4:	4b0a      	ldr	r3, [pc, #40]	; (8009500 <MX_SPI5_Init+0x64>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80094da:	4b09      	ldr	r3, [pc, #36]	; (8009500 <MX_SPI5_Init+0x64>)
 80094dc:	2200      	movs	r2, #0
 80094de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094e0:	4b07      	ldr	r3, [pc, #28]	; (8009500 <MX_SPI5_Init+0x64>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80094e6:	4b06      	ldr	r3, [pc, #24]	; (8009500 <MX_SPI5_Init+0x64>)
 80094e8:	220a      	movs	r2, #10
 80094ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80094ec:	4804      	ldr	r0, [pc, #16]	; (8009500 <MX_SPI5_Init+0x64>)
 80094ee:	f7fb fe1a 	bl	8005126 <HAL_SPI_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80094f8:	f7ff ffc8 	bl	800948c <Error_Handler>
  }

}
 80094fc:	bf00      	nop
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	200004dc 	.word	0x200004dc
 8009504:	40015000 	.word	0x40015000

08009508 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08a      	sub	sp, #40	; 0x28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	605a      	str	r2, [r3, #4]
 800951a:	609a      	str	r2, [r3, #8]
 800951c:	60da      	str	r2, [r3, #12]
 800951e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <HAL_SPI_MspInit+0x84>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d12c      	bne.n	8009584 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800952a:	2300      	movs	r3, #0
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	4a18      	ldr	r2, [pc, #96]	; (8009590 <HAL_SPI_MspInit+0x88>)
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <HAL_SPI_MspInit+0x88>)
 8009532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009538:	6453      	str	r3, [r2, #68]	; 0x44
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <HAL_SPI_MspInit+0x88>)
 800953c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009542:	613b      	str	r3, [r7, #16]
 8009544:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009546:	2300      	movs	r3, #0
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	4a11      	ldr	r2, [pc, #68]	; (8009590 <HAL_SPI_MspInit+0x88>)
 800954c:	4b10      	ldr	r3, [pc, #64]	; (8009590 <HAL_SPI_MspInit+0x88>)
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009550:	f043 0320 	orr.w	r3, r3, #32
 8009554:	6313      	str	r3, [r2, #48]	; 0x30
 8009556:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <HAL_SPI_MspInit+0x88>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	f003 0320 	and.w	r3, r3, #32
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8009562:	f44f 7360 	mov.w	r3, #896	; 0x380
 8009566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009568:	2302      	movs	r3, #2
 800956a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956c:	2300      	movs	r3, #0
 800956e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009570:	2300      	movs	r3, #0
 8009572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8009574:	2305      	movs	r3, #5
 8009576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	4619      	mov	r1, r3
 800957e:	4805      	ldr	r0, [pc, #20]	; (8009594 <HAL_SPI_MspInit+0x8c>)
 8009580:	f7f9 fed4 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8009584:	bf00      	nop
 8009586:	3728      	adds	r7, #40	; 0x28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	40015000 	.word	0x40015000
 8009590:	40023800 	.word	0x40023800
 8009594:	40021400 	.word	0x40021400

08009598 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a08      	ldr	r2, [pc, #32]	; (80095c8 <HAL_SPI_MspDeInit+0x30>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d10a      	bne.n	80095c0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80095aa:	4a08      	ldr	r2, [pc, #32]	; (80095cc <HAL_SPI_MspDeInit+0x34>)
 80095ac:	4b07      	ldr	r3, [pc, #28]	; (80095cc <HAL_SPI_MspDeInit+0x34>)
 80095ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80095b4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80095b6:	f44f 7160 	mov.w	r1, #896	; 0x380
 80095ba:	4805      	ldr	r0, [pc, #20]	; (80095d0 <HAL_SPI_MspDeInit+0x38>)
 80095bc:	f7fa f860 	bl	8003680 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80095c0:	bf00      	nop
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40015000 	.word	0x40015000
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40021400 	.word	0x40021400

080095d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095da:	2300      	movs	r3, #0
 80095dc:	607b      	str	r3, [r7, #4]
 80095de:	4a10      	ldr	r2, [pc, #64]	; (8009620 <HAL_MspInit+0x4c>)
 80095e0:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <HAL_MspInit+0x4c>)
 80095e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095e8:	6453      	str	r3, [r2, #68]	; 0x44
 80095ea:	4b0d      	ldr	r3, [pc, #52]	; (8009620 <HAL_MspInit+0x4c>)
 80095ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80095f6:	2300      	movs	r3, #0
 80095f8:	603b      	str	r3, [r7, #0]
 80095fa:	4a09      	ldr	r2, [pc, #36]	; (8009620 <HAL_MspInit+0x4c>)
 80095fc:	4b08      	ldr	r3, [pc, #32]	; (8009620 <HAL_MspInit+0x4c>)
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009604:	6413      	str	r3, [r2, #64]	; 0x40
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <HAL_MspInit+0x4c>)
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	40023800 	.word	0x40023800

08009624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08c      	sub	sp, #48	; 0x30
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009634:	2200      	movs	r2, #0
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	2036      	movs	r0, #54	; 0x36
 800963a:	f7f9 f8d7 	bl	80027ec <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800963e:	2036      	movs	r0, #54	; 0x36
 8009640:	f7f9 f8f0 	bl	8002824 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	4a1f      	ldr	r2, [pc, #124]	; (80096c8 <HAL_InitTick+0xa4>)
 800964a:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <HAL_InitTick+0xa4>)
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	f043 0310 	orr.w	r3, r3, #16
 8009652:	6413      	str	r3, [r2, #64]	; 0x40
 8009654:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <HAL_InitTick+0xa4>)
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	f003 0310 	and.w	r3, r3, #16
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009660:	f107 0210 	add.w	r2, r7, #16
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7fb fb06 	bl	8004c7c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009670:	f7fb fadc 	bl	8004c2c <HAL_RCC_GetPCLK1Freq>
 8009674:	4603      	mov	r3, r0
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	4a13      	ldr	r2, [pc, #76]	; (80096cc <HAL_InitTick+0xa8>)
 800967e:	fba2 2303 	umull	r2, r3, r2, r3
 8009682:	0c9b      	lsrs	r3, r3, #18
 8009684:	3b01      	subs	r3, #1
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009688:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <HAL_InitTick+0xac>)
 800968a:	4a12      	ldr	r2, [pc, #72]	; (80096d4 <HAL_InitTick+0xb0>)
 800968c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <HAL_InitTick+0xac>)
 8009690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009694:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009696:	4a0e      	ldr	r2, [pc, #56]	; (80096d0 <HAL_InitTick+0xac>)
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_InitTick+0xac>)
 800969e:	2200      	movs	r2, #0
 80096a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096a2:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <HAL_InitTick+0xac>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80096a8:	4809      	ldr	r0, [pc, #36]	; (80096d0 <HAL_InitTick+0xac>)
 80096aa:	f7fc fa6a 	bl	8005b82 <HAL_TIM_Base_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d104      	bne.n	80096be <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80096b4:	4806      	ldr	r0, [pc, #24]	; (80096d0 <HAL_InitTick+0xac>)
 80096b6:	f7fc fa8f 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
 80096ba:	4603      	mov	r3, r0
 80096bc:	e000      	b.n	80096c0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3730      	adds	r7, #48	; 0x30
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	40023800 	.word	0x40023800
 80096cc:	431bde83 	.word	0x431bde83
 80096d0:	200005ec 	.word	0x200005ec
 80096d4:	40001000 	.word	0x40001000

080096d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096e6:	b480      	push	{r7}
 80096e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096ea:	e7fe      	b.n	80096ea <HardFault_Handler+0x4>

080096ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096f0:	e7fe      	b.n	80096f0 <MemManage_Handler+0x4>

080096f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096f2:	b480      	push	{r7}
 80096f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096f6:	e7fe      	b.n	80096f6 <BusFault_Handler+0x4>

080096f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096fc:	e7fe      	b.n	80096fc <UsageFault_Handler+0x4>

080096fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80096fe:	b480      	push	{r7}
 8009700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009702:	bf00      	nop
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009710:	bf00      	nop
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800971a:	b480      	push	{r7}
 800971c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800971e:	bf00      	nop
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800972c:	4803      	ldr	r0, [pc, #12]	; (800973c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800972e:	f7fc fa77 	bl	8005c20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8009732:	4803      	ldr	r0, [pc, #12]	; (8009740 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8009734:	f7fc fa74 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009738:	bf00      	nop
 800973a:	bd80      	pop	{r7, pc}
 800973c:	200006ac 	.word	0x200006ac
 8009740:	2000062c 	.word	0x2000062c

08009744 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009748:	4803      	ldr	r0, [pc, #12]	; (8009758 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800974a:	f7fc fa69 	bl	8005c20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800974e:	4803      	ldr	r0, [pc, #12]	; (800975c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8009750:	f7fc fa66 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8009754:	bf00      	nop
 8009756:	bd80      	pop	{r7, pc}
 8009758:	200006ac 	.word	0x200006ac
 800975c:	2000066c 	.word	0x2000066c

08009760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009764:	4802      	ldr	r0, [pc, #8]	; (8009770 <TIM6_DAC_IRQHandler+0x10>)
 8009766:	f7fc fa5b 	bl	8005c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800976a:	bf00      	nop
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	200005ec 	.word	0x200005ec

08009774 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009778:	4802      	ldr	r0, [pc, #8]	; (8009784 <LTDC_IRQHandler+0x10>)
 800977a:	f7fa fb33 	bl	8003de4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800977e:	bf00      	nop
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000408 	.word	0x20000408

08009788 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800978c:	4802      	ldr	r0, [pc, #8]	; (8009798 <DMA2D_IRQHandler+0x10>)
 800978e:	f7f9 fb90 	bl	8002eb2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8009792:	bf00      	nop
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000340 	.word	0x20000340

0800979c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097a8:	2300      	movs	r3, #0
 80097aa:	617b      	str	r3, [r7, #20]
 80097ac:	e00a      	b.n	80097c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80097ae:	68bc      	ldr	r4, [r7, #8]
 80097b0:	1c63      	adds	r3, r4, #1
 80097b2:	60bb      	str	r3, [r7, #8]
 80097b4:	f3af 8000 	nop.w
 80097b8:	4603      	mov	r3, r0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	3301      	adds	r3, #1
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	dbf0      	blt.n	80097ae <_read+0x12>
	}

return len;
 80097cc:	687b      	ldr	r3, [r7, #4]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	371c      	adds	r7, #28
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd90      	pop	{r4, r7, pc}

080097d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e009      	b.n	80097fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	60ba      	str	r2, [r7, #8]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fd ffd1 	bl	8007798 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	3301      	adds	r3, #1
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	429a      	cmp	r2, r3
 8009802:	dbf1      	blt.n	80097e8 <_write+0x12>
	}
	return len;
 8009804:	687b      	ldr	r3, [r7, #4]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009818:	4b11      	ldr	r3, [pc, #68]	; (8009860 <_sbrk+0x50>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <_sbrk+0x16>
		heap_end = &end;
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <_sbrk+0x50>)
 8009822:	4a10      	ldr	r2, [pc, #64]	; (8009864 <_sbrk+0x54>)
 8009824:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009826:	4b0e      	ldr	r3, [pc, #56]	; (8009860 <_sbrk+0x50>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800982c:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <_sbrk+0x50>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4413      	add	r3, r2
 8009834:	466a      	mov	r2, sp
 8009836:	4293      	cmp	r3, r2
 8009838:	d907      	bls.n	800984a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800983a:	f000 fa1f 	bl	8009c7c <__errno>
 800983e:	4602      	mov	r2, r0
 8009840:	230c      	movs	r3, #12
 8009842:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	e006      	b.n	8009858 <_sbrk+0x48>
	}

	heap_end += incr;
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <_sbrk+0x50>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	4a03      	ldr	r2, [pc, #12]	; (8009860 <_sbrk+0x50>)
 8009854:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009856:	68fb      	ldr	r3, [r7, #12]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	2000027c 	.word	0x2000027c
 8009864:	20000730 	.word	0x20000730

08009868 <_close>:

int _close(int file)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	return -1;
 8009870:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009890:	605a      	str	r2, [r3, #4]
	return 0;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	370c      	adds	r7, #12
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr

080098a0 <_isatty>:

int _isatty(int file)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	return 1;
 80098a8:	2301      	movs	r3, #1
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	60f8      	str	r0, [r7, #12]
 80098be:	60b9      	str	r1, [r7, #8]
 80098c0:	607a      	str	r2, [r7, #4]
	return 0;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80098d4:	4a16      	ldr	r2, [pc, #88]	; (8009930 <SystemInit+0x60>)
 80098d6:	4b16      	ldr	r3, [pc, #88]	; (8009930 <SystemInit+0x60>)
 80098d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80098e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80098e4:	4a13      	ldr	r2, [pc, #76]	; (8009934 <SystemInit+0x64>)
 80098e6:	4b13      	ldr	r3, [pc, #76]	; (8009934 <SystemInit+0x64>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f043 0301 	orr.w	r3, r3, #1
 80098ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <SystemInit+0x64>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80098f6:	4a0f      	ldr	r2, [pc, #60]	; (8009934 <SystemInit+0x64>)
 80098f8:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <SystemInit+0x64>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009904:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009906:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <SystemInit+0x64>)
 8009908:	4a0b      	ldr	r2, [pc, #44]	; (8009938 <SystemInit+0x68>)
 800990a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800990c:	4a09      	ldr	r2, [pc, #36]	; (8009934 <SystemInit+0x64>)
 800990e:	4b09      	ldr	r3, [pc, #36]	; (8009934 <SystemInit+0x64>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009916:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009918:	4b06      	ldr	r3, [pc, #24]	; (8009934 <SystemInit+0x64>)
 800991a:	2200      	movs	r2, #0
 800991c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800991e:	4b04      	ldr	r3, [pc, #16]	; (8009930 <SystemInit+0x60>)
 8009920:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009924:	609a      	str	r2, [r3, #8]
#endif
}
 8009926:	bf00      	nop
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	e000ed00 	.word	0xe000ed00
 8009934:	40023800 	.word	0x40023800
 8009938:	24003010 	.word	0x24003010

0800993c <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009942:	f107 0308 	add.w	r3, r7, #8
 8009946:	2200      	movs	r2, #0
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	605a      	str	r2, [r3, #4]
 800994c:	609a      	str	r2, [r3, #8]
 800994e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009950:	463b      	mov	r3, r7
 8009952:	2200      	movs	r2, #0
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8009958:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <MX_TIM1_Init+0x98>)
 800995a:	4a1f      	ldr	r2, [pc, #124]	; (80099d8 <MX_TIM1_Init+0x9c>)
 800995c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800995e:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <MX_TIM1_Init+0x98>)
 8009960:	2200      	movs	r2, #0
 8009962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009964:	4b1b      	ldr	r3, [pc, #108]	; (80099d4 <MX_TIM1_Init+0x98>)
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <MX_TIM1_Init+0x98>)
 800996c:	2200      	movs	r2, #0
 800996e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009970:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <MX_TIM1_Init+0x98>)
 8009972:	2200      	movs	r2, #0
 8009974:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009976:	4b17      	ldr	r3, [pc, #92]	; (80099d4 <MX_TIM1_Init+0x98>)
 8009978:	2200      	movs	r2, #0
 800997a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800997c:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <MX_TIM1_Init+0x98>)
 800997e:	2200      	movs	r2, #0
 8009980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009982:	4814      	ldr	r0, [pc, #80]	; (80099d4 <MX_TIM1_Init+0x98>)
 8009984:	f7fc f8fd 	bl	8005b82 <HAL_TIM_Base_Init>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800998e:	f7ff fd7d 	bl	800948c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009996:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009998:	f107 0308 	add.w	r3, r7, #8
 800999c:	4619      	mov	r1, r3
 800999e:	480d      	ldr	r0, [pc, #52]	; (80099d4 <MX_TIM1_Init+0x98>)
 80099a0:	f7fc fa46 	bl	8005e30 <HAL_TIM_ConfigClockSource>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80099aa:	f7ff fd6f 	bl	800948c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099ae:	2300      	movs	r3, #0
 80099b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80099b6:	463b      	mov	r3, r7
 80099b8:	4619      	mov	r1, r3
 80099ba:	4806      	ldr	r0, [pc, #24]	; (80099d4 <MX_TIM1_Init+0x98>)
 80099bc:	f7fc fc52 	bl	8006264 <HAL_TIMEx_MasterConfigSynchronization>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80099c6:	f7ff fd61 	bl	800948c <Error_Handler>
  }

}
 80099ca:	bf00      	nop
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	200006ac 	.word	0x200006ac
 80099d8:	40010000 	.word	0x40010000

080099dc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80099e0:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <MX_TIM10_Init+0x40>)
 80099e2:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <MX_TIM10_Init+0x44>)
 80099e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <MX_TIM10_Init+0x40>)
 80099e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80099ec:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <MX_TIM10_Init+0x40>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288;
 80099f4:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <MX_TIM10_Init+0x40>)
 80099f6:	f44f 7290 	mov.w	r2, #288	; 0x120
 80099fa:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099fc:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <MX_TIM10_Init+0x40>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <MX_TIM10_Init+0x40>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009a08:	4804      	ldr	r0, [pc, #16]	; (8009a1c <MX_TIM10_Init+0x40>)
 8009a0a:	f7fc f8ba 	bl	8005b82 <HAL_TIM_Base_Init>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8009a14:	f7ff fd3a 	bl	800948c <Error_Handler>
  }

}
 8009a18:	bf00      	nop
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	2000062c 	.word	0x2000062c
 8009a20:	40014400 	.word	0x40014400

08009a24 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8009a28:	4b0e      	ldr	r3, [pc, #56]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a2a:	4a0f      	ldr	r2, [pc, #60]	; (8009a68 <MX_TIM11_Init+0x44>)
 8009a2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9999;
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a30:	f242 720f 	movw	r2, #9999	; 0x270f
 8009a34:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a36:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 71;
 8009a3c:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a3e:	2247      	movs	r2, #71	; 0x47
 8009a40:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a42:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a48:	4b06      	ldr	r3, [pc, #24]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8009a4e:	4805      	ldr	r0, [pc, #20]	; (8009a64 <MX_TIM11_Init+0x40>)
 8009a50:	f7fc f897 	bl	8005b82 <HAL_TIM_Base_Init>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d001      	beq.n	8009a5e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8009a5a:	f7ff fd17 	bl	800948c <Error_Handler>
  }

}
 8009a5e:	bf00      	nop
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	2000066c 	.word	0x2000066c
 8009a68:	40014800 	.word	0x40014800

08009a6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a2e      	ldr	r2, [pc, #184]	; (8009b34 <HAL_TIM_Base_MspInit+0xc8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d11e      	bne.n	8009abc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009a7e:	2300      	movs	r3, #0
 8009a80:	617b      	str	r3, [r7, #20]
 8009a82:	4a2d      	ldr	r2, [pc, #180]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009a84:	4b2c      	ldr	r3, [pc, #176]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a88:	f043 0301 	orr.w	r3, r3, #1
 8009a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a8e:	4b2a      	ldr	r3, [pc, #168]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	2019      	movs	r0, #25
 8009aa0:	f7f8 fea4 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009aa4:	2019      	movs	r0, #25
 8009aa6:	f7f8 febd 	bl	8002824 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2100      	movs	r1, #0
 8009aae:	201a      	movs	r0, #26
 8009ab0:	f7f8 fe9c 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009ab4:	201a      	movs	r0, #26
 8009ab6:	f7f8 feb5 	bl	8002824 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8009aba:	e036      	b.n	8009b2a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a1e      	ldr	r2, [pc, #120]	; (8009b3c <HAL_TIM_Base_MspInit+0xd0>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d116      	bne.n	8009af4 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	4a1b      	ldr	r2, [pc, #108]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009acc:	4b1a      	ldr	r3, [pc, #104]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad6:	4b18      	ldr	r3, [pc, #96]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	2019      	movs	r0, #25
 8009ae8:	f7f8 fe80 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009aec:	2019      	movs	r0, #25
 8009aee:	f7f8 fe99 	bl	8002824 <HAL_NVIC_EnableIRQ>
}
 8009af2:	e01a      	b.n	8009b2a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a11      	ldr	r2, [pc, #68]	; (8009b40 <HAL_TIM_Base_MspInit+0xd4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d115      	bne.n	8009b2a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	4a0d      	ldr	r2, [pc, #52]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <HAL_TIM_Base_MspInit+0xcc>)
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	201a      	movs	r0, #26
 8009b20:	f7f8 fe64 	bl	80027ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009b24:	201a      	movs	r0, #26
 8009b26:	f7f8 fe7d 	bl	8002824 <HAL_NVIC_EnableIRQ>
}
 8009b2a:	bf00      	nop
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40010000 	.word	0x40010000
 8009b38:	40023800 	.word	0x40023800
 8009b3c:	40014400 	.word	0x40014400
 8009b40:	40014800 	.word	0x40014800

08009b44 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009b48:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b4a:	4a12      	ldr	r2, [pc, #72]	; (8009b94 <MX_USART1_UART_Init+0x50>)
 8009b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009b4e:	4b10      	ldr	r3, [pc, #64]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009b56:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009b5c:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009b62:	4b0b      	ldr	r3, [pc, #44]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009b68:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b6a:	220c      	movs	r2, #12
 8009b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009b6e:	4b08      	ldr	r3, [pc, #32]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009b74:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009b7a:	4805      	ldr	r0, [pc, #20]	; (8009b90 <MX_USART1_UART_Init+0x4c>)
 8009b7c:	f7fc fbcb 	bl	8006316 <HAL_UART_Init>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009b86:	f7ff fc81 	bl	800948c <Error_Handler>
  }

}
 8009b8a:	bf00      	nop
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop
 8009b90:	200006ec 	.word	0x200006ec
 8009b94:	40011000 	.word	0x40011000

08009b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08a      	sub	sp, #40	; 0x28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ba0:	f107 0314 	add.w	r3, r7, #20
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	605a      	str	r2, [r3, #4]
 8009baa:	609a      	str	r2, [r3, #8]
 8009bac:	60da      	str	r2, [r3, #12]
 8009bae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <HAL_UART_MspInit+0x84>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d12c      	bne.n	8009c14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009bba:	2300      	movs	r3, #0
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bc0:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc4:	f043 0310 	orr.w	r3, r3, #16
 8009bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bca:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	613b      	str	r3, [r7, #16]
 8009bd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	4a11      	ldr	r2, [pc, #68]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bdc:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	f043 0301 	orr.w	r3, r3, #1
 8009be4:	6313      	str	r3, [r2, #48]	; 0x30
 8009be6:	4b0e      	ldr	r3, [pc, #56]	; (8009c20 <HAL_UART_MspInit+0x88>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8009bf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c00:	2303      	movs	r3, #3
 8009c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009c04:	2307      	movs	r3, #7
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4805      	ldr	r0, [pc, #20]	; (8009c24 <HAL_UART_MspInit+0x8c>)
 8009c10:	f7f9 fb8c 	bl	800332c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009c14:	bf00      	nop
 8009c16:	3728      	adds	r7, #40	; 0x28
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	40011000 	.word	0x40011000
 8009c20:	40023800 	.word	0x40023800
 8009c24:	40020000 	.word	0x40020000

08009c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8009c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c60 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c2e:	e003      	b.n	8009c38 <LoopCopyDataInit>

08009c30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c30:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c36:	3104      	adds	r1, #4

08009c38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c38:	480b      	ldr	r0, [pc, #44]	; (8009c68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c3a:	4b0c      	ldr	r3, [pc, #48]	; (8009c6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009c40:	d3f6      	bcc.n	8009c30 <CopyDataInit>
  ldr  r2, =_sbss
 8009c42:	4a0b      	ldr	r2, [pc, #44]	; (8009c70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009c44:	e002      	b.n	8009c4c <LoopFillZerobss>

08009c46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009c46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009c48:	f842 3b04 	str.w	r3, [r2], #4

08009c4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009c4c:	4b09      	ldr	r3, [pc, #36]	; (8009c74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009c4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009c50:	d3f9      	bcc.n	8009c46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c52:	f7ff fe3d 	bl	80098d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c56:	f000 f817 	bl	8009c88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c5a:	f7fd fdab 	bl	80077b4 <main>
  bx  lr    
 8009c5e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8009c60:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8009c64:	080a4378 	.word	0x080a4378
  ldr  r0, =_sdata
 8009c68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009c6c:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8009c70:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8009c74:	20000730 	.word	0x20000730

08009c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c78:	e7fe      	b.n	8009c78 <ADC_IRQHandler>
	...

08009c7c <__errno>:
 8009c7c:	4b01      	ldr	r3, [pc, #4]	; (8009c84 <__errno+0x8>)
 8009c7e:	6818      	ldr	r0, [r3, #0]
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	2000004c 	.word	0x2000004c

08009c88 <__libc_init_array>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	4e0d      	ldr	r6, [pc, #52]	; (8009cc0 <__libc_init_array+0x38>)
 8009c8c:	4c0d      	ldr	r4, [pc, #52]	; (8009cc4 <__libc_init_array+0x3c>)
 8009c8e:	1ba4      	subs	r4, r4, r6
 8009c90:	10a4      	asrs	r4, r4, #2
 8009c92:	2500      	movs	r5, #0
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d109      	bne.n	8009cac <__libc_init_array+0x24>
 8009c98:	4e0b      	ldr	r6, [pc, #44]	; (8009cc8 <__libc_init_array+0x40>)
 8009c9a:	4c0c      	ldr	r4, [pc, #48]	; (8009ccc <__libc_init_array+0x44>)
 8009c9c:	f000 ff18 	bl	800aad0 <_init>
 8009ca0:	1ba4      	subs	r4, r4, r6
 8009ca2:	10a4      	asrs	r4, r4, #2
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	42a5      	cmp	r5, r4
 8009ca8:	d105      	bne.n	8009cb6 <__libc_init_array+0x2e>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cb0:	4798      	blx	r3
 8009cb2:	3501      	adds	r5, #1
 8009cb4:	e7ee      	b.n	8009c94 <__libc_init_array+0xc>
 8009cb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cba:	4798      	blx	r3
 8009cbc:	3501      	adds	r5, #1
 8009cbe:	e7f2      	b.n	8009ca6 <__libc_init_array+0x1e>
 8009cc0:	080a4370 	.word	0x080a4370
 8009cc4:	080a4370 	.word	0x080a4370
 8009cc8:	080a4370 	.word	0x080a4370
 8009ccc:	080a4374 	.word	0x080a4374

08009cd0 <memset>:
 8009cd0:	4402      	add	r2, r0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d100      	bne.n	8009cda <memset+0xa>
 8009cd8:	4770      	bx	lr
 8009cda:	f803 1b01 	strb.w	r1, [r3], #1
 8009cde:	e7f9      	b.n	8009cd4 <memset+0x4>

08009ce0 <iprintf>:
 8009ce0:	b40f      	push	{r0, r1, r2, r3}
 8009ce2:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <iprintf+0x2c>)
 8009ce4:	b513      	push	{r0, r1, r4, lr}
 8009ce6:	681c      	ldr	r4, [r3, #0]
 8009ce8:	b124      	cbz	r4, 8009cf4 <iprintf+0x14>
 8009cea:	69a3      	ldr	r3, [r4, #24]
 8009cec:	b913      	cbnz	r3, 8009cf4 <iprintf+0x14>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f84e 	bl	8009d90 <__sinit>
 8009cf4:	ab05      	add	r3, sp, #20
 8009cf6:	9a04      	ldr	r2, [sp, #16]
 8009cf8:	68a1      	ldr	r1, [r4, #8]
 8009cfa:	9301      	str	r3, [sp, #4]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f000 f959 	bl	8009fb4 <_vfiprintf_r>
 8009d02:	b002      	add	sp, #8
 8009d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d08:	b004      	add	sp, #16
 8009d0a:	4770      	bx	lr
 8009d0c:	2000004c 	.word	0x2000004c

08009d10 <_cleanup_r>:
 8009d10:	4901      	ldr	r1, [pc, #4]	; (8009d18 <_cleanup_r+0x8>)
 8009d12:	f000 b8a9 	b.w	8009e68 <_fwalk_reent>
 8009d16:	bf00      	nop
 8009d18:	0800a889 	.word	0x0800a889

08009d1c <std.isra.0>:
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	4604      	mov	r4, r0
 8009d22:	6003      	str	r3, [r0, #0]
 8009d24:	6043      	str	r3, [r0, #4]
 8009d26:	6083      	str	r3, [r0, #8]
 8009d28:	8181      	strh	r1, [r0, #12]
 8009d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8009d2c:	81c2      	strh	r2, [r0, #14]
 8009d2e:	6103      	str	r3, [r0, #16]
 8009d30:	6143      	str	r3, [r0, #20]
 8009d32:	6183      	str	r3, [r0, #24]
 8009d34:	4619      	mov	r1, r3
 8009d36:	2208      	movs	r2, #8
 8009d38:	305c      	adds	r0, #92	; 0x5c
 8009d3a:	f7ff ffc9 	bl	8009cd0 <memset>
 8009d3e:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <std.isra.0+0x38>)
 8009d40:	6263      	str	r3, [r4, #36]	; 0x24
 8009d42:	4b05      	ldr	r3, [pc, #20]	; (8009d58 <std.isra.0+0x3c>)
 8009d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d46:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <std.isra.0+0x40>)
 8009d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <std.isra.0+0x44>)
 8009d4c:	6224      	str	r4, [r4, #32]
 8009d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	bf00      	nop
 8009d54:	0800a52d 	.word	0x0800a52d
 8009d58:	0800a54f 	.word	0x0800a54f
 8009d5c:	0800a587 	.word	0x0800a587
 8009d60:	0800a5ab 	.word	0x0800a5ab

08009d64 <__sfmoreglue>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	1e4a      	subs	r2, r1, #1
 8009d68:	2568      	movs	r5, #104	; 0x68
 8009d6a:	4355      	muls	r5, r2
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d72:	f000 f897 	bl	8009ea4 <_malloc_r>
 8009d76:	4604      	mov	r4, r0
 8009d78:	b140      	cbz	r0, 8009d8c <__sfmoreglue+0x28>
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	e880 0042 	stmia.w	r0, {r1, r6}
 8009d80:	300c      	adds	r0, #12
 8009d82:	60a0      	str	r0, [r4, #8]
 8009d84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d88:	f7ff ffa2 	bl	8009cd0 <memset>
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	bd70      	pop	{r4, r5, r6, pc}

08009d90 <__sinit>:
 8009d90:	6983      	ldr	r3, [r0, #24]
 8009d92:	b510      	push	{r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	bb33      	cbnz	r3, 8009de6 <__sinit+0x56>
 8009d98:	6483      	str	r3, [r0, #72]	; 0x48
 8009d9a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8009d9c:	6503      	str	r3, [r0, #80]	; 0x50
 8009d9e:	4b12      	ldr	r3, [pc, #72]	; (8009de8 <__sinit+0x58>)
 8009da0:	4a12      	ldr	r2, [pc, #72]	; (8009dec <__sinit+0x5c>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	6282      	str	r2, [r0, #40]	; 0x28
 8009da6:	4298      	cmp	r0, r3
 8009da8:	bf04      	itt	eq
 8009daa:	2301      	moveq	r3, #1
 8009dac:	6183      	streq	r3, [r0, #24]
 8009dae:	f000 f81f 	bl	8009df0 <__sfp>
 8009db2:	6060      	str	r0, [r4, #4]
 8009db4:	4620      	mov	r0, r4
 8009db6:	f000 f81b 	bl	8009df0 <__sfp>
 8009dba:	60a0      	str	r0, [r4, #8]
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f000 f817 	bl	8009df0 <__sfp>
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	60e0      	str	r0, [r4, #12]
 8009dc6:	2104      	movs	r1, #4
 8009dc8:	6860      	ldr	r0, [r4, #4]
 8009dca:	f7ff ffa7 	bl	8009d1c <std.isra.0>
 8009dce:	2201      	movs	r2, #1
 8009dd0:	2109      	movs	r1, #9
 8009dd2:	68a0      	ldr	r0, [r4, #8]
 8009dd4:	f7ff ffa2 	bl	8009d1c <std.isra.0>
 8009dd8:	2202      	movs	r2, #2
 8009dda:	2112      	movs	r1, #18
 8009ddc:	68e0      	ldr	r0, [r4, #12]
 8009dde:	f7ff ff9d 	bl	8009d1c <std.isra.0>
 8009de2:	2301      	movs	r3, #1
 8009de4:	61a3      	str	r3, [r4, #24]
 8009de6:	bd10      	pop	{r4, pc}
 8009de8:	080a42d0 	.word	0x080a42d0
 8009dec:	08009d11 	.word	0x08009d11

08009df0 <__sfp>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	4b1c      	ldr	r3, [pc, #112]	; (8009e64 <__sfp+0x74>)
 8009df4:	681e      	ldr	r6, [r3, #0]
 8009df6:	69b3      	ldr	r3, [r6, #24]
 8009df8:	4607      	mov	r7, r0
 8009dfa:	b913      	cbnz	r3, 8009e02 <__sfp+0x12>
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	f7ff ffc7 	bl	8009d90 <__sinit>
 8009e02:	3648      	adds	r6, #72	; 0x48
 8009e04:	68b4      	ldr	r4, [r6, #8]
 8009e06:	6873      	ldr	r3, [r6, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	d503      	bpl.n	8009e14 <__sfp+0x24>
 8009e0c:	6833      	ldr	r3, [r6, #0]
 8009e0e:	b133      	cbz	r3, 8009e1e <__sfp+0x2e>
 8009e10:	6836      	ldr	r6, [r6, #0]
 8009e12:	e7f7      	b.n	8009e04 <__sfp+0x14>
 8009e14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e18:	b16d      	cbz	r5, 8009e36 <__sfp+0x46>
 8009e1a:	3468      	adds	r4, #104	; 0x68
 8009e1c:	e7f4      	b.n	8009e08 <__sfp+0x18>
 8009e1e:	2104      	movs	r1, #4
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ff9f 	bl	8009d64 <__sfmoreglue>
 8009e26:	6030      	str	r0, [r6, #0]
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1f1      	bne.n	8009e10 <__sfp+0x20>
 8009e2c:	230c      	movs	r3, #12
 8009e2e:	603b      	str	r3, [r7, #0]
 8009e30:	4604      	mov	r4, r0
 8009e32:	4620      	mov	r0, r4
 8009e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e3a:	81e3      	strh	r3, [r4, #14]
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	81a3      	strh	r3, [r4, #12]
 8009e40:	6665      	str	r5, [r4, #100]	; 0x64
 8009e42:	6025      	str	r5, [r4, #0]
 8009e44:	60a5      	str	r5, [r4, #8]
 8009e46:	6065      	str	r5, [r4, #4]
 8009e48:	6125      	str	r5, [r4, #16]
 8009e4a:	6165      	str	r5, [r4, #20]
 8009e4c:	61a5      	str	r5, [r4, #24]
 8009e4e:	2208      	movs	r2, #8
 8009e50:	4629      	mov	r1, r5
 8009e52:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e56:	f7ff ff3b 	bl	8009cd0 <memset>
 8009e5a:	6365      	str	r5, [r4, #52]	; 0x34
 8009e5c:	63a5      	str	r5, [r4, #56]	; 0x38
 8009e5e:	64a5      	str	r5, [r4, #72]	; 0x48
 8009e60:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009e62:	e7e6      	b.n	8009e32 <__sfp+0x42>
 8009e64:	080a42d0 	.word	0x080a42d0

08009e68 <_fwalk_reent>:
 8009e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e6c:	4680      	mov	r8, r0
 8009e6e:	4689      	mov	r9, r1
 8009e70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e74:	2600      	movs	r6, #0
 8009e76:	b914      	cbnz	r4, 8009e7e <_fwalk_reent+0x16>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	68a5      	ldr	r5, [r4, #8]
 8009e80:	6867      	ldr	r7, [r4, #4]
 8009e82:	3f01      	subs	r7, #1
 8009e84:	d501      	bpl.n	8009e8a <_fwalk_reent+0x22>
 8009e86:	6824      	ldr	r4, [r4, #0]
 8009e88:	e7f5      	b.n	8009e76 <_fwalk_reent+0xe>
 8009e8a:	89ab      	ldrh	r3, [r5, #12]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d907      	bls.n	8009ea0 <_fwalk_reent+0x38>
 8009e90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e94:	3301      	adds	r3, #1
 8009e96:	d003      	beq.n	8009ea0 <_fwalk_reent+0x38>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	47c8      	blx	r9
 8009e9e:	4306      	orrs	r6, r0
 8009ea0:	3568      	adds	r5, #104	; 0x68
 8009ea2:	e7ee      	b.n	8009e82 <_fwalk_reent+0x1a>

08009ea4 <_malloc_r>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	1ccd      	adds	r5, r1, #3
 8009ea8:	f025 0503 	bic.w	r5, r5, #3
 8009eac:	3508      	adds	r5, #8
 8009eae:	2d0c      	cmp	r5, #12
 8009eb0:	bf38      	it	cc
 8009eb2:	250c      	movcc	r5, #12
 8009eb4:	2d00      	cmp	r5, #0
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	db01      	blt.n	8009ebe <_malloc_r+0x1a>
 8009eba:	42a9      	cmp	r1, r5
 8009ebc:	d903      	bls.n	8009ec6 <_malloc_r+0x22>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	6033      	str	r3, [r6, #0]
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	f000 fd7f 	bl	800a9c8 <__malloc_lock>
 8009eca:	4a23      	ldr	r2, [pc, #140]	; (8009f58 <_malloc_r+0xb4>)
 8009ecc:	6814      	ldr	r4, [r2, #0]
 8009ece:	4621      	mov	r1, r4
 8009ed0:	b991      	cbnz	r1, 8009ef8 <_malloc_r+0x54>
 8009ed2:	4c22      	ldr	r4, [pc, #136]	; (8009f5c <_malloc_r+0xb8>)
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	b91b      	cbnz	r3, 8009ee0 <_malloc_r+0x3c>
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f000 fb17 	bl	800a50c <_sbrk_r>
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f000 fb12 	bl	800a50c <_sbrk_r>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d126      	bne.n	8009f3a <_malloc_r+0x96>
 8009eec:	230c      	movs	r3, #12
 8009eee:	6033      	str	r3, [r6, #0]
 8009ef0:	4630      	mov	r0, r6
 8009ef2:	f000 fd6a 	bl	800a9ca <__malloc_unlock>
 8009ef6:	e7e4      	b.n	8009ec2 <_malloc_r+0x1e>
 8009ef8:	680b      	ldr	r3, [r1, #0]
 8009efa:	1b5b      	subs	r3, r3, r5
 8009efc:	d41a      	bmi.n	8009f34 <_malloc_r+0x90>
 8009efe:	2b0b      	cmp	r3, #11
 8009f00:	d90f      	bls.n	8009f22 <_malloc_r+0x7e>
 8009f02:	600b      	str	r3, [r1, #0]
 8009f04:	50cd      	str	r5, [r1, r3]
 8009f06:	18cc      	adds	r4, r1, r3
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f000 fd5e 	bl	800a9ca <__malloc_unlock>
 8009f0e:	f104 000b 	add.w	r0, r4, #11
 8009f12:	1d23      	adds	r3, r4, #4
 8009f14:	f020 0007 	bic.w	r0, r0, #7
 8009f18:	1ac3      	subs	r3, r0, r3
 8009f1a:	d01b      	beq.n	8009f54 <_malloc_r+0xb0>
 8009f1c:	425a      	negs	r2, r3
 8009f1e:	50e2      	str	r2, [r4, r3]
 8009f20:	bd70      	pop	{r4, r5, r6, pc}
 8009f22:	428c      	cmp	r4, r1
 8009f24:	bf0d      	iteet	eq
 8009f26:	6863      	ldreq	r3, [r4, #4]
 8009f28:	684b      	ldrne	r3, [r1, #4]
 8009f2a:	6063      	strne	r3, [r4, #4]
 8009f2c:	6013      	streq	r3, [r2, #0]
 8009f2e:	bf18      	it	ne
 8009f30:	460c      	movne	r4, r1
 8009f32:	e7e9      	b.n	8009f08 <_malloc_r+0x64>
 8009f34:	460c      	mov	r4, r1
 8009f36:	6849      	ldr	r1, [r1, #4]
 8009f38:	e7ca      	b.n	8009ed0 <_malloc_r+0x2c>
 8009f3a:	1cc4      	adds	r4, r0, #3
 8009f3c:	f024 0403 	bic.w	r4, r4, #3
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d005      	beq.n	8009f50 <_malloc_r+0xac>
 8009f44:	1a21      	subs	r1, r4, r0
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 fae0 	bl	800a50c <_sbrk_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d0cd      	beq.n	8009eec <_malloc_r+0x48>
 8009f50:	6025      	str	r5, [r4, #0]
 8009f52:	e7d9      	b.n	8009f08 <_malloc_r+0x64>
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
 8009f56:	bf00      	nop
 8009f58:	20000280 	.word	0x20000280
 8009f5c:	20000284 	.word	0x20000284

08009f60 <__sfputc_r>:
 8009f60:	6893      	ldr	r3, [r2, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	b410      	push	{r4}
 8009f68:	6093      	str	r3, [r2, #8]
 8009f6a:	da09      	bge.n	8009f80 <__sfputc_r+0x20>
 8009f6c:	6994      	ldr	r4, [r2, #24]
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	db02      	blt.n	8009f78 <__sfputc_r+0x18>
 8009f72:	b2cb      	uxtb	r3, r1
 8009f74:	2b0a      	cmp	r3, #10
 8009f76:	d103      	bne.n	8009f80 <__sfputc_r+0x20>
 8009f78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7c:	f000 bb1a 	b.w	800a5b4 <__swbuf_r>
 8009f80:	6813      	ldr	r3, [r2, #0]
 8009f82:	1c58      	adds	r0, r3, #1
 8009f84:	6010      	str	r0, [r2, #0]
 8009f86:	7019      	strb	r1, [r3, #0]
 8009f88:	b2c8      	uxtb	r0, r1
 8009f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <__sfputs_r>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	4606      	mov	r6, r0
 8009f94:	460f      	mov	r7, r1
 8009f96:	4614      	mov	r4, r2
 8009f98:	18d5      	adds	r5, r2, r3
 8009f9a:	42ac      	cmp	r4, r5
 8009f9c:	d101      	bne.n	8009fa2 <__sfputs_r+0x12>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e007      	b.n	8009fb2 <__sfputs_r+0x22>
 8009fa2:	463a      	mov	r2, r7
 8009fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffd9 	bl	8009f60 <__sfputc_r>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d1f3      	bne.n	8009f9a <__sfputs_r+0xa>
 8009fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fb4 <_vfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	b09d      	sub	sp, #116	; 0x74
 8009fba:	460c      	mov	r4, r1
 8009fbc:	4617      	mov	r7, r2
 8009fbe:	9303      	str	r3, [sp, #12]
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	b118      	cbz	r0, 8009fcc <_vfiprintf_r+0x18>
 8009fc4:	6983      	ldr	r3, [r0, #24]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x18>
 8009fc8:	f7ff fee2 	bl	8009d90 <__sinit>
 8009fcc:	4b7c      	ldr	r3, [pc, #496]	; (800a1c0 <_vfiprintf_r+0x20c>)
 8009fce:	429c      	cmp	r4, r3
 8009fd0:	d157      	bne.n	800a082 <_vfiprintf_r+0xce>
 8009fd2:	6874      	ldr	r4, [r6, #4]
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	0718      	lsls	r0, r3, #28
 8009fd8:	d55d      	bpl.n	800a096 <_vfiprintf_r+0xe2>
 8009fda:	6923      	ldr	r3, [r4, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d05a      	beq.n	800a096 <_vfiprintf_r+0xe2>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8009fe4:	2320      	movs	r3, #32
 8009fe6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fea:	2330      	movs	r3, #48	; 0x30
 8009fec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ff0:	f04f 0b01 	mov.w	fp, #1
 8009ff4:	46b8      	mov	r8, r7
 8009ff6:	4645      	mov	r5, r8
 8009ff8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d155      	bne.n	800a0ac <_vfiprintf_r+0xf8>
 800a000:	ebb8 0a07 	subs.w	sl, r8, r7
 800a004:	d00b      	beq.n	800a01e <_vfiprintf_r+0x6a>
 800a006:	4653      	mov	r3, sl
 800a008:	463a      	mov	r2, r7
 800a00a:	4621      	mov	r1, r4
 800a00c:	4630      	mov	r0, r6
 800a00e:	f7ff ffbf 	bl	8009f90 <__sfputs_r>
 800a012:	3001      	adds	r0, #1
 800a014:	f000 80c4 	beq.w	800a1a0 <_vfiprintf_r+0x1ec>
 800a018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a01a:	4453      	add	r3, sl
 800a01c:	9309      	str	r3, [sp, #36]	; 0x24
 800a01e:	f898 3000 	ldrb.w	r3, [r8]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 80bc 	beq.w	800a1a0 <_vfiprintf_r+0x1ec>
 800a028:	2300      	movs	r3, #0
 800a02a:	f04f 32ff 	mov.w	r2, #4294967295
 800a02e:	9304      	str	r3, [sp, #16]
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	9205      	str	r2, [sp, #20]
 800a034:	9306      	str	r3, [sp, #24]
 800a036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a03a:	931a      	str	r3, [sp, #104]	; 0x68
 800a03c:	2205      	movs	r2, #5
 800a03e:	7829      	ldrb	r1, [r5, #0]
 800a040:	4860      	ldr	r0, [pc, #384]	; (800a1c4 <_vfiprintf_r+0x210>)
 800a042:	f7f6 f8d5 	bl	80001f0 <memchr>
 800a046:	f105 0801 	add.w	r8, r5, #1
 800a04a:	9b04      	ldr	r3, [sp, #16]
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d131      	bne.n	800a0b4 <_vfiprintf_r+0x100>
 800a050:	06d9      	lsls	r1, r3, #27
 800a052:	bf44      	itt	mi
 800a054:	2220      	movmi	r2, #32
 800a056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a05a:	071a      	lsls	r2, r3, #28
 800a05c:	bf44      	itt	mi
 800a05e:	222b      	movmi	r2, #43	; 0x2b
 800a060:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a064:	782a      	ldrb	r2, [r5, #0]
 800a066:	2a2a      	cmp	r2, #42	; 0x2a
 800a068:	d02c      	beq.n	800a0c4 <_vfiprintf_r+0x110>
 800a06a:	9a07      	ldr	r2, [sp, #28]
 800a06c:	2100      	movs	r1, #0
 800a06e:	200a      	movs	r0, #10
 800a070:	46a8      	mov	r8, r5
 800a072:	3501      	adds	r5, #1
 800a074:	f898 3000 	ldrb.w	r3, [r8]
 800a078:	3b30      	subs	r3, #48	; 0x30
 800a07a:	2b09      	cmp	r3, #9
 800a07c:	d96d      	bls.n	800a15a <_vfiprintf_r+0x1a6>
 800a07e:	b371      	cbz	r1, 800a0de <_vfiprintf_r+0x12a>
 800a080:	e026      	b.n	800a0d0 <_vfiprintf_r+0x11c>
 800a082:	4b51      	ldr	r3, [pc, #324]	; (800a1c8 <_vfiprintf_r+0x214>)
 800a084:	429c      	cmp	r4, r3
 800a086:	d101      	bne.n	800a08c <_vfiprintf_r+0xd8>
 800a088:	68b4      	ldr	r4, [r6, #8]
 800a08a:	e7a3      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a08c:	4b4f      	ldr	r3, [pc, #316]	; (800a1cc <_vfiprintf_r+0x218>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	bf08      	it	eq
 800a092:	68f4      	ldreq	r4, [r6, #12]
 800a094:	e79e      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a096:	4621      	mov	r1, r4
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 faef 	bl	800a67c <__swsetup_r>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d09e      	beq.n	8009fe0 <_vfiprintf_r+0x2c>
 800a0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a6:	b01d      	add	sp, #116	; 0x74
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	2b25      	cmp	r3, #37	; 0x25
 800a0ae:	d0a7      	beq.n	800a000 <_vfiprintf_r+0x4c>
 800a0b0:	46a8      	mov	r8, r5
 800a0b2:	e7a0      	b.n	8009ff6 <_vfiprintf_r+0x42>
 800a0b4:	4a43      	ldr	r2, [pc, #268]	; (800a1c4 <_vfiprintf_r+0x210>)
 800a0b6:	1a80      	subs	r0, r0, r2
 800a0b8:	fa0b f000 	lsl.w	r0, fp, r0
 800a0bc:	4318      	orrs	r0, r3
 800a0be:	9004      	str	r0, [sp, #16]
 800a0c0:	4645      	mov	r5, r8
 800a0c2:	e7bb      	b.n	800a03c <_vfiprintf_r+0x88>
 800a0c4:	9a03      	ldr	r2, [sp, #12]
 800a0c6:	1d11      	adds	r1, r2, #4
 800a0c8:	6812      	ldr	r2, [r2, #0]
 800a0ca:	9103      	str	r1, [sp, #12]
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	db01      	blt.n	800a0d4 <_vfiprintf_r+0x120>
 800a0d0:	9207      	str	r2, [sp, #28]
 800a0d2:	e004      	b.n	800a0de <_vfiprintf_r+0x12a>
 800a0d4:	4252      	negs	r2, r2
 800a0d6:	f043 0302 	orr.w	r3, r3, #2
 800a0da:	9207      	str	r2, [sp, #28]
 800a0dc:	9304      	str	r3, [sp, #16]
 800a0de:	f898 3000 	ldrb.w	r3, [r8]
 800a0e2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0e4:	d110      	bne.n	800a108 <_vfiprintf_r+0x154>
 800a0e6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ec:	f108 0101 	add.w	r1, r8, #1
 800a0f0:	d137      	bne.n	800a162 <_vfiprintf_r+0x1ae>
 800a0f2:	9b03      	ldr	r3, [sp, #12]
 800a0f4:	1d1a      	adds	r2, r3, #4
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	9203      	str	r2, [sp, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bfb8      	it	lt
 800a0fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800a102:	f108 0802 	add.w	r8, r8, #2
 800a106:	9305      	str	r3, [sp, #20]
 800a108:	4d31      	ldr	r5, [pc, #196]	; (800a1d0 <_vfiprintf_r+0x21c>)
 800a10a:	f898 1000 	ldrb.w	r1, [r8]
 800a10e:	2203      	movs	r2, #3
 800a110:	4628      	mov	r0, r5
 800a112:	f7f6 f86d 	bl	80001f0 <memchr>
 800a116:	b140      	cbz	r0, 800a12a <_vfiprintf_r+0x176>
 800a118:	2340      	movs	r3, #64	; 0x40
 800a11a:	1b40      	subs	r0, r0, r5
 800a11c:	fa03 f000 	lsl.w	r0, r3, r0
 800a120:	9b04      	ldr	r3, [sp, #16]
 800a122:	4303      	orrs	r3, r0
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	f108 0801 	add.w	r8, r8, #1
 800a12a:	f898 1000 	ldrb.w	r1, [r8]
 800a12e:	4829      	ldr	r0, [pc, #164]	; (800a1d4 <_vfiprintf_r+0x220>)
 800a130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a134:	2206      	movs	r2, #6
 800a136:	f108 0701 	add.w	r7, r8, #1
 800a13a:	f7f6 f859 	bl	80001f0 <memchr>
 800a13e:	2800      	cmp	r0, #0
 800a140:	d034      	beq.n	800a1ac <_vfiprintf_r+0x1f8>
 800a142:	4b25      	ldr	r3, [pc, #148]	; (800a1d8 <_vfiprintf_r+0x224>)
 800a144:	bb03      	cbnz	r3, 800a188 <_vfiprintf_r+0x1d4>
 800a146:	9b03      	ldr	r3, [sp, #12]
 800a148:	3307      	adds	r3, #7
 800a14a:	f023 0307 	bic.w	r3, r3, #7
 800a14e:	3308      	adds	r3, #8
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	444b      	add	r3, r9
 800a156:	9309      	str	r3, [sp, #36]	; 0x24
 800a158:	e74c      	b.n	8009ff4 <_vfiprintf_r+0x40>
 800a15a:	fb00 3202 	mla	r2, r0, r2, r3
 800a15e:	2101      	movs	r1, #1
 800a160:	e786      	b.n	800a070 <_vfiprintf_r+0xbc>
 800a162:	2300      	movs	r3, #0
 800a164:	9305      	str	r3, [sp, #20]
 800a166:	4618      	mov	r0, r3
 800a168:	250a      	movs	r5, #10
 800a16a:	4688      	mov	r8, r1
 800a16c:	3101      	adds	r1, #1
 800a16e:	f898 2000 	ldrb.w	r2, [r8]
 800a172:	3a30      	subs	r2, #48	; 0x30
 800a174:	2a09      	cmp	r2, #9
 800a176:	d903      	bls.n	800a180 <_vfiprintf_r+0x1cc>
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d0c5      	beq.n	800a108 <_vfiprintf_r+0x154>
 800a17c:	9005      	str	r0, [sp, #20]
 800a17e:	e7c3      	b.n	800a108 <_vfiprintf_r+0x154>
 800a180:	fb05 2000 	mla	r0, r5, r0, r2
 800a184:	2301      	movs	r3, #1
 800a186:	e7f0      	b.n	800a16a <_vfiprintf_r+0x1b6>
 800a188:	ab03      	add	r3, sp, #12
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	4622      	mov	r2, r4
 800a18e:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <_vfiprintf_r+0x228>)
 800a190:	a904      	add	r1, sp, #16
 800a192:	4630      	mov	r0, r6
 800a194:	f3af 8000 	nop.w
 800a198:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a19c:	4681      	mov	r9, r0
 800a19e:	d1d8      	bne.n	800a152 <_vfiprintf_r+0x19e>
 800a1a0:	89a3      	ldrh	r3, [r4, #12]
 800a1a2:	065b      	lsls	r3, r3, #25
 800a1a4:	f53f af7d 	bmi.w	800a0a2 <_vfiprintf_r+0xee>
 800a1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1aa:	e77c      	b.n	800a0a6 <_vfiprintf_r+0xf2>
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	4b0a      	ldr	r3, [pc, #40]	; (800a1dc <_vfiprintf_r+0x228>)
 800a1b4:	a904      	add	r1, sp, #16
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 f888 	bl	800a2cc <_printf_i>
 800a1bc:	e7ec      	b.n	800a198 <_vfiprintf_r+0x1e4>
 800a1be:	bf00      	nop
 800a1c0:	080a42f4 	.word	0x080a42f4
 800a1c4:	080a4334 	.word	0x080a4334
 800a1c8:	080a4314 	.word	0x080a4314
 800a1cc:	080a42d4 	.word	0x080a42d4
 800a1d0:	080a433a 	.word	0x080a433a
 800a1d4:	080a433e 	.word	0x080a433e
 800a1d8:	00000000 	.word	0x00000000
 800a1dc:	08009f91 	.word	0x08009f91

0800a1e0 <_printf_common>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	4691      	mov	r9, r2
 800a1e6:	461f      	mov	r7, r3
 800a1e8:	688a      	ldr	r2, [r1, #8]
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	f8c9 3000 	str.w	r3, [r9]
 800a1fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1fe:	4606      	mov	r6, r0
 800a200:	460c      	mov	r4, r1
 800a202:	b112      	cbz	r2, 800a20a <_printf_common+0x2a>
 800a204:	3301      	adds	r3, #1
 800a206:	f8c9 3000 	str.w	r3, [r9]
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	0699      	lsls	r1, r3, #26
 800a20e:	bf42      	ittt	mi
 800a210:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a214:	3302      	addmi	r3, #2
 800a216:	f8c9 3000 	strmi.w	r3, [r9]
 800a21a:	6825      	ldr	r5, [r4, #0]
 800a21c:	f015 0506 	ands.w	r5, r5, #6
 800a220:	d107      	bne.n	800a232 <_printf_common+0x52>
 800a222:	f104 0a19 	add.w	sl, r4, #25
 800a226:	68e3      	ldr	r3, [r4, #12]
 800a228:	f8d9 2000 	ldr.w	r2, [r9]
 800a22c:	1a9b      	subs	r3, r3, r2
 800a22e:	429d      	cmp	r5, r3
 800a230:	db29      	blt.n	800a286 <_printf_common+0xa6>
 800a232:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	3300      	adds	r3, #0
 800a23a:	bf18      	it	ne
 800a23c:	2301      	movne	r3, #1
 800a23e:	0692      	lsls	r2, r2, #26
 800a240:	d42e      	bmi.n	800a2a0 <_printf_common+0xc0>
 800a242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a246:	4639      	mov	r1, r7
 800a248:	4630      	mov	r0, r6
 800a24a:	47c0      	blx	r8
 800a24c:	3001      	adds	r0, #1
 800a24e:	d021      	beq.n	800a294 <_printf_common+0xb4>
 800a250:	6823      	ldr	r3, [r4, #0]
 800a252:	68e5      	ldr	r5, [r4, #12]
 800a254:	f8d9 2000 	ldr.w	r2, [r9]
 800a258:	f003 0306 	and.w	r3, r3, #6
 800a25c:	2b04      	cmp	r3, #4
 800a25e:	bf08      	it	eq
 800a260:	1aad      	subeq	r5, r5, r2
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	6922      	ldr	r2, [r4, #16]
 800a266:	bf0c      	ite	eq
 800a268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a26c:	2500      	movne	r5, #0
 800a26e:	4293      	cmp	r3, r2
 800a270:	bfc4      	itt	gt
 800a272:	1a9b      	subgt	r3, r3, r2
 800a274:	18ed      	addgt	r5, r5, r3
 800a276:	f04f 0900 	mov.w	r9, #0
 800a27a:	341a      	adds	r4, #26
 800a27c:	454d      	cmp	r5, r9
 800a27e:	d11b      	bne.n	800a2b8 <_printf_common+0xd8>
 800a280:	2000      	movs	r0, #0
 800a282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a286:	2301      	movs	r3, #1
 800a288:	4652      	mov	r2, sl
 800a28a:	4639      	mov	r1, r7
 800a28c:	4630      	mov	r0, r6
 800a28e:	47c0      	blx	r8
 800a290:	3001      	adds	r0, #1
 800a292:	d103      	bne.n	800a29c <_printf_common+0xbc>
 800a294:	f04f 30ff 	mov.w	r0, #4294967295
 800a298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29c:	3501      	adds	r5, #1
 800a29e:	e7c2      	b.n	800a226 <_printf_common+0x46>
 800a2a0:	18e1      	adds	r1, r4, r3
 800a2a2:	1c5a      	adds	r2, r3, #1
 800a2a4:	2030      	movs	r0, #48	; 0x30
 800a2a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2aa:	4422      	add	r2, r4
 800a2ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2b4:	3302      	adds	r3, #2
 800a2b6:	e7c4      	b.n	800a242 <_printf_common+0x62>
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4639      	mov	r1, r7
 800a2be:	4630      	mov	r0, r6
 800a2c0:	47c0      	blx	r8
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d0e6      	beq.n	800a294 <_printf_common+0xb4>
 800a2c6:	f109 0901 	add.w	r9, r9, #1
 800a2ca:	e7d7      	b.n	800a27c <_printf_common+0x9c>

0800a2cc <_printf_i>:
 800a2cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d0:	4617      	mov	r7, r2
 800a2d2:	7e0a      	ldrb	r2, [r1, #24]
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	2a6e      	cmp	r2, #110	; 0x6e
 800a2d8:	4698      	mov	r8, r3
 800a2da:	4606      	mov	r6, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a2e4:	f000 80bc 	beq.w	800a460 <_printf_i+0x194>
 800a2e8:	d81a      	bhi.n	800a320 <_printf_i+0x54>
 800a2ea:	2a63      	cmp	r2, #99	; 0x63
 800a2ec:	d02e      	beq.n	800a34c <_printf_i+0x80>
 800a2ee:	d80a      	bhi.n	800a306 <_printf_i+0x3a>
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	f000 80c8 	beq.w	800a486 <_printf_i+0x1ba>
 800a2f6:	2a58      	cmp	r2, #88	; 0x58
 800a2f8:	f000 808a 	beq.w	800a410 <_printf_i+0x144>
 800a2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a300:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a304:	e02a      	b.n	800a35c <_printf_i+0x90>
 800a306:	2a64      	cmp	r2, #100	; 0x64
 800a308:	d001      	beq.n	800a30e <_printf_i+0x42>
 800a30a:	2a69      	cmp	r2, #105	; 0x69
 800a30c:	d1f6      	bne.n	800a2fc <_printf_i+0x30>
 800a30e:	6821      	ldr	r1, [r4, #0]
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a316:	d023      	beq.n	800a360 <_printf_i+0x94>
 800a318:	1d11      	adds	r1, r2, #4
 800a31a:	6019      	str	r1, [r3, #0]
 800a31c:	6813      	ldr	r3, [r2, #0]
 800a31e:	e027      	b.n	800a370 <_printf_i+0xa4>
 800a320:	2a73      	cmp	r2, #115	; 0x73
 800a322:	f000 80b4 	beq.w	800a48e <_printf_i+0x1c2>
 800a326:	d808      	bhi.n	800a33a <_printf_i+0x6e>
 800a328:	2a6f      	cmp	r2, #111	; 0x6f
 800a32a:	d02a      	beq.n	800a382 <_printf_i+0xb6>
 800a32c:	2a70      	cmp	r2, #112	; 0x70
 800a32e:	d1e5      	bne.n	800a2fc <_printf_i+0x30>
 800a330:	680a      	ldr	r2, [r1, #0]
 800a332:	f042 0220 	orr.w	r2, r2, #32
 800a336:	600a      	str	r2, [r1, #0]
 800a338:	e003      	b.n	800a342 <_printf_i+0x76>
 800a33a:	2a75      	cmp	r2, #117	; 0x75
 800a33c:	d021      	beq.n	800a382 <_printf_i+0xb6>
 800a33e:	2a78      	cmp	r2, #120	; 0x78
 800a340:	d1dc      	bne.n	800a2fc <_printf_i+0x30>
 800a342:	2278      	movs	r2, #120	; 0x78
 800a344:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a348:	496e      	ldr	r1, [pc, #440]	; (800a504 <_printf_i+0x238>)
 800a34a:	e064      	b.n	800a416 <_printf_i+0x14a>
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a352:	1d11      	adds	r1, r2, #4
 800a354:	6019      	str	r1, [r3, #0]
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a35c:	2301      	movs	r3, #1
 800a35e:	e0a3      	b.n	800a4a8 <_printf_i+0x1dc>
 800a360:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a364:	f102 0104 	add.w	r1, r2, #4
 800a368:	6019      	str	r1, [r3, #0]
 800a36a:	d0d7      	beq.n	800a31c <_printf_i+0x50>
 800a36c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a370:	2b00      	cmp	r3, #0
 800a372:	da03      	bge.n	800a37c <_printf_i+0xb0>
 800a374:	222d      	movs	r2, #45	; 0x2d
 800a376:	425b      	negs	r3, r3
 800a378:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a37c:	4962      	ldr	r1, [pc, #392]	; (800a508 <_printf_i+0x23c>)
 800a37e:	220a      	movs	r2, #10
 800a380:	e017      	b.n	800a3b2 <_printf_i+0xe6>
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	6819      	ldr	r1, [r3, #0]
 800a386:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a38a:	d003      	beq.n	800a394 <_printf_i+0xc8>
 800a38c:	1d08      	adds	r0, r1, #4
 800a38e:	6018      	str	r0, [r3, #0]
 800a390:	680b      	ldr	r3, [r1, #0]
 800a392:	e006      	b.n	800a3a2 <_printf_i+0xd6>
 800a394:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a398:	f101 0004 	add.w	r0, r1, #4
 800a39c:	6018      	str	r0, [r3, #0]
 800a39e:	d0f7      	beq.n	800a390 <_printf_i+0xc4>
 800a3a0:	880b      	ldrh	r3, [r1, #0]
 800a3a2:	4959      	ldr	r1, [pc, #356]	; (800a508 <_printf_i+0x23c>)
 800a3a4:	2a6f      	cmp	r2, #111	; 0x6f
 800a3a6:	bf14      	ite	ne
 800a3a8:	220a      	movne	r2, #10
 800a3aa:	2208      	moveq	r2, #8
 800a3ac:	2000      	movs	r0, #0
 800a3ae:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a3b2:	6865      	ldr	r5, [r4, #4]
 800a3b4:	60a5      	str	r5, [r4, #8]
 800a3b6:	2d00      	cmp	r5, #0
 800a3b8:	f2c0 809c 	blt.w	800a4f4 <_printf_i+0x228>
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	f020 0004 	bic.w	r0, r0, #4
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d13f      	bne.n	800a448 <_printf_i+0x17c>
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	f040 8095 	bne.w	800a4f8 <_printf_i+0x22c>
 800a3ce:	4675      	mov	r5, lr
 800a3d0:	2a08      	cmp	r2, #8
 800a3d2:	d10b      	bne.n	800a3ec <_printf_i+0x120>
 800a3d4:	6823      	ldr	r3, [r4, #0]
 800a3d6:	07da      	lsls	r2, r3, #31
 800a3d8:	d508      	bpl.n	800a3ec <_printf_i+0x120>
 800a3da:	6923      	ldr	r3, [r4, #16]
 800a3dc:	6862      	ldr	r2, [r4, #4]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	bfde      	ittt	le
 800a3e2:	2330      	movle	r3, #48	; 0x30
 800a3e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3ec:	ebae 0305 	sub.w	r3, lr, r5
 800a3f0:	6123      	str	r3, [r4, #16]
 800a3f2:	f8cd 8000 	str.w	r8, [sp]
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	aa03      	add	r2, sp, #12
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff feef 	bl	800a1e0 <_printf_common>
 800a402:	3001      	adds	r0, #1
 800a404:	d155      	bne.n	800a4b2 <_printf_i+0x1e6>
 800a406:	f04f 30ff 	mov.w	r0, #4294967295
 800a40a:	b005      	add	sp, #20
 800a40c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a410:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a414:	493c      	ldr	r1, [pc, #240]	; (800a508 <_printf_i+0x23c>)
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	6818      	ldr	r0, [r3, #0]
 800a41a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a41e:	f100 0504 	add.w	r5, r0, #4
 800a422:	601d      	str	r5, [r3, #0]
 800a424:	d001      	beq.n	800a42a <_printf_i+0x15e>
 800a426:	6803      	ldr	r3, [r0, #0]
 800a428:	e002      	b.n	800a430 <_printf_i+0x164>
 800a42a:	0655      	lsls	r5, r2, #25
 800a42c:	d5fb      	bpl.n	800a426 <_printf_i+0x15a>
 800a42e:	8803      	ldrh	r3, [r0, #0]
 800a430:	07d0      	lsls	r0, r2, #31
 800a432:	bf44      	itt	mi
 800a434:	f042 0220 	orrmi.w	r2, r2, #32
 800a438:	6022      	strmi	r2, [r4, #0]
 800a43a:	b91b      	cbnz	r3, 800a444 <_printf_i+0x178>
 800a43c:	6822      	ldr	r2, [r4, #0]
 800a43e:	f022 0220 	bic.w	r2, r2, #32
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	2210      	movs	r2, #16
 800a446:	e7b1      	b.n	800a3ac <_printf_i+0xe0>
 800a448:	4675      	mov	r5, lr
 800a44a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a44e:	fb02 3310 	mls	r3, r2, r0, r3
 800a452:	5ccb      	ldrb	r3, [r1, r3]
 800a454:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a458:	4603      	mov	r3, r0
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d1f5      	bne.n	800a44a <_printf_i+0x17e>
 800a45e:	e7b7      	b.n	800a3d0 <_printf_i+0x104>
 800a460:	6808      	ldr	r0, [r1, #0]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6949      	ldr	r1, [r1, #20]
 800a466:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a46a:	d004      	beq.n	800a476 <_printf_i+0x1aa>
 800a46c:	1d10      	adds	r0, r2, #4
 800a46e:	6018      	str	r0, [r3, #0]
 800a470:	6813      	ldr	r3, [r2, #0]
 800a472:	6019      	str	r1, [r3, #0]
 800a474:	e007      	b.n	800a486 <_printf_i+0x1ba>
 800a476:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a47a:	f102 0004 	add.w	r0, r2, #4
 800a47e:	6018      	str	r0, [r3, #0]
 800a480:	6813      	ldr	r3, [r2, #0]
 800a482:	d0f6      	beq.n	800a472 <_printf_i+0x1a6>
 800a484:	8019      	strh	r1, [r3, #0]
 800a486:	2300      	movs	r3, #0
 800a488:	6123      	str	r3, [r4, #16]
 800a48a:	4675      	mov	r5, lr
 800a48c:	e7b1      	b.n	800a3f2 <_printf_i+0x126>
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	1d11      	adds	r1, r2, #4
 800a492:	6019      	str	r1, [r3, #0]
 800a494:	6815      	ldr	r5, [r2, #0]
 800a496:	6862      	ldr	r2, [r4, #4]
 800a498:	2100      	movs	r1, #0
 800a49a:	4628      	mov	r0, r5
 800a49c:	f7f5 fea8 	bl	80001f0 <memchr>
 800a4a0:	b108      	cbz	r0, 800a4a6 <_printf_i+0x1da>
 800a4a2:	1b40      	subs	r0, r0, r5
 800a4a4:	6060      	str	r0, [r4, #4]
 800a4a6:	6863      	ldr	r3, [r4, #4]
 800a4a8:	6123      	str	r3, [r4, #16]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b0:	e79f      	b.n	800a3f2 <_printf_i+0x126>
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	47c0      	blx	r8
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d0a2      	beq.n	800a406 <_printf_i+0x13a>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	079b      	lsls	r3, r3, #30
 800a4c4:	d507      	bpl.n	800a4d6 <_printf_i+0x20a>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	f104 0919 	add.w	r9, r4, #25
 800a4cc:	68e3      	ldr	r3, [r4, #12]
 800a4ce:	9a03      	ldr	r2, [sp, #12]
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	429d      	cmp	r5, r3
 800a4d4:	db05      	blt.n	800a4e2 <_printf_i+0x216>
 800a4d6:	68e0      	ldr	r0, [r4, #12]
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	4298      	cmp	r0, r3
 800a4dc:	bfb8      	it	lt
 800a4de:	4618      	movlt	r0, r3
 800a4e0:	e793      	b.n	800a40a <_printf_i+0x13e>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	464a      	mov	r2, r9
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	47c0      	blx	r8
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d08a      	beq.n	800a406 <_printf_i+0x13a>
 800a4f0:	3501      	adds	r5, #1
 800a4f2:	e7eb      	b.n	800a4cc <_printf_i+0x200>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1a7      	bne.n	800a448 <_printf_i+0x17c>
 800a4f8:	780b      	ldrb	r3, [r1, #0]
 800a4fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a502:	e765      	b.n	800a3d0 <_printf_i+0x104>
 800a504:	080a4356 	.word	0x080a4356
 800a508:	080a4345 	.word	0x080a4345

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4c06      	ldr	r4, [pc, #24]	; (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4605      	mov	r5, r0
 800a514:	4608      	mov	r0, r1
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	f7ff f97a 	bl	8009810 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	6823      	ldr	r3, [r4, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	2000072c 	.word	0x2000072c

0800a52c <__sread>:
 800a52c:	b510      	push	{r4, lr}
 800a52e:	460c      	mov	r4, r1
 800a530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a534:	f000 fa98 	bl	800aa68 <_read_r>
 800a538:	2800      	cmp	r0, #0
 800a53a:	bfab      	itete	ge
 800a53c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a53e:	89a3      	ldrhlt	r3, [r4, #12]
 800a540:	181b      	addge	r3, r3, r0
 800a542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a546:	bfac      	ite	ge
 800a548:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54a:	81a3      	strhlt	r3, [r4, #12]
 800a54c:	bd10      	pop	{r4, pc}

0800a54e <__swrite>:
 800a54e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	461f      	mov	r7, r3
 800a554:	898b      	ldrh	r3, [r1, #12]
 800a556:	05db      	lsls	r3, r3, #23
 800a558:	4605      	mov	r5, r0
 800a55a:	460c      	mov	r4, r1
 800a55c:	4616      	mov	r6, r2
 800a55e:	d505      	bpl.n	800a56c <__swrite+0x1e>
 800a560:	2302      	movs	r3, #2
 800a562:	2200      	movs	r2, #0
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	f000 f9b8 	bl	800a8dc <_lseek_r>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a576:	81a3      	strh	r3, [r4, #12]
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4628      	mov	r0, r5
 800a57e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	f000 b869 	b.w	800a658 <_write_r>

0800a586 <__sseek>:
 800a586:	b510      	push	{r4, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58e:	f000 f9a5 	bl	800a8dc <_lseek_r>
 800a592:	1c43      	adds	r3, r0, #1
 800a594:	89a3      	ldrh	r3, [r4, #12]
 800a596:	bf15      	itete	ne
 800a598:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a59e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a2:	81a3      	strheq	r3, [r4, #12]
 800a5a4:	bf18      	it	ne
 800a5a6:	81a3      	strhne	r3, [r4, #12]
 800a5a8:	bd10      	pop	{r4, pc}

0800a5aa <__sclose>:
 800a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ae:	f000 b8d3 	b.w	800a758 <_close_r>
	...

0800a5b4 <__swbuf_r>:
 800a5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4605      	mov	r5, r0
 800a5bc:	b118      	cbz	r0, 800a5c6 <__swbuf_r+0x12>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <__swbuf_r+0x12>
 800a5c2:	f7ff fbe5 	bl	8009d90 <__sinit>
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <__swbuf_r+0x98>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d12a      	bne.n	800a622 <__swbuf_r+0x6e>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	69a3      	ldr	r3, [r4, #24]
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	071a      	lsls	r2, r3, #28
 800a5d6:	d52e      	bpl.n	800a636 <__swbuf_r+0x82>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	b363      	cbz	r3, 800a636 <__swbuf_r+0x82>
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	6820      	ldr	r0, [r4, #0]
 800a5e0:	1ac0      	subs	r0, r0, r3
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	b2f6      	uxtb	r6, r6
 800a5e6:	4298      	cmp	r0, r3
 800a5e8:	4637      	mov	r7, r6
 800a5ea:	db04      	blt.n	800a5f6 <__swbuf_r+0x42>
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 f94a 	bl	800a888 <_fflush_r>
 800a5f4:	bb28      	cbnz	r0, 800a642 <__swbuf_r+0x8e>
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	3b01      	subs	r3, #1
 800a5fa:	60a3      	str	r3, [r4, #8]
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	1c5a      	adds	r2, r3, #1
 800a600:	6022      	str	r2, [r4, #0]
 800a602:	701e      	strb	r6, [r3, #0]
 800a604:	6963      	ldr	r3, [r4, #20]
 800a606:	3001      	adds	r0, #1
 800a608:	4298      	cmp	r0, r3
 800a60a:	d004      	beq.n	800a616 <__swbuf_r+0x62>
 800a60c:	89a3      	ldrh	r3, [r4, #12]
 800a60e:	07db      	lsls	r3, r3, #31
 800a610:	d519      	bpl.n	800a646 <__swbuf_r+0x92>
 800a612:	2e0a      	cmp	r6, #10
 800a614:	d117      	bne.n	800a646 <__swbuf_r+0x92>
 800a616:	4621      	mov	r1, r4
 800a618:	4628      	mov	r0, r5
 800a61a:	f000 f935 	bl	800a888 <_fflush_r>
 800a61e:	b190      	cbz	r0, 800a646 <__swbuf_r+0x92>
 800a620:	e00f      	b.n	800a642 <__swbuf_r+0x8e>
 800a622:	4b0b      	ldr	r3, [pc, #44]	; (800a650 <__swbuf_r+0x9c>)
 800a624:	429c      	cmp	r4, r3
 800a626:	d101      	bne.n	800a62c <__swbuf_r+0x78>
 800a628:	68ac      	ldr	r4, [r5, #8]
 800a62a:	e7d0      	b.n	800a5ce <__swbuf_r+0x1a>
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <__swbuf_r+0xa0>)
 800a62e:	429c      	cmp	r4, r3
 800a630:	bf08      	it	eq
 800a632:	68ec      	ldreq	r4, [r5, #12]
 800a634:	e7cb      	b.n	800a5ce <__swbuf_r+0x1a>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 f81f 	bl	800a67c <__swsetup_r>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0cc      	beq.n	800a5dc <__swbuf_r+0x28>
 800a642:	f04f 37ff 	mov.w	r7, #4294967295
 800a646:	4638      	mov	r0, r7
 800a648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a64a:	bf00      	nop
 800a64c:	080a42f4 	.word	0x080a42f4
 800a650:	080a4314 	.word	0x080a4314
 800a654:	080a42d4 	.word	0x080a42d4

0800a658 <_write_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4c07      	ldr	r4, [pc, #28]	; (800a678 <_write_r+0x20>)
 800a65c:	4605      	mov	r5, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	6022      	str	r2, [r4, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7ff f8b5 	bl	80097d6 <_write>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_write_r+0x1e>
 800a670:	6823      	ldr	r3, [r4, #0]
 800a672:	b103      	cbz	r3, 800a676 <_write_r+0x1e>
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	2000072c 	.word	0x2000072c

0800a67c <__swsetup_r>:
 800a67c:	4b32      	ldr	r3, [pc, #200]	; (800a748 <__swsetup_r+0xcc>)
 800a67e:	b570      	push	{r4, r5, r6, lr}
 800a680:	681d      	ldr	r5, [r3, #0]
 800a682:	4606      	mov	r6, r0
 800a684:	460c      	mov	r4, r1
 800a686:	b125      	cbz	r5, 800a692 <__swsetup_r+0x16>
 800a688:	69ab      	ldr	r3, [r5, #24]
 800a68a:	b913      	cbnz	r3, 800a692 <__swsetup_r+0x16>
 800a68c:	4628      	mov	r0, r5
 800a68e:	f7ff fb7f 	bl	8009d90 <__sinit>
 800a692:	4b2e      	ldr	r3, [pc, #184]	; (800a74c <__swsetup_r+0xd0>)
 800a694:	429c      	cmp	r4, r3
 800a696:	d10f      	bne.n	800a6b8 <__swsetup_r+0x3c>
 800a698:	686c      	ldr	r4, [r5, #4]
 800a69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	0715      	lsls	r5, r2, #28
 800a6a2:	d42c      	bmi.n	800a6fe <__swsetup_r+0x82>
 800a6a4:	06d0      	lsls	r0, r2, #27
 800a6a6:	d411      	bmi.n	800a6cc <__swsetup_r+0x50>
 800a6a8:	2209      	movs	r2, #9
 800a6aa:	6032      	str	r2, [r6, #0]
 800a6ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	4b25      	ldr	r3, [pc, #148]	; (800a750 <__swsetup_r+0xd4>)
 800a6ba:	429c      	cmp	r4, r3
 800a6bc:	d101      	bne.n	800a6c2 <__swsetup_r+0x46>
 800a6be:	68ac      	ldr	r4, [r5, #8]
 800a6c0:	e7eb      	b.n	800a69a <__swsetup_r+0x1e>
 800a6c2:	4b24      	ldr	r3, [pc, #144]	; (800a754 <__swsetup_r+0xd8>)
 800a6c4:	429c      	cmp	r4, r3
 800a6c6:	bf08      	it	eq
 800a6c8:	68ec      	ldreq	r4, [r5, #12]
 800a6ca:	e7e6      	b.n	800a69a <__swsetup_r+0x1e>
 800a6cc:	0751      	lsls	r1, r2, #29
 800a6ce:	d512      	bpl.n	800a6f6 <__swsetup_r+0x7a>
 800a6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6d2:	b141      	cbz	r1, 800a6e6 <__swsetup_r+0x6a>
 800a6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	d002      	beq.n	800a6e2 <__swsetup_r+0x66>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f000 f975 	bl	800a9cc <_free_r>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	6063      	str	r3, [r4, #4]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f043 0308 	orr.w	r3, r3, #8
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	b94b      	cbnz	r3, 800a716 <__swsetup_r+0x9a>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a70c:	d003      	beq.n	800a716 <__swsetup_r+0x9a>
 800a70e:	4621      	mov	r1, r4
 800a710:	4630      	mov	r0, r6
 800a712:	f000 f919 	bl	800a948 <__smakebuf_r>
 800a716:	89a2      	ldrh	r2, [r4, #12]
 800a718:	f012 0301 	ands.w	r3, r2, #1
 800a71c:	d00c      	beq.n	800a738 <__swsetup_r+0xbc>
 800a71e:	2300      	movs	r3, #0
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	425b      	negs	r3, r3
 800a726:	61a3      	str	r3, [r4, #24]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	b953      	cbnz	r3, 800a742 <__swsetup_r+0xc6>
 800a72c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a730:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a734:	d1ba      	bne.n	800a6ac <__swsetup_r+0x30>
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	0792      	lsls	r2, r2, #30
 800a73a:	bf58      	it	pl
 800a73c:	6963      	ldrpl	r3, [r4, #20]
 800a73e:	60a3      	str	r3, [r4, #8]
 800a740:	e7f2      	b.n	800a728 <__swsetup_r+0xac>
 800a742:	2000      	movs	r0, #0
 800a744:	e7f7      	b.n	800a736 <__swsetup_r+0xba>
 800a746:	bf00      	nop
 800a748:	2000004c 	.word	0x2000004c
 800a74c:	080a42f4 	.word	0x080a42f4
 800a750:	080a4314 	.word	0x080a4314
 800a754:	080a42d4 	.word	0x080a42d4

0800a758 <_close_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4c06      	ldr	r4, [pc, #24]	; (800a774 <_close_r+0x1c>)
 800a75c:	2300      	movs	r3, #0
 800a75e:	4605      	mov	r5, r0
 800a760:	4608      	mov	r0, r1
 800a762:	6023      	str	r3, [r4, #0]
 800a764:	f7ff f880 	bl	8009868 <_close>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_close_r+0x1a>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_close_r+0x1a>
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	2000072c 	.word	0x2000072c

0800a778 <__sflush_r>:
 800a778:	898a      	ldrh	r2, [r1, #12]
 800a77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a77e:	4605      	mov	r5, r0
 800a780:	0710      	lsls	r0, r2, #28
 800a782:	460c      	mov	r4, r1
 800a784:	d45a      	bmi.n	800a83c <__sflush_r+0xc4>
 800a786:	684b      	ldr	r3, [r1, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	dc05      	bgt.n	800a798 <__sflush_r+0x20>
 800a78c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dc02      	bgt.n	800a798 <__sflush_r+0x20>
 800a792:	2000      	movs	r0, #0
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a79a:	2e00      	cmp	r6, #0
 800a79c:	d0f9      	beq.n	800a792 <__sflush_r+0x1a>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7a4:	682f      	ldr	r7, [r5, #0]
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	d033      	beq.n	800a812 <__sflush_r+0x9a>
 800a7aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	075a      	lsls	r2, r3, #29
 800a7b0:	d505      	bpl.n	800a7be <__sflush_r+0x46>
 800a7b2:	6863      	ldr	r3, [r4, #4]
 800a7b4:	1ac0      	subs	r0, r0, r3
 800a7b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7b8:	b10b      	cbz	r3, 800a7be <__sflush_r+0x46>
 800a7ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7bc:	1ac0      	subs	r0, r0, r3
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c4:	6a21      	ldr	r1, [r4, #32]
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	47b0      	blx	r6
 800a7ca:	1c43      	adds	r3, r0, #1
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	d106      	bne.n	800a7de <__sflush_r+0x66>
 800a7d0:	6829      	ldr	r1, [r5, #0]
 800a7d2:	291d      	cmp	r1, #29
 800a7d4:	d84b      	bhi.n	800a86e <__sflush_r+0xf6>
 800a7d6:	4a2b      	ldr	r2, [pc, #172]	; (800a884 <__sflush_r+0x10c>)
 800a7d8:	40ca      	lsrs	r2, r1
 800a7da:	07d6      	lsls	r6, r2, #31
 800a7dc:	d547      	bpl.n	800a86e <__sflush_r+0xf6>
 800a7de:	2200      	movs	r2, #0
 800a7e0:	6062      	str	r2, [r4, #4]
 800a7e2:	04d9      	lsls	r1, r3, #19
 800a7e4:	6922      	ldr	r2, [r4, #16]
 800a7e6:	6022      	str	r2, [r4, #0]
 800a7e8:	d504      	bpl.n	800a7f4 <__sflush_r+0x7c>
 800a7ea:	1c42      	adds	r2, r0, #1
 800a7ec:	d101      	bne.n	800a7f2 <__sflush_r+0x7a>
 800a7ee:	682b      	ldr	r3, [r5, #0]
 800a7f0:	b903      	cbnz	r3, 800a7f4 <__sflush_r+0x7c>
 800a7f2:	6560      	str	r0, [r4, #84]	; 0x54
 800a7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7f6:	602f      	str	r7, [r5, #0]
 800a7f8:	2900      	cmp	r1, #0
 800a7fa:	d0ca      	beq.n	800a792 <__sflush_r+0x1a>
 800a7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a800:	4299      	cmp	r1, r3
 800a802:	d002      	beq.n	800a80a <__sflush_r+0x92>
 800a804:	4628      	mov	r0, r5
 800a806:	f000 f8e1 	bl	800a9cc <_free_r>
 800a80a:	2000      	movs	r0, #0
 800a80c:	6360      	str	r0, [r4, #52]	; 0x34
 800a80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a812:	6a21      	ldr	r1, [r4, #32]
 800a814:	2301      	movs	r3, #1
 800a816:	4628      	mov	r0, r5
 800a818:	47b0      	blx	r6
 800a81a:	1c41      	adds	r1, r0, #1
 800a81c:	d1c6      	bne.n	800a7ac <__sflush_r+0x34>
 800a81e:	682b      	ldr	r3, [r5, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0c3      	beq.n	800a7ac <__sflush_r+0x34>
 800a824:	2b1d      	cmp	r3, #29
 800a826:	d001      	beq.n	800a82c <__sflush_r+0xb4>
 800a828:	2b16      	cmp	r3, #22
 800a82a:	d101      	bne.n	800a830 <__sflush_r+0xb8>
 800a82c:	602f      	str	r7, [r5, #0]
 800a82e:	e7b0      	b.n	800a792 <__sflush_r+0x1a>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a836:	81a3      	strh	r3, [r4, #12]
 800a838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a83c:	690f      	ldr	r7, [r1, #16]
 800a83e:	2f00      	cmp	r7, #0
 800a840:	d0a7      	beq.n	800a792 <__sflush_r+0x1a>
 800a842:	0793      	lsls	r3, r2, #30
 800a844:	680e      	ldr	r6, [r1, #0]
 800a846:	bf08      	it	eq
 800a848:	694b      	ldreq	r3, [r1, #20]
 800a84a:	600f      	str	r7, [r1, #0]
 800a84c:	bf18      	it	ne
 800a84e:	2300      	movne	r3, #0
 800a850:	eba6 0807 	sub.w	r8, r6, r7
 800a854:	608b      	str	r3, [r1, #8]
 800a856:	f1b8 0f00 	cmp.w	r8, #0
 800a85a:	dd9a      	ble.n	800a792 <__sflush_r+0x1a>
 800a85c:	4643      	mov	r3, r8
 800a85e:	463a      	mov	r2, r7
 800a860:	6a21      	ldr	r1, [r4, #32]
 800a862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a864:	4628      	mov	r0, r5
 800a866:	47b0      	blx	r6
 800a868:	2800      	cmp	r0, #0
 800a86a:	dc07      	bgt.n	800a87c <__sflush_r+0x104>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	f04f 30ff 	mov.w	r0, #4294967295
 800a878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87c:	4407      	add	r7, r0
 800a87e:	eba8 0800 	sub.w	r8, r8, r0
 800a882:	e7e8      	b.n	800a856 <__sflush_r+0xde>
 800a884:	20400001 	.word	0x20400001

0800a888 <_fflush_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	690b      	ldr	r3, [r1, #16]
 800a88c:	4605      	mov	r5, r0
 800a88e:	460c      	mov	r4, r1
 800a890:	b1db      	cbz	r3, 800a8ca <_fflush_r+0x42>
 800a892:	b118      	cbz	r0, 800a89c <_fflush_r+0x14>
 800a894:	6983      	ldr	r3, [r0, #24]
 800a896:	b90b      	cbnz	r3, 800a89c <_fflush_r+0x14>
 800a898:	f7ff fa7a 	bl	8009d90 <__sinit>
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <_fflush_r+0x48>)
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	d109      	bne.n	800a8b6 <_fflush_r+0x2e>
 800a8a2:	686c      	ldr	r4, [r5, #4]
 800a8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8a8:	b17b      	cbz	r3, 800a8ca <_fflush_r+0x42>
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8b2:	f7ff bf61 	b.w	800a778 <__sflush_r>
 800a8b6:	4b07      	ldr	r3, [pc, #28]	; (800a8d4 <_fflush_r+0x4c>)
 800a8b8:	429c      	cmp	r4, r3
 800a8ba:	d101      	bne.n	800a8c0 <_fflush_r+0x38>
 800a8bc:	68ac      	ldr	r4, [r5, #8]
 800a8be:	e7f1      	b.n	800a8a4 <_fflush_r+0x1c>
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <_fflush_r+0x50>)
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	bf08      	it	eq
 800a8c6:	68ec      	ldreq	r4, [r5, #12]
 800a8c8:	e7ec      	b.n	800a8a4 <_fflush_r+0x1c>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	bd38      	pop	{r3, r4, r5, pc}
 800a8ce:	bf00      	nop
 800a8d0:	080a42f4 	.word	0x080a42f4
 800a8d4:	080a4314 	.word	0x080a4314
 800a8d8:	080a42d4 	.word	0x080a42d4

0800a8dc <_lseek_r>:
 800a8dc:	b538      	push	{r3, r4, r5, lr}
 800a8de:	4c07      	ldr	r4, [pc, #28]	; (800a8fc <_lseek_r+0x20>)
 800a8e0:	4605      	mov	r5, r0
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	6022      	str	r2, [r4, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f7fe ffe3 	bl	80098b6 <_lseek>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_lseek_r+0x1e>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_lseek_r+0x1e>
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	2000072c 	.word	0x2000072c

0800a900 <__swhatbuf_r>:
 800a900:	b570      	push	{r4, r5, r6, lr}
 800a902:	460e      	mov	r6, r1
 800a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a908:	2900      	cmp	r1, #0
 800a90a:	b090      	sub	sp, #64	; 0x40
 800a90c:	4614      	mov	r4, r2
 800a90e:	461d      	mov	r5, r3
 800a910:	da07      	bge.n	800a922 <__swhatbuf_r+0x22>
 800a912:	2300      	movs	r3, #0
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	89b3      	ldrh	r3, [r6, #12]
 800a918:	061a      	lsls	r2, r3, #24
 800a91a:	d410      	bmi.n	800a93e <__swhatbuf_r+0x3e>
 800a91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a920:	e00e      	b.n	800a940 <__swhatbuf_r+0x40>
 800a922:	aa01      	add	r2, sp, #4
 800a924:	f000 f8b2 	bl	800aa8c <_fstat_r>
 800a928:	2800      	cmp	r0, #0
 800a92a:	dbf2      	blt.n	800a912 <__swhatbuf_r+0x12>
 800a92c:	9a02      	ldr	r2, [sp, #8]
 800a92e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a932:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a936:	425a      	negs	r2, r3
 800a938:	415a      	adcs	r2, r3
 800a93a:	602a      	str	r2, [r5, #0]
 800a93c:	e7ee      	b.n	800a91c <__swhatbuf_r+0x1c>
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	2000      	movs	r0, #0
 800a942:	6023      	str	r3, [r4, #0]
 800a944:	b010      	add	sp, #64	; 0x40
 800a946:	bd70      	pop	{r4, r5, r6, pc}

0800a948 <__smakebuf_r>:
 800a948:	898b      	ldrh	r3, [r1, #12]
 800a94a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a94c:	079d      	lsls	r5, r3, #30
 800a94e:	4606      	mov	r6, r0
 800a950:	460c      	mov	r4, r1
 800a952:	d507      	bpl.n	800a964 <__smakebuf_r+0x1c>
 800a954:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	6123      	str	r3, [r4, #16]
 800a95c:	2301      	movs	r3, #1
 800a95e:	6163      	str	r3, [r4, #20]
 800a960:	b002      	add	sp, #8
 800a962:	bd70      	pop	{r4, r5, r6, pc}
 800a964:	ab01      	add	r3, sp, #4
 800a966:	466a      	mov	r2, sp
 800a968:	f7ff ffca 	bl	800a900 <__swhatbuf_r>
 800a96c:	9900      	ldr	r1, [sp, #0]
 800a96e:	4605      	mov	r5, r0
 800a970:	4630      	mov	r0, r6
 800a972:	f7ff fa97 	bl	8009ea4 <_malloc_r>
 800a976:	b948      	cbnz	r0, 800a98c <__smakebuf_r+0x44>
 800a978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97c:	059a      	lsls	r2, r3, #22
 800a97e:	d4ef      	bmi.n	800a960 <__smakebuf_r+0x18>
 800a980:	f023 0303 	bic.w	r3, r3, #3
 800a984:	f043 0302 	orr.w	r3, r3, #2
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	e7e3      	b.n	800a954 <__smakebuf_r+0xc>
 800a98c:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <__smakebuf_r+0x7c>)
 800a98e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a990:	89a3      	ldrh	r3, [r4, #12]
 800a992:	6020      	str	r0, [r4, #0]
 800a994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	9b00      	ldr	r3, [sp, #0]
 800a99c:	6163      	str	r3, [r4, #20]
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	6120      	str	r0, [r4, #16]
 800a9a2:	b15b      	cbz	r3, 800a9bc <__smakebuf_r+0x74>
 800a9a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f000 f881 	bl	800aab0 <_isatty_r>
 800a9ae:	b128      	cbz	r0, 800a9bc <__smakebuf_r+0x74>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	f043 0301 	orr.w	r3, r3, #1
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	431d      	orrs	r5, r3
 800a9c0:	81a5      	strh	r5, [r4, #12]
 800a9c2:	e7cd      	b.n	800a960 <__smakebuf_r+0x18>
 800a9c4:	08009d11 	.word	0x08009d11

0800a9c8 <__malloc_lock>:
 800a9c8:	4770      	bx	lr

0800a9ca <__malloc_unlock>:
 800a9ca:	4770      	bx	lr

0800a9cc <_free_r>:
 800a9cc:	b538      	push	{r3, r4, r5, lr}
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	d045      	beq.n	800aa60 <_free_r+0x94>
 800a9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d8:	1f0c      	subs	r4, r1, #4
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	bfb8      	it	lt
 800a9de:	18e4      	addlt	r4, r4, r3
 800a9e0:	f7ff fff2 	bl	800a9c8 <__malloc_lock>
 800a9e4:	4a1f      	ldr	r2, [pc, #124]	; (800aa64 <_free_r+0x98>)
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	b933      	cbnz	r3, 800a9fa <_free_r+0x2e>
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	6014      	str	r4, [r2, #0]
 800a9f0:	4628      	mov	r0, r5
 800a9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f6:	f7ff bfe8 	b.w	800a9ca <__malloc_unlock>
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	d90c      	bls.n	800aa18 <_free_r+0x4c>
 800a9fe:	6821      	ldr	r1, [r4, #0]
 800aa00:	1862      	adds	r2, r4, r1
 800aa02:	4293      	cmp	r3, r2
 800aa04:	bf04      	itt	eq
 800aa06:	681a      	ldreq	r2, [r3, #0]
 800aa08:	685b      	ldreq	r3, [r3, #4]
 800aa0a:	6063      	str	r3, [r4, #4]
 800aa0c:	bf04      	itt	eq
 800aa0e:	1852      	addeq	r2, r2, r1
 800aa10:	6022      	streq	r2, [r4, #0]
 800aa12:	6004      	str	r4, [r0, #0]
 800aa14:	e7ec      	b.n	800a9f0 <_free_r+0x24>
 800aa16:	4613      	mov	r3, r2
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	b10a      	cbz	r2, 800aa20 <_free_r+0x54>
 800aa1c:	42a2      	cmp	r2, r4
 800aa1e:	d9fa      	bls.n	800aa16 <_free_r+0x4a>
 800aa20:	6819      	ldr	r1, [r3, #0]
 800aa22:	1858      	adds	r0, r3, r1
 800aa24:	42a0      	cmp	r0, r4
 800aa26:	d10b      	bne.n	800aa40 <_free_r+0x74>
 800aa28:	6820      	ldr	r0, [r4, #0]
 800aa2a:	4401      	add	r1, r0
 800aa2c:	1858      	adds	r0, r3, r1
 800aa2e:	4282      	cmp	r2, r0
 800aa30:	6019      	str	r1, [r3, #0]
 800aa32:	d1dd      	bne.n	800a9f0 <_free_r+0x24>
 800aa34:	6810      	ldr	r0, [r2, #0]
 800aa36:	6852      	ldr	r2, [r2, #4]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	4401      	add	r1, r0
 800aa3c:	6019      	str	r1, [r3, #0]
 800aa3e:	e7d7      	b.n	800a9f0 <_free_r+0x24>
 800aa40:	d902      	bls.n	800aa48 <_free_r+0x7c>
 800aa42:	230c      	movs	r3, #12
 800aa44:	602b      	str	r3, [r5, #0]
 800aa46:	e7d3      	b.n	800a9f0 <_free_r+0x24>
 800aa48:	6820      	ldr	r0, [r4, #0]
 800aa4a:	1821      	adds	r1, r4, r0
 800aa4c:	428a      	cmp	r2, r1
 800aa4e:	bf04      	itt	eq
 800aa50:	6811      	ldreq	r1, [r2, #0]
 800aa52:	6852      	ldreq	r2, [r2, #4]
 800aa54:	6062      	str	r2, [r4, #4]
 800aa56:	bf04      	itt	eq
 800aa58:	1809      	addeq	r1, r1, r0
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	605c      	str	r4, [r3, #4]
 800aa5e:	e7c7      	b.n	800a9f0 <_free_r+0x24>
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	20000280 	.word	0x20000280

0800aa68 <_read_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4c07      	ldr	r4, [pc, #28]	; (800aa88 <_read_r+0x20>)
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7fe fe90 	bl	800979c <_read>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_read_r+0x1e>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_read_r+0x1e>
 800aa84:	602b      	str	r3, [r5, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	2000072c 	.word	0x2000072c

0800aa8c <_fstat_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4c07      	ldr	r4, [pc, #28]	; (800aaac <_fstat_r+0x20>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4605      	mov	r5, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	6023      	str	r3, [r4, #0]
 800aa9a:	f7fe fef1 	bl	8009880 <_fstat>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d102      	bne.n	800aaa8 <_fstat_r+0x1c>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	b103      	cbz	r3, 800aaa8 <_fstat_r+0x1c>
 800aaa6:	602b      	str	r3, [r5, #0]
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	2000072c 	.word	0x2000072c

0800aab0 <_isatty_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4c06      	ldr	r4, [pc, #24]	; (800aacc <_isatty_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4605      	mov	r5, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	f7fe fef0 	bl	80098a0 <_isatty>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_isatty_r+0x1a>
 800aac4:	6823      	ldr	r3, [r4, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_isatty_r+0x1a>
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	2000072c 	.word	0x2000072c

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
