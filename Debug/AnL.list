
AnL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be8  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b908  0800b908  0001b908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b910  0800b910  0001b910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b914  0800b914  0001b914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  0800b918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
  8 .bss          000005c8  200000b0  200000b0  000200b0  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000678  20000678  000200b0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 11 .debug_info   000267ef  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004ccf  00000000  00000000  000468cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001c50  00000000  00000000  0004b5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000019f0  00000000  00000000  0004d1f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000d75d  00000000  00000000  0004ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00007cfa  00000000  00000000  0005c33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00064037  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c84  00000000  00000000  000640b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d08 	.word	0x08009d08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	08009d08 	.word	0x08009d08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b97a 	b.w	8000d80 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	9e08      	ldr	r6, [sp, #32]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d151      	bne.n	8000b58 <__udivmoddi4+0xb4>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	d96d      	bls.n	8000b96 <__udivmoddi4+0xf2>
 8000aba:	fab2 fe82 	clz	lr, r2
 8000abe:	f1be 0f00 	cmp.w	lr, #0
 8000ac2:	d00b      	beq.n	8000adc <__udivmoddi4+0x38>
 8000ac4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ac8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ad0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ad4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ad8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ae6:	fa1f f987 	uxth.w	r9, r7
 8000aea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000af2:	fb08 f309 	mul.w	r3, r8, r9
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x6c>
 8000afa:	19ed      	adds	r5, r5, r7
 8000afc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b00:	f080 8123 	bcs.w	8000d4a <__udivmoddi4+0x2a6>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f240 8120 	bls.w	8000d4a <__udivmoddi4+0x2a6>
 8000b0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0e:	443d      	add	r5, r7
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b20:	fb00 f909 	mul.w	r9, r0, r9
 8000b24:	45a1      	cmp	r9, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x98>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	f080 810a 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8107 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 0409 	sub.w	r4, r4, r9
 8000b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d061      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6034      	str	r4, [r6, #0]
 8000b52:	6073      	str	r3, [r6, #4]
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0xc8>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d054      	beq.n	8000c0a <__udivmoddi4+0x166>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b66:	4608      	mov	r0, r1
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	fab3 f183 	clz	r1, r3
 8000b70:	2900      	cmp	r1, #0
 8000b72:	f040 808e 	bne.w	8000c92 <__udivmoddi4+0x1ee>
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xdc>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80fa 	bhi.w	8000d74 <__udivmoddi4+0x2d0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb65 0503 	sbc.w	r5, r5, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	46ac      	mov	ip, r5
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d03f      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	b912      	cbnz	r2, 8000b9e <__udivmoddi4+0xfa>
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b9e:	fab7 fe87 	clz	lr, r7
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d134      	bne.n	8000c12 <__udivmoddi4+0x16e>
 8000ba8:	1beb      	subs	r3, r5, r7
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bb6:	0c25      	lsrs	r5, r4, #16
 8000bb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc0:	fb0c f308 	mul.w	r3, ip, r8
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x134>
 8000bc8:	19ed      	adds	r5, r5, r7
 8000bca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x132>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	f200 80d1 	bhi.w	8000d78 <__udivmoddi4+0x2d4>
 8000bd6:	4680      	mov	r8, r0
 8000bd8:	1aed      	subs	r5, r5, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000be0:	fb02 5510 	mls	r5, r2, r0, r5
 8000be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000be8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x15c>
 8000bf0:	19e4      	adds	r4, r4, r7
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x15a>
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	f200 80b8 	bhi.w	8000d6e <__udivmoddi4+0x2ca>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c08:	e79d      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1ce 0420 	rsb	r4, lr, #32
 8000c16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	fa25 f404 	lsr.w	r4, r5, r4
 8000c28:	ea48 0803 	orr.w	r8, r8, r3
 8000c2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c34:	fb02 4411 	mls	r4, r2, r1, r4
 8000c38:	fa1f fc87 	uxth.w	ip, r7
 8000c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c40:	fb01 f30c 	mul.w	r3, r1, ip
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x1bc>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c52:	f080 808a 	bcs.w	8000d6a <__udivmoddi4+0x2c6>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	f240 8087 	bls.w	8000d6a <__udivmoddi4+0x2c6>
 8000c5c:	3902      	subs	r1, #2
 8000c5e:	443d      	add	r5, r7
 8000c60:	1aeb      	subs	r3, r5, r3
 8000c62:	fa1f f588 	uxth.w	r5, r8
 8000c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c72:	fb00 f30c 	mul.w	r3, r0, ip
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x1e6>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c80:	d26f      	bcs.n	8000d62 <__udivmoddi4+0x2be>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0x2be>
 8000c86:	3802      	subs	r0, #2
 8000c88:	443d      	add	r5, r7
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	e78f      	b.n	8000bb2 <__udivmoddi4+0x10e>
 8000c92:	f1c1 0720 	rsb	r7, r1, #32
 8000c96:	fa22 f807 	lsr.w	r8, r2, r7
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca0:	ea48 0303 	orr.w	r3, r8, r3
 8000ca4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cbe:	fa1f f883 	uxth.w	r8, r3
 8000cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cc6:	fb09 f408 	mul.w	r4, r9, r8
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x244>
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	d243      	bcs.n	8000d66 <__udivmoddi4+0x2c2>
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d941      	bls.n	8000d66 <__udivmoddi4+0x2c2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	441d      	add	r5, r3
 8000ce8:	1b2d      	subs	r5, r5, r4
 8000cea:	fa1f fe8e 	uxth.w	lr, lr
 8000cee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cf2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cfa:	fb00 f808 	mul.w	r8, r0, r8
 8000cfe:	45a0      	cmp	r8, r4
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x26e>
 8000d02:	18e4      	adds	r4, r4, r3
 8000d04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d08:	d229      	bcs.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0a:	45a0      	cmp	r8, r4
 8000d0c:	d927      	bls.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	441c      	add	r4, r3
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c6      	mov	lr, r8
 8000d22:	464d      	mov	r5, r9
 8000d24:	d315      	bcc.n	8000d52 <__udivmoddi4+0x2ae>
 8000d26:	d012      	beq.n	8000d4e <__udivmoddi4+0x2aa>
 8000d28:	b156      	cbz	r6, 8000d40 <__udivmoddi4+0x29c>
 8000d2a:	ebba 030e 	subs.w	r3, sl, lr
 8000d2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d32:	fa04 f707 	lsl.w	r7, r4, r7
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	40cc      	lsrs	r4, r1
 8000d3c:	6037      	str	r7, [r6, #0]
 8000d3e:	6074      	str	r4, [r6, #4]
 8000d40:	2100      	movs	r1, #0
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4618      	mov	r0, r3
 8000d48:	e6f8      	b.n	8000b3c <__udivmoddi4+0x98>
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	e6e0      	b.n	8000b10 <__udivmoddi4+0x6c>
 8000d4e:	45c2      	cmp	sl, r8
 8000d50:	d2ea      	bcs.n	8000d28 <__udivmoddi4+0x284>
 8000d52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d56:	eb69 0503 	sbc.w	r5, r9, r3
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7e4      	b.n	8000d28 <__udivmoddi4+0x284>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	e7d7      	b.n	8000d12 <__udivmoddi4+0x26e>
 8000d62:	4640      	mov	r0, r8
 8000d64:	e791      	b.n	8000c8a <__udivmoddi4+0x1e6>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e7be      	b.n	8000ce8 <__udivmoddi4+0x244>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	e778      	b.n	8000c60 <__udivmoddi4+0x1bc>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	e745      	b.n	8000c00 <__udivmoddi4+0x15c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e708      	b.n	8000b8a <__udivmoddi4+0xe6>
 8000d78:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	e72b      	b.n	8000bd8 <__udivmoddi4+0x134>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d88:	f000 fa5c 	bl	8001244 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d8c:	20ca      	movs	r0, #202	; 0xca
 8000d8e:	f000 f95d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d92:	20c3      	movs	r0, #195	; 0xc3
 8000d94:	f000 f967 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d98:	2008      	movs	r0, #8
 8000d9a:	f000 f964 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000d9e:	2050      	movs	r0, #80	; 0x50
 8000da0:	f000 f961 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000da4:	20cf      	movs	r0, #207	; 0xcf
 8000da6:	f000 f951 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f95b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000db0:	20c1      	movs	r0, #193	; 0xc1
 8000db2:	f000 f958 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000db6:	2030      	movs	r0, #48	; 0x30
 8000db8:	f000 f955 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000dbc:	20ed      	movs	r0, #237	; 0xed
 8000dbe:	f000 f945 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 f94f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 f949 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dd4:	2081      	movs	r0, #129	; 0x81
 8000dd6:	f000 f946 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000dda:	20e8      	movs	r0, #232	; 0xe8
 8000ddc:	f000 f936 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000de0:	2085      	movs	r0, #133	; 0x85
 8000de2:	f000 f940 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f93d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000dec:	2078      	movs	r0, #120	; 0x78
 8000dee:	f000 f93a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000df2:	20cb      	movs	r0, #203	; 0xcb
 8000df4:	f000 f92a 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000df8:	2039      	movs	r0, #57	; 0x39
 8000dfa:	f000 f934 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f000 f931 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f92e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e0a:	2034      	movs	r0, #52	; 0x34
 8000e0c:	f000 f92b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f000 f928 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e16:	20f7      	movs	r0, #247	; 0xf7
 8000e18:	f000 f918 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f000 f922 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e22:	20ea      	movs	r0, #234	; 0xea
 8000e24:	f000 f912 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f91c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f919 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e34:	20b1      	movs	r0, #177	; 0xb1
 8000e36:	f000 f909 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f913 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e40:	201b      	movs	r0, #27
 8000e42:	f000 f910 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e46:	20b6      	movs	r0, #182	; 0xb6
 8000e48:	f000 f900 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f000 f90a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e52:	20a2      	movs	r0, #162	; 0xa2
 8000e54:	f000 f907 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e58:	20c0      	movs	r0, #192	; 0xc0
 8000e5a:	f000 f8f7 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f000 f901 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e64:	20c1      	movs	r0, #193	; 0xc1
 8000e66:	f000 f8f1 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f000 f8fb 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e70:	20c5      	movs	r0, #197	; 0xc5
 8000e72:	f000 f8eb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e76:	2045      	movs	r0, #69	; 0x45
 8000e78:	f000 f8f5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f000 f8f2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e82:	20c7      	movs	r0, #199	; 0xc7
 8000e84:	f000 f8e2 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e88:	2090      	movs	r0, #144	; 0x90
 8000e8a:	f000 f8ec 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f000 f8dc 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 f8e6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000e9a:	20f2      	movs	r0, #242	; 0xf2
 8000e9c:	f000 f8d6 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 f8e0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ea6:	20b0      	movs	r0, #176	; 0xb0
 8000ea8:	f000 f8d0 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000eac:	20c2      	movs	r0, #194	; 0xc2
 8000eae:	f000 f8da 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eb2:	20b6      	movs	r0, #182	; 0xb6
 8000eb4:	f000 f8ca 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f000 f8d4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ebe:	20a7      	movs	r0, #167	; 0xa7
 8000ec0:	f000 f8d1 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 f8ce 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f000 f8cb 	bl	8001066 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ed0:	202a      	movs	r0, #42	; 0x2a
 8000ed2:	f000 f8bb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8c5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f8c2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f8bf 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ee8:	20ef      	movs	r0, #239	; 0xef
 8000eea:	f000 f8bc 	bl	8001066 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000eee:	202b      	movs	r0, #43	; 0x2b
 8000ef0:	f000 f8ac 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f8b6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f8b3 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f8b0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f8ad 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f0c:	20f6      	movs	r0, #246	; 0xf6
 8000f0e:	f000 f89d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f8a7 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f8a4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 f8a1 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f24:	202c      	movs	r0, #44	; 0x2c
 8000f26:	f000 f891 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8000f2a:	20c8      	movs	r0, #200	; 0xc8
 8000f2c:	f000 fa78 	bl	8001420 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f000 f88b 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f895 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f3c:	20e0      	movs	r0, #224	; 0xe0
 8000f3e:	f000 f885 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f88f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f48:	2029      	movs	r0, #41	; 0x29
 8000f4a:	f000 f88c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f4e:	2024      	movs	r0, #36	; 0x24
 8000f50:	f000 f889 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 f886 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f000 f883 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f60:	2009      	movs	r0, #9
 8000f62:	f000 f880 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f66:	204e      	movs	r0, #78	; 0x4e
 8000f68:	f000 f87d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f6c:	2078      	movs	r0, #120	; 0x78
 8000f6e:	f000 f87a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f72:	203c      	movs	r0, #60	; 0x3c
 8000f74:	f000 f877 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f000 f874 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f7e:	2013      	movs	r0, #19
 8000f80:	f000 f871 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f000 f86e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f000 f86b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f90:	2011      	movs	r0, #17
 8000f92:	f000 f868 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f865 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000f9c:	20e1      	movs	r0, #225	; 0xe1
 8000f9e:	f000 f855 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f85f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fa8:	2016      	movs	r0, #22
 8000faa:	f000 f85c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 f859 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f856 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 f853 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f000 f850 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000fc6:	2031      	movs	r0, #49	; 0x31
 8000fc8:	f000 f84d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fcc:	2033      	movs	r0, #51	; 0x33
 8000fce:	f000 f84a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000fd2:	2042      	movs	r0, #66	; 0x42
 8000fd4:	f000 f847 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f000 f844 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f841 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 f83e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 f83b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000ff0:	202f      	movs	r0, #47	; 0x2f
 8000ff2:	f000 f838 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f835 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ffc:	2011      	movs	r0, #17
 8000ffe:	f000 f825 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f000 fa0c 	bl	8001420 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001008:	2029      	movs	r0, #41	; 0x29
 800100a:	f000 f81f 	bl	800104c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f000 f81c 	bl	800104c <ili9341_WriteReg>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800101c:	f000 f912 	bl	8001244 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001020:	2103      	movs	r1, #3
 8001022:	20d3      	movs	r0, #211	; 0xd3
 8001024:	f000 f82c 	bl	8001080 <ili9341_ReadData>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001034:	2029      	movs	r0, #41	; 0x29
 8001036:	f000 f809 	bl	800104c <ili9341_WriteReg>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 f802 	bl	800104c <ili9341_WriteReg>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f98d 	bl	8001378 <LCD_IO_WriteReg>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f95e 	bl	8001334 <LCD_IO_WriteData>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4613      	mov	r3, r2
 800108e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001090:	797a      	ldrb	r2, [r7, #5]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f990 	bl	80013bc <LCD_IO_ReadData>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010cc:	4819      	ldr	r0, [pc, #100]	; (8001134 <SPIx_Init+0x6c>)
 80010ce:	f004 fc85 	bl	80059dc <HAL_SPI_GetState>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d12b      	bne.n	8001130 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <SPIx_Init+0x6c>)
 80010da:	4a17      	ldr	r2, [pc, #92]	; (8001138 <SPIx_Init+0x70>)
 80010dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <SPIx_Init+0x6c>)
 80010e0:	2218      	movs	r2, #24
 80010e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <SPIx_Init+0x6c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <SPIx_Init+0x6c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <SPIx_Init+0x6c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <SPIx_Init+0x6c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <SPIx_Init+0x6c>)
 80010fe:	2207      	movs	r2, #7
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <SPIx_Init+0x6c>)
 8001104:	2200      	movs	r2, #0
 8001106:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <SPIx_Init+0x6c>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <SPIx_Init+0x6c>)
 8001110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001114:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001116:	4b07      	ldr	r3, [pc, #28]	; (8001134 <SPIx_Init+0x6c>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SPIx_Init+0x6c>)
 800111e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001122:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <SPIx_Init+0x6c>)
 8001126:	f000 f853 	bl	80011d0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <SPIx_Init+0x6c>)
 800112c:	f003 fff3 	bl	8005116 <HAL_SPI_Init>
  } 
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200000cc 	.word	0x200000cc
 8001138:	40015000 	.word	0x40015000

0800113c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	b29a      	uxth	r2, r3
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <SPIx_Read+0x38>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f107 0108 	add.w	r1, r7, #8
 8001156:	4808      	ldr	r0, [pc, #32]	; (8001178 <SPIx_Read+0x3c>)
 8001158:	f004 f99a 	bl	8005490 <HAL_SPI_Receive>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001166:	f000 f827 	bl	80011b8 <SPIx_Error>
  }
  
  return readvalue;
 800116a:	68bb      	ldr	r3, [r7, #8]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000040 	.word	0x20000040
 8001178:	200000cc 	.word	0x200000cc

0800117c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <SPIx_Write+0x34>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1db9      	adds	r1, r7, #6
 8001190:	2201      	movs	r2, #1
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <SPIx_Write+0x38>)
 8001194:	f004 f84a 	bl	800522c <HAL_SPI_Transmit>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80011a2:	f000 f809 	bl	80011b8 <SPIx_Error>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000040 	.word	0x20000040
 80011b4:	200000cc 	.word	0x200000cc

080011b8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <SPIx_Error+0x14>)
 80011be:	f004 f80d 	bl	80051dc <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80011c2:	f7ff ff81 	bl	80010c8 <SPIx_Init>
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200000cc 	.word	0x200000cc

080011d0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <SPIx_MspInit+0x6c>)
 80011de:	4b17      	ldr	r3, [pc, #92]	; (800123c <SPIx_MspInit+0x6c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011e6:	6453      	str	r3, [r2, #68]	; 0x44
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <SPIx_MspInit+0x6c>)
 80011ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4a10      	ldr	r2, [pc, #64]	; (800123c <SPIx_MspInit+0x6c>)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <SPIx_MspInit+0x6c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f043 0320 	orr.w	r3, r3, #32
 8001202:	6313      	str	r3, [r2, #48]	; 0x30
 8001204:	4b0d      	ldr	r3, [pc, #52]	; (800123c <SPIx_MspInit+0x6c>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001210:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001214:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800121a:	2302      	movs	r3, #2
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001222:	2305      	movs	r3, #5
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <SPIx_MspInit+0x70>)
 800122e:	f002 f88d 	bl	800334c <HAL_GPIO_Init>
}
 8001232:	bf00      	nop
 8001234:	3728      	adds	r7, #40	; 0x28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	40021400 	.word	0x40021400

08001244 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <LCD_IO_Init+0xe0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d164      	bne.n	800131c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <LCD_IO_Init+0xe0>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4a32      	ldr	r2, [pc, #200]	; (8001328 <LCD_IO_Init+0xe4>)
 800125e:	4b32      	ldr	r3, [pc, #200]	; (8001328 <LCD_IO_Init+0xe4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6313      	str	r3, [r2, #48]	; 0x30
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <LCD_IO_Init+0xe4>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4827      	ldr	r0, [pc, #156]	; (800132c <LCD_IO_Init+0xe8>)
 800128e:	f002 f85d 	bl	800334c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4a24      	ldr	r2, [pc, #144]	; (8001328 <LCD_IO_Init+0xe4>)
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <LCD_IO_Init+0xe4>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <LCD_IO_Init+0xe4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80012ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	4819      	ldr	r0, [pc, #100]	; (800132c <LCD_IO_Init+0xe8>)
 80012c8:	f002 f840 	bl	800334c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <LCD_IO_Init+0xe4>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <LCD_IO_Init+0xe4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6313      	str	r3, [r2, #48]	; 0x30
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <LCD_IO_Init+0xe4>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80012e8:	2304      	movs	r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4619      	mov	r1, r3
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <LCD_IO_Init+0xec>)
 8001300:	f002 f824 	bl	800334c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001304:	2200      	movs	r2, #0
 8001306:	2104      	movs	r1, #4
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <LCD_IO_Init+0xec>)
 800130a:	f002 fad5 	bl	80038b8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800130e:	2201      	movs	r2, #1
 8001310:	2104      	movs	r1, #4
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <LCD_IO_Init+0xec>)
 8001314:	f002 fad0 	bl	80038b8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001318:	f7ff fed6 	bl	80010c8 <SPIx_Init>
  }
}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000124 	.word	0x20000124
 8001328:	40023800 	.word	0x40023800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40020800 	.word	0x40020800

08001334 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001344:	480a      	ldr	r0, [pc, #40]	; (8001370 <LCD_IO_WriteData+0x3c>)
 8001346:	f002 fab7 	bl	80038b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800134a:	2200      	movs	r2, #0
 800134c:	2104      	movs	r1, #4
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <LCD_IO_WriteData+0x40>)
 8001350:	f002 fab2 	bl	80038b8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff10 	bl	800117c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800135c:	2201      	movs	r2, #1
 800135e:	2104      	movs	r1, #4
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <LCD_IO_WriteData+0x40>)
 8001362:	f002 faa9 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40020800 	.word	0x40020800

08001378 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <LCD_IO_WriteReg+0x3c>)
 800138a:	f002 fa95 	bl	80038b8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800138e:	2200      	movs	r2, #0
 8001390:	2104      	movs	r1, #4
 8001392:	4809      	ldr	r0, [pc, #36]	; (80013b8 <LCD_IO_WriteReg+0x40>)
 8001394:	f002 fa90 	bl	80038b8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff feed 	bl	800117c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80013a2:	2201      	movs	r2, #1
 80013a4:	2104      	movs	r1, #4
 80013a6:	4804      	ldr	r0, [pc, #16]	; (80013b8 <LCD_IO_WriteReg+0x40>)
 80013a8:	f002 fa86 	bl	80038b8 <HAL_GPIO_WritePin>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40020800 	.word	0x40020800

080013bc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	460a      	mov	r2, r1
 80013c6:	80fb      	strh	r3, [r7, #6]
 80013c8:	4613      	mov	r3, r2
 80013ca:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80013d0:	2200      	movs	r2, #0
 80013d2:	2104      	movs	r1, #4
 80013d4:	4810      	ldr	r0, [pc, #64]	; (8001418 <LCD_IO_ReadData+0x5c>)
 80013d6:	f002 fa6f 	bl	80038b8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80013da:	2200      	movs	r2, #0
 80013dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e0:	480e      	ldr	r0, [pc, #56]	; (800141c <LCD_IO_ReadData+0x60>)
 80013e2:	f002 fa69 	bl	80038b8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fec7 	bl	800117c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80013ee:	797b      	ldrb	r3, [r7, #5]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fea3 	bl	800113c <SPIx_Read>
 80013f6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fe:	4807      	ldr	r0, [pc, #28]	; (800141c <LCD_IO_ReadData+0x60>)
 8001400:	f002 fa5a 	bl	80038b8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001404:	2201      	movs	r2, #1
 8001406:	2104      	movs	r1, #4
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <LCD_IO_ReadData+0x5c>)
 800140a:	f002 fa55 	bl	80038b8 <HAL_GPIO_WritePin>
  
  return readvalue;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00

08001420 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f001 f917 	bl	800265c <HAL_Delay>
  //wait_ms(Delay);
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800143c:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <BSP_LCD_Init+0xc0>)
 8001440:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001442:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001444:	2209      	movs	r2, #9
 8001446:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001448:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800144a:	2201      	movs	r2, #1
 800144c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800144e:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001450:	221d      	movs	r2, #29
 8001452:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001454:	4b27      	ldr	r3, [pc, #156]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001456:	2203      	movs	r2, #3
 8001458:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800145c:	f240 120d 	movw	r2, #269	; 0x10d
 8001460:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001462:	4b24      	ldr	r3, [pc, #144]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001464:	f240 1243 	movw	r2, #323	; 0x143
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800146c:	f240 1217 	movw	r2, #279	; 0x117
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001474:	f240 1247 	movw	r2, #327	; 0x147
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800147a:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <BSP_LCD_Init+0xbc>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <BSP_LCD_Init+0xbc>)
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <BSP_LCD_Init+0xc4>)
 8001494:	2208      	movs	r2, #8
 8001496:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <BSP_LCD_Init+0xc4>)
 800149a:	22c0      	movs	r2, #192	; 0xc0
 800149c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014a0:	2204      	movs	r2, #4
 80014a2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014aa:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80014ac:	4813      	ldr	r0, [pc, #76]	; (80014fc <BSP_LCD_Init+0xc4>)
 80014ae:	f003 fc0f 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80014ca:	f000 fccd 	bl	8001e68 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <BSP_LCD_Init+0xbc>)
 80014d0:	f002 fbb0 	bl	8003c34 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <BSP_LCD_Init+0xc8>)
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <BSP_LCD_Init+0xcc>)
 80014d8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <BSP_LCD_Init+0xc8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80014e2:	f000 feaf 	bl	8002244 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <BSP_LCD_Init+0xd0>)
 80014e8:	f000 f8b4 	bl	8001654 <BSP_LCD_SetFont>

  return LCD_OK;
 80014ec:	2300      	movs	r3, #0
}  
 80014ee:	4618      	mov	r0, r3
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000284 	.word	0x20000284
 80014f8:	40016800 	.word	0x40016800
 80014fc:	20000168 	.word	0x20000168
 8001500:	2000032c 	.word	0x2000032c
 8001504:	20000000 	.word	0x20000000
 8001508:	20000038 	.word	0x20000038

0800150c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <BSP_LCD_GetXSize+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	4798      	blx	r3
 8001518:	4603      	mov	r3, r0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000032c 	.word	0x2000032c

08001524 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <BSP_LCD_GetYSize+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	4798      	blx	r3
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000032c 	.word	0x2000032c

0800153c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800154c:	f7ff ffde 	bl	800150c <BSP_LCD_GetXSize>
 8001550:	4603      	mov	r3, r0
 8001552:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001558:	f7ff ffe4 	bl	8001524 <BSP_LCD_GetYSize>
 800155c:	4603      	mov	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001582:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001588:	2307      	movs	r3, #7
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800158c:	f7ff ffbe 	bl	800150c <BSP_LCD_GetXSize>
 8001590:	4603      	mov	r3, r0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001594:	f7ff ffc6 	bl	8001524 <BSP_LCD_GetYSize>
 8001598:	4603      	mov	r3, r0
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	f107 030c 	add.w	r3, r7, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015a6:	f002 fcd7 	bl	8003f58 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80015aa:	88fa      	ldrh	r2, [r7, #6]
 80015ac:	4913      	ldr	r1, [pc, #76]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	3304      	adds	r3, #4
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
 80015be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80015c0:	88fa      	ldrh	r2, [r7, #6]
 80015c2:	490e      	ldr	r1, [pc, #56]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	3308      	adds	r3, #8
 80015d0:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <BSP_LCD_LayerDefaultInit+0xc4>)
 80015d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80015d4:	88fa      	ldrh	r2, [r7, #6]
 80015d6:	4909      	ldr	r1, [pc, #36]	; (80015fc <BSP_LCD_LayerDefaultInit+0xc0>)
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015e6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80015ea:	f002 fcf3 	bl	8003fd4 <HAL_LTDC_EnableDither>
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000284 	.word	0x20000284
 80015fc:	2000019c 	.word	0x2000019c
 8001600:	20000038 	.word	0x20000038

08001604 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <BSP_LCD_SelectLayer+0x1c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000198 	.word	0x20000198

08001624 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800162c:	4b07      	ldr	r3, [pc, #28]	; (800164c <BSP_LCD_SetTextColor+0x28>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <BSP_LCD_SetTextColor+0x2c>)
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	601a      	str	r2, [r3, #0]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000198 	.word	0x20000198
 8001650:	2000019c 	.word	0x2000019c

08001654 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <BSP_LCD_SetFont+0x2c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4908      	ldr	r1, [pc, #32]	; (8001684 <BSP_LCD_SetFont+0x30>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3308      	adds	r3, #8
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	601a      	str	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	20000198 	.word	0x20000198
 8001684:	2000019c 	.word	0x2000019c

08001688 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <BSP_LCD_GetFont+0x24>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4907      	ldr	r1, [pc, #28]	; (80016b0 <BSP_LCD_GetFont+0x28>)
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	3308      	adds	r3, #8
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000198 	.word	0x20000198
 80016b0:	2000019c 	.word	0x2000019c

080016b4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <BSP_LCD_Clear+0x48>)
 80016be:	681c      	ldr	r4, [r3, #0]
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <BSP_LCD_Clear+0x48>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <BSP_LCD_Clear+0x4c>)
 80016c6:	2134      	movs	r1, #52	; 0x34
 80016c8:	fb01 f303 	mul.w	r3, r1, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	335c      	adds	r3, #92	; 0x5c
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	461d      	mov	r5, r3
 80016d4:	f7ff ff1a 	bl	800150c <BSP_LCD_GetXSize>
 80016d8:	4606      	mov	r6, r0
 80016da:	f7ff ff23 	bl	8001524 <BSP_LCD_GetYSize>
 80016de:	4602      	mov	r2, r0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	4632      	mov	r2, r6
 80016ec:	4629      	mov	r1, r5
 80016ee:	4620      	mov	r0, r4
 80016f0:	f000 fd70 	bl	80021d4 <FillBuffer>
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	20000198 	.word	0x20000198
 8001700:	20000284 	.word	0x20000284

08001704 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001704:	b590      	push	{r4, r7, lr}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 800170c:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	492d      	ldr	r1, [pc, #180]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	440b      	add	r3, r1
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 800172a:	460b      	mov	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4403      	add	r3, r0
 8001734:	3304      	adds	r3, #4
 8001736:	6819      	ldr	r1, [r3, #0]
 8001738:	4823      	ldr	r0, [pc, #140]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4403      	add	r3, r0
 8001744:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001746:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	491f      	ldr	r1, [pc, #124]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	3308      	adds	r3, #8
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	88da      	ldrh	r2, [r3, #6]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	b29b      	uxth	r3, r3
 8001760:	fb12 f303 	smulbb	r3, r2, r3
 8001764:	b29c      	uxth	r4, r3
 8001766:	f7ff fed1 	bl	800150c <BSP_LCD_GetXSize>
 800176a:	4603      	mov	r3, r0
 800176c:	b298      	uxth	r0, r3
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4915      	ldr	r1, [pc, #84]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3308      	adds	r3, #8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	88db      	ldrh	r3, [r3, #6]
 8001784:	4602      	mov	r2, r0
 8001786:	4621      	mov	r1, r4
 8001788:	2000      	movs	r0, #0
 800178a:	f000 fa63 	bl	8001c54 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	490d      	ldr	r1, [pc, #52]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <BSP_LCD_ClearStringLine+0xc0>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <BSP_LCD_ClearStringLine+0xc4>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff35 	bl	8001624 <BSP_LCD_SetTextColor>
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000198 	.word	0x20000198
 80017c8:	2000019c 	.word	0x2000019c

080017cc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
 80017d6:	460b      	mov	r3, r1
 80017d8:	80bb      	strh	r3, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <BSP_LCD_DisplayChar+0x80>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	491b      	ldr	r1, [pc, #108]	; (8001850 <BSP_LCD_DisplayChar+0x84>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3308      	adds	r3, #8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <BSP_LCD_DisplayChar+0x80>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4c14      	ldr	r4, [pc, #80]	; (8001850 <BSP_LCD_DisplayChar+0x84>)
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4423      	add	r3, r4
 800180a:	3308      	adds	r3, #8
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001810:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <BSP_LCD_DisplayChar+0x80>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4c0d      	ldr	r4, [pc, #52]	; (8001850 <BSP_LCD_DisplayChar+0x84>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4423      	add	r3, r4
 8001824:	3308      	adds	r3, #8
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	889b      	ldrh	r3, [r3, #4]
 800182a:	3307      	adds	r3, #7
 800182c:	2b00      	cmp	r3, #0
 800182e:	da00      	bge.n	8001832 <BSP_LCD_DisplayChar+0x66>
 8001830:	3307      	adds	r3, #7
 8001832:	10db      	asrs	r3, r3, #3
 8001834:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001838:	18ca      	adds	r2, r1, r3
 800183a:	88b9      	ldrh	r1, [r7, #4]
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fc0e 	bl	8002060 <DrawChar>
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	20000198 	.word	0x20000198
 8001850:	2000019c 	.word	0x2000019c

08001854 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	60ba      	str	r2, [r7, #8]
 800185c:	461a      	mov	r2, r3
 800185e:	4603      	mov	r3, r0
 8001860:	81fb      	strh	r3, [r7, #14]
 8001862:	460b      	mov	r3, r1
 8001864:	81bb      	strh	r3, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800186a:	2301      	movs	r3, #1
 800186c:	83fb      	strh	r3, [r7, #30]
 800186e:	2300      	movs	r3, #0
 8001870:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800187e:	e002      	b.n	8001886 <BSP_LCD_DisplayStringAt+0x32>
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	3301      	adds	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	1c5a      	adds	r2, r3, #1
 800188a:	617a      	str	r2, [r7, #20]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f6      	bne.n	8001880 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001892:	f7ff fe3b 	bl	800150c <BSP_LCD_GetXSize>
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	494a      	ldr	r1, [pc, #296]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 800189c:	4613      	mov	r3, r2
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3308      	adds	r3, #8
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	889b      	ldrh	r3, [r3, #4]
 80018ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b0:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d01c      	beq.n	80018f2 <BSP_LCD_DisplayStringAt+0x9e>
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d017      	beq.n	80018ec <BSP_LCD_DisplayStringAt+0x98>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d12e      	bne.n	800191e <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad1      	subs	r1, r2, r3
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	483e      	ldr	r0, [pc, #248]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4403      	add	r3, r0
 80018d6:	3308      	adds	r3, #8
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	fb03 f301 	mul.w	r3, r3, r1
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	4413      	add	r3, r2
 80018e8:	83fb      	strh	r3, [r7, #30]
      break;
 80018ea:	e01b      	b.n	8001924 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80018ec:	89fb      	ldrh	r3, [r7, #14]
 80018ee:	83fb      	strh	r3, [r7, #30]
      break;
 80018f0:	e018      	b.n	8001924 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	b299      	uxth	r1, r3
 80018fa:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4831      	ldr	r0, [pc, #196]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4403      	add	r3, r0
 800190a:	3308      	adds	r3, #8
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	fb11 f303 	smulbb	r3, r1, r3
 8001914:	b29a      	uxth	r2, r3
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	4413      	add	r3, r2
 800191a:	83fb      	strh	r3, [r7, #30]
      break;
 800191c:	e002      	b.n	8001924 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 800191e:	89fb      	ldrh	r3, [r7, #14]
 8001920:	83fb      	strh	r3, [r7, #30]
      break;
 8001922:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001924:	e01a      	b.n	800195c <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	89b9      	ldrh	r1, [r7, #12]
 800192c:	8bfb      	ldrh	r3, [r7, #30]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff4c 	bl	80017cc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4922      	ldr	r1, [pc, #136]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	3308      	adds	r3, #8
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	889a      	ldrh	r2, [r3, #4]
 800194a:	8bfb      	ldrh	r3, [r7, #30]
 800194c:	4413      	add	r3, r2
 800194e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3301      	adds	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
    i++;
 8001956:	8bbb      	ldrh	r3, [r7, #28]
 8001958:	3301      	adds	r3, #1
 800195a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2dc      	uxtb	r4, r3
 800196a:	f7ff fdcf 	bl	800150c <BSP_LCD_GetXSize>
 800196e:	4605      	mov	r5, r0
 8001970:	8bb9      	ldrh	r1, [r7, #28]
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4403      	add	r3, r0
 8001982:	3308      	adds	r3, #8
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	889b      	ldrh	r3, [r3, #4]
 8001988:	fb03 f301 	mul.w	r3, r3, r1
 800198c:	1aeb      	subs	r3, r5, r3
 800198e:	b299      	uxth	r1, r3
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <BSP_LCD_DisplayStringAt+0x16c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <BSP_LCD_DisplayStringAt+0x170>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4403      	add	r3, r0
 80019a0:	3308      	adds	r3, #8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	889b      	ldrh	r3, [r3, #4]
 80019a6:	4299      	cmp	r1, r3
 80019a8:	bf2c      	ite	cs
 80019aa:	2301      	movcs	r3, #1
 80019ac:	2300      	movcc	r3, #0
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	4023      	ands	r3, r4
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1b6      	bne.n	8001926 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80019b8:	bf00      	nop
 80019ba:	3720      	adds	r7, #32
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdb0      	pop	{r4, r5, r7, pc}
 80019c0:	20000198 	.word	0x20000198
 80019c4:	2000019c 	.word	0x2000019c

080019c8 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80019d4:	f7ff fe58 	bl	8001688 <BSP_LCD_GetFont>
 80019d8:	4603      	mov	r3, r0
 80019da:	88db      	ldrh	r3, [r3, #6]
 80019dc:	88fa      	ldrh	r2, [r7, #6]
 80019de:	fb12 f303 	smulbb	r3, r2, r3
 80019e2:	b299      	uxth	r1, r3
 80019e4:	2303      	movs	r3, #3
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff ff33 	bl	8001854 <BSP_LCD_DisplayStringAt>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	4603      	mov	r3, r0
 8001a00:	80fb      	strh	r3, [r7, #6]
 8001a02:	460b      	mov	r3, r1
 8001a04:	80bb      	strh	r3, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <BSP_LCD_DrawHLine+0x70>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <BSP_LCD_DrawHLine+0x74>)
 8001a14:	2134      	movs	r1, #52	; 0x34
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	335c      	adds	r3, #92	; 0x5c
 8001a1e:	681c      	ldr	r4, [r3, #0]
 8001a20:	f7ff fd74 	bl	800150c <BSP_LCD_GetXSize>
 8001a24:	4602      	mov	r2, r0
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	fb03 f202 	mul.w	r2, r3, r2
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4423      	add	r3, r4
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <BSP_LCD_DrawHLine+0x70>)
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	68fc      	ldr	r4, [r7, #12]
 8001a3c:	887d      	ldrh	r5, [r7, #2]
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <BSP_LCD_DrawHLine+0x70>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	490b      	ldr	r1, [pc, #44]	; (8001a70 <BSP_LCD_DrawHLine+0x78>)
 8001a44:	4613      	mov	r3, r2
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	4413      	add	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2301      	movs	r3, #1
 8001a58:	462a      	mov	r2, r5
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	f000 fbba 	bl	80021d4 <FillBuffer>
}
 8001a60:	bf00      	nop
 8001a62:	3710      	adds	r7, #16
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}
 8001a68:	20000198 	.word	0x20000198
 8001a6c:	20000284 	.word	0x20000284
 8001a70:	2000019c 	.word	0x2000019c

08001a74 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001a74:	b590      	push	{r4, r7, lr}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	80bb      	strh	r3, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	f1c3 0303 	rsb	r3, r3, #3
 8001a8e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8001a98:	e0cf      	b.n	8001c3a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b298      	uxth	r0, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	88ba      	ldrh	r2, [r7, #4]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	b29c      	uxth	r4, r3
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4967      	ldr	r1, [pc, #412]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	f000 faa6 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b298      	uxth	r0, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	88ba      	ldrh	r2, [r7, #4]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	b29c      	uxth	r4, r3
 8001adc:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	495b      	ldr	r1, [pc, #364]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	4621      	mov	r1, r4
 8001af2:	f000 fa8f 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	4413      	add	r3, r2
 8001afe:	b298      	uxth	r0, r3
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	88ba      	ldrh	r2, [r7, #4]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	b29c      	uxth	r4, r3
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4950      	ldr	r1, [pc, #320]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	440b      	add	r3, r1
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4621      	mov	r1, r4
 8001b20:	f000 fa78 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	88fa      	ldrh	r2, [r7, #6]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b298      	uxth	r0, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	b29c      	uxth	r4, r3
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4944      	ldr	r1, [pc, #272]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	f000 fa61 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b298      	uxth	r0, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	88bb      	ldrh	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	b29c      	uxth	r4, r3
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4939      	ldr	r1, [pc, #228]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	f000 fa4a 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	88fa      	ldrh	r2, [r7, #6]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	88bb      	ldrh	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29c      	uxth	r4, r3
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	492d      	ldr	r1, [pc, #180]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4621      	mov	r1, r4
 8001baa:	f000 fa33 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b298      	uxth	r0, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29c      	uxth	r4, r3
 8001bc2:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4922      	ldr	r1, [pc, #136]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	f000 fa1c 	bl	8002014 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	88fa      	ldrh	r2, [r7, #6]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b298      	uxth	r0, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	b29c      	uxth	r4, r3
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <BSP_LCD_DrawCircle+0x1d8>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4916      	ldr	r1, [pc, #88]	; (8001c50 <BSP_LCD_DrawCircle+0x1dc>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4621      	mov	r1, r4
 8001c06:	f000 fa05 	bl	8002014 <BSP_LCD_DrawPixel>

    if (d < 0)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	da06      	bge.n	8001c1e <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	009a      	lsls	r2, r3, #2
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	4413      	add	r3, r2
 8001c18:	3306      	adds	r3, #6
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	e00a      	b.n	8001c34 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	009a      	lsls	r2, r3, #2
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4413      	add	r3, r2
 8001c2a:	330a      	adds	r3, #10
 8001c2c:	617b      	str	r3, [r7, #20]
      cury--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	3301      	adds	r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f67f af2b 	bls.w	8001a9a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000198 	.word	0x20000198
 8001c50:	2000019c 	.word	0x2000019c

08001c54 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af02      	add	r7, sp, #8
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	4608      	mov	r0, r1
 8001c60:	4611      	mov	r1, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	4623      	mov	r3, r4
 8001c66:	80fb      	strh	r3, [r7, #6]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	80bb      	strh	r3, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <BSP_LCD_FillRect+0xa8>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4920      	ldr	r1, [pc, #128]	; (8001d00 <BSP_LCD_FillRect+0xac>)
 8001c7e:	4613      	mov	r3, r2
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fcca 	bl	8001624 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BSP_LCD_FillRect+0xa8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1b      	ldr	r2, [pc, #108]	; (8001d04 <BSP_LCD_FillRect+0xb0>)
 8001c96:	2134      	movs	r1, #52	; 0x34
 8001c98:	fb01 f303 	mul.w	r3, r1, r3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	335c      	adds	r3, #92	; 0x5c
 8001ca0:	681c      	ldr	r4, [r3, #0]
 8001ca2:	f7ff fc33 	bl	800150c <BSP_LCD_GetXSize>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	88bb      	ldrh	r3, [r7, #4]
 8001caa:	fb03 f202 	mul.w	r2, r3, r2
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4423      	add	r3, r4
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <BSP_LCD_FillRect+0xa8>)
 8001cba:	681c      	ldr	r4, [r3, #0]
 8001cbc:	68fd      	ldr	r5, [r7, #12]
 8001cbe:	887e      	ldrh	r6, [r7, #2]
 8001cc0:	f8b7 8000 	ldrh.w	r8, [r7]
 8001cc4:	f7ff fc22 	bl	800150c <BSP_LCD_GetXSize>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	887b      	ldrh	r3, [r7, #2]
 8001ccc:	1ad1      	subs	r1, r2, r3
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <BSP_LCD_FillRect+0xa8>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	480b      	ldr	r0, [pc, #44]	; (8001d00 <BSP_LCD_FillRect+0xac>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4403      	add	r3, r0
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9100      	str	r1, [sp, #0]
 8001ce4:	4643      	mov	r3, r8
 8001ce6:	4632      	mov	r2, r6
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4620      	mov	r0, r4
 8001cec:	f000 fa72 	bl	80021d4 <FillBuffer>
}
 8001cf0:	bf00      	nop
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000198 	.word	0x20000198
 8001d00:	2000019c 	.word	0x2000019c
 8001d04:	20000284 	.word	0x20000284

08001d08 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
 8001d12:	460b      	mov	r3, r1
 8001d14:	80bb      	strh	r3, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	f1c3 0303 	rsb	r3, r3, #3
 8001d22:	617b      	str	r3, [r7, #20]

  curx = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8001d28:	887b      	ldrh	r3, [r7, #2]
 8001d2a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <BSP_LCD_FillCircle+0x138>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4944      	ldr	r1, [pc, #272]	; (8001e44 <BSP_LCD_FillCircle+0x13c>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fc70 	bl	8001624 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8001d44:	e061      	b.n	8001e0a <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d021      	beq.n	8001d90 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	88fa      	ldrh	r2, [r7, #6]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	b298      	uxth	r0, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f7ff fe45 	bl	80019f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	88fa      	ldrh	r2, [r7, #6]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	b298      	uxth	r0, r3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	88ba      	ldrh	r2, [r7, #4]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b299      	uxth	r1, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	f7ff fe34 	bl	80019f8 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d021      	beq.n	8001dda <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	88fa      	ldrh	r2, [r7, #6]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b298      	uxth	r0, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	88ba      	ldrh	r2, [r7, #4]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b299      	uxth	r1, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	f7ff fe20 	bl	80019f8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	88fa      	ldrh	r2, [r7, #6]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b298      	uxth	r0, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	88bb      	ldrh	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b299      	uxth	r1, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	f7ff fe0f 	bl	80019f8 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	da06      	bge.n	8001dee <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	009a      	lsls	r2, r3, #2
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4413      	add	r3, r2
 8001de8:	3306      	adds	r3, #6
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00a      	b.n	8001e04 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	4413      	add	r3, r2
 8001dfa:	330a      	adds	r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]
      cury--;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3301      	adds	r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d999      	bls.n	8001d46 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <BSP_LCD_FillCircle+0x138>)
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	490b      	ldr	r1, [pc, #44]	; (8001e44 <BSP_LCD_FillCircle+0x13c>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fbfd 	bl	8001624 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	88b9      	ldrh	r1, [r7, #4]
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fe1f 	bl	8001a74 <BSP_LCD_DrawCircle>
}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000198 	.word	0x20000198
 8001e44:	2000019c 	.word	0x2000019c

08001e48 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <BSP_LCD_DisplayOn+0x1c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8001e56:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <BSP_LCD_DisplayOn+0x1c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	4798      	blx	r3
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000032c 	.word	0x2000032c

08001e68 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
 8001e72:	4a61      	ldr	r2, [pc, #388]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e74:	4b60      	ldr	r3, [pc, #384]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e86:	623b      	str	r3, [r7, #32]
 8001e88:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	4a5a      	ldr	r2, [pc, #360]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	4a53      	ldr	r2, [pc, #332]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001eac:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001ee4:	4b44      	ldr	r3, [pc, #272]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4a3e      	ldr	r2, [pc, #248]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f00:	4b3d      	ldr	r3, [pc, #244]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f043 0308 	orr.w	r3, r3, #8
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	f043 0320 	orr.w	r3, r3, #32
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0320 	and.w	r3, r3, #32
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	4a30      	ldr	r2, [pc, #192]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f38:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <BSP_LCD_MspInit+0x190>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001f4e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8001f60:	230e      	movs	r3, #14
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4824      	ldr	r0, [pc, #144]	; (8001ffc <BSP_LCD_MspInit+0x194>)
 8001f6c:	f001 f9ee 	bl	800334c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001f70:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4820      	ldr	r0, [pc, #128]	; (8002000 <BSP_LCD_MspInit+0x198>)
 8001f7e:	f001 f9e5 	bl	800334c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f82:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	481d      	ldr	r0, [pc, #116]	; (8002004 <BSP_LCD_MspInit+0x19c>)
 8001f90:	f001 f9dc 	bl	800334c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f94:	2348      	movs	r3, #72	; 0x48
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	481a      	ldr	r0, [pc, #104]	; (8002008 <BSP_LCD_MspInit+0x1a0>)
 8001fa0:	f001 f9d4 	bl	800334c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4816      	ldr	r0, [pc, #88]	; (800200c <BSP_LCD_MspInit+0x1a4>)
 8001fb2:	f001 f9cb 	bl	800334c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001fb6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4813      	ldr	r0, [pc, #76]	; (8002010 <BSP_LCD_MspInit+0x1a8>)
 8001fc4:	f001 f9c2 	bl	800334c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001fcc:	2309      	movs	r3, #9
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480a      	ldr	r0, [pc, #40]	; (8002000 <BSP_LCD_MspInit+0x198>)
 8001fd8:	f001 f9b8 	bl	800334c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4809      	ldr	r0, [pc, #36]	; (8002010 <BSP_LCD_MspInit+0x1a8>)
 8001fea:	f001 f9af 	bl	800334c <HAL_GPIO_Init>
}
 8001fee:	bf00      	nop
 8001ff0:	3738      	adds	r7, #56	; 0x38
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40020400 	.word	0x40020400
 8002004:	40020800 	.word	0x40020800
 8002008:	40020c00 	.word	0x40020c00
 800200c:	40021400 	.word	0x40021400
 8002010:	40021800 	.word	0x40021800

08002014 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	603a      	str	r2, [r7, #0]
 800201e:	80fb      	strh	r3, [r7, #6]
 8002020:	460b      	mov	r3, r1
 8002022:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <BSP_LCD_DrawPixel+0x44>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0c      	ldr	r2, [pc, #48]	; (800205c <BSP_LCD_DrawPixel+0x48>)
 800202a:	2134      	movs	r1, #52	; 0x34
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	335c      	adds	r3, #92	; 0x5c
 8002034:	681c      	ldr	r4, [r3, #0]
 8002036:	88bd      	ldrh	r5, [r7, #4]
 8002038:	f7ff fa68 	bl	800150c <BSP_LCD_GetXSize>
 800203c:	4603      	mov	r3, r0
 800203e:	fb03 f205 	mul.w	r2, r3, r5
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4423      	add	r3, r4
 800204a:	461a      	mov	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bdb0      	pop	{r4, r5, r7, pc}
 8002058:	20000198 	.word	0x20000198
 800205c:	20000284 	.word	0x20000284

08002060 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	603a      	str	r2, [r7, #0]
 800206a:	80fb      	strh	r3, [r7, #6]
 800206c:	460b      	mov	r3, r1
 800206e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <DrawChar+0x16c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4953      	ldr	r1, [pc, #332]	; (80021d0 <DrawChar+0x170>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3308      	adds	r3, #8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	88db      	ldrh	r3, [r3, #6]
 8002092:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002094:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <DrawChar+0x16c>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	494d      	ldr	r1, [pc, #308]	; (80021d0 <DrawChar+0x170>)
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3308      	adds	r3, #8
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	889b      	ldrh	r3, [r3, #4]
 80020aa:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80020ac:	8a3b      	ldrh	r3, [r7, #16]
 80020ae:	3307      	adds	r3, #7
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	da00      	bge.n	80020b6 <DrawChar+0x56>
 80020b4:	3307      	adds	r3, #7
 80020b6:	10db      	asrs	r3, r3, #3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	8a3b      	ldrh	r3, [r7, #16]
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	e076      	b.n	80021ba <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80020cc:	8a3b      	ldrh	r3, [r7, #16]
 80020ce:	3307      	adds	r3, #7
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	da00      	bge.n	80020d6 <DrawChar+0x76>
 80020d4:	3307      	adds	r3, #7
 80020d6:	10db      	asrs	r3, r3, #3
 80020d8:	461a      	mov	r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fb03 f302 	mul.w	r3, r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80020e6:	8a3b      	ldrh	r3, [r7, #16]
 80020e8:	3307      	adds	r3, #7
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	da00      	bge.n	80020f0 <DrawChar+0x90>
 80020ee:	3307      	adds	r3, #7
 80020f0:	10db      	asrs	r3, r3, #3
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d002      	beq.n	80020fc <DrawChar+0x9c>
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d004      	beq.n	8002104 <DrawChar+0xa4>
 80020fa:	e00c      	b.n	8002116 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	617b      	str	r3, [r7, #20]
      break;
 8002102:	e016      	b.n	8002132 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	3201      	adds	r2, #1
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
      break;
 8002114:	e00d      	b.n	8002132 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	041a      	lsls	r2, r3, #16
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	3301      	adds	r3, #1
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	4313      	orrs	r3, r2
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	3202      	adds	r2, #2
 800212a:	7812      	ldrb	r2, [r2, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	617b      	str	r3, [r7, #20]
      break;
 8002130:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e036      	b.n	80021a6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002138:	8a3a      	ldrh	r2, [r7, #16]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	4413      	add	r3, r2
 8002142:	3b01      	subs	r3, #1
 8002144:	2201      	movs	r2, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	461a      	mov	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d012      	beq.n	800217a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	b29a      	uxth	r2, r3
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4413      	add	r3, r2
 800215c:	b298      	uxth	r0, r3
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <DrawChar+0x16c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	491b      	ldr	r1, [pc, #108]	; (80021d0 <DrawChar+0x170>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	4619      	mov	r1, r3
 8002174:	f7ff ff4e 	bl	8002014 <BSP_LCD_DrawPixel>
 8002178:	e012      	b.n	80021a0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	b29a      	uxth	r2, r3
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	4413      	add	r3, r2
 8002182:	b298      	uxth	r0, r3
 8002184:	4b11      	ldr	r3, [pc, #68]	; (80021cc <DrawChar+0x16c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4911      	ldr	r1, [pc, #68]	; (80021d0 <DrawChar+0x170>)
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3304      	adds	r3, #4
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff ff3a 	bl	8002014 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	8a3a      	ldrh	r2, [r7, #16]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d8c4      	bhi.n	8002138 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80021ae:	88bb      	ldrh	r3, [r7, #4]
 80021b0:	3301      	adds	r3, #1
 80021b2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	8a7a      	ldrh	r2, [r7, #18]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d884      	bhi.n	80020cc <DrawChar+0x6c>
  }
}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000198 	.word	0x20000198
 80021d0:	2000019c 	.word	0x2000019c

080021d4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <FillBuffer+0x68>)
 80021e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021e8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80021ea:	4b14      	ldr	r3, [pc, #80]	; (800223c <FillBuffer+0x68>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80021f0:	4a12      	ldr	r2, [pc, #72]	; (800223c <FillBuffer+0x68>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <FillBuffer+0x68>)
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <FillBuffer+0x6c>)
 80021fa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <FillBuffer+0x68>)
 80021fe:	f000 fd0b 	bl	8002c18 <HAL_DMA2D_Init>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	480c      	ldr	r0, [pc, #48]	; (800223c <FillBuffer+0x68>)
 800220c:	f000 ff72 	bl	80030f4 <HAL_DMA2D_ConfigLayer>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10e      	bne.n	8002234 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69f9      	ldr	r1, [r7, #28]
 8002220:	4806      	ldr	r0, [pc, #24]	; (800223c <FillBuffer+0x68>)
 8002222:	f000 fd42 	bl	8002caa <HAL_DMA2D_Start>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800222c:	210a      	movs	r1, #10
 800222e:	4803      	ldr	r0, [pc, #12]	; (800223c <FillBuffer+0x68>)
 8002230:	f000 fd66 	bl	8002d00 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000128 	.word	0x20000128
 8002240:	4002b000 	.word	0x4002b000

08002244 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 800224a:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <BSP_SDRAM_Init+0xb0>)
 800224c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800224e:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 8002250:	2202      	movs	r2, #2
 8002252:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002254:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 8002256:	2207      	movs	r2, #7
 8002258:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 800225c:	2204      	movs	r2, #4
 800225e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002260:	4b25      	ldr	r3, [pc, #148]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 8002262:	2207      	movs	r2, #7
 8002264:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002266:	4b24      	ldr	r3, [pc, #144]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 8002268:	2202      	movs	r2, #2
 800226a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800226c:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 800226e:	2202      	movs	r2, #2
 8002270:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 8002274:	2202      	movs	r2, #2
 8002276:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 800227a:	2201      	movs	r2, #1
 800227c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800227e:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002284:	4b1a      	ldr	r3, [pc, #104]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 8002286:	2204      	movs	r2, #4
 8002288:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800228a:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 800228c:	2210      	movs	r2, #16
 800228e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 8002298:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800229c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80022a4:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022aa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80022ac:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80022ba:	2100      	movs	r1, #0
 80022bc:	480c      	ldr	r0, [pc, #48]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022be:	f000 f87f 	bl	80023c0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <BSP_SDRAM_Init+0xb4>)
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <BSP_SDRAM_Init+0xac>)
 80022c6:	f002 fea7 	bl	8005018 <HAL_SDRAM_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <BSP_SDRAM_Init+0xb8>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e002      	b.n	80022de <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <BSP_SDRAM_Init+0xb8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022de:	f240 506a 	movw	r0, #1386	; 0x56a
 80022e2:	f000 f80d 	bl	8002300 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <BSP_SDRAM_Init+0xb8>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200001b4 	.word	0x200001b4
 80022f4:	a0000140 	.word	0xa0000140
 80022f8:	200001e8 	.word	0x200001e8
 80022fc:	20000044 	.word	0x20000044

08002300 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800230c:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002314:	2208      	movs	r2, #8
 8002316:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	2201      	movs	r2, #1
 800231c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002328:	4923      	ldr	r1, [pc, #140]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232a:	4824      	ldr	r0, [pc, #144]	; (80023bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800232c:	f002 fea8 	bl	8005080 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f000 f993 	bl	800265c <HAL_Delay>
  //wait_ms(1);
  
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233e:	2208      	movs	r2, #8
 8002340:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002342:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002344:	2201      	movs	r2, #1
 8002346:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800234e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002352:	4919      	ldr	r1, [pc, #100]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002354:	4819      	ldr	r0, [pc, #100]	; (80023bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002356:	f002 fe93 	bl	8005080 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235c:	2203      	movs	r2, #3
 800235e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002362:	2208      	movs	r2, #8
 8002364:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002368:	2204      	movs	r2, #4
 800236a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002376:	4910      	ldr	r1, [pc, #64]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002378:	4810      	ldr	r0, [pc, #64]	; (80023bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800237a:	f002 fe81 	bl	8005080 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800237e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002382:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002386:	2204      	movs	r2, #4
 8002388:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800238c:	2208      	movs	r2, #8
 800238e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002392:	2201      	movs	r2, #1
 8002394:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800239a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800239c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a0:	4905      	ldr	r1, [pc, #20]	; (80023b8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80023a2:	4806      	ldr	r0, [pc, #24]	; (80023bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023a4:	f002 fe6c 	bl	8005080 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4804      	ldr	r0, [pc, #16]	; (80023bc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80023ac:	f002 fe93 	bl	80050d6 <HAL_SDRAM_ProgramRefreshRate>
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000204 	.word	0x20000204
 80023bc:	200001b4 	.word	0x200001b4

080023c0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b090      	sub	sp, #64	; 0x40
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80ec 	beq.w	80025aa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d6:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80023da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6393      	str	r3, [r2, #56]	; 0x38
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	4a5b      	ldr	r2, [pc, #364]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002448:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f043 0308 	orr.w	r3, r3, #8
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b58      	ldr	r3, [pc, #352]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	61bb      	str	r3, [r7, #24]
 800245c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f043 0310 	orr.w	r3, r3, #16
 800246c:	6313      	str	r3, [r2, #48]	; 0x30
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f043 0320 	orr.w	r3, r3, #32
 8002488:	6313      	str	r3, [r2, #48]	; 0x30
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4a46      	ldr	r2, [pc, #280]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800249c:	4b45      	ldr	r3, [pc, #276]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <BSP_SDRAM_MspInit+0x1f4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80024b6:	2302      	movs	r3, #2
 80024b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80024be:	230c      	movs	r3, #12
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80024c2:	2360      	movs	r3, #96	; 0x60
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80024c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	483a      	ldr	r0, [pc, #232]	; (80025b8 <BSP_SDRAM_MspInit+0x1f8>)
 80024ce:	f000 ff3d 	bl	800334c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80024d2:	2301      	movs	r3, #1
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	4837      	ldr	r0, [pc, #220]	; (80025bc <BSP_SDRAM_MspInit+0x1fc>)
 80024de:	f000 ff35 	bl	800334c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80024e2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ec:	4619      	mov	r1, r3
 80024ee:	4834      	ldr	r0, [pc, #208]	; (80025c0 <BSP_SDRAM_MspInit+0x200>)
 80024f0:	f000 ff2c 	bl	800334c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80024f4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	4830      	ldr	r0, [pc, #192]	; (80025c4 <BSP_SDRAM_MspInit+0x204>)
 8002502:	f000 ff23 	bl	800334c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002506:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800250c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002510:	4619      	mov	r1, r3
 8002512:	482d      	ldr	r0, [pc, #180]	; (80025c8 <BSP_SDRAM_MspInit+0x208>)
 8002514:	f000 ff1a 	bl	800334c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002518:	f248 1333 	movw	r3, #33075	; 0x8133
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	4829      	ldr	r0, [pc, #164]	; (80025cc <BSP_SDRAM_MspInit+0x20c>)
 8002526:	f000 ff11 	bl	800334c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002540:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002544:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002548:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800254c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002550:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002554:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002558:	2200      	movs	r2, #0
 800255a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 800255e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002562:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 800256c:	2203      	movs	r2, #3
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800257c:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <BSP_SDRAM_MspInit+0x214>)
 8002580:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a12      	ldr	r2, [pc, #72]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800258e:	4810      	ldr	r0, [pc, #64]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002590:	f000 fa34 	bl	80029fc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002594:	480e      	ldr	r0, [pc, #56]	; (80025d0 <BSP_SDRAM_MspInit+0x210>)
 8002596:	f000 f983 	bl	80028a0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	210f      	movs	r1, #15
 800259e:	2038      	movs	r0, #56	; 0x38
 80025a0:	f000 f934 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80025a4:	2038      	movs	r0, #56	; 0x38
 80025a6:	f000 f94d 	bl	8002844 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80025aa:	bf00      	nop
 80025ac:	3740      	adds	r7, #64	; 0x40
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800
 80025d0:	20000214 	.word	0x20000214
 80025d4:	40026410 	.word	0x40026410

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025dc:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_Init+0x40>)
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_Init+0x40>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <HAL_Init+0x40>)
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_Init+0x40>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f4:	4a08      	ldr	r2, [pc, #32]	; (8002618 <HAL_Init+0x40>)
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_Init+0x40>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002600:	2003      	movs	r0, #3
 8002602:	f000 f8f8 	bl	80027f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002606:	2000      	movs	r0, #0
 8002608:	f006 f928 	bl	800885c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800260c:	f006 f8fe 	bl	800880c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40023c00 	.word	0x40023c00

0800261c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <HAL_IncTick+0x20>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_IncTick+0x24>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4413      	add	r3, r2
 800262c:	4a04      	ldr	r2, [pc, #16]	; (8002640 <HAL_IncTick+0x24>)
 800262e:	6013      	str	r3, [r2, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000045 	.word	0x20000045
 8002640:	20000330 	.word	0x20000330

08002644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return uwTick;
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_GetTick+0x14>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000330 	.word	0x20000330

0800265c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff ffee 	bl	8002644 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d005      	beq.n	8002682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_Delay+0x40>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4413      	add	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002682:	bf00      	nop
 8002684:	f7ff ffde 	bl	8002644 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad2      	subs	r2, r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3f7      	bcc.n	8002684 <HAL_Delay+0x28>
  {
  }
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20000045 	.word	0x20000045

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	; (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	4909      	ldr	r1, [pc, #36]	; (800273c <__NVIC_EnableIRQ+0x38>)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	79fa      	ldrb	r2, [r7, #7]
 8002720:	f002 021f 	and.w	r2, r2, #31
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	490d      	ldr	r1, [pc, #52]	; (800278c <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	4909      	ldr	r1, [pc, #36]	; (8002790 <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	2201      	movs	r2, #1
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	401a      	ands	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027da:	2101      	movs	r1, #1
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	1e59      	subs	r1, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	; 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff4e 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800281e:	f7ff ff63 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 8002822:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f7ff ffb3 	bl	8002794 <NVIC_EncodePriority>
 800282e:	4602      	mov	r2, r0
 8002830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff82 	bl	8002740 <__NVIC_SetPriority>
}
 800283c:	bf00      	nop
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff ff56 	bl	8002704 <__NVIC_EnableIRQ>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e011      	b.n	8002896 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f004 f9ce 	bl	8006c24 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff feca 	bl	8002644 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e099      	b.n	80029f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028dc:	e00f      	b.n	80028fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028de:	f7ff feb1 	bl	8002644 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d908      	bls.n	80028fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2203      	movs	r2, #3
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e078      	b.n	80029f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e8      	bne.n	80028de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_DMA_Init+0x158>)
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b04      	cmp	r3, #4
 8002956:	d107      	bne.n	8002968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b04      	cmp	r3, #4
 8002990:	d117      	bne.n	80029c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8bd 	bl	8002b24 <DMA_CheckFifoParam>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029be:	2301      	movs	r3, #1
 80029c0:	e016      	b.n	80029f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f874 	bl	8002ab8 <DMA_CalcBaseAndBitshift>
 80029d0:	4603      	mov	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	f010803f 	.word	0xf010803f

080029fc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e050      	b.n	8002ab0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e048      	b.n	8002ab0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2221      	movs	r2, #33	; 0x21
 8002a5c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f82a 	bl	8002ab8 <DMA_CalcBaseAndBitshift>
 8002a64:	4603      	mov	r3, r0
 8002a66:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	223f      	movs	r2, #63	; 0x3f
 8002a92:	409a      	lsls	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3b10      	subs	r3, #16
 8002ac8:	4a14      	ldr	r2, [pc, #80]	; (8002b1c <DMA_CalcBaseAndBitshift+0x64>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	091b      	lsrs	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <DMA_CalcBaseAndBitshift+0x68>)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d909      	bls.n	8002afa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aee:	f023 0303 	bic.w	r3, r3, #3
 8002af2:	1d1a      	adds	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	659a      	str	r2, [r3, #88]	; 0x58
 8002af8:	e007      	b.n	8002b0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	aaaaaaab 	.word	0xaaaaaaab
 8002b20:	0800b850 	.word	0x0800b850

08002b24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d11f      	bne.n	8002b7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d855      	bhi.n	8002bf0 <DMA_CheckFifoParam+0xcc>
 8002b44:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <DMA_CheckFifoParam+0x28>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002b5d 	.word	0x08002b5d
 8002b50:	08002b6f 	.word	0x08002b6f
 8002b54:	08002b5d 	.word	0x08002b5d
 8002b58:	08002bf1 	.word	0x08002bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d045      	beq.n	8002bf4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6c:	e042      	b.n	8002bf4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b76:	d13f      	bne.n	8002bf8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e03c      	b.n	8002bf8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b86:	d121      	bne.n	8002bcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d836      	bhi.n	8002bfc <DMA_CheckFifoParam+0xd8>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <DMA_CheckFifoParam+0x70>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bab 	.word	0x08002bab
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002bbd 	.word	0x08002bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba8:	e02f      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d024      	beq.n	8002c00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bba:	e021      	b.n	8002c00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bc4:	d11e      	bne.n	8002c04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bca:	e01b      	b.n	8002c04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d902      	bls.n	8002bd8 <DMA_CheckFifoParam+0xb4>
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d003      	beq.n	8002bde <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bd6:	e018      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e015      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00e      	beq.n	8002c08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      break;
 8002bee:	e00b      	b.n	8002c08 <DMA_CheckFifoParam+0xe4>
      break;
 8002bf0:	bf00      	nop
 8002bf2:	e00a      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002bf4:	bf00      	nop
 8002bf6:	e008      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e006      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e004      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002c00:	bf00      	nop
 8002c02:	e002      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;   
 8002c04:	bf00      	nop
 8002c06:	e000      	b.n	8002c0a <DMA_CheckFifoParam+0xe6>
      break;
 8002c08:	bf00      	nop
    }
  } 
  
  return status; 
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e03b      	b.n	8002ca2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f004 f844 	bl	8006ccc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6812      	ldr	r2, [r2, #0]
 8002c6a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c6c:	f022 0107 	bic.w	r1, r2, #7
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c86:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68c9      	ldr	r1, [r1, #12]
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af02      	add	r7, sp, #8
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DMA2D_Start+0x1c>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e018      	b.n	8002cf8 <HAL_DMA2D_Start+0x4e>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa97 	bl	8003214 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d056      	beq.n	8002dca <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8002d1c:	f7ff fc92 	bl	8002644 <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d22:	e04b      	b.n	8002dbc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	f043 0202 	orr.w	r2, r3, #2
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	f043 0201 	orr.w	r2, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2221      	movs	r2, #33	; 0x21
 8002d68:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0a5      	b.n	8002eca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d01a      	beq.n	8002dbc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002d86:	f7ff fc5d 	bl	8002644 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d802      	bhi.n	8002d9c <HAL_DMA2D_PollForTransfer+0x9c>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10f      	bne.n	8002dbc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e086      	b.n	8002eca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0ac      	beq.n	8002d24 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d061      	beq.n	8002eb0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dec:	f7ff fc2a 	bl	8002644 <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002df2:	e056      	b.n	8002ea2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02e      	beq.n	8002e64 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e14:	f043 0204 	orr.w	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	f043 0202 	orr.w	r2, r3, #2
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	f043 0201 	orr.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2229      	movs	r2, #41	; 0x29
 8002e4e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2204      	movs	r2, #4
 8002e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e032      	b.n	8002eca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6a:	d01a      	beq.n	8002ea2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002e6c:	f7ff fbea 	bl	8002644 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d802      	bhi.n	8002e82 <HAL_DMA2D_PollForTransfer+0x182>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e013      	b.n	8002eca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0a1      	beq.n	8002df4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2212      	movs	r2, #18
 8002eb6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d026      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d021      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d026      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d021      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f64:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	f043 0202 	orr.w	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d026      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2204      	movs	r2, #4
 800301c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f853 	bl	80030ca <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d024      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01f      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01f      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01a      	beq.n	80030c2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800309a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2210      	movs	r2, #16
 80030a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f80e 	bl	80030de <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_DMA2D_ConfigLayer+0x20>
 8003110:	2302      	movs	r3, #2
 8003112:	e077      	b.n	8003204 <HAL_DMA2D_ConfigLayer+0x110>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	3318      	adds	r3, #24
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_DMA2D_ConfigLayer+0x11c>)
 8003140:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b0a      	cmp	r3, #10
 8003148:	d003      	beq.n	8003152 <HAL_DMA2D_ConfigLayer+0x5e>
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b09      	cmp	r3, #9
 8003150:	d107      	bne.n	8003162 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e005      	b.n	800316e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11f      	bne.n	80031b4 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	43d2      	mvns	r2, r2
 8003182:	4011      	ands	r1, r2
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	430a      	orrs	r2, r1
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b0a      	cmp	r3, #10
 800319a:	d003      	beq.n	80031a4 <HAL_DMA2D_ConfigLayer+0xb0>
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d126      	bne.n	80031f2 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68d2      	ldr	r2, [r2, #12]
 80031ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
 80031b2:	e01e      	b.n	80031f2 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	69d1      	ldr	r1, [r2, #28]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	43d2      	mvns	r2, r2
 80031c2:	4011      	ands	r1, r2
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b0a      	cmp	r3, #10
 80031da:	d003      	beq.n	80031e4 <HAL_DMA2D_ConfigLayer+0xf0>
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b09      	cmp	r3, #9
 80031e2:	d106      	bne.n	80031f2 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	68d2      	ldr	r2, [r2, #12]
 80031ec:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80031f0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	ff03000f 	.word	0xff03000f

08003214 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003214:	b480      	push	{r7}
 8003216:	b08b      	sub	sp, #44	; 0x2c
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800322c:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	0410      	lsls	r0, r2, #16
 8003234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003236:	4302      	orrs	r2, r0
 8003238:	430a      	orrs	r2, r1
 800323a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800324c:	d174      	bne.n	8003338 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003254:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800325c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003264:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d108      	bne.n	8003286 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	431a      	orrs	r2, r3
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	431a      	orrs	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
 8003284:	e053      	b.n	800332e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	431a      	orrs	r2, r3
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
 800329a:	e048      	b.n	800332e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d111      	bne.n	80032c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	0cdb      	lsrs	r3, r3, #19
 80032a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	0a9b      	lsrs	r3, r3, #10
 80032ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	08db      	lsrs	r3, r3, #3
 80032b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	02db      	lsls	r3, r3, #11
 80032be:	431a      	orrs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	e032      	b.n	800332e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b03      	cmp	r3, #3
 80032ce:	d117      	bne.n	8003300 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	0fdb      	lsrs	r3, r3, #31
 80032d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	0cdb      	lsrs	r3, r3, #19
 80032da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	0adb      	lsrs	r3, r3, #11
 80032e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	08db      	lsrs	r3, r3, #3
 80032e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	029b      	lsls	r3, r3, #10
 80032f0:	431a      	orrs	r2, r3
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	03db      	lsls	r3, r3, #15
 80032f6:	431a      	orrs	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e016      	b.n	800332e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	0f1b      	lsrs	r3, r3, #28
 8003304:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	0d1b      	lsrs	r3, r3, #20
 800330a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	0b1b      	lsrs	r3, r3, #12
 8003310:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	011a      	lsls	r2, r3, #4
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	431a      	orrs	r2, r3
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	031b      	lsls	r3, r3, #12
 8003326:	431a      	orrs	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	4313      	orrs	r3, r2
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003336:	e003      	b.n	8003340 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	60da      	str	r2, [r3, #12]
}
 8003340:	bf00      	nop
 8003342:	372c      	adds	r7, #44	; 0x2c
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e177      	b.n	8003658 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 8166 	bne.w	8003652 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d003      	beq.n	8003396 <HAL_GPIO_Init+0x4a>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b12      	cmp	r3, #18
 8003394:	d123      	bne.n	80033de <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d00b      	beq.n	8003432 <HAL_GPIO_Init+0xe6>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d007      	beq.n	8003432 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003426:	2b11      	cmp	r3, #17
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b12      	cmp	r3, #18
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	2203      	movs	r2, #3
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80c0 	beq.w	8003652 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4a65      	ldr	r2, [pc, #404]	; (800366c <HAL_GPIO_Init+0x320>)
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <HAL_GPIO_Init+0x320>)
 80034da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_GPIO_Init+0x320>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_GPIO_Init+0x324>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a57      	ldr	r2, [pc, #348]	; (8003674 <HAL_GPIO_Init+0x328>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d037      	beq.n	800358a <HAL_GPIO_Init+0x23e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a56      	ldr	r2, [pc, #344]	; (8003678 <HAL_GPIO_Init+0x32c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d031      	beq.n	8003586 <HAL_GPIO_Init+0x23a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a55      	ldr	r2, [pc, #340]	; (800367c <HAL_GPIO_Init+0x330>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02b      	beq.n	8003582 <HAL_GPIO_Init+0x236>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a54      	ldr	r2, [pc, #336]	; (8003680 <HAL_GPIO_Init+0x334>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d025      	beq.n	800357e <HAL_GPIO_Init+0x232>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a53      	ldr	r2, [pc, #332]	; (8003684 <HAL_GPIO_Init+0x338>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01f      	beq.n	800357a <HAL_GPIO_Init+0x22e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a52      	ldr	r2, [pc, #328]	; (8003688 <HAL_GPIO_Init+0x33c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d019      	beq.n	8003576 <HAL_GPIO_Init+0x22a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a51      	ldr	r2, [pc, #324]	; (800368c <HAL_GPIO_Init+0x340>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d013      	beq.n	8003572 <HAL_GPIO_Init+0x226>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a50      	ldr	r2, [pc, #320]	; (8003690 <HAL_GPIO_Init+0x344>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00d      	beq.n	800356e <HAL_GPIO_Init+0x222>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4f      	ldr	r2, [pc, #316]	; (8003694 <HAL_GPIO_Init+0x348>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d007      	beq.n	800356a <HAL_GPIO_Init+0x21e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4e      	ldr	r2, [pc, #312]	; (8003698 <HAL_GPIO_Init+0x34c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_GPIO_Init+0x21a>
 8003562:	2309      	movs	r3, #9
 8003564:	e012      	b.n	800358c <HAL_GPIO_Init+0x240>
 8003566:	230a      	movs	r3, #10
 8003568:	e010      	b.n	800358c <HAL_GPIO_Init+0x240>
 800356a:	2308      	movs	r3, #8
 800356c:	e00e      	b.n	800358c <HAL_GPIO_Init+0x240>
 800356e:	2307      	movs	r3, #7
 8003570:	e00c      	b.n	800358c <HAL_GPIO_Init+0x240>
 8003572:	2306      	movs	r3, #6
 8003574:	e00a      	b.n	800358c <HAL_GPIO_Init+0x240>
 8003576:	2305      	movs	r3, #5
 8003578:	e008      	b.n	800358c <HAL_GPIO_Init+0x240>
 800357a:	2304      	movs	r3, #4
 800357c:	e006      	b.n	800358c <HAL_GPIO_Init+0x240>
 800357e:	2303      	movs	r3, #3
 8003580:	e004      	b.n	800358c <HAL_GPIO_Init+0x240>
 8003582:	2302      	movs	r3, #2
 8003584:	e002      	b.n	800358c <HAL_GPIO_Init+0x240>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <HAL_GPIO_Init+0x240>
 800358a:	2300      	movs	r3, #0
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	f002 0203 	and.w	r2, r2, #3
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	4093      	lsls	r3, r2
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800359c:	4934      	ldr	r1, [pc, #208]	; (8003670 <HAL_GPIO_Init+0x324>)
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	3302      	adds	r3, #2
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035aa:	4b3c      	ldr	r3, [pc, #240]	; (800369c <HAL_GPIO_Init+0x350>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4013      	ands	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ce:	4a33      	ldr	r2, [pc, #204]	; (800369c <HAL_GPIO_Init+0x350>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_GPIO_Init+0x350>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035f8:	4a28      	ldr	r2, [pc, #160]	; (800369c <HAL_GPIO_Init+0x350>)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035fe:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_GPIO_Init+0x350>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	43db      	mvns	r3, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4013      	ands	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003622:	4a1e      	ldr	r2, [pc, #120]	; (800369c <HAL_GPIO_Init+0x350>)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003628:	4b1c      	ldr	r3, [pc, #112]	; (800369c <HAL_GPIO_Init+0x350>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800364c:	4a13      	ldr	r2, [pc, #76]	; (800369c <HAL_GPIO_Init+0x350>)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	3301      	adds	r3, #1
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	f67f ae84 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003660:	bf00      	nop
 8003662:	3724      	adds	r7, #36	; 0x24
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	40023800 	.word	0x40023800
 8003670:	40013800 	.word	0x40013800
 8003674:	40020000 	.word	0x40020000
 8003678:	40020400 	.word	0x40020400
 800367c:	40020800 	.word	0x40020800
 8003680:	40020c00 	.word	0x40020c00
 8003684:	40021000 	.word	0x40021000
 8003688:	40021400 	.word	0x40021400
 800368c:	40021800 	.word	0x40021800
 8003690:	40021c00 	.word	0x40021c00
 8003694:	40022000 	.word	0x40022000
 8003698:	40022400 	.word	0x40022400
 800369c:	40013c00 	.word	0x40013c00

080036a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e0da      	b.n	8003872 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036bc:	2201      	movs	r2, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	f040 80ca 	bne.w	800386c <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80036d8:	4a6b      	ldr	r2, [pc, #428]	; (8003888 <HAL_GPIO_DeInit+0x1e8>)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	089b      	lsrs	r3, r3, #2
 80036de:	3302      	adds	r3, #2
 80036e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	220f      	movs	r2, #15
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a63      	ldr	r2, [pc, #396]	; (800388c <HAL_GPIO_DeInit+0x1ec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d037      	beq.n	8003772 <HAL_GPIO_DeInit+0xd2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a62      	ldr	r2, [pc, #392]	; (8003890 <HAL_GPIO_DeInit+0x1f0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d031      	beq.n	800376e <HAL_GPIO_DeInit+0xce>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a61      	ldr	r2, [pc, #388]	; (8003894 <HAL_GPIO_DeInit+0x1f4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d02b      	beq.n	800376a <HAL_GPIO_DeInit+0xca>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_GPIO_DeInit+0x1f8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d025      	beq.n	8003766 <HAL_GPIO_DeInit+0xc6>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a5f      	ldr	r2, [pc, #380]	; (800389c <HAL_GPIO_DeInit+0x1fc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d01f      	beq.n	8003762 <HAL_GPIO_DeInit+0xc2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a5e      	ldr	r2, [pc, #376]	; (80038a0 <HAL_GPIO_DeInit+0x200>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d019      	beq.n	800375e <HAL_GPIO_DeInit+0xbe>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a5d      	ldr	r2, [pc, #372]	; (80038a4 <HAL_GPIO_DeInit+0x204>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d013      	beq.n	800375a <HAL_GPIO_DeInit+0xba>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a5c      	ldr	r2, [pc, #368]	; (80038a8 <HAL_GPIO_DeInit+0x208>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d00d      	beq.n	8003756 <HAL_GPIO_DeInit+0xb6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a5b      	ldr	r2, [pc, #364]	; (80038ac <HAL_GPIO_DeInit+0x20c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d007      	beq.n	8003752 <HAL_GPIO_DeInit+0xb2>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a5a      	ldr	r2, [pc, #360]	; (80038b0 <HAL_GPIO_DeInit+0x210>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_GPIO_DeInit+0xae>
 800374a:	2309      	movs	r3, #9
 800374c:	e012      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 800374e:	230a      	movs	r3, #10
 8003750:	e010      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 8003752:	2308      	movs	r3, #8
 8003754:	e00e      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 8003756:	2307      	movs	r3, #7
 8003758:	e00c      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 800375a:	2306      	movs	r3, #6
 800375c:	e00a      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 800375e:	2305      	movs	r3, #5
 8003760:	e008      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 8003762:	2304      	movs	r3, #4
 8003764:	e006      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_DeInit+0xd4>
 8003772:	2300      	movs	r3, #0
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	fa03 f202 	lsl.w	r2, r3, r2
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d132      	bne.n	80037ec <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003796:	483c      	ldr	r0, [pc, #240]	; (8003888 <HAL_GPIO_DeInit+0x1e8>)
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	089b      	lsrs	r3, r3, #2
 800379c:	493a      	ldr	r1, [pc, #232]	; (8003888 <HAL_GPIO_DeInit+0x1e8>)
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	0892      	lsrs	r2, r2, #2
 80037a2:	3202      	adds	r2, #2
 80037a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	43d2      	mvns	r2, r2
 80037ac:	400a      	ands	r2, r1
 80037ae:	3302      	adds	r3, #2
 80037b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80037b4:	493f      	ldr	r1, [pc, #252]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43db      	mvns	r3, r3
 80037be:	4013      	ands	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80037c2:	493c      	ldr	r1, [pc, #240]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037c4:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	4013      	ands	r3, r2
 80037ce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80037d0:	4938      	ldr	r1, [pc, #224]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037d2:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	4013      	ands	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80037de:	4935      	ldr	r1, [pc, #212]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037e0:	4b34      	ldr	r3, [pc, #208]	; (80038b4 <HAL_GPIO_DeInit+0x214>)
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	4013      	ands	r3, r2
 80037ea:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2103      	movs	r1, #3
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	401a      	ands	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	08da      	lsrs	r2, r3, #3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	08d9      	lsrs	r1, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3108      	adds	r1, #8
 800380e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	200f      	movs	r0, #15
 800381c:	fa00 f303 	lsl.w	r3, r0, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	4019      	ands	r1, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	2103      	movs	r1, #3
 8003836:	fa01 f303 	lsl.w	r3, r1, r3
 800383a:	43db      	mvns	r3, r3
 800383c:	401a      	ands	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	2101      	movs	r1, #1
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	401a      	ands	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2103      	movs	r1, #3
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	401a      	ands	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3301      	adds	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b0f      	cmp	r3, #15
 8003876:	f67f af21 	bls.w	80036bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	40013800 	.word	0x40013800
 800388c:	40020000 	.word	0x40020000
 8003890:	40020400 	.word	0x40020400
 8003894:	40020800 	.word	0x40020800
 8003898:	40020c00 	.word	0x40020c00
 800389c:	40021000 	.word	0x40021000
 80038a0:	40021400 	.word	0x40021400
 80038a4:	40021800 	.word	0x40021800
 80038a8:	40021c00 	.word	0x40021c00
 80038ac:	40022000 	.word	0x40022000
 80038b0:	40022400 	.word	0x40022400
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e10f      	b.n	8003b1e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f003 fc38 	bl	8007188 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003930:	f001 f974 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8003934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	4a7b      	ldr	r2, [pc, #492]	; (8003b28 <HAL_I2C_Init+0x23c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d807      	bhi.n	8003950 <HAL_I2C_Init+0x64>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4a7a      	ldr	r2, [pc, #488]	; (8003b2c <HAL_I2C_Init+0x240>)
 8003944:	4293      	cmp	r3, r2
 8003946:	bf94      	ite	ls
 8003948:	2301      	movls	r3, #1
 800394a:	2300      	movhi	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e006      	b.n	800395e <HAL_I2C_Init+0x72>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4a77      	ldr	r2, [pc, #476]	; (8003b30 <HAL_I2C_Init+0x244>)
 8003954:	4293      	cmp	r3, r2
 8003956:	bf94      	ite	ls
 8003958:	2301      	movls	r3, #1
 800395a:	2300      	movhi	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0db      	b.n	8003b1e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a72      	ldr	r2, [pc, #456]	; (8003b34 <HAL_I2C_Init+0x248>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0c9b      	lsrs	r3, r3, #18
 8003970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6812      	ldr	r2, [r2, #0]
 800397a:	6852      	ldr	r2, [r2, #4]
 800397c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	430a      	orrs	r2, r1
 8003984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4863      	ldr	r0, [pc, #396]	; (8003b28 <HAL_I2C_Init+0x23c>)
 800399a:	4283      	cmp	r3, r0
 800399c:	d802      	bhi.n	80039a4 <HAL_I2C_Init+0xb8>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3301      	adds	r3, #1
 80039a2:	e009      	b.n	80039b8 <HAL_I2C_Init+0xcc>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80039aa:	fb00 f303 	mul.w	r3, r0, r3
 80039ae:	4862      	ldr	r0, [pc, #392]	; (8003b38 <HAL_I2C_Init+0x24c>)
 80039b0:	fba0 0303 	umull	r0, r3, r0, r3
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	3301      	adds	r3, #1
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	4955      	ldr	r1, [pc, #340]	; (8003b28 <HAL_I2C_Init+0x23c>)
 80039d4:	428b      	cmp	r3, r1
 80039d6:	d80d      	bhi.n	80039f4 <HAL_I2C_Init+0x108>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1e59      	subs	r1, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	bf38      	it	cc
 80039f0:	2304      	movcc	r3, #4
 80039f2:	e04f      	b.n	8003a94 <HAL_I2C_Init+0x1a8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d111      	bne.n	8003a20 <HAL_I2C_Init+0x134>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	1e5c      	subs	r4, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	440b      	add	r3, r1
 8003a0a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a0e:	3301      	adds	r3, #1
 8003a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	e012      	b.n	8003a46 <HAL_I2C_Init+0x15a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e5c      	subs	r4, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf0c      	ite	eq
 8003a40:	2301      	moveq	r3, #1
 8003a42:	2300      	movne	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_I2C_Init+0x162>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e022      	b.n	8003a94 <HAL_I2C_Init+0x1a8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10e      	bne.n	8003a74 <HAL_I2C_Init+0x188>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	1e5c      	subs	r4, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6859      	ldr	r1, [r3, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	440b      	add	r3, r1
 8003a64:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a72:	e00f      	b.n	8003a94 <HAL_I2C_Init+0x1a8>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e5c      	subs	r4, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	69d0      	ldr	r0, [r2, #28]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6a12      	ldr	r2, [r2, #32]
 8003aae:	4302      	orrs	r2, r0
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ac2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	6908      	ldr	r0, [r1, #16]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	68c9      	ldr	r1, [r1, #12]
 8003ace:	4301      	orrs	r1, r0
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6950      	ldr	r0, [r2, #20]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6992      	ldr	r2, [r2, #24]
 8003aea:	4302      	orrs	r2, r0
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6812      	ldr	r2, [r2, #0]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd90      	pop	{r4, r7, pc}
 8003b26:	bf00      	nop
 8003b28:	000186a0 	.word	0x000186a0
 8003b2c:	001e847f 	.word	0x001e847f
 8003b30:	003d08ff 	.word	0x003d08ff
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d129      	bne.n	8003ba6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2224      	movs	r2, #36	; 0x24
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b74:	f022 0210 	bic.w	r2, r2, #16
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b20      	cmp	r3, #32
 8003bcc:	d12a      	bne.n	8003c24 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2224      	movs	r2, #36	; 0x24
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003bee:	89fb      	ldrh	r3, [r7, #14]
 8003bf0:	f023 030f 	bic.w	r3, r3, #15
 8003bf4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	89fb      	ldrh	r3, [r7, #14]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	89fa      	ldrh	r2, [r7, #14]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0bf      	b.n	8003dc6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f003 fb7e 	bl	800735c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	6992      	ldr	r2, [r2, #24]
 8003c72:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c76:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	6991      	ldr	r1, [r2, #24]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6850      	ldr	r0, [r2, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6892      	ldr	r2, [r2, #8]
 8003c8a:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c90:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6912      	ldr	r2, [r2, #16]
 8003c96:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_LTDC_Init+0x19c>)
 8003ca8:	400b      	ands	r3, r1
 8003caa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	6891      	ldr	r1, [r2, #8]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6990      	ldr	r0, [r2, #24]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4302      	orrs	r2, r0
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68d9      	ldr	r1, [r3, #12]
 8003cd4:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_LTDC_Init+0x19c>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6812      	ldr	r2, [r2, #0]
 8003cea:	68d1      	ldr	r1, [r2, #12]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6a10      	ldr	r0, [r2, #32]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4302      	orrs	r2, r0
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6919      	ldr	r1, [r3, #16]
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <HAL_LTDC_Init+0x19c>)
 8003d04:	400b      	ands	r3, r1
 8003d06:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	6911      	ldr	r1, [r2, #16]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4302      	orrs	r2, r0
 8003d22:	430a      	orrs	r2, r1
 8003d24:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6959      	ldr	r1, [r3, #20]
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_LTDC_Init+0x19c>)
 8003d32:	400b      	ands	r3, r1
 8003d34:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6951      	ldr	r1, [r2, #20]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4302      	orrs	r2, r0
 8003d50:	430a      	orrs	r2, r1
 8003d52:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d5a:	021b      	lsls	r3, r3, #8
 8003d5c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d64:	041b      	lsls	r3, r3, #16
 8003d66:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d72:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6812      	ldr	r2, [r2, #0]
 8003d80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4302      	orrs	r2, r0
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8003d8e:	4302      	orrs	r2, r0
 8003d90:	430a      	orrs	r2, r1
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d9e:	f042 0206 	orr.w	r2, r2, #6
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	6992      	ldr	r2, [r2, #24]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	f000f800 	.word	0xf000f800

08003dd4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d023      	beq.n	8003e3e <HAL_LTDC_IRQHandler+0x6a>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0304 	and.w	r3, r3, #4
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d01e      	beq.n	8003e3e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e0a:	f022 0204 	bic.w	r2, r2, #4
 8003e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2204      	movs	r2, #4
 8003e16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f86f 	bl	8003f1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d023      	beq.n	8003e90 <HAL_LTDC_IRQHandler+0xbc>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01e      	beq.n	8003e90 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e5c:	f022 0202 	bic.w	r2, r2, #2
 8003e60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2202      	movs	r2, #2
 8003e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2204      	movs	r2, #4
 8003e7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f846 	bl	8003f1c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01b      	beq.n	8003ed2 <HAL_LTDC_IRQHandler+0xfe>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d016      	beq.n	8003ed2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f82f 	bl	8003f30 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <HAL_LTDC_IRQHandler+0x140>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d016      	beq.n	8003f14 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ef0:	f022 0208 	bic.w	r2, r2, #8
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2208      	movs	r2, #8
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f818 	bl	8003f44 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_LTDC_ConfigLayer+0x1a>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	e02c      	b.n	8003fcc <HAL_LTDC_ConfigLayer+0x74>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2134      	movs	r1, #52	; 0x34
 8003f88:	fb01 f303 	mul.w	r3, r1, r3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	4614      	mov	r4, r2
 8003f96:	461d      	mov	r5, r3
 8003f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f83b 	bl	8004028 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bdb0      	pop	{r4, r5, r7, pc}

08003fd4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_LTDC_EnableDither+0x16>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e016      	b.n	8004018 <HAL_LTDC_EnableDither+0x44>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <HAL_LTDC_EnableDither+0x50>)
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <HAL_LTDC_EnableDither+0x50>)
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40016800 	.word	0x40016800

08004028 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	4413      	add	r3, r2
 8004046:	041b      	lsls	r3, r3, #16
 8004048:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	4413      	add	r3, r2
 8004056:	3384      	adds	r3, #132	; 0x84
 8004058:	461a      	mov	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	01db      	lsls	r3, r3, #7
 8004064:	440b      	add	r3, r1
 8004066:	3384      	adds	r3, #132	; 0x84
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800406e:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	461a      	mov	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	01db      	lsls	r3, r3, #7
 800407a:	4413      	add	r3, r2
 800407c:	3384      	adds	r3, #132	; 0x84
 800407e:	4619      	mov	r1, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004090:	4413      	add	r3, r2
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a8:	4413      	add	r3, r2
 80040aa:	041b      	lsls	r3, r3, #16
 80040ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	01db      	lsls	r3, r3, #7
 80040b8:	4413      	add	r3, r2
 80040ba:	3384      	adds	r3, #132	; 0x84
 80040bc:	461a      	mov	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	440b      	add	r3, r1
 80040ca:	3384      	adds	r3, #132	; 0x84
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80040d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	01db      	lsls	r3, r3, #7
 80040de:	4413      	add	r3, r2
 80040e0:	3384      	adds	r3, #132	; 0x84
 80040e2:	4619      	mov	r1, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040f2:	4413      	add	r3, r2
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	01db      	lsls	r3, r3, #7
 8004106:	4413      	add	r3, r2
 8004108:	3384      	adds	r3, #132	; 0x84
 800410a:	461a      	mov	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4619      	mov	r1, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	01db      	lsls	r3, r3, #7
 8004116:	440b      	add	r3, r1
 8004118:	3384      	adds	r3, #132	; 0x84
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	f023 0307 	bic.w	r3, r3, #7
 8004120:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	01db      	lsls	r3, r3, #7
 800412c:	4413      	add	r3, r2
 800412e:	3384      	adds	r3, #132	; 0x84
 8004130:	461a      	mov	r2, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	061b      	lsls	r3, r3, #24
 8004152:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	01db      	lsls	r3, r3, #7
 800415e:	4413      	add	r3, r2
 8004160:	3384      	adds	r3, #132	; 0x84
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	01db      	lsls	r3, r3, #7
 800416e:	4413      	add	r3, r2
 8004170:	3384      	adds	r3, #132	; 0x84
 8004172:	461a      	mov	r2, r3
 8004174:	2300      	movs	r3, #0
 8004176:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	01db      	lsls	r3, r3, #7
 8004182:	4413      	add	r3, r2
 8004184:	3384      	adds	r3, #132	; 0x84
 8004186:	4619      	mov	r1, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800418e:	461a      	mov	r2, r3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	431a      	orrs	r2, r3
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	431a      	orrs	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	4413      	add	r3, r2
 80041aa:	3384      	adds	r3, #132	; 0x84
 80041ac:	461a      	mov	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4619      	mov	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	440b      	add	r3, r1
 80041ba:	3384      	adds	r3, #132	; 0x84
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	01db      	lsls	r3, r3, #7
 80041ce:	4413      	add	r3, r2
 80041d0:	3384      	adds	r3, #132	; 0x84
 80041d2:	461a      	mov	r2, r3
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	01db      	lsls	r3, r3, #7
 80041e4:	4413      	add	r3, r2
 80041e6:	3384      	adds	r3, #132	; 0x84
 80041e8:	461a      	mov	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	01db      	lsls	r3, r3, #7
 80041f4:	440b      	add	r3, r1
 80041f6:	3384      	adds	r3, #132	; 0x84
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80041fe:	f023 0307 	bic.w	r3, r3, #7
 8004202:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	01db      	lsls	r3, r3, #7
 800420e:	4413      	add	r3, r2
 8004210:	3384      	adds	r3, #132	; 0x84
 8004212:	4619      	mov	r1, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	4313      	orrs	r3, r2
 800421e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	01db      	lsls	r3, r3, #7
 800422a:	4413      	add	r3, r2
 800422c:	3384      	adds	r3, #132	; 0x84
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	; 0x84
 800423e:	461a      	mov	r2, r3
 8004240:	2300      	movs	r3, #0
 8004242:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	01db      	lsls	r3, r3, #7
 800424e:	4413      	add	r3, r2
 8004250:	3384      	adds	r3, #132	; 0x84
 8004252:	461a      	mov	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8004262:	2304      	movs	r3, #4
 8004264:	61fb      	str	r3, [r7, #28]
 8004266:	e01b      	b.n	80042a0 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d102      	bne.n	8004276 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004270:	2303      	movs	r3, #3
 8004272:	61fb      	str	r3, [r7, #28]
 8004274:	e014      	b.n	80042a0 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b04      	cmp	r3, #4
 800427c:	d00b      	beq.n	8004296 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004282:	2b02      	cmp	r3, #2
 8004284:	d007      	beq.n	8004296 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800428a:	2b03      	cmp	r3, #3
 800428c:	d003      	beq.n	8004296 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004292:	2b07      	cmp	r3, #7
 8004294:	d102      	bne.n	800429c <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8004296:	2302      	movs	r3, #2
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	e001      	b.n	80042a0 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	461a      	mov	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	01db      	lsls	r3, r3, #7
 80042aa:	4413      	add	r3, r2
 80042ac:	3384      	adds	r3, #132	; 0x84
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4619      	mov	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	01db      	lsls	r3, r3, #7
 80042ba:	440b      	add	r3, r1
 80042bc:	3384      	adds	r3, #132	; 0x84
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	01db      	lsls	r3, r3, #7
 80042d0:	4413      	add	r3, r2
 80042d2:	3384      	adds	r3, #132	; 0x84
 80042d4:	4618      	mov	r0, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	041a      	lsls	r2, r3, #16
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	6859      	ldr	r1, [r3, #4]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	1acb      	subs	r3, r1, r3
 80042ec:	69f9      	ldr	r1, [r7, #28]
 80042ee:	fb01 f303 	mul.w	r3, r1, r3
 80042f2:	3303      	adds	r3, #3
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	01db      	lsls	r3, r3, #7
 8004302:	4413      	add	r3, r2
 8004304:	3384      	adds	r3, #132	; 0x84
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4619      	mov	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	01db      	lsls	r3, r3, #7
 8004312:	440b      	add	r3, r1
 8004314:	3384      	adds	r3, #132	; 0x84
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	01db      	lsls	r3, r3, #7
 800432c:	4413      	add	r3, r2
 800432e:	3384      	adds	r3, #132	; 0x84
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	01db      	lsls	r3, r3, #7
 8004342:	4413      	add	r3, r2
 8004344:	3384      	adds	r3, #132	; 0x84
 8004346:	461a      	mov	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	01db      	lsls	r3, r3, #7
 8004352:	440b      	add	r3, r1
 8004354:	3384      	adds	r3, #132	; 0x84
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	6013      	str	r3, [r2, #0]
}
 800435e:	bf00      	nop
 8004360:	3724      	adds	r7, #36	; 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	603b      	str	r3, [r7, #0]
 800437a:	4a20      	ldr	r2, [pc, #128]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <HAL_PWREx_EnableOverDrive+0x90>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_PWREx_EnableOverDrive+0x94>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004398:	f7fe f954 	bl	8002644 <HAL_GetTick>
 800439c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800439e:	e009      	b.n	80043b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043a0:	f7fe f950 	bl	8002644 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ae:	d901      	bls.n	80043b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e01f      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_PWREx_EnableOverDrive+0x98>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d1ee      	bne.n	80043a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_PWREx_EnableOverDrive+0x9c>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043c8:	f7fe f93c 	bl	8002644 <HAL_GetTick>
 80043cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043ce:	e009      	b.n	80043e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043d0:	f7fe f938 	bl	8002644 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043de:	d901      	bls.n	80043e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e007      	b.n	80043f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <HAL_PWREx_EnableOverDrive+0x98>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f0:	d1ee      	bne.n	80043d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	420e0040 	.word	0x420e0040
 8004404:	40007000 	.word	0x40007000
 8004408:	420e0044 	.word	0x420e0044

0800440c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e22d      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442a:	4ba3      	ldr	r3, [pc, #652]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d00c      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004436:	4ba0      	ldr	r3, [pc, #640]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443e:	2b08      	cmp	r3, #8
 8004440:	d112      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b9d      	ldr	r3, [pc, #628]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b99      	ldr	r3, [pc, #612]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e208      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4a91      	ldr	r2, [pc, #580]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	4b90      	ldr	r3, [pc, #576]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4a8b      	ldr	r2, [pc, #556]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800448c:	4b8a      	ldr	r3, [pc, #552]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4a88      	ldr	r2, [pc, #544]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	4b87      	ldr	r3, [pc, #540]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4a84      	ldr	r2, [pc, #528]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044a6:	4b84      	ldr	r3, [pc, #528]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4a81      	ldr	r2, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fe f8be 	bl	8002644 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe f8ba 	bl	8002644 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e1cd      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe f8aa 	bl	8002644 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fe f8a6 	bl	8002644 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e1b9      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004506:	4b6c      	ldr	r3, [pc, #432]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d063      	beq.n	80045ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004522:	4b65      	ldr	r3, [pc, #404]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00b      	beq.n	8004546 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452e:	4b62      	ldr	r3, [pc, #392]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d11c      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b5f      	ldr	r3, [pc, #380]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d116      	bne.n	8004574 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004546:	4b5c      	ldr	r3, [pc, #368]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d001      	beq.n	800455e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e18d      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455e:	4956      	ldr	r1, [pc, #344]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004560:	4b55      	ldr	r3, [pc, #340]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	e03a      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d020      	beq.n	80045be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800457c:	4b4f      	ldr	r3, [pc, #316]	; (80046bc <HAL_RCC_OscConfig+0x2b0>)
 800457e:	2201      	movs	r2, #1
 8004580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004582:	f7fe f85f 	bl	8002644 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458a:	f7fe f85b 	bl	8002644 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e16e      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459c:	4b46      	ldr	r3, [pc, #280]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0f0      	beq.n	800458a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a8:	4943      	ldr	r1, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]
 80045bc:	e015      	b.n	80045ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045be:	4b3f      	ldr	r3, [pc, #252]	; (80046bc <HAL_RCC_OscConfig+0x2b0>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fe f83e 	bl	8002644 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fe f83a 	bl	8002644 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e14d      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d030      	beq.n	8004658 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d016      	beq.n	800462c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fe:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCC_OscConfig+0x2b4>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004604:	f7fe f81e 	bl	8002644 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800460c:	f7fe f81a 	bl	8002644 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e12d      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461e:	4b26      	ldr	r3, [pc, #152]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
 800462a:	e015      	b.n	8004658 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462c:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCC_OscConfig+0x2b4>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fe f807 	bl	8002644 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800463a:	f7fe f803 	bl	8002644 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e116      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800464e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a0 	beq.w	80047a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	4a0f      	ldr	r2, [pc, #60]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	4b0e      	ldr	r3, [pc, #56]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004684:	6413      	str	r3, [r2, #64]	; 0x40
 8004686:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004692:	2301      	movs	r3, #1
 8004694:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d121      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 80046a4:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <HAL_RCC_OscConfig+0x2b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ae:	f7fd ffc9 	bl	8002644 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b4:	e011      	b.n	80046da <HAL_RCC_OscConfig+0x2ce>
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800
 80046bc:	42470000 	.word	0x42470000
 80046c0:	42470e80 	.word	0x42470e80
 80046c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c8:	f7fd ffbc 	bl	8002644 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0cf      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046da:	4b6a      	ldr	r3, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x478>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x2f0>
 80046ee:	4a66      	ldr	r2, [pc, #408]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 80046f0:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	e01c      	b.n	8004736 <HAL_RCC_OscConfig+0x32a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d10c      	bne.n	800471e <HAL_RCC_OscConfig+0x312>
 8004704:	4a60      	ldr	r2, [pc, #384]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004706:	4b60      	ldr	r3, [pc, #384]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	4a5d      	ldr	r2, [pc, #372]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004712:	4b5d      	ldr	r3, [pc, #372]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
 800471c:	e00b      	b.n	8004736 <HAL_RCC_OscConfig+0x32a>
 800471e:	4a5a      	ldr	r2, [pc, #360]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004720:	4b59      	ldr	r3, [pc, #356]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	6713      	str	r3, [r2, #112]	; 0x70
 800472a:	4a57      	ldr	r2, [pc, #348]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800472c:	4b56      	ldr	r3, [pc, #344]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f023 0304 	bic.w	r3, r3, #4
 8004734:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d015      	beq.n	800476a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473e:	f7fd ff81 	bl	8002644 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004744:	e00a      	b.n	800475c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004746:	f7fd ff7d 	bl	8002644 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	f241 3288 	movw	r2, #5000	; 0x1388
 8004754:	4293      	cmp	r3, r2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e08e      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475c:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ee      	beq.n	8004746 <HAL_RCC_OscConfig+0x33a>
 8004768:	e014      	b.n	8004794 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fd ff6b 	bl	8002644 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fd ff67 	bl	8002644 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e078      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004788:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800478a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ee      	bne.n	8004772 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479a:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d064      	beq.n	8004878 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ae:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d05c      	beq.n	8004874 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d141      	bne.n	8004846 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b32      	ldr	r3, [pc, #200]	; (800488c <HAL_RCC_OscConfig+0x480>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fd ff3c 	bl	8002644 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd ff38 	bl	8002644 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e04b      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047ee:	4926      	ldr	r1, [pc, #152]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69da      	ldr	r2, [r3, #28]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	019b      	lsls	r3, r3, #6
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004806:	085b      	lsrs	r3, r3, #1
 8004808:	3b01      	subs	r3, #1
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	061b      	lsls	r3, r3, #24
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004818:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_RCC_OscConfig+0x480>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481e:	f7fd ff11 	bl	8002644 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	e008      	b.n	8004838 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004826:	f7fd ff0d 	bl	8002644 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e020      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0f0      	beq.n	8004826 <HAL_RCC_OscConfig+0x41a>
 8004844:	e018      	b.n	8004878 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_RCC_OscConfig+0x480>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fd fefa 	bl	8002644 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fef6 	bl	8002644 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e009      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_RCC_OscConfig+0x47c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x448>
 8004872:	e001      	b.n	8004878 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e000      	b.n	800487a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40007000 	.word	0x40007000
 8004888:	40023800 	.word	0x40023800
 800488c:	42470060 	.word	0x42470060

08004890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0ca      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048a4:	4b67      	ldr	r3, [pc, #412]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d20c      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b2:	4b64      	ldr	r3, [pc, #400]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e0b6      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048e4:	4a58      	ldr	r2, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048e6:	4b58      	ldr	r3, [pc, #352]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048fc:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80048fe:	4b52      	ldr	r3, [pc, #328]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004908:	494f      	ldr	r1, [pc, #316]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 800490a:	4b4f      	ldr	r3, [pc, #316]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d044      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d119      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e07d      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d003      	beq.n	800494e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494a:	2b03      	cmp	r3, #3
 800494c:	d107      	bne.n	800495e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494e:	4b3e      	ldr	r3, [pc, #248]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e06d      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800495e:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e065      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800496e:	4936      	ldr	r1, [pc, #216]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004970:	4b35      	ldr	r3, [pc, #212]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 0203 	bic.w	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4313      	orrs	r3, r2
 800497e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004980:	f7fd fe60 	bl	8002644 <HAL_GetTick>
 8004984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	e00a      	b.n	800499e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004988:	f7fd fe5c 	bl	8002644 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e04d      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 020c 	and.w	r2, r3, #12
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d1eb      	bne.n	8004988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b0:	4b24      	ldr	r3, [pc, #144]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 020f 	and.w	r2, r3, #15
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d90c      	bls.n	80049d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049c6:	4b1f      	ldr	r3, [pc, #124]	; (8004a44 <HAL_RCC_ClockConfig+0x1b4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 020f 	and.w	r2, r3, #15
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d001      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e030      	b.n	8004a3a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4918      	ldr	r1, [pc, #96]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a02:	4911      	ldr	r1, [pc, #68]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a16:	f000 f81d 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	091b      	lsrs	r3, r3, #4
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a32:	2000      	movs	r0, #0
 8004a34:	f003 ff12 	bl	800885c <HAL_InitTick>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	40023c00 	.word	0x40023c00
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	0800b858 	.word	0x0800b858
 8004a50:	20000048 	.word	0x20000048

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a58:	b08f      	sub	sp, #60	; 0x3c
 8004a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a60:	2300      	movs	r3, #0
 8004a62:	637b      	str	r3, [r7, #52]	; 0x34
 8004a64:	2300      	movs	r3, #0
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 030c 	and.w	r3, r3, #12
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d007      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x34>
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 80b2 	bne.w	8004be6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a82:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a84:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8004a86:	e0b1      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004a8c:	e0ae      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8e:	4b5a      	ldr	r3, [pc, #360]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a98:	4b57      	ldr	r3, [pc, #348]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d04e      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa4:	4b54      	ldr	r3, [pc, #336]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	099b      	lsrs	r3, r3, #6
 8004aaa:	f04f 0400 	mov.w	r4, #0
 8004aae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	ea01 0103 	and.w	r1, r1, r3
 8004aba:	ea02 0204 	and.w	r2, r2, r4
 8004abe:	460b      	mov	r3, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	0160      	lsls	r0, r4, #5
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ac8:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24
 8004ace:	015b      	lsls	r3, r3, #5
 8004ad0:	623b      	str	r3, [r7, #32]
 8004ad2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8004adc:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8004ae0:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8004ae4:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8004ae8:	ebb8 0803 	subs.w	r8, r8, r3
 8004aec:	eb69 0904 	sbc.w	r9, r9, r4
 8004af0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afc:	61fb      	str	r3, [r7, #28]
 8004afe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8004b08:	eb18 0801 	adds.w	r8, r8, r1
 8004b0c:	eb49 0902 	adc.w	r9, r9, r2
 8004b10:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8004b28:	4640      	mov	r0, r8
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4623      	mov	r3, r4
 8004b36:	f7fb ff9d 	bl	8000a74 <__aeabi_uldivmod>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b40:	e043      	b.n	8004bca <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	f04f 0400 	mov.w	r4, #0
 8004b4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b50:	f04f 0200 	mov.w	r2, #0
 8004b54:	ea01 0103 	and.w	r1, r1, r3
 8004b58:	ea02 0204 	and.w	r2, r2, r4
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4614      	mov	r4, r2
 8004b60:	0160      	lsls	r0, r4, #5
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b74:	1a5b      	subs	r3, r3, r1
 8004b76:	eb64 0402 	sbc.w	r4, r4, r2
 8004b7a:	01a6      	lsls	r6, r4, #6
 8004b7c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8004b80:	019d      	lsls	r5, r3, #6
 8004b82:	1aed      	subs	r5, r5, r3
 8004b84:	eb66 0604 	sbc.w	r6, r6, r4
 8004b88:	00f3      	lsls	r3, r6, #3
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004b92:	607b      	str	r3, [r7, #4]
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	e897 0060 	ldmia.w	r7, {r5, r6}
 8004b9c:	186d      	adds	r5, r5, r1
 8004b9e:	eb46 0602 	adc.w	r6, r6, r2
 8004ba2:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8004ba6:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8004baa:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8004bae:	4655      	mov	r5, sl
 8004bb0:	465e      	mov	r6, fp
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	4631      	mov	r1, r6
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	f04f 0400 	mov.w	r4, #0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4623      	mov	r3, r4
 8004bc0:	f7fb ff58 	bl	8000a74 <__aeabi_uldivmod>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8004bda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004be4:	e002      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004be8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004bea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	373c      	adds	r7, #60	; 0x3c
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	007a1200 	.word	0x007a1200

08004c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c08:	4b03      	ldr	r3, [pc, #12]	; (8004c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000048 	.word	0x20000048

08004c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c20:	f7ff fff0 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c24:	4601      	mov	r1, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	0a9b      	lsrs	r3, r3, #10
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c32:	5cd3      	ldrb	r3, [r2, r3]
 8004c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	0800b868 	.word	0x0800b868

08004c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c48:	f7ff ffdc 	bl	8004c04 <HAL_RCC_GetHCLKFreq>
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0b5b      	lsrs	r3, r3, #13
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4a03      	ldr	r2, [pc, #12]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800b868 	.word	0x0800b868

08004c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	220f      	movs	r2, #15
 8004c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c7c:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0203 	and.w	r2, r3, #3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c94:	4b0c      	ldr	r3, [pc, #48]	; (8004cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	08db      	lsrs	r3, r3, #3
 8004ca6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cae:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <HAL_RCC_GetClockConfig+0x60>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40023c00 	.word	0x40023c00

08004cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d061      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cf8:	4ba3      	ldr	r3, [pc, #652]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cfe:	f7fd fca1 	bl	8002644 <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d06:	f7fd fc9d 	bl	8002644 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e177      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d18:	4b9c      	ldr	r3, [pc, #624]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d009      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d30:	4996      	ldr	r1, [pc, #600]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	019a      	lsls	r2, r3, #6
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01f      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d50:	4b8e      	ldr	r3, [pc, #568]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d56:	0f1b      	lsrs	r3, r3, #28
 8004d58:	f003 0307 	and.w	r3, r3, #7
 8004d5c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004d5e:	498b      	ldr	r1, [pc, #556]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	019a      	lsls	r2, r3, #6
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	071b      	lsls	r3, r3, #28
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d78:	4984      	ldr	r1, [pc, #528]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d7a:	4b84      	ldr	r3, [pc, #528]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d80:	f023 021f 	bic.w	r2, r3, #31
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d90:	4b7d      	ldr	r3, [pc, #500]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d96:	f7fd fc55 	bl	8002644 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d9e:	f7fd fc51 	bl	8002644 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e12b      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004db0:	4b76      	ldr	r3, [pc, #472]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0f0      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d079      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004dd4:	4b6e      	ldr	r3, [pc, #440]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dda:	f7fd fc33 	bl	8002644 <HAL_GetTick>
 8004dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004de2:	f7fd fc2f 	bl	8002644 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e109      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004df4:	4b65      	ldr	r3, [pc, #404]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e00:	d0ef      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d020      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e0e:	4b5f      	ldr	r3, [pc, #380]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e14:	0f1b      	lsrs	r3, r3, #28
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e1c:	495b      	ldr	r1, [pc, #364]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	019a      	lsls	r2, r3, #6
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	071b      	lsls	r3, r3, #28
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e36:	4955      	ldr	r1, [pc, #340]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e38:	4b54      	ldr	r3, [pc, #336]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01e      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e5c:	4b4b      	ldr	r3, [pc, #300]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e62:	0e1b      	lsrs	r3, r3, #24
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e6a:	4948      	ldr	r1, [pc, #288]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	019a      	lsls	r2, r3, #6
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e84:	4941      	ldr	r1, [pc, #260]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e86:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e9a:	4b3d      	ldr	r3, [pc, #244]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fbd0 	bl	8002644 <HAL_GetTick>
 8004ea4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ea8:	f7fd fbcc 	bl	8002644 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e0a6      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004eba:	4b34      	ldr	r3, [pc, #208]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec6:	d1ef      	bne.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 808d 	beq.w	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	4a2c      	ldr	r2, [pc, #176]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee6:	4b29      	ldr	r3, [pc, #164]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ef2:	4a28      	ldr	r2, [pc, #160]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004efe:	f7fd fba1 	bl	8002644 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f04:	e008      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f06:	f7fd fb9d 	bl	8002644 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d901      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e077      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0f0      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f24:	4b19      	ldr	r3, [pc, #100]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f2c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d039      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d032      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f4a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d11e      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fd fb6b 	bl	8002644 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f70:	e014      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f72:	f7fd fb67 	bl	8002644 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d90b      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e03f      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004f88:	42470068 	.word	0x42470068
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	42470070 	.word	0x42470070
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0e4      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb4:	d10d      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004fb6:	4916      	ldr	r1, [pc, #88]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fb8:	4b15      	ldr	r3, [pc, #84]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]
 8004fd0:	e005      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fdc:	6093      	str	r3, [r2, #8]
 8004fde:	490c      	ldr	r1, [pc, #48]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004fe2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fec:	4313      	orrs	r3, r2
 8004fee:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d004      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ffc:	4a05      	ldr	r2, [pc, #20]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005004:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40023800 	.word	0x40023800
 8005014:	424711e0 	.word	0x424711e0

08005018 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e025      	b.n	8005078 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f001 ff3f 	bl	8006ec4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f001 fc8d 	bl	8006978 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	461a      	mov	r2, r3
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	f001 fcf8 	bl	8006a5e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d101      	bne.n	800509c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
 800509a:	e018      	b.n	80050ce <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f001 fd55 	bl	8006b5c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d104      	bne.n	80050c4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2205      	movs	r2, #5
 80050be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80050c2:	e003      	b.n	80050cc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
 80050de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d101      	bne.n	80050f0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
 80050ee:	e00e      	b.n	800510e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f001 fd68 	bl	8006bd4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e055      	b.n	80051d4 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f003 fafc 	bl	8008740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6851      	ldr	r1, [r2, #4]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6892      	ldr	r2, [r2, #8]
 800516c:	4311      	orrs	r1, r2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	68d2      	ldr	r2, [r2, #12]
 8005172:	4311      	orrs	r1, r2
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6912      	ldr	r2, [r2, #16]
 8005178:	4311      	orrs	r1, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6952      	ldr	r2, [r2, #20]
 800517e:	4311      	orrs	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6992      	ldr	r2, [r2, #24]
 8005184:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	69d2      	ldr	r2, [r2, #28]
 800518e:	4311      	orrs	r1, r2
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6a12      	ldr	r2, [r2, #32]
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800519a:	430a      	orrs	r2, r1
 800519c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6992      	ldr	r2, [r2, #24]
 80051a6:	0c12      	lsrs	r2, r2, #16
 80051a8:	f002 0104 	and.w	r1, r2, #4
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	69d2      	ldr	r2, [r2, #28]
 80051be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e01a      	b.n	8005224 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	6812      	ldr	r2, [r2, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005204:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f003 fae2 	bl	80087d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_SPI_Transmit+0x22>
 800524a:	2302      	movs	r3, #2
 800524c:	e11c      	b.n	8005488 <HAL_SPI_Transmit+0x25c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fd f9f5 	bl	8002644 <HAL_GetTick>
 800525a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005270:	e101      	b.n	8005476 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_Transmit+0x52>
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005282:	e0f8      	b.n	8005476 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2203      	movs	r2, #3
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ca:	d107      	bne.n	80052dc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e6:	2b40      	cmp	r3, #64	; 0x40
 80052e8:	d007      	beq.n	80052fa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6812      	ldr	r2, [r2, #0]
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005302:	d14b      	bne.n	800539c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d002      	beq.n	8005312 <HAL_SPI_Transmit+0xe6>
 800530c:	8afb      	ldrh	r3, [r7, #22]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d13e      	bne.n	8005390 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	1c9a      	adds	r2, r3, #2
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005336:	e02b      	b.n	8005390 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d112      	bne.n	800536c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800534e:	8812      	ldrh	r2, [r2, #0]
 8005350:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005356:	1c9a      	adds	r2, r3, #2
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	86da      	strh	r2, [r3, #54]	; 0x36
 800536a:	e011      	b.n	8005390 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800536c:	f7fd f96a 	bl	8002644 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	1ad2      	subs	r2, r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d303      	bcc.n	8005384 <HAL_SPI_Transmit+0x158>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d102      	bne.n	800538a <HAL_SPI_Transmit+0x15e>
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d102      	bne.n	8005390 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800538e:	e072      	b.n	8005476 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ce      	bne.n	8005338 <HAL_SPI_Transmit+0x10c>
 800539a:	e04c      	b.n	8005436 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_SPI_Transmit+0x17e>
 80053a4:	8afb      	ldrh	r3, [r7, #22]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d140      	bne.n	800542c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053b4:	7812      	ldrb	r2, [r2, #0]
 80053b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053d0:	e02c      	b.n	800542c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d113      	bne.n	8005408 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	330c      	adds	r3, #12
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053ea:	7812      	ldrb	r2, [r2, #0]
 80053ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	86da      	strh	r2, [r3, #54]	; 0x36
 8005406:	e011      	b.n	800542c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005408:	f7fd f91c 	bl	8002644 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	1ad2      	subs	r2, r2, r3
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d303      	bcc.n	8005420 <HAL_SPI_Transmit+0x1f4>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541e:	d102      	bne.n	8005426 <HAL_SPI_Transmit+0x1fa>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	77fb      	strb	r3, [r7, #31]
          goto error;
 800542a:	e024      	b.n	8005476 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005430:	b29b      	uxth	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1cd      	bne.n	80053d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 fb7b 	bl	8005b36 <SPI_EndRxTxTransaction>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d002      	beq.n	800544c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2220      	movs	r2, #32
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005454:	2300      	movs	r3, #0
 8005456:	613b      	str	r3, [r7, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005486:	7ffb      	ldrb	r3, [r7, #31]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3720      	adds	r7, #32
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af02      	add	r7, sp, #8
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	603b      	str	r3, [r7, #0]
 800549c:	4613      	mov	r3, r2
 800549e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ac:	d112      	bne.n	80054d4 <HAL_SPI_Receive+0x44>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10e      	bne.n	80054d4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2204      	movs	r2, #4
 80054ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f8e6 	bl	800569c <HAL_SPI_TransmitReceive>
 80054d0:	4603      	mov	r3, r0
 80054d2:	e0df      	b.n	8005694 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_SPI_Receive+0x52>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0d8      	b.n	8005694 <HAL_SPI_Receive+0x204>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054ea:	f7fd f8ab 	bl	8002644 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005500:	e0bf      	b.n	8005682 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d002      	beq.n	800550e <HAL_SPI_Receive+0x7e>
 8005508:	88fb      	ldrh	r3, [r7, #6]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005512:	e0b6      	b.n	8005682 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2204      	movs	r2, #4
 8005518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	88fa      	ldrh	r2, [r7, #6]
 800552c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800555a:	d107      	bne.n	800556c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800556a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d007      	beq.n	800558a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	6812      	ldr	r2, [r2, #0]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005588:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d161      	bne.n	8005656 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005592:	e02d      	b.n	80055f0 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d114      	bne.n	80055cc <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	320c      	adds	r2, #12
 80055ac:	7812      	ldrb	r2, [r2, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055ca:	e011      	b.n	80055f0 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055cc:	f7fd f83a 	bl	8002644 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d303      	bcc.n	80055e4 <HAL_SPI_Receive+0x154>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Receive+0x15a>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d102      	bne.n	80055f0 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055ee:	e048      	b.n	8005682 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1cc      	bne.n	8005594 <HAL_SPI_Receive+0x104>
 80055fa:	e031      	b.n	8005660 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d113      	bne.n	8005632 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	68d2      	ldr	r2, [r2, #12]
 8005614:	b292      	uxth	r2, r2
 8005616:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	1c9a      	adds	r2, r3, #2
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005630:	e011      	b.n	8005656 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005632:	f7fd f807 	bl	8002644 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad2      	subs	r2, r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d303      	bcc.n	800564a <HAL_SPI_Receive+0x1ba>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d102      	bne.n	8005650 <HAL_SPI_Receive+0x1c0>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005654:	e015      	b.n	8005682 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800565a:	b29b      	uxth	r3, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1cd      	bne.n	80055fc <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fa31 	bl	8005acc <SPI_EndRxTransaction>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056aa:	2301      	movs	r3, #1
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_SPI_TransmitReceive+0x26>
 80056be:	2302      	movs	r3, #2
 80056c0:	e188      	b.n	80059d4 <HAL_SPI_TransmitReceive+0x338>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ca:	f7fc ffbb 	bl	8002644 <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d00f      	beq.n	800570c <HAL_SPI_TransmitReceive+0x70>
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f2:	d107      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d103      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x68>
 80056fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005700:	2b04      	cmp	r3, #4
 8005702:	d003      	beq.n	800570c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005704:	2302      	movs	r3, #2
 8005706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800570a:	e159      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <HAL_SPI_TransmitReceive+0x82>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_SPI_TransmitReceive+0x82>
 8005718:	887b      	ldrh	r3, [r7, #2]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d103      	bne.n	8005726 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005724:	e14c      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b04      	cmp	r3, #4
 8005730:	d003      	beq.n	800573a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2205      	movs	r2, #5
 8005736:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	887a      	ldrh	r2, [r7, #2]
 800574a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	887a      	ldrh	r2, [r7, #2]
 8005750:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	887a      	ldrh	r2, [r7, #2]
 800575c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	887a      	ldrh	r2, [r7, #2]
 8005762:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d007      	beq.n	800578e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	6812      	ldr	r2, [r2, #0]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005796:	d178      	bne.n	800588a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <HAL_SPI_TransmitReceive+0x10a>
 80057a0:	8b7b      	ldrh	r3, [r7, #26]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d166      	bne.n	8005874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057ae:	8812      	ldrh	r2, [r2, #0]
 80057b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057ca:	e053      	b.n	8005874 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d11b      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x176>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d016      	beq.n	8005812 <HAL_SPI_TransmitReceive+0x176>
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d113      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057f2:	8812      	ldrh	r2, [r2, #0]
 80057f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b01      	cmp	r3, #1
 800581e:	d119      	bne.n	8005854 <HAL_SPI_TransmitReceive+0x1b8>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d014      	beq.n	8005854 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	68d2      	ldr	r2, [r2, #12]
 8005834:	b292      	uxth	r2, r2
 8005836:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583c:	1c9a      	adds	r2, r3, #2
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005850:	2301      	movs	r3, #1
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005854:	f7fc fef6 	bl	8002644 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1ad2      	subs	r2, r2, r3
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	429a      	cmp	r2, r3
 8005862:	d307      	bcc.n	8005874 <HAL_SPI_TransmitReceive+0x1d8>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d003      	beq.n	8005874 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005872:	e0a5      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1a6      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x130>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005882:	b29b      	uxth	r3, r3
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1a1      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x130>
 8005888:	e07c      	b.n	8005984 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x1fc>
 8005892:	8b7b      	ldrh	r3, [r7, #26]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d16b      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058be:	e057      	b.n	8005970 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d11c      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x26c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d017      	beq.n	8005908 <HAL_SPI_TransmitReceive+0x26c>
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d114      	bne.n	8005908 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	330c      	adds	r3, #12
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d119      	bne.n	800594a <HAL_SPI_TransmitReceive+0x2ae>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d014      	beq.n	800594a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	6812      	ldr	r2, [r2, #0]
 8005928:	68d2      	ldr	r2, [r2, #12]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005946:	2301      	movs	r3, #1
 8005948:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800594a:	f7fc fe7b 	bl	8002644 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	1ad2      	subs	r2, r2, r3
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	429a      	cmp	r2, r3
 8005958:	d303      	bcc.n	8005962 <HAL_SPI_TransmitReceive+0x2c6>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d102      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x2cc>
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800596e:	e027      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1a2      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x224>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597e:	b29b      	uxth	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d19d      	bne.n	80058c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005986:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 f8d4 	bl	8005b36 <SPI_EndRxTxTransaction>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2220      	movs	r2, #32
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059a0:	e00e      	b.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059aa:	2300      	movs	r3, #0
 80059ac:	617b      	str	r3, [r7, #20]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3730      	adds	r7, #48	; 0x30
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ea:	b2db      	uxtb	r3, r3
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a08:	e04c      	b.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d048      	beq.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a12:	f7fc fe17 	bl	8002644 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	1ad2      	subs	r2, r2, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d202      	bcs.n	8005a28 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d13d      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	6852      	ldr	r2, [r2, #4]
 8005a32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a40:	d111      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a4a:	d004      	beq.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	d107      	bne.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6e:	d10f      	bne.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e00f      	b.n	8005ac4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	401a      	ands	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d1a3      	bne.n	8005a0a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af02      	add	r7, sp, #8
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae0:	d111      	bne.n	8005b06 <SPI_EndRxTransaction+0x3a>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005aea:	d004      	beq.n	8005af6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d107      	bne.n	8005b06 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff ff71 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b20:	f043 0220 	orr.w	r2, r3, #32
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b086      	sub	sp, #24
 8005b3a:	af02      	add	r7, sp, #8
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f7ff ff53 	bl	80059f8 <SPI_WaitFlagStateUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	f043 0220 	orr.w	r2, r3, #32
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e000      	b.n	8005b6a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e01d      	b.n	8005bc0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d106      	bne.n	8005b9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f003 f883 	bl	8008ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	f000 fa15 	bl	8005fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d007      	beq.n	8005c02 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6812      	ldr	r2, [r2, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d122      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d11b      	bne.n	8005c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0202 	mvn.w	r2, #2
 8005c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f9a5 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f997 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f9a8 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d122      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	f003 0304 	and.w	r3, r3, #4
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d11b      	bne.n	8005cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0204 	mvn.w	r2, #4
 8005c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f97b 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005cac:	e005      	b.n	8005cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f96d 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f97e 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d122      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d11b      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f06f 0208 	mvn.w	r2, #8
 8005ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d003      	beq.n	8005d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f951 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005d00:	e005      	b.n	8005d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f943 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f954 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d122      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0310 	and.w	r3, r3, #16
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d11b      	bne.n	8005d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0210 	mvn.w	r2, #16
 8005d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2208      	movs	r2, #8
 8005d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f927 	bl	8005fa2 <HAL_TIM_IC_CaptureCallback>
 8005d54:	e005      	b.n	8005d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f919 	bl	8005f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f92a 	bl	8005fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10e      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d107      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0201 	mvn.w	r2, #1
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 fe7a 	bl	8007a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b80      	cmp	r3, #128	; 0x80
 8005da0:	d10e      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dac:	2b80      	cmp	r3, #128	; 0x80
 8005dae:	d107      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fa99 	bl	80062f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b40      	cmp	r3, #64	; 0x40
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f8ef 	bl	8005fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b20      	cmp	r3, #32
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0220 	mvn.w	r2, #32
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa63 	bl	80062de <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIM_ConfigClockSource+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e0a6      	b.n	8005f86 <HAL_TIM_ConfigClockSource+0x166>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d067      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0x120>
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	d80b      	bhi.n	8005e8c <HAL_TIM_ConfigClockSource+0x6c>
 8005e74:	2b10      	cmp	r3, #16
 8005e76:	d073      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d802      	bhi.n	8005e82 <HAL_TIM_ConfigClockSource+0x62>
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06f      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e80:	e078      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d06c      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
 8005e86:	2b30      	cmp	r3, #48	; 0x30
 8005e88:	d06a      	beq.n	8005f60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005e8a:	e073      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e8c:	2b70      	cmp	r3, #112	; 0x70
 8005e8e:	d00d      	beq.n	8005eac <HAL_TIM_ConfigClockSource+0x8c>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d804      	bhi.n	8005e9e <HAL_TIM_ConfigClockSource+0x7e>
 8005e94:	2b50      	cmp	r3, #80	; 0x50
 8005e96:	d033      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0xe0>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d041      	beq.n	8005f20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005e9c:	e06a      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d066      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x152>
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d017      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005eaa:	e063      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f000 f9aa 	bl	8006214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ece:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	609a      	str	r2, [r3, #8]
      break;
 8005ed8:	e04c      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f000 f993 	bl	8006214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	6892      	ldr	r2, [r2, #8]
 8005ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efc:	609a      	str	r2, [r3, #8]
      break;
 8005efe:	e039      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6859      	ldr	r1, [r3, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	f000 f907 	bl	8006120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2150      	movs	r1, #80	; 0x50
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f000 f960 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f1e:	e029      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6818      	ldr	r0, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	f000 f926 	bl	800617e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2160      	movs	r1, #96	; 0x60
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 f950 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f3e:	e019      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f000 f8e7 	bl	8006120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2140      	movs	r1, #64	; 0x40
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 f940 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f5e:	e009      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 f937 	bl	80061de <TIM_ITRx_SetConfig>
      break;
 8005f70:	e000      	b.n	8005f74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005f72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f96:	bf00      	nop
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
	...

08005fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a40      	ldr	r2, [pc, #256]	; (80060f4 <TIM_Base_SetConfig+0x114>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d013      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffe:	d00f      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3d      	ldr	r2, [pc, #244]	; (80060f8 <TIM_Base_SetConfig+0x118>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d00b      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4a3c      	ldr	r2, [pc, #240]	; (80060fc <TIM_Base_SetConfig+0x11c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d007      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a3b      	ldr	r2, [pc, #236]	; (8006100 <TIM_Base_SetConfig+0x120>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d003      	beq.n	8006020 <TIM_Base_SetConfig+0x40>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a3a      	ldr	r2, [pc, #232]	; (8006104 <TIM_Base_SetConfig+0x124>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <TIM_Base_SetConfig+0x114>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006040:	d027      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2c      	ldr	r2, [pc, #176]	; (80060f8 <TIM_Base_SetConfig+0x118>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d023      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <TIM_Base_SetConfig+0x11c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d01f      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <TIM_Base_SetConfig+0x120>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d01b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a29      	ldr	r2, [pc, #164]	; (8006104 <TIM_Base_SetConfig+0x124>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d017      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a28      	ldr	r2, [pc, #160]	; (8006108 <TIM_Base_SetConfig+0x128>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a27      	ldr	r2, [pc, #156]	; (800610c <TIM_Base_SetConfig+0x12c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d00f      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a26      	ldr	r2, [pc, #152]	; (8006110 <TIM_Base_SetConfig+0x130>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00b      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a25      	ldr	r2, [pc, #148]	; (8006114 <TIM_Base_SetConfig+0x134>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d007      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a24      	ldr	r2, [pc, #144]	; (8006118 <TIM_Base_SetConfig+0x138>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d003      	beq.n	8006092 <TIM_Base_SetConfig+0xb2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <TIM_Base_SetConfig+0x13c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d108      	bne.n	80060a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a0a      	ldr	r2, [pc, #40]	; (80060f4 <TIM_Base_SetConfig+0x114>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_Base_SetConfig+0xf8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a0c      	ldr	r2, [pc, #48]	; (8006104 <TIM_Base_SetConfig+0x124>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d103      	bne.n	80060e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	691a      	ldr	r2, [r3, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	615a      	str	r2, [r3, #20]
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40010400 	.word	0x40010400
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800
 8006114:	40001800 	.word	0x40001800
 8006118:	40001c00 	.word	0x40001c00
 800611c:	40002000 	.word	0x40002000

08006120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f023 0201 	bic.w	r2, r3, #1
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800614a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4313      	orrs	r3, r2
 8006154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 030a 	bic.w	r3, r3, #10
 800615c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800617e:	b480      	push	{r7}
 8006180:	b087      	sub	sp, #28
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0210 	bic.w	r2, r3, #16
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	621a      	str	r2, [r3, #32]
}
 80061d2:	bf00      	nop
 80061d4:	371c      	adds	r7, #28
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f043 0307 	orr.w	r3, r3, #7
 8006200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006214:	b480      	push	{r7}
 8006216:	b087      	sub	sp, #28
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800622e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	021a      	lsls	r2, r3, #8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	431a      	orrs	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	4313      	orrs	r3, r2
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	609a      	str	r2, [r3, #8]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006268:	2302      	movs	r3, #2
 800626a:	e032      	b.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062a4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e6:	bf00      	nop
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e03f      	b.n	8006398 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f002 fd4f 	bl	8008dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2224      	movs	r2, #36	; 0x24
 8006336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	68d2      	ldr	r2, [r2, #12]
 8006344:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006348:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f90a 	bl	8006564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	6912      	ldr	r2, [r2, #16]
 800635a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800635e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	6952      	ldr	r2, [r2, #20]
 800636a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800636e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6812      	ldr	r2, [r2, #0]
 8006378:	68d2      	ldr	r2, [r2, #12]
 800637a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800637e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af02      	add	r7, sp, #8
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	4613      	mov	r3, r2
 80063ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b20      	cmp	r3, #32
 80063be:	f040 8082 	bne.w	80064c6 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_UART_Transmit+0x2e>
 80063c8:	88fb      	ldrh	r3, [r7, #6]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e07a      	b.n	80064c8 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UART_Transmit+0x40>
 80063dc:	2302      	movs	r3, #2
 80063de:	e073      	b.n	80064c8 <HAL_UART_Transmit+0x128>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2221      	movs	r2, #33	; 0x21
 80063f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80063f6:	f7fc f925 	bl	8002644 <HAL_GetTick>
 80063fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006408:	e041      	b.n	800648e <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d121      	bne.n	8006466 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 f84f 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e045      	b.n	80064c8 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	8812      	ldrh	r2, [r2, #0]
 8006448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d103      	bne.n	800645e <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	3302      	adds	r3, #2
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	e017      	b.n	800648e <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	3301      	adds	r3, #1
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	e013      	b.n	800648e <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2200      	movs	r2, #0
 800646e:	2180      	movs	r1, #128	; 0x80
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f82d 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e023      	b.n	80064c8 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006492:	b29b      	uxth	r3, r3
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1b8      	bne.n	800640a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f814 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e00a      	b.n	80064c8 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e000      	b.n	80064c8 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 80064c6:	2302      	movs	r3, #2
  }
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e0:	e02c      	b.n	800653c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d028      	beq.n	800653c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064f0:	f7fc f8a8 	bl	8002644 <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d91d      	bls.n	800653c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	68d2      	ldr	r2, [r2, #12]
 800650a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800650e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	6812      	ldr	r2, [r2, #0]
 8006518:	6952      	ldr	r2, [r2, #20]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e00f      	b.n	800655c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	401a      	ands	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	429a      	cmp	r2, r3
 800654a:	bf0c      	ite	eq
 800654c:	2301      	moveq	r3, #1
 800654e:	2300      	movne	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	461a      	mov	r2, r3
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	429a      	cmp	r2, r3
 8006558:	d0c3      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	6912      	ldr	r2, [r2, #16]
 8006576:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	68d2      	ldr	r2, [r2, #12]
 800657e:	430a      	orrs	r2, r1
 8006580:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	431a      	orrs	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	431a      	orrs	r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80065a8:	f023 030c 	bic.w	r3, r3, #12
 80065ac:	68f9      	ldr	r1, [r7, #12]
 80065ae:	430b      	orrs	r3, r1
 80065b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	6952      	ldr	r2, [r2, #20]
 80065bc:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6992      	ldr	r2, [r2, #24]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69db      	ldr	r3, [r3, #28]
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	f040 80e4 	bne.w	800679c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4aab      	ldr	r2, [pc, #684]	; (8006888 <UART_SetConfig+0x324>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x84>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4aaa      	ldr	r2, [pc, #680]	; (800688c <UART_SetConfig+0x328>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d16c      	bne.n	80066c2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681c      	ldr	r4, [r3, #0]
 80065ec:	f7fe fb2a 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4613      	mov	r3, r2
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	4413      	add	r3, r2
 80065f8:	009a      	lsls	r2, r3, #2
 80065fa:	441a      	add	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	4aa2      	ldr	r2, [pc, #648]	; (8006890 <UART_SetConfig+0x32c>)
 8006608:	fba2 2303 	umull	r2, r3, r2, r3
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	011d      	lsls	r5, r3, #4
 8006610:	f7fe fb18 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006614:	4602      	mov	r2, r0
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009a      	lsls	r2, r3, #2
 800661e:	441a      	add	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	fbb2 f6f3 	udiv	r6, r2, r3
 800662a:	f7fe fb0b 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 800662e:	4602      	mov	r2, r0
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009a      	lsls	r2, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	4a92      	ldr	r2, [pc, #584]	; (8006890 <UART_SetConfig+0x32c>)
 8006646:	fba2 2303 	umull	r2, r3, r2, r3
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	2264      	movs	r2, #100	; 0x64
 800664e:	fb02 f303 	mul.w	r3, r2, r3
 8006652:	1af3      	subs	r3, r6, r3
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	3332      	adds	r3, #50	; 0x32
 8006658:	4a8d      	ldr	r2, [pc, #564]	; (8006890 <UART_SetConfig+0x32c>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006666:	441d      	add	r5, r3
 8006668:	f7fe faec 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 800666c:	4602      	mov	r2, r0
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009a      	lsls	r2, r3, #2
 8006676:	441a      	add	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	005b      	lsls	r3, r3, #1
 800667e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006682:	f7fe fadf 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006686:	4602      	mov	r2, r0
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009a      	lsls	r2, r3, #2
 8006690:	441a      	add	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	fbb2 f3f3 	udiv	r3, r2, r3
 800669c:	4a7c      	ldr	r2, [pc, #496]	; (8006890 <UART_SetConfig+0x32c>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2264      	movs	r2, #100	; 0x64
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	1af3      	subs	r3, r6, r3
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	3332      	adds	r3, #50	; 0x32
 80066b0:	4a77      	ldr	r2, [pc, #476]	; (8006890 <UART_SetConfig+0x32c>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	f003 0307 	and.w	r3, r3, #7
 80066bc:	442b      	add	r3, r5
 80066be:	60a3      	str	r3, [r4, #8]
 80066c0:	e154      	b.n	800696c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681c      	ldr	r4, [r3, #0]
 80066c6:	f7fe faa9 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80066ca:	4602      	mov	r2, r0
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009a      	lsls	r2, r3, #2
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e0:	4a6b      	ldr	r2, [pc, #428]	; (8006890 <UART_SetConfig+0x32c>)
 80066e2:	fba2 2303 	umull	r2, r3, r2, r3
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	011d      	lsls	r5, r3, #4
 80066ea:	f7fe fa97 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80066ee:	4602      	mov	r2, r0
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009a      	lsls	r2, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	005b      	lsls	r3, r3, #1
 8006700:	fbb2 f6f3 	udiv	r6, r2, r3
 8006704:	f7fe fa8a 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006708:	4602      	mov	r2, r0
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009a      	lsls	r2, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	005b      	lsls	r3, r3, #1
 800671a:	fbb2 f3f3 	udiv	r3, r2, r3
 800671e:	4a5c      	ldr	r2, [pc, #368]	; (8006890 <UART_SetConfig+0x32c>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	095b      	lsrs	r3, r3, #5
 8006726:	2264      	movs	r2, #100	; 0x64
 8006728:	fb02 f303 	mul.w	r3, r2, r3
 800672c:	1af3      	subs	r3, r6, r3
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	3332      	adds	r3, #50	; 0x32
 8006732:	4a57      	ldr	r2, [pc, #348]	; (8006890 <UART_SetConfig+0x32c>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006740:	441d      	add	r5, r3
 8006742:	f7fe fa6b 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006746:	4602      	mov	r2, r0
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009a      	lsls	r2, r3, #2
 8006750:	441a      	add	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	fbb2 f6f3 	udiv	r6, r2, r3
 800675c:	f7fe fa5e 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006760:	4602      	mov	r2, r0
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	009a      	lsls	r2, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	005b      	lsls	r3, r3, #1
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4a46      	ldr	r2, [pc, #280]	; (8006890 <UART_SetConfig+0x32c>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	2264      	movs	r2, #100	; 0x64
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	1af3      	subs	r3, r6, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	3332      	adds	r3, #50	; 0x32
 800678a:	4a41      	ldr	r2, [pc, #260]	; (8006890 <UART_SetConfig+0x32c>)
 800678c:	fba2 2303 	umull	r2, r3, r2, r3
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	442b      	add	r3, r5
 8006798:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800679a:	e0e7      	b.n	800696c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a39      	ldr	r2, [pc, #228]	; (8006888 <UART_SetConfig+0x324>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <UART_SetConfig+0x24c>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a38      	ldr	r2, [pc, #224]	; (800688c <UART_SetConfig+0x328>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d171      	bne.n	8006894 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681c      	ldr	r4, [r3, #0]
 80067b4:	f7fe fa46 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80067b8:	4602      	mov	r2, r0
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	009a      	lsls	r2, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	4a30      	ldr	r2, [pc, #192]	; (8006890 <UART_SetConfig+0x32c>)
 80067d0:	fba2 2303 	umull	r2, r3, r2, r3
 80067d4:	095b      	lsrs	r3, r3, #5
 80067d6:	011d      	lsls	r5, r3, #4
 80067d8:	f7fe fa34 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80067dc:	4602      	mov	r2, r0
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	009a      	lsls	r2, r3, #2
 80067e6:	441a      	add	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80067f2:	f7fe fa27 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 80067f6:	4602      	mov	r2, r0
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009a      	lsls	r2, r3, #2
 8006800:	441a      	add	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	4a20      	ldr	r2, [pc, #128]	; (8006890 <UART_SetConfig+0x32c>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	095b      	lsrs	r3, r3, #5
 8006814:	2264      	movs	r2, #100	; 0x64
 8006816:	fb02 f303 	mul.w	r3, r2, r3
 800681a:	1af3      	subs	r3, r6, r3
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	3332      	adds	r3, #50	; 0x32
 8006820:	4a1b      	ldr	r2, [pc, #108]	; (8006890 <UART_SetConfig+0x32c>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800682c:	441d      	add	r5, r3
 800682e:	f7fe fa09 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 8006832:	4602      	mov	r2, r0
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009a      	lsls	r2, r3, #2
 800683c:	441a      	add	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	fbb2 f6f3 	udiv	r6, r2, r3
 8006848:	f7fe f9fc 	bl	8004c44 <HAL_RCC_GetPCLK2Freq>
 800684c:	4602      	mov	r2, r0
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	009a      	lsls	r2, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006862:	4a0b      	ldr	r2, [pc, #44]	; (8006890 <UART_SetConfig+0x32c>)
 8006864:	fba2 2303 	umull	r2, r3, r2, r3
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	2264      	movs	r2, #100	; 0x64
 800686c:	fb02 f303 	mul.w	r3, r2, r3
 8006870:	1af3      	subs	r3, r6, r3
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	3332      	adds	r3, #50	; 0x32
 8006876:	4a06      	ldr	r2, [pc, #24]	; (8006890 <UART_SetConfig+0x32c>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	442b      	add	r3, r5
 8006884:	60a3      	str	r3, [r4, #8]
 8006886:	e071      	b.n	800696c <UART_SetConfig+0x408>
 8006888:	40011000 	.word	0x40011000
 800688c:	40011400 	.word	0x40011400
 8006890:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681c      	ldr	r4, [r3, #0]
 8006898:	f7fe f9c0 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 800689c:	4602      	mov	r2, r0
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009a      	lsls	r2, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b2:	4a30      	ldr	r2, [pc, #192]	; (8006974 <UART_SetConfig+0x410>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	095b      	lsrs	r3, r3, #5
 80068ba:	011d      	lsls	r5, r3, #4
 80068bc:	f7fe f9ae 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80068c0:	4602      	mov	r2, r0
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009a      	lsls	r2, r3, #2
 80068ca:	441a      	add	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80068d6:	f7fe f9a1 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80068da:	4602      	mov	r2, r0
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009a      	lsls	r2, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	4a20      	ldr	r2, [pc, #128]	; (8006974 <UART_SetConfig+0x410>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	2264      	movs	r2, #100	; 0x64
 80068fa:	fb02 f303 	mul.w	r3, r2, r3
 80068fe:	1af3      	subs	r3, r6, r3
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	3332      	adds	r3, #50	; 0x32
 8006904:	4a1b      	ldr	r2, [pc, #108]	; (8006974 <UART_SetConfig+0x410>)
 8006906:	fba2 2303 	umull	r2, r3, r2, r3
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006910:	441d      	add	r5, r3
 8006912:	f7fe f983 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006916:	4602      	mov	r2, r0
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009a      	lsls	r2, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	fbb2 f6f3 	udiv	r6, r2, r3
 800692c:	f7fe f976 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 8006930:	4602      	mov	r2, r0
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009a      	lsls	r2, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	4a0b      	ldr	r2, [pc, #44]	; (8006974 <UART_SetConfig+0x410>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	2264      	movs	r2, #100	; 0x64
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	1af3      	subs	r3, r6, r3
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	3332      	adds	r3, #50	; 0x32
 800695a:	4a06      	ldr	r2, [pc, #24]	; (8006974 <UART_SetConfig+0x410>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	442b      	add	r3, r5
 8006968:	60a3      	str	r3, [r4, #8]
}
 800696a:	e7ff      	b.n	800696c <UART_SetConfig+0x408>
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	51eb851f 	.word	0x51eb851f

08006978 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d029      	beq.n	80069e6 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800699e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069a2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069ac:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80069b2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80069b8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80069be:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80069c4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80069ca:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80069d0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80069d6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e034      	b.n	8006a50 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80069fc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006a02:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a1a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a24:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006a2a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006a30:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006a36:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006a3c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b087      	sub	sp, #28
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d02e      	beq.n	8006ad6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006a84:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	3b01      	subs	r3, #1
 8006a92:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006a94:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006a9e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006aa8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ab2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006abc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	e03b      	b.n	8006b4e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ae2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae6:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006af8:	4313      	orrs	r3, r2
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b0c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b1c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	3b01      	subs	r3, #1
 8006b24:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006b26:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006b30:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b78:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8006b82:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8006b94:	f7fb fd56 	bl	8002644 <HAL_GetTick>
 8006b98:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006b9a:	e010      	b.n	8006bbe <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d00c      	beq.n	8006bbe <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <FMC_SDRAM_SendCommand+0x5e>
 8006baa:	f7fb fd4b 	bl	8002644 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d901      	bls.n	8006bbe <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e006      	b.n	8006bcc <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d0e8      	beq.n	8006b9c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695a      	ldr	r2, [r3, #20]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <MX_CRC_Init+0x20>)
 8006c02:	4a07      	ldr	r2, [pc, #28]	; (8006c20 <MX_CRC_Init+0x24>)
 8006c04:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006c06:	4805      	ldr	r0, [pc, #20]	; (8006c1c <MX_CRC_Init+0x20>)
 8006c08:	f7fb fe2a 	bl	8002860 <HAL_CRC_Init>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006c12:	f001 fd57 	bl	80086c4 <Error_Handler>
  }

}
 8006c16:	bf00      	nop
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000334 	.word	0x20000334
 8006c20:	40023000 	.word	0x40023000

08006c24 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a0b      	ldr	r2, [pc, #44]	; (8006c60 <HAL_CRC_MspInit+0x3c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d10d      	bne.n	8006c52 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	4a0a      	ldr	r2, [pc, #40]	; (8006c64 <HAL_CRC_MspInit+0x40>)
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_CRC_MspInit+0x40>)
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <HAL_CRC_MspInit+0x40>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006c52:	bf00      	nop
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40023000 	.word	0x40023000
 8006c64:	40023800 	.word	0x40023800

08006c68 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8006c6c:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c6e:	4a16      	ldr	r2, [pc, #88]	; (8006cc8 <MX_DMA2D_Init+0x60>)
 8006c70:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006c78:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006c84:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c98:	2200      	movs	r2, #0
 8006c9a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006c9c:	4809      	ldr	r0, [pc, #36]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006c9e:	f7fb ffbb 	bl	8002c18 <HAL_DMA2D_Init>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8006ca8:	f001 fd0c 	bl	80086c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006cac:	2101      	movs	r1, #1
 8006cae:	4805      	ldr	r0, [pc, #20]	; (8006cc4 <MX_DMA2D_Init+0x5c>)
 8006cb0:	f7fc fa20 	bl	80030f4 <HAL_DMA2D_ConfigLayer>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d001      	beq.n	8006cbe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8006cba:	f001 fd03 	bl	80086c4 <Error_Handler>
  }

}
 8006cbe:	bf00      	nop
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	2000033c 	.word	0x2000033c
 8006cc8:	4002b000 	.word	0x4002b000

08006ccc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a0e      	ldr	r2, [pc, #56]	; (8006d14 <HAL_DMA2D_MspInit+0x48>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d115      	bne.n	8006d0a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	4a0d      	ldr	r2, [pc, #52]	; (8006d18 <HAL_DMA2D_MspInit+0x4c>)
 8006ce4:	4b0c      	ldr	r3, [pc, #48]	; (8006d18 <HAL_DMA2D_MspInit+0x4c>)
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cec:	6313      	str	r3, [r2, #48]	; 0x30
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_DMA2D_MspInit+0x4c>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2105      	movs	r1, #5
 8006cfe:	205a      	movs	r0, #90	; 0x5a
 8006d00:	f7fb fd84 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8006d04:	205a      	movs	r0, #90	; 0x5a
 8006d06:	f7fb fd9d 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	4002b000 	.word	0x4002b000
 8006d18:	40023800 	.word	0x40023800

08006d1c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006d22:	4b20      	ldr	r3, [pc, #128]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d24:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <MX_FMC_Init+0x8c>)
 8006d26:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8006d28:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006d2e:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006d34:	4b1b      	ldr	r3, [pc, #108]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d36:	2204      	movs	r2, #4
 8006d38:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006d3a:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d3c:	2210      	movs	r2, #16
 8006d3e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006d40:	4b18      	ldr	r3, [pc, #96]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8006d46:	4b17      	ldr	r3, [pc, #92]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d48:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8006d4c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006d4e:	4b15      	ldr	r3, [pc, #84]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006d54:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006d5c:	4b11      	ldr	r3, [pc, #68]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d68:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8006d6e:	2307      	movs	r3, #7
 8006d70:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8006d72:	2304      	movs	r3, #4
 8006d74:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8006d76:	2307      	movs	r3, #7
 8006d78:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8006d7e:	2302      	movs	r3, #2
 8006d80:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8006d82:	2302      	movs	r3, #2
 8006d84:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006d86:	1d3b      	adds	r3, r7, #4
 8006d88:	4619      	mov	r1, r3
 8006d8a:	4806      	ldr	r0, [pc, #24]	; (8006da4 <MX_FMC_Init+0x88>)
 8006d8c:	f7fe f944 	bl	8005018 <HAL_SDRAM_Init>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 8006d96:	f001 fc95 	bl	80086c4 <Error_Handler>
  }

}
 8006d9a:	bf00      	nop
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	2000037c 	.word	0x2000037c
 8006da8:	a0000140 	.word	0xa0000140

08006dac <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8006db2:	4b3c      	ldr	r3, [pc, #240]	; (8006ea4 <HAL_FMC_MspInit+0xf8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d16f      	bne.n	8006e9a <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 8006dba:	4b3a      	ldr	r3, [pc, #232]	; (8006ea4 <HAL_FMC_MspInit+0xf8>)
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	4a38      	ldr	r2, [pc, #224]	; (8006ea8 <HAL_FMC_MspInit+0xfc>)
 8006dc6:	4b38      	ldr	r3, [pc, #224]	; (8006ea8 <HAL_FMC_MspInit+0xfc>)
 8006dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	6393      	str	r3, [r2, #56]	; 0x38
 8006dd0:	4b35      	ldr	r3, [pc, #212]	; (8006ea8 <HAL_FMC_MspInit+0xfc>)
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 8006ddc:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006de0:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de2:	2302      	movs	r3, #2
 8006de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dea:	2303      	movs	r3, #3
 8006dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006dee:	230c      	movs	r3, #12
 8006df0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	4619      	mov	r1, r3
 8006df6:	482d      	ldr	r0, [pc, #180]	; (8006eac <HAL_FMC_MspInit+0x100>)
 8006df8:	f7fc faa8 	bl	800334c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e00:	2302      	movs	r3, #2
 8006e02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e0c:	230c      	movs	r3, #12
 8006e0e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006e10:	1d3b      	adds	r3, r7, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4826      	ldr	r0, [pc, #152]	; (8006eb0 <HAL_FMC_MspInit+0x104>)
 8006e16:	f7fc fa99 	bl	800334c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8006e1a:	f248 1333 	movw	r3, #33075	; 0x8133
 8006e1e:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e20:	2302      	movs	r3, #2
 8006e22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	4619      	mov	r1, r3
 8006e34:	481f      	ldr	r0, [pc, #124]	; (8006eb4 <HAL_FMC_MspInit+0x108>)
 8006e36:	f7fc fa89 	bl	800334c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8006e3a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8006e3e:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e40:	2302      	movs	r3, #2
 8006e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e50:	1d3b      	adds	r3, r7, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4818      	ldr	r0, [pc, #96]	; (8006eb8 <HAL_FMC_MspInit+0x10c>)
 8006e56:	f7fc fa79 	bl	800334c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8006e5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8006e5e:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e60:	2302      	movs	r3, #2
 8006e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e6c:	230c      	movs	r3, #12
 8006e6e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4811      	ldr	r0, [pc, #68]	; (8006ebc <HAL_FMC_MspInit+0x110>)
 8006e76:	f7fc fa69 	bl	800334c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006e7a:	2360      	movs	r3, #96	; 0x60
 8006e7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e82:	2300      	movs	r3, #0
 8006e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e86:	2303      	movs	r3, #3
 8006e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	4619      	mov	r1, r3
 8006e92:	480b      	ldr	r0, [pc, #44]	; (8006ec0 <HAL_FMC_MspInit+0x114>)
 8006e94:	f7fc fa5a 	bl	800334c <HAL_GPIO_Init>
 8006e98:	e000      	b.n	8006e9c <HAL_FMC_MspInit+0xf0>
    return;
 8006e9a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000274 	.word	0x20000274
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	40021400 	.word	0x40021400
 8006eb0:	40020800 	.word	0x40020800
 8006eb4:	40021800 	.word	0x40021800
 8006eb8:	40021000 	.word	0x40021000
 8006ebc:	40020c00 	.word	0x40020c00
 8006ec0:	40020400 	.word	0x40020400

08006ec4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006ecc:	f7ff ff6e 	bl	8006dac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0

}
 8006edc:	bf00      	nop
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08e      	sub	sp, #56	; 0x38
 8006eec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	609a      	str	r2, [r3, #8]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006efe:	2300      	movs	r3, #0
 8006f00:	623b      	str	r3, [r7, #32]
 8006f02:	4a7a      	ldr	r2, [pc, #488]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f04:	4b79      	ldr	r3, [pc, #484]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	f043 0320 	orr.w	r3, r3, #32
 8006f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f0e:	4b77      	ldr	r3, [pc, #476]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	623b      	str	r3, [r7, #32]
 8006f18:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61fb      	str	r3, [r7, #28]
 8006f1e:	4a73      	ldr	r2, [pc, #460]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f20:	4b72      	ldr	r3, [pc, #456]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2a:	4b70      	ldr	r3, [pc, #448]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f32:	61fb      	str	r3, [r7, #28]
 8006f34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	4a6c      	ldr	r2, [pc, #432]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f3c:	4b6b      	ldr	r3, [pc, #428]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	f043 0304 	orr.w	r3, r3, #4
 8006f44:	6313      	str	r3, [r2, #48]	; 0x30
 8006f46:	4b69      	ldr	r3, [pc, #420]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4a65      	ldr	r2, [pc, #404]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f58:	4b64      	ldr	r3, [pc, #400]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6313      	str	r3, [r2, #48]	; 0x30
 8006f62:	4b62      	ldr	r3, [pc, #392]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	4a5e      	ldr	r2, [pc, #376]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f74:	4b5d      	ldr	r3, [pc, #372]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7e:	4b5b      	ldr	r3, [pc, #364]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	4a57      	ldr	r2, [pc, #348]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f90:	4b56      	ldr	r3, [pc, #344]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f98:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9a:	4b54      	ldr	r3, [pc, #336]	; (80070ec <MX_GPIO_Init+0x204>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa2:	60fb      	str	r3, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	4a50      	ldr	r2, [pc, #320]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fac:	4b4f      	ldr	r3, [pc, #316]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	f043 0310 	orr.w	r3, r3, #16
 8006fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fb6:	4b4d      	ldr	r3, [pc, #308]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	60bb      	str	r3, [r7, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]
 8006fc6:	4a49      	ldr	r2, [pc, #292]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fc8:	4b48      	ldr	r3, [pc, #288]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	f043 0308 	orr.w	r3, r3, #8
 8006fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8006fd2:	4b46      	ldr	r3, [pc, #280]	; (80070ec <MX_GPIO_Init+0x204>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	607b      	str	r3, [r7, #4]
 8006fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2116      	movs	r1, #22
 8006fe2:	4843      	ldr	r0, [pc, #268]	; (80070f0 <MX_GPIO_Init+0x208>)
 8006fe4:	f7fc fc68 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2180      	movs	r1, #128	; 0x80
 8006fec:	4841      	ldr	r0, [pc, #260]	; (80070f4 <MX_GPIO_Init+0x20c>)
 8006fee:	f7fc fc63 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8006ff8:	483f      	ldr	r0, [pc, #252]	; (80070f8 <MX_GPIO_Init+0x210>)
 8006ffa:	f7fc fc5d 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006ffe:	2200      	movs	r2, #0
 8007000:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8007004:	483d      	ldr	r0, [pc, #244]	; (80070fc <MX_GPIO_Init+0x214>)
 8007006:	f7fc fc57 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800700a:	2316      	movs	r3, #22
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800700e:	2301      	movs	r3, #1
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007012:	2300      	movs	r3, #0
 8007014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007016:	2300      	movs	r3, #0
 8007018:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800701a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800701e:	4619      	mov	r1, r3
 8007020:	4833      	ldr	r0, [pc, #204]	; (80070f0 <MX_GPIO_Init+0x208>)
 8007022:	f7fc f993 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8007026:	2380      	movs	r3, #128	; 0x80
 8007028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800702a:	2301      	movs	r3, #1
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007032:	2300      	movs	r3, #0
 8007034:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8007036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800703a:	4619      	mov	r1, r3
 800703c:	482d      	ldr	r0, [pc, #180]	; (80070f4 <MX_GPIO_Init+0x20c>)
 800703e:	f7fc f985 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8007042:	2320      	movs	r3, #32
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007046:	4b2e      	ldr	r3, [pc, #184]	; (8007100 <MX_GPIO_Init+0x218>)
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704a:	2300      	movs	r3, #0
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800704e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007052:	4619      	mov	r1, r3
 8007054:	4826      	ldr	r0, [pc, #152]	; (80070f0 <MX_GPIO_Init+0x208>)
 8007056:	f7fc f979 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800705a:	2304      	movs	r3, #4
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800705e:	2300      	movs	r3, #0
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007062:	2300      	movs	r3, #0
 8007064:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706a:	4619      	mov	r1, r3
 800706c:	4825      	ldr	r0, [pc, #148]	; (8007104 <MX_GPIO_Init+0x21c>)
 800706e:	f7fc f96d 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007078:	2300      	movs	r3, #0
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707c:	2300      	movs	r3, #0
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8007080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007084:	4619      	mov	r1, r3
 8007086:	481c      	ldr	r0, [pc, #112]	; (80070f8 <MX_GPIO_Init+0x210>)
 8007088:	f7fc f960 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800708c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007092:	2301      	movs	r3, #1
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007096:	2300      	movs	r3, #0
 8007098:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800709a:	2300      	movs	r3, #0
 800709c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800709e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070a2:	4619      	mov	r1, r3
 80070a4:	4814      	ldr	r0, [pc, #80]	; (80070f8 <MX_GPIO_Init+0x210>)
 80070a6:	f7fc f951 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT1_Pin;
 80070aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80070b0:	4b13      	ldr	r3, [pc, #76]	; (8007100 <MX_GPIO_Init+0x218>)
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b4:	2300      	movs	r3, #0
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT1_GPIO_Port, &GPIO_InitStruct);
 80070b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070bc:	4619      	mov	r1, r3
 80070be:	480d      	ldr	r0, [pc, #52]	; (80070f4 <MX_GPIO_Init+0x20c>)
 80070c0:	f7fc f944 	bl	800334c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80070c4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070ca:	2301      	movs	r3, #1
 80070cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d2:	2300      	movs	r3, #0
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80070d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070da:	4619      	mov	r1, r3
 80070dc:	4807      	ldr	r0, [pc, #28]	; (80070fc <MX_GPIO_Init+0x214>)
 80070de:	f7fc f935 	bl	800334c <HAL_GPIO_Init>

}
 80070e2:	bf00      	nop
 80070e4:	3738      	adds	r7, #56	; 0x38
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40023800 	.word	0x40023800
 80070f0:	40020800 	.word	0x40020800
 80070f4:	40020000 	.word	0x40020000
 80070f8:	40020c00 	.word	0x40020c00
 80070fc:	40021800 	.word	0x40021800
 8007100:	10120000 	.word	0x10120000
 8007104:	40020400 	.word	0x40020400

08007108 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <MX_I2C3_Init+0x74>)
 800710e:	4a1c      	ldr	r2, [pc, #112]	; (8007180 <MX_I2C3_Init+0x78>)
 8007110:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007112:	4b1a      	ldr	r3, [pc, #104]	; (800717c <MX_I2C3_Init+0x74>)
 8007114:	4a1b      	ldr	r2, [pc, #108]	; (8007184 <MX_I2C3_Init+0x7c>)
 8007116:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <MX_I2C3_Init+0x74>)
 800711a:	2200      	movs	r2, #0
 800711c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800711e:	4b17      	ldr	r3, [pc, #92]	; (800717c <MX_I2C3_Init+0x74>)
 8007120:	2200      	movs	r2, #0
 8007122:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007124:	4b15      	ldr	r3, [pc, #84]	; (800717c <MX_I2C3_Init+0x74>)
 8007126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800712a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800712c:	4b13      	ldr	r3, [pc, #76]	; (800717c <MX_I2C3_Init+0x74>)
 800712e:	2200      	movs	r2, #0
 8007130:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <MX_I2C3_Init+0x74>)
 8007134:	2200      	movs	r2, #0
 8007136:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007138:	4b10      	ldr	r3, [pc, #64]	; (800717c <MX_I2C3_Init+0x74>)
 800713a:	2200      	movs	r2, #0
 800713c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800713e:	4b0f      	ldr	r3, [pc, #60]	; (800717c <MX_I2C3_Init+0x74>)
 8007140:	2200      	movs	r2, #0
 8007142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007144:	480d      	ldr	r0, [pc, #52]	; (800717c <MX_I2C3_Init+0x74>)
 8007146:	f7fc fbd1 	bl	80038ec <HAL_I2C_Init>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007150:	f001 fab8 	bl	80086c4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007154:	2100      	movs	r1, #0
 8007156:	4809      	ldr	r0, [pc, #36]	; (800717c <MX_I2C3_Init+0x74>)
 8007158:	f7fc fcf0 	bl	8003b3c <HAL_I2CEx_ConfigAnalogFilter>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007162:	f001 faaf 	bl	80086c4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007166:	2100      	movs	r1, #0
 8007168:	4804      	ldr	r0, [pc, #16]	; (800717c <MX_I2C3_Init+0x74>)
 800716a:	f7fc fd23 	bl	8003bb4 <HAL_I2CEx_ConfigDigitalFilter>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007174:	f001 faa6 	bl	80086c4 <Error_Handler>
  }

}
 8007178:	bf00      	nop
 800717a:	bd80      	pop	{r7, pc}
 800717c:	200003b0 	.word	0x200003b0
 8007180:	40005c00 	.word	0x40005c00
 8007184:	000186a0 	.word	0x000186a0

08007188 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <HAL_I2C_MspInit+0xc4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d14b      	bne.n	8007242 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	4a28      	ldr	r2, [pc, #160]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071b0:	4b27      	ldr	r3, [pc, #156]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	f043 0304 	orr.w	r3, r3, #4
 80071b8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ba:	4b25      	ldr	r3, [pc, #148]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	4a21      	ldr	r2, [pc, #132]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071cc:	4b20      	ldr	r3, [pc, #128]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	6313      	str	r3, [r2, #48]	; 0x30
 80071d6:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80071e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071e8:	2312      	movs	r3, #18
 80071ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071ec:	2301      	movs	r3, #1
 80071ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f0:	2303      	movs	r3, #3
 80071f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80071f4:	2304      	movs	r3, #4
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	4619      	mov	r1, r3
 80071fe:	4815      	ldr	r0, [pc, #84]	; (8007254 <HAL_I2C_MspInit+0xcc>)
 8007200:	f7fc f8a4 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800720a:	2312      	movs	r3, #18
 800720c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800720e:	2301      	movs	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007212:	2303      	movs	r3, #3
 8007214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007216:	2304      	movs	r3, #4
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	4619      	mov	r1, r3
 8007220:	480d      	ldr	r0, [pc, #52]	; (8007258 <HAL_I2C_MspInit+0xd0>)
 8007222:	f7fc f893 	bl	800334c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	4a09      	ldr	r2, [pc, #36]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007234:	6413      	str	r3, [r2, #64]	; 0x40
 8007236:	4b06      	ldr	r3, [pc, #24]	; (8007250 <HAL_I2C_MspInit+0xc8>)
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007242:	bf00      	nop
 8007244:	3728      	adds	r7, #40	; 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40005c00 	.word	0x40005c00
 8007250:	40023800 	.word	0x40023800
 8007254:	40020800 	.word	0x40020800
 8007258:	40020000 	.word	0x40020000

0800725c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007262:	1d3b      	adds	r3, r7, #4
 8007264:	2234      	movs	r2, #52	; 0x34
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f001 fe4d 	bl	8008f08 <memset>

  hltdc.Instance = LTDC;
 800726e:	4b39      	ldr	r3, [pc, #228]	; (8007354 <MX_LTDC_Init+0xf8>)
 8007270:	4a39      	ldr	r2, [pc, #228]	; (8007358 <MX_LTDC_Init+0xfc>)
 8007272:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007274:	4b37      	ldr	r3, [pc, #220]	; (8007354 <MX_LTDC_Init+0xf8>)
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800727a:	4b36      	ldr	r3, [pc, #216]	; (8007354 <MX_LTDC_Init+0xf8>)
 800727c:	2200      	movs	r2, #0
 800727e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007280:	4b34      	ldr	r3, [pc, #208]	; (8007354 <MX_LTDC_Init+0xf8>)
 8007282:	2200      	movs	r2, #0
 8007284:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007286:	4b33      	ldr	r3, [pc, #204]	; (8007354 <MX_LTDC_Init+0xf8>)
 8007288:	2200      	movs	r2, #0
 800728a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800728c:	4b31      	ldr	r3, [pc, #196]	; (8007354 <MX_LTDC_Init+0xf8>)
 800728e:	2209      	movs	r2, #9
 8007290:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8007292:	4b30      	ldr	r3, [pc, #192]	; (8007354 <MX_LTDC_Init+0xf8>)
 8007294:	2201      	movs	r2, #1
 8007296:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007298:	4b2e      	ldr	r3, [pc, #184]	; (8007354 <MX_LTDC_Init+0xf8>)
 800729a:	221d      	movs	r2, #29
 800729c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800729e:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072a0:	2203      	movs	r2, #3
 80072a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80072a4:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072a6:	f240 120d 	movw	r2, #269	; 0x10d
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80072ac:	4b29      	ldr	r3, [pc, #164]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072ae:	f240 1243 	movw	r2, #323	; 0x143
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072b6:	f240 1217 	movw	r2, #279	; 0x117
 80072ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072be:	f240 1247 	movw	r2, #327	; 0x147
 80072c2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80072c4:	4b23      	ldr	r3, [pc, #140]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80072cc:	4b21      	ldr	r3, [pc, #132]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80072d4:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80072dc:	481d      	ldr	r0, [pc, #116]	; (8007354 <MX_LTDC_Init+0xf8>)
 80072de:	f7fc fca9 	bl	8003c34 <HAL_LTDC_Init>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80072e8:	f001 f9ec 	bl	80086c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80072ec:	2300      	movs	r3, #0
 80072ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80072f0:	23f0      	movs	r3, #240	; 0xf0
 80072f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80072f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80072fc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80072fe:	2302      	movs	r3, #2
 8007300:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8007302:	23ff      	movs	r3, #255	; 0xff
 8007304:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800730a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800730e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007310:	2307      	movs	r3, #7
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007314:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800731a:	23f0      	movs	r3, #240	; 0xf0
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800731e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007322:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007336:	1d3b      	adds	r3, r7, #4
 8007338:	2200      	movs	r2, #0
 800733a:	4619      	mov	r1, r3
 800733c:	4805      	ldr	r0, [pc, #20]	; (8007354 <MX_LTDC_Init+0xf8>)
 800733e:	f7fc fe0b 	bl	8003f58 <HAL_LTDC_ConfigLayer>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007348:	f001 f9bc 	bl	80086c4 <Error_Handler>
  }

}
 800734c:	bf00      	nop
 800734e:	3738      	adds	r7, #56	; 0x38
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000404 	.word	0x20000404
 8007358:	40016800 	.word	0x40016800

0800735c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	; 0x38
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	605a      	str	r2, [r3, #4]
 800736e:	609a      	str	r2, [r3, #8]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a7b      	ldr	r2, [pc, #492]	; (8007568 <HAL_LTDC_MspInit+0x20c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f040 80f0 	bne.w	8007560 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007380:	2300      	movs	r3, #0
 8007382:	623b      	str	r3, [r7, #32]
 8007384:	4a79      	ldr	r2, [pc, #484]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007386:	4b79      	ldr	r3, [pc, #484]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800738e:	6453      	str	r3, [r2, #68]	; 0x44
 8007390:	4b76      	ldr	r3, [pc, #472]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800739c:	2300      	movs	r3, #0
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	4a72      	ldr	r2, [pc, #456]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073a2:	4b72      	ldr	r3, [pc, #456]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f043 0320 	orr.w	r3, r3, #32
 80073aa:	6313      	str	r3, [r2, #48]	; 0x30
 80073ac:	4b6f      	ldr	r3, [pc, #444]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b0:	f003 0320 	and.w	r3, r3, #32
 80073b4:	61fb      	str	r3, [r7, #28]
 80073b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073b8:	2300      	movs	r3, #0
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	4a6b      	ldr	r2, [pc, #428]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073be:	4b6b      	ldr	r3, [pc, #428]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6313      	str	r3, [r2, #48]	; 0x30
 80073c8:	4b68      	ldr	r3, [pc, #416]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073d4:	2300      	movs	r3, #0
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	4a64      	ldr	r2, [pc, #400]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073da:	4b64      	ldr	r3, [pc, #400]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073de:	f043 0302 	orr.w	r3, r3, #2
 80073e2:	6313      	str	r3, [r2, #48]	; 0x30
 80073e4:	4b61      	ldr	r3, [pc, #388]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	4a5d      	ldr	r2, [pc, #372]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073f6:	4b5d      	ldr	r3, [pc, #372]	; (800756c <HAL_LTDC_MspInit+0x210>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007400:	4b5a      	ldr	r3, [pc, #360]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007408:	613b      	str	r3, [r7, #16]
 800740a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	4a56      	ldr	r2, [pc, #344]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007412:	4b56      	ldr	r3, [pc, #344]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f043 0304 	orr.w	r3, r3, #4
 800741a:	6313      	str	r3, [r2, #48]	; 0x30
 800741c:	4b53      	ldr	r3, [pc, #332]	; (800756c <HAL_LTDC_MspInit+0x210>)
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	60fb      	str	r3, [r7, #12]
 8007426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007428:	2300      	movs	r3, #0
 800742a:	60bb      	str	r3, [r7, #8]
 800742c:	4a4f      	ldr	r2, [pc, #316]	; (800756c <HAL_LTDC_MspInit+0x210>)
 800742e:	4b4f      	ldr	r3, [pc, #316]	; (800756c <HAL_LTDC_MspInit+0x210>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	f043 0308 	orr.w	r3, r3, #8
 8007436:	6313      	str	r3, [r2, #48]	; 0x30
 8007438:	4b4c      	ldr	r3, [pc, #304]	; (800756c <HAL_LTDC_MspInit+0x210>)
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	60bb      	str	r3, [r7, #8]
 8007442:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8007444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800744a:	2302      	movs	r3, #2
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800744e:	2300      	movs	r3, #0
 8007450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007452:	2300      	movs	r3, #0
 8007454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007456:	230e      	movs	r3, #14
 8007458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800745a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800745e:	4619      	mov	r1, r3
 8007460:	4843      	ldr	r0, [pc, #268]	; (8007570 <HAL_LTDC_MspInit+0x214>)
 8007462:	f7fb ff73 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8007466:	f641 0358 	movw	r3, #6232	; 0x1858
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800746c:	2302      	movs	r3, #2
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007470:	2300      	movs	r3, #0
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007474:	2300      	movs	r3, #0
 8007476:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007478:	230e      	movs	r3, #14
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800747c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007480:	4619      	mov	r1, r3
 8007482:	483c      	ldr	r0, [pc, #240]	; (8007574 <HAL_LTDC_MspInit+0x218>)
 8007484:	f7fb ff62 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8007488:	2303      	movs	r3, #3
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800748c:	2302      	movs	r3, #2
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007490:	2300      	movs	r3, #0
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007494:	2300      	movs	r3, #0
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007498:	2309      	movs	r3, #9
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	4619      	mov	r1, r3
 80074a2:	4835      	ldr	r0, [pc, #212]	; (8007578 <HAL_LTDC_MspInit+0x21c>)
 80074a4:	f7fb ff52 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80074a8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ae:	2302      	movs	r3, #2
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b2:	2300      	movs	r3, #0
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b6:	2300      	movs	r3, #0
 80074b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074ba:	230e      	movs	r3, #14
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074c2:	4619      	mov	r1, r3
 80074c4:	482c      	ldr	r0, [pc, #176]	; (8007578 <HAL_LTDC_MspInit+0x21c>)
 80074c6:	f7fb ff41 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80074ca:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d0:	2302      	movs	r3, #2
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d4:	2300      	movs	r3, #0
 80074d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074d8:	2300      	movs	r3, #0
 80074da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074dc:	230e      	movs	r3, #14
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80074e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e4:	4619      	mov	r1, r3
 80074e6:	4825      	ldr	r0, [pc, #148]	; (800757c <HAL_LTDC_MspInit+0x220>)
 80074e8:	f7fb ff30 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|GPIO_PIN_10;
 80074ec:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f2:	2302      	movs	r3, #2
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fa:	2300      	movs	r3, #0
 80074fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80074fe:	230e      	movs	r3, #14
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007506:	4619      	mov	r1, r3
 8007508:	481d      	ldr	r0, [pc, #116]	; (8007580 <HAL_LTDC_MspInit+0x224>)
 800750a:	f7fb ff1f 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|GPIO_PIN_6;
 800750e:	2348      	movs	r3, #72	; 0x48
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007512:	2302      	movs	r3, #2
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007516:	2300      	movs	r3, #0
 8007518:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751a:	2300      	movs	r3, #0
 800751c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800751e:	230e      	movs	r3, #14
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007526:	4619      	mov	r1, r3
 8007528:	4816      	ldr	r0, [pc, #88]	; (8007584 <HAL_LTDC_MspInit+0x228>)
 800752a:	f7fb ff0f 	bl	800334c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800752e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007534:	2302      	movs	r3, #2
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007538:	2300      	movs	r3, #0
 800753a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800753c:	2300      	movs	r3, #0
 800753e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007540:	2309      	movs	r3, #9
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007548:	4619      	mov	r1, r3
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <HAL_LTDC_MspInit+0x220>)
 800754c:	f7fb fefe 	bl	800334c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8007550:	2200      	movs	r2, #0
 8007552:	2105      	movs	r1, #5
 8007554:	2058      	movs	r0, #88	; 0x58
 8007556:	f7fb f959 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800755a:	2058      	movs	r0, #88	; 0x58
 800755c:	f7fb f972 	bl	8002844 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007560:	bf00      	nop
 8007562:	3738      	adds	r7, #56	; 0x38
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40016800 	.word	0x40016800
 800756c:	40023800 	.word	0x40023800
 8007570:	40021400 	.word	0x40021400
 8007574:	40020000 	.word	0x40020000
 8007578:	40020400 	.word	0x40020400
 800757c:	40021800 	.word	0x40021800
 8007580:	40020800 	.word	0x40020800
 8007584:	40020c00 	.word	0x40020c00

08007588 <spi5_sendrecv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi5_sendrecv(uint8_t byte) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af02      	add	r7, sp, #8
 800758e:	4603      	mov	r3, r0
 8007590:	71fb      	strb	r3, [r7, #7]
	uint8_t answer;

	HAL_SPI_TransmitReceive(&hspi5, &byte, &answer, 1, HAL_MAX_DELAY);
 8007592:	f107 020f 	add.w	r2, r7, #15
 8007596:	1df9      	adds	r1, r7, #7
 8007598:	f04f 33ff 	mov.w	r3, #4294967295
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	2301      	movs	r3, #1
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <spi5_sendrecv+0x28>)
 80075a2:	f7fe f87b 	bl	800569c <HAL_SPI_TransmitReceive>

	return answer;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200004bc 	.word	0x200004bc

080075b4 <SPI5_read>:

uint8_t SPI5_read(uint8_t address) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	71fb      	strb	r3, [r7, #7]
	uint8_t dane;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80075be:	2200      	movs	r2, #0
 80075c0:	2102      	movs	r1, #2
 80075c2:	480c      	ldr	r0, [pc, #48]	; (80075f4 <SPI5_read+0x40>)
 80075c4:	f7fc f978 	bl	80038b8 <HAL_GPIO_WritePin>
	spi5_sendrecv(address | 0x80);
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ffd9 	bl	8007588 <spi5_sendrecv>
	dane = spi5_sendrecv(0xFF);
 80075d6:	20ff      	movs	r0, #255	; 0xff
 80075d8:	f7ff ffd6 	bl	8007588 <spi5_sendrecv>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80075e0:	2201      	movs	r2, #1
 80075e2:	2102      	movs	r1, #2
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <SPI5_read+0x40>)
 80075e6:	f7fc f967 	bl	80038b8 <HAL_GPIO_WritePin>

	return dane;
 80075ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3710      	adds	r7, #16
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40020800 	.word	0x40020800

080075f8 <SPI5_write>:

void SPI5_write(uint8_t address, uint8_t data) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	460a      	mov	r2, r1
 8007602:	71fb      	strb	r3, [r7, #7]
 8007604:	4613      	mov	r3, r2
 8007606:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8007608:	2200      	movs	r2, #0
 800760a:	2102      	movs	r1, #2
 800760c:	480a      	ldr	r0, [pc, #40]	; (8007638 <SPI5_write+0x40>)
 800760e:	f7fc f953 	bl	80038b8 <HAL_GPIO_WritePin>
	spi5_sendrecv(address);
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff ffb7 	bl	8007588 <spi5_sendrecv>
	data = spi5_sendrecv(data);
 800761a:	79bb      	ldrb	r3, [r7, #6]
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff ffb3 	bl	8007588 <spi5_sendrecv>
 8007622:	4603      	mov	r3, r0
 8007624:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8007626:	2201      	movs	r2, #1
 8007628:	2102      	movs	r1, #2
 800762a:	4803      	ldr	r0, [pc, #12]	; (8007638 <SPI5_write+0x40>)
 800762c:	f7fc f944 	bl	80038b8 <HAL_GPIO_WritePin>

}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	40020800 	.word	0x40020800

0800763c <OurL3GD20_Init>:

uint8_t OurL3GD20_Init() {
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
	if (SPI5_read(0x0F) != 0b11010100) {
 8007640:	200f      	movs	r0, #15
 8007642:	f7ff ffb7 	bl	80075b4 <SPI5_read>
 8007646:	4603      	mov	r3, r0
 8007648:	2bd4      	cmp	r3, #212	; 0xd4
 800764a:	d001      	beq.n	8007650 <OurL3GD20_Init+0x14>

		return 1;
 800764c:	2301      	movs	r3, #1
 800764e:	e010      	b.n	8007672 <OurL3GD20_Init+0x36>
	}

	//Enable L3GD20 Power bit
	SPI5_write(0x20, 0xFF);
 8007650:	21ff      	movs	r1, #255	; 0xff
 8007652:	2020      	movs	r0, #32
 8007654:	f7ff ffd0 	bl	80075f8 <SPI5_write>

	//Set L3GD20 scale

	SPI5_write(0x23, 0x00);
 8007658:	2100      	movs	r1, #0
 800765a:	2023      	movs	r0, #35	; 0x23
 800765c:	f7ff ffcc 	bl	80075f8 <SPI5_write>

	//Set high-pass filter settings
	SPI5_write(0x21, 0x00);
 8007660:	2100      	movs	r1, #0
 8007662:	2021      	movs	r0, #33	; 0x21
 8007664:	f7ff ffc8 	bl	80075f8 <SPI5_write>

	//Enable high-pass filter
	SPI5_write(0x24, 0x10);
 8007668:	2110      	movs	r1, #16
 800766a:	2024      	movs	r0, #36	; 0x24
 800766c:	f7ff ffc4 	bl	80075f8 <SPI5_write>
	//SPI5_write(0x37, 0b01111110);

	//printf("Konf: %d", SPI5_read(0x31));

	//Everything OK
	return 0;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <OurL3GD20_Read>:

void OurL3GD20_Read() {
 8007678:	b590      	push	{r4, r7, lr}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
	float s;
	short temp1, temp2, temp3;

	// Read X axis

	temp1 = (SPI5_read(0x28) | SPI5_read(0x29) << 8);
 800767e:	2028      	movs	r0, #40	; 0x28
 8007680:	f7ff ff98 	bl	80075b4 <SPI5_read>
 8007684:	4603      	mov	r3, r0
 8007686:	b21c      	sxth	r4, r3
 8007688:	2029      	movs	r0, #41	; 0x29
 800768a:	f7ff ff93 	bl	80075b4 <SPI5_read>
 800768e:	4603      	mov	r3, r0
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b21b      	sxth	r3, r3
 8007694:	4323      	orrs	r3, r4
 8007696:	82fb      	strh	r3, [r7, #22]
	temp2 = (SPI5_read(0x2A) | SPI5_read(0x2B) << 8);
 8007698:	202a      	movs	r0, #42	; 0x2a
 800769a:	f7ff ff8b 	bl	80075b4 <SPI5_read>
 800769e:	4603      	mov	r3, r0
 80076a0:	b21c      	sxth	r4, r3
 80076a2:	202b      	movs	r0, #43	; 0x2b
 80076a4:	f7ff ff86 	bl	80075b4 <SPI5_read>
 80076a8:	4603      	mov	r3, r0
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	4323      	orrs	r3, r4
 80076b0:	82bb      	strh	r3, [r7, #20]
	temp3 = (SPI5_read(0x2C) | SPI5_read(0x2D) << 8);
 80076b2:	202c      	movs	r0, #44	; 0x2c
 80076b4:	f7ff ff7e 	bl	80075b4 <SPI5_read>
 80076b8:	4603      	mov	r3, r0
 80076ba:	b21c      	sxth	r4, r3
 80076bc:	202d      	movs	r0, #45	; 0x2d
 80076be:	f7ff ff79 	bl	80075b4 <SPI5_read>
 80076c2:	4603      	mov	r3, r0
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	b21b      	sxth	r3, r3
 80076c8:	4323      	orrs	r3, r4
 80076ca:	827b      	strh	r3, [r7, #18]

	// Sensitivity at 250 range = 8.75 mdps/digit
	s = 8.75 * 0.001;
 80076cc:	4b1d      	ldr	r3, [pc, #116]	; (8007744 <OurL3GD20_Read+0xcc>)
 80076ce:	60fb      	str	r3, [r7, #12]

	DataNow.OsX = (short) ((float) temp1 * s);
 80076d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80076dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80076e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80076ec:	88bb      	ldrh	r3, [r7, #4]
 80076ee:	b21a      	sxth	r2, r3
 80076f0:	4b15      	ldr	r3, [pc, #84]	; (8007748 <OurL3GD20_Read+0xd0>)
 80076f2:	801a      	strh	r2, [r3, #0]
	DataNow.OsY = (short) ((float) temp2 * s);
 80076f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80076f8:	ee07 3a90 	vmov	s15, r3
 80076fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007700:	edd7 7a03 	vldr	s15, [r7, #12]
 8007704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800770c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007710:	88bb      	ldrh	r3, [r7, #4]
 8007712:	b21a      	sxth	r2, r3
 8007714:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <OurL3GD20_Read+0xd0>)
 8007716:	805a      	strh	r2, [r3, #2]
	DataNow.OsZ = (short) ((float) temp3 * s);
 8007718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800771c:	ee07 3a90 	vmov	s15, r3
 8007720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007724:	edd7 7a03 	vldr	s15, [r7, #12]
 8007728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800772c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007730:	edc7 7a01 	vstr	s15, [r7, #4]
 8007734:	88bb      	ldrh	r3, [r7, #4]
 8007736:	b21a      	sxth	r2, r3
 8007738:	4b03      	ldr	r3, [pc, #12]	; (8007748 <OurL3GD20_Read+0xd0>)
 800773a:	809a      	strh	r2, [r3, #4]

}
 800773c:	bf00      	nop
 800773e:	371c      	adds	r7, #28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd90      	pop	{r4, r7, pc}
 8007744:	3c0f5c29 	.word	0x3c0f5c29
 8007748:	20000520 	.word	0x20000520

0800774c <send_char>:

void send_char(char c) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1000);
 8007756:	1df9      	adds	r1, r7, #7
 8007758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800775c:	2201      	movs	r2, #1
 800775e:	4803      	ldr	r0, [pc, #12]	; (800776c <send_char+0x20>)
 8007760:	f7fe fe1e 	bl	80063a0 <HAL_UART_Transmit>
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000634 	.word	0x20000634

08007770 <__io_putchar>:

int __io_putchar(int ch) {
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	send_char(ch);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff ffe5 	bl	800774c <send_char>
	return ch;
 8007782:	687b      	ldr	r3, [r7, #4]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007790:	f7fa ff22 	bl	80025d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007794:	f000 f8ee 	bl	8007974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007798:	f7ff fba6 	bl	8006ee8 <MX_GPIO_Init>
  MX_CRC_Init();
 800779c:	f7ff fa2e 	bl	8006bfc <MX_CRC_Init>
  MX_DMA2D_Init();
 80077a0:	f7ff fa62 	bl	8006c68 <MX_DMA2D_Init>
  MX_FMC_Init();
 80077a4:	f7ff faba 	bl	8006d1c <MX_FMC_Init>
  MX_GFXSIMULATOR_Init();
 80077a8:	f7ff fb96 	bl	8006ed8 <MX_GFXSIMULATOR_Init>
  MX_LTDC_Init();
 80077ac:	f7ff fd56 	bl	800725c <MX_LTDC_Init>
  MX_SPI5_Init();
 80077b0:	f000 ff90 	bl	80086d4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80077b4:	f001 f9de 	bl	8008b74 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80077b8:	f001 fae0 	bl	8008d7c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80077bc:	f7ff fca4 	bl	8007108 <MX_I2C3_Init>
  MX_TIM10_Init();
 80077c0:	f001 fa28 	bl	8008c14 <MX_TIM10_Init>
  MX_TIM11_Init();
 80077c4:	f001 fa4a 	bl	8008c5c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim10);
 80077c8:	4850      	ldr	r0, [pc, #320]	; (800790c <main+0x180>)
 80077ca:	f7fe f9fd 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 80077ce:	4850      	ldr	r0, [pc, #320]	; (8007910 <main+0x184>)
 80077d0:	f7fe f9fa 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
	__HAL_SPI_ENABLE(&hspi5);
 80077d4:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <main+0x188>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a4e      	ldr	r2, [pc, #312]	; (8007914 <main+0x188>)
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077e2:	601a      	str	r2, [r3, #0]

	Animacja = 0;
 80077e4:	4b4c      	ldr	r3, [pc, #304]	; (8007918 <main+0x18c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
	Kierunek = 1;
 80077ea:	4b4c      	ldr	r3, [pc, #304]	; (800791c <main+0x190>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
	X = 120;
 80077f0:	4b4b      	ldr	r3, [pc, #300]	; (8007920 <main+0x194>)
 80077f2:	2278      	movs	r2, #120	; 0x78
 80077f4:	801a      	strh	r2, [r3, #0]
	Y = 170;
 80077f6:	4b4b      	ldr	r3, [pc, #300]	; (8007924 <main+0x198>)
 80077f8:	22aa      	movs	r2, #170	; 0xaa
 80077fa:	801a      	strh	r2, [r3, #0]
	dT = 0.001;
 80077fc:	4b4a      	ldr	r3, [pc, #296]	; (8007928 <main+0x19c>)
 80077fe:	4a4b      	ldr	r2, [pc, #300]	; (800792c <main+0x1a0>)
 8007800:	601a      	str	r2, [r3, #0]
	fPoruszonoX = 0;
 8007802:	4b4b      	ldr	r3, [pc, #300]	; (8007930 <main+0x1a4>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
	fPoruszonoY = 0;
 8007808:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <main+0x1a8>)
 800780a:	2200      	movs	r2, #0
 800780c:	701a      	strb	r2, [r3, #0]
	CzasZerowaniaX = 0;
 800780e:	4b4a      	ldr	r3, [pc, #296]	; (8007938 <main+0x1ac>)
 8007810:	2200      	movs	r2, #0
 8007812:	801a      	strh	r2, [r3, #0]
	CzasZerowaniaY = 0;
 8007814:	4b49      	ldr	r3, [pc, #292]	; (800793c <main+0x1b0>)
 8007816:	2200      	movs	r2, #0
 8007818:	801a      	strh	r2, [r3, #0]

	OurL3GD20_Init();
 800781a:	f7ff ff0f 	bl	800763c <OurL3GD20_Init>

	BSP_LCD_Init();
 800781e:	f7f9 fe0b 	bl	8001438 <BSP_LCD_Init>
	//BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER+1024*1024*4);
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8007822:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8007826:	2000      	movs	r0, #0
 8007828:	f7f9 fe88 	bl	800153c <BSP_LCD_LayerDefaultInit>

	BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800782c:	2000      	movs	r0, #0
 800782e:	f7f9 fee9 	bl	8001604 <BSP_LCD_SelectLayer>

	BSP_LCD_DisplayOn();
 8007832:	f7fa fb09 	bl	8001e48 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8007836:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800783a:	f7f9 ff3b 	bl	80016b4 <BSP_LCD_Clear>
	//BSP_LCD_DrawBitmap(0, 0, (uint8_t*) image_data_Hehe);

	BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 800783e:	4840      	ldr	r0, [pc, #256]	; (8007940 <main+0x1b4>)
 8007840:	f7f9 fef0 	bl	8001624 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello");
 8007844:	493f      	ldr	r1, [pc, #252]	; (8007944 <main+0x1b8>)
 8007846:	2005      	movs	r0, #5
 8007848:	f7fa f8be 	bl	80019c8 <BSP_LCD_DisplayStringAtLine>

	HAL_Delay(2000);
 800784c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007850:	f7fa ff04 	bl	800265c <HAL_Delay>
	BSP_LCD_ClearStringLine(5);
 8007854:	2005      	movs	r0, #5
 8007856:	f7f9 ff55 	bl	8001704 <BSP_LCD_ClearStringLine>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 800785a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800785e:	f7f9 ff29 	bl	80016b4 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007862:	f04f 30ff 	mov.w	r0, #4294967295
 8007866:	f7f9 fedd 	bl	8001624 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, 240, 15);
 800786a:	230f      	movs	r3, #15
 800786c:	22f0      	movs	r2, #240	; 0xf0
 800786e:	2100      	movs	r1, #0
 8007870:	2000      	movs	r0, #0
 8007872:	f7fa f9ef 	bl	8001c54 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(0, 305, 240, 15);
 8007876:	230f      	movs	r3, #15
 8007878:	22f0      	movs	r2, #240	; 0xf0
 800787a:	f240 1131 	movw	r1, #305	; 0x131
 800787e:	2000      	movs	r0, #0
 8007880:	f7fa f9e8 	bl	8001c54 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(0, 15, 15, 290);
 8007884:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007888:	220f      	movs	r2, #15
 800788a:	210f      	movs	r1, #15
 800788c:	2000      	movs	r0, #0
 800788e:	f7fa f9e1 	bl	8001c54 <BSP_LCD_FillRect>
	BSP_LCD_FillRect(225, 15, 15, 290);
 8007892:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007896:	220f      	movs	r2, #15
 8007898:	210f      	movs	r1, #15
 800789a:	20e1      	movs	r0, #225	; 0xe1
 800789c:	f7fa f9da 	bl	8001c54 <BSP_LCD_FillRect>


	Animacja = 1;
 80078a0:	4b1d      	ldr	r3, [pc, #116]	; (8007918 <main+0x18c>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	701a      	strb	r2, [r3, #0]

		//OurL3GD20_Read();
		/*CalkaX += (long)Data.OsX;
		CalkaY += (long)Data.OsY;
		CalkaZ += (long)Data.OsZ;*/
		printf("Calka X: %li\n\r", CalkaX);
 80078a6:	4b28      	ldr	r3, [pc, #160]	; (8007948 <main+0x1bc>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4619      	mov	r1, r3
 80078ac:	4827      	ldr	r0, [pc, #156]	; (800794c <main+0x1c0>)
 80078ae:	f001 fb33 	bl	8008f18 <iprintf>
		printf("Calka Y: %li\n\r", CalkaY);
 80078b2:	4b27      	ldr	r3, [pc, #156]	; (8007950 <main+0x1c4>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	4826      	ldr	r0, [pc, #152]	; (8007954 <main+0x1c8>)
 80078ba:	f001 fb2d 	bl	8008f18 <iprintf>
		printf("Calka Z: %li\n\r", CalkaZ);
 80078be:	4b26      	ldr	r3, [pc, #152]	; (8007958 <main+0x1cc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4619      	mov	r1, r3
 80078c4:	4825      	ldr	r0, [pc, #148]	; (800795c <main+0x1d0>)
 80078c6:	f001 fb27 	bl	8008f18 <iprintf>
		printf("CzasX: %d\n\r", CzasZerowaniaX);
 80078ca:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <main+0x1ac>)
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	4619      	mov	r1, r3
 80078d2:	4823      	ldr	r0, [pc, #140]	; (8007960 <main+0x1d4>)
 80078d4:	f001 fb20 	bl	8008f18 <iprintf>
		printf("CzasY: %d\n\r", CzasZerowaniaY);
 80078d8:	4b18      	ldr	r3, [pc, #96]	; (800793c <main+0x1b0>)
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	b29b      	uxth	r3, r3
 80078de:	4619      	mov	r1, r3
 80078e0:	4820      	ldr	r0, [pc, #128]	; (8007964 <main+0x1d8>)
 80078e2:	f001 fb19 	bl	8008f18 <iprintf>
		printf("Predkosc X: %d\n\r", DataNow.OsX);
 80078e6:	4b20      	ldr	r3, [pc, #128]	; (8007968 <main+0x1dc>)
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b21b      	sxth	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	481f      	ldr	r0, [pc, #124]	; (800796c <main+0x1e0>)
 80078f0:	f001 fb12 	bl	8008f18 <iprintf>
		printf("Predkosc Y: %d\n\r", DataNow.OsY);
 80078f4:	4b1c      	ldr	r3, [pc, #112]	; (8007968 <main+0x1dc>)
 80078f6:	885b      	ldrh	r3, [r3, #2]
 80078f8:	b21b      	sxth	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	481c      	ldr	r0, [pc, #112]	; (8007970 <main+0x1e4>)
 80078fe:	f001 fb0b 	bl	8008f18 <iprintf>
		//printf("OsX: %d\n\r", Data.OsX);
		//printf("OsY: %d\n\r", Data.OsY);
		//printf("OsZ: %d\n\r", Data.OsZ);
		HAL_Delay(200);
 8007902:	20c8      	movs	r0, #200	; 0xc8
 8007904:	f7fa feaa 	bl	800265c <HAL_Delay>
		printf("Calka X: %li\n\r", CalkaX);
 8007908:	e7cd      	b.n	80078a6 <main+0x11a>
 800790a:	bf00      	nop
 800790c:	20000574 	.word	0x20000574
 8007910:	200005b4 	.word	0x200005b4
 8007914:	200004bc 	.word	0x200004bc
 8007918:	2000052d 	.word	0x2000052d
 800791c:	200004b8 	.word	0x200004b8
 8007920:	20000532 	.word	0x20000532
 8007924:	2000051e 	.word	0x2000051e
 8007928:	20000518 	.word	0x20000518
 800792c:	3a83126f 	.word	0x3a83126f
 8007930:	2000052c 	.word	0x2000052c
 8007934:	20000530 	.word	0x20000530
 8007938:	2000052e 	.word	0x2000052e
 800793c:	2000051c 	.word	0x2000051c
 8007940:	ff404040 	.word	0xff404040
 8007944:	08009d20 	.word	0x08009d20
 8007948:	20000528 	.word	0x20000528
 800794c:	08009d28 	.word	0x08009d28
 8007950:	200004b4 	.word	0x200004b4
 8007954:	08009d38 	.word	0x08009d38
 8007958:	20000514 	.word	0x20000514
 800795c:	08009d48 	.word	0x08009d48
 8007960:	08009d58 	.word	0x08009d58
 8007964:	08009d64 	.word	0x08009d64
 8007968:	20000520 	.word	0x20000520
 800796c:	08009d70 	.word	0x08009d70
 8007970:	08009d84 	.word	0x08009d84

08007974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b0a0      	sub	sp, #128	; 0x80
 8007978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800797a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800797e:	2230      	movs	r2, #48	; 0x30
 8007980:	2100      	movs	r1, #0
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fac0 	bl	8008f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	605a      	str	r2, [r3, #4]
 8007992:	609a      	str	r2, [r3, #8]
 8007994:	60da      	str	r2, [r3, #12]
 8007996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007998:	f107 030c 	add.w	r3, r7, #12
 800799c:	2230      	movs	r2, #48	; 0x30
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f001 fab1 	bl	8008f08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	4a35      	ldr	r2, [pc, #212]	; (8007a80 <SystemClock_Config+0x10c>)
 80079ac:	4b34      	ldr	r3, [pc, #208]	; (8007a80 <SystemClock_Config+0x10c>)
 80079ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b4:	6413      	str	r3, [r2, #64]	; 0x40
 80079b6:	4b32      	ldr	r3, [pc, #200]	; (8007a80 <SystemClock_Config+0x10c>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
 80079c6:	4a2f      	ldr	r2, [pc, #188]	; (8007a84 <SystemClock_Config+0x110>)
 80079c8:	4b2e      	ldr	r3, [pc, #184]	; (8007a84 <SystemClock_Config+0x110>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	4b2c      	ldr	r3, [pc, #176]	; (8007a84 <SystemClock_Config+0x110>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079da:	607b      	str	r3, [r7, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80079de:	2301      	movs	r3, #1
 80079e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079e8:	2302      	movs	r3, #2
 80079ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80079ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80079f2:	2304      	movs	r3, #4
 80079f4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80079f6:	23b4      	movs	r3, #180	; 0xb4
 80079f8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80079fa:	2302      	movs	r3, #2
 80079fc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80079fe:	2303      	movs	r3, #3
 8007a00:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fc fd00 	bl	800440c <HAL_RCC_OscConfig>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8007a12:	f000 fe57 	bl	80086c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007a16:	f7fc fca9 	bl	800436c <HAL_PWREx_EnableOverDrive>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8007a20:	f000 fe50 	bl	80086c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a24:	230f      	movs	r3, #15
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007a3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007a40:	2105      	movs	r1, #5
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fc ff24 	bl	8004890 <HAL_RCC_ClockConfig>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8007a4e:	f000 fe39 	bl	80086c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007a52:	2308      	movs	r3, #8
 8007a54:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8007a56:	23c0      	movs	r3, #192	; 0xc0
 8007a58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007a62:	f107 030c 	add.w	r3, r7, #12
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fd f932 	bl	8004cd0 <HAL_RCCEx_PeriphCLKConfig>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <SystemClock_Config+0x102>
  {
    Error_Handler();
 8007a72:	f000 fe27 	bl	80086c4 <Error_Handler>
  }
}
 8007a76:	bf00      	nop
 8007a78:	3780      	adds	r7, #128	; 0x80
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40007000 	.word	0x40007000

08007a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b5b0      	push	{r4, r5, r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10) //Przerwanie pochodzi od timera 10
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a9d      	ldr	r2, [pc, #628]	; (8007d0c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	f040 842a 	bne.w	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>
	{
		if (Animacja == 1)
 8007a9c:	4b9c      	ldr	r3, [pc, #624]	; (8007d10 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	f040 8425 	bne.w	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>
		{
			if ((Y < 300) && (Kierunek == 1)) {
 8007aa6:	4b9b      	ldr	r3, [pc, #620]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007ab0:	f080 80fc 	bcs.w	8007cac <HAL_TIM_PeriodElapsedCallback+0x224>
 8007ab4:	4b98      	ldr	r3, [pc, #608]	; (8007d18 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	f040 80f6 	bne.w	8007cac <HAL_TIM_PeriodElapsedCallback+0x224>

				BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f9 fd9f 	bl	8001604 <BSP_LCD_SelectLayer>

				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007ac6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007aca:	f7f9 fdab 	bl	8001624 <BSP_LCD_SetTextColor>

				if(X <= 25 && Y <= 25)
 8007ace:	4b93      	ldr	r3, [pc, #588]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007ad0:	881b      	ldrh	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b19      	cmp	r3, #25
 8007ad6:	d813      	bhi.n	8007b00 <HAL_TIM_PeriodElapsedCallback+0x78>
 8007ad8:	4b8e      	ldr	r3, [pc, #568]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b19      	cmp	r3, #25
 8007ae0:	d80e      	bhi.n	8007b00 <HAL_TIM_PeriodElapsedCallback+0x78>
					BSP_LCD_FillRect(X-10, Y - 10, 40, 40);
 8007ae2:	4b8e      	ldr	r3, [pc, #568]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b0a      	subs	r3, #10
 8007aea:	b298      	uxth	r0, r3
 8007aec:	4b89      	ldr	r3, [pc, #548]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	3b0a      	subs	r3, #10
 8007af4:	b299      	uxth	r1, r3
 8007af6:	2328      	movs	r3, #40	; 0x28
 8007af8:	2228      	movs	r2, #40	; 0x28
 8007afa:	f7fa f8ab 	bl	8001c54 <BSP_LCD_FillRect>
 8007afe:	e0ab      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(X >= 215 && Y >= 295)
 8007b00:	4b86      	ldr	r3, [pc, #536]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b02:	881b      	ldrh	r3, [r3, #0]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	2bd6      	cmp	r3, #214	; 0xd6
 8007b08:	d914      	bls.n	8007b34 <HAL_TIM_PeriodElapsedCallback+0xac>
 8007b0a:	4b82      	ldr	r3, [pc, #520]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007b14:	d90e      	bls.n	8007b34 <HAL_TIM_PeriodElapsedCallback+0xac>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 30);
 8007b16:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	3b14      	subs	r3, #20
 8007b1e:	b298      	uxth	r0, r3
 8007b20:	4b7c      	ldr	r3, [pc, #496]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	3b14      	subs	r3, #20
 8007b28:	b299      	uxth	r1, r3
 8007b2a:	231e      	movs	r3, #30
 8007b2c:	221e      	movs	r2, #30
 8007b2e:	f7fa f891 	bl	8001c54 <BSP_LCD_FillRect>
 8007b32:	e091      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(X <= 25 && Y >= 295)
 8007b34:	4b79      	ldr	r3, [pc, #484]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b36:	881b      	ldrh	r3, [r3, #0]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b19      	cmp	r3, #25
 8007b3c:	d814      	bhi.n	8007b68 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8007b3e:	4b75      	ldr	r3, [pc, #468]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007b48:	d90e      	bls.n	8007b68 <HAL_TIM_PeriodElapsedCallback+0xe0>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 30);
 8007b4a:	4b74      	ldr	r3, [pc, #464]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b0a      	subs	r3, #10
 8007b52:	b298      	uxth	r0, r3
 8007b54:	4b6f      	ldr	r3, [pc, #444]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	3b14      	subs	r3, #20
 8007b5c:	b299      	uxth	r1, r3
 8007b5e:	231e      	movs	r3, #30
 8007b60:	2228      	movs	r2, #40	; 0x28
 8007b62:	f7fa f877 	bl	8001c54 <BSP_LCD_FillRect>
 8007b66:	e077      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(X >= 215 && Y <= 25)
 8007b68:	4b6c      	ldr	r3, [pc, #432]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2bd6      	cmp	r3, #214	; 0xd6
 8007b70:	d913      	bls.n	8007b9a <HAL_TIM_PeriodElapsedCallback+0x112>
 8007b72:	4b68      	ldr	r3, [pc, #416]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b19      	cmp	r3, #25
 8007b7a:	d80e      	bhi.n	8007b9a <HAL_TIM_PeriodElapsedCallback+0x112>
					BSP_LCD_FillRect(X-20, Y - 10, 30, 40);
 8007b7c:	4b67      	ldr	r3, [pc, #412]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b14      	subs	r3, #20
 8007b84:	b298      	uxth	r0, r3
 8007b86:	4b63      	ldr	r3, [pc, #396]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b0a      	subs	r3, #10
 8007b8e:	b299      	uxth	r1, r3
 8007b90:	2328      	movs	r3, #40	; 0x28
 8007b92:	221e      	movs	r2, #30
 8007b94:	f7fa f85e 	bl	8001c54 <BSP_LCD_FillRect>
 8007b98:	e05e      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(X <= 25)
 8007b9a:	4b60      	ldr	r3, [pc, #384]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	2b19      	cmp	r3, #25
 8007ba2:	d80e      	bhi.n	8007bc2 <HAL_TIM_PeriodElapsedCallback+0x13a>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 40);
 8007ba4:	4b5d      	ldr	r3, [pc, #372]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007ba6:	881b      	ldrh	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b0a      	subs	r3, #10
 8007bac:	b298      	uxth	r0, r3
 8007bae:	4b59      	ldr	r3, [pc, #356]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	3b14      	subs	r3, #20
 8007bb6:	b299      	uxth	r1, r3
 8007bb8:	2328      	movs	r3, #40	; 0x28
 8007bba:	2228      	movs	r2, #40	; 0x28
 8007bbc:	f7fa f84a 	bl	8001c54 <BSP_LCD_FillRect>
 8007bc0:	e04a      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(X >= 215)
 8007bc2:	4b56      	ldr	r3, [pc, #344]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2bd6      	cmp	r3, #214	; 0xd6
 8007bca:	d90e      	bls.n	8007bea <HAL_TIM_PeriodElapsedCallback+0x162>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 40);
 8007bcc:	4b53      	ldr	r3, [pc, #332]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3b14      	subs	r3, #20
 8007bd4:	b298      	uxth	r0, r3
 8007bd6:	4b4f      	ldr	r3, [pc, #316]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	3b14      	subs	r3, #20
 8007bde:	b299      	uxth	r1, r3
 8007be0:	2328      	movs	r3, #40	; 0x28
 8007be2:	221e      	movs	r2, #30
 8007be4:	f7fa f836 	bl	8001c54 <BSP_LCD_FillRect>
 8007be8:	e036      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(Y >= 295)
 8007bea:	4b4a      	ldr	r3, [pc, #296]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007bf4:	d90e      	bls.n	8007c14 <HAL_TIM_PeriodElapsedCallback+0x18c>
					BSP_LCD_FillRect(X-20, Y - 20, 40, 30);
 8007bf6:	4b49      	ldr	r3, [pc, #292]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b14      	subs	r3, #20
 8007bfe:	b298      	uxth	r0, r3
 8007c00:	4b44      	ldr	r3, [pc, #272]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b14      	subs	r3, #20
 8007c08:	b299      	uxth	r1, r3
 8007c0a:	231e      	movs	r3, #30
 8007c0c:	2228      	movs	r2, #40	; 0x28
 8007c0e:	f7fa f821 	bl	8001c54 <BSP_LCD_FillRect>
 8007c12:	e021      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else if(Y <= 25)
 8007c14:	4b3f      	ldr	r3, [pc, #252]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c16:	881b      	ldrh	r3, [r3, #0]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b19      	cmp	r3, #25
 8007c1c:	d80e      	bhi.n	8007c3c <HAL_TIM_PeriodElapsedCallback+0x1b4>
					BSP_LCD_FillRect(X-20, Y - 10, 40, 40);
 8007c1e:	4b3f      	ldr	r3, [pc, #252]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b14      	subs	r3, #20
 8007c26:	b298      	uxth	r0, r3
 8007c28:	4b3a      	ldr	r3, [pc, #232]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b0a      	subs	r3, #10
 8007c30:	b299      	uxth	r1, r3
 8007c32:	2328      	movs	r3, #40	; 0x28
 8007c34:	2228      	movs	r2, #40	; 0x28
 8007c36:	f7fa f80d 	bl	8001c54 <BSP_LCD_FillRect>
 8007c3a:	e00d      	b.n	8007c58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				else
					BSP_LCD_FillRect(X-20, Y - 20, 40, 40);
 8007c3c:	4b37      	ldr	r3, [pc, #220]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b14      	subs	r3, #20
 8007c44:	b298      	uxth	r0, r3
 8007c46:	4b33      	ldr	r3, [pc, #204]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b14      	subs	r3, #20
 8007c4e:	b299      	uxth	r1, r3
 8007c50:	2328      	movs	r3, #40	; 0x28
 8007c52:	2228      	movs	r2, #40	; 0x28
 8007c54:	f7f9 fffe 	bl	8001c54 <BSP_LCD_FillRect>



				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007c58:	f04f 30ff 	mov.w	r0, #4294967295
 8007c5c:	f7f9 fce2 	bl	8001624 <BSP_LCD_SetTextColor>

				//Y += 10;
				BSP_LCD_FillCircle(X, Y, 10);
 8007c60:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b298      	uxth	r0, r3
 8007c66:	4b2b      	ldr	r3, [pc, #172]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f7fa f84a 	bl	8001d08 <BSP_LCD_FillCircle>
				BSP_LCD_FillRect(0, 0, 240, 15);
 8007c74:	230f      	movs	r3, #15
 8007c76:	22f0      	movs	r2, #240	; 0xf0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	2000      	movs	r0, #0
 8007c7c:	f7f9 ffea 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 305, 240, 15);
 8007c80:	230f      	movs	r3, #15
 8007c82:	22f0      	movs	r2, #240	; 0xf0
 8007c84:	f240 1131 	movw	r1, #305	; 0x131
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f7f9 ffe3 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 15, 15, 290);
 8007c8e:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007c92:	220f      	movs	r2, #15
 8007c94:	210f      	movs	r1, #15
 8007c96:	2000      	movs	r0, #0
 8007c98:	f7f9 ffdc 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(225, 15, 15, 290);
 8007c9c:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007ca0:	220f      	movs	r2, #15
 8007ca2:	210f      	movs	r1, #15
 8007ca4:	20e1      	movs	r0, #225	; 0xe1
 8007ca6:	f7f9 ffd5 	bl	8001c54 <BSP_LCD_FillRect>
 8007caa:	e321      	b.n	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>

			} else if ((Y >= 300) && (Kierunek == 1)) {
 8007cac:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007cb6:	f0c0 8109 	bcc.w	8007ecc <HAL_TIM_PeriodElapsedCallback+0x444>
 8007cba:	4b17      	ldr	r3, [pc, #92]	; (8007d18 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 8103 	bne.w	8007ecc <HAL_TIM_PeriodElapsedCallback+0x444>
				Kierunek = 0;
 8007cc6:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	701a      	strb	r2, [r3, #0]

				BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7f9 fc99 	bl	8001604 <BSP_LCD_SelectLayer>

				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007cd2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007cd6:	f7f9 fca5 	bl	8001624 <BSP_LCD_SetTextColor>
				if(X <= 25 && Y <= 25)
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2b19      	cmp	r3, #25
 8007ce2:	d81d      	bhi.n	8007d20 <HAL_TIM_PeriodElapsedCallback+0x298>
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b19      	cmp	r3, #25
 8007cec:	d818      	bhi.n	8007d20 <HAL_TIM_PeriodElapsedCallback+0x298>
					BSP_LCD_FillRect(X-10, Y - 10, 40, 40);
 8007cee:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	3b0a      	subs	r3, #10
 8007cf6:	b298      	uxth	r0, r3
 8007cf8:	4b06      	ldr	r3, [pc, #24]	; (8007d14 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	3b0a      	subs	r3, #10
 8007d00:	b299      	uxth	r1, r3
 8007d02:	2328      	movs	r3, #40	; 0x28
 8007d04:	2228      	movs	r2, #40	; 0x28
 8007d06:	f7f9 ffa5 	bl	8001c54 <BSP_LCD_FillRect>
 8007d0a:	e0b5      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
 8007d0c:	40014400 	.word	0x40014400
 8007d10:	2000052d 	.word	0x2000052d
 8007d14:	2000051e 	.word	0x2000051e
 8007d18:	200004b8 	.word	0x200004b8
 8007d1c:	20000532 	.word	0x20000532
				else if(X >= 215 && Y >= 295)
 8007d20:	4b9a      	ldr	r3, [pc, #616]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	2bd6      	cmp	r3, #214	; 0xd6
 8007d28:	d914      	bls.n	8007d54 <HAL_TIM_PeriodElapsedCallback+0x2cc>
 8007d2a:	4b99      	ldr	r3, [pc, #612]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007d34:	d90e      	bls.n	8007d54 <HAL_TIM_PeriodElapsedCallback+0x2cc>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 30);
 8007d36:	4b95      	ldr	r3, [pc, #596]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	3b14      	subs	r3, #20
 8007d3e:	b298      	uxth	r0, r3
 8007d40:	4b93      	ldr	r3, [pc, #588]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	3b14      	subs	r3, #20
 8007d48:	b299      	uxth	r1, r3
 8007d4a:	231e      	movs	r3, #30
 8007d4c:	221e      	movs	r2, #30
 8007d4e:	f7f9 ff81 	bl	8001c54 <BSP_LCD_FillRect>
 8007d52:	e091      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(X <= 25 && Y >= 295)
 8007d54:	4b8d      	ldr	r3, [pc, #564]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	2b19      	cmp	r3, #25
 8007d5c:	d814      	bhi.n	8007d88 <HAL_TIM_PeriodElapsedCallback+0x300>
 8007d5e:	4b8c      	ldr	r3, [pc, #560]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007d68:	d90e      	bls.n	8007d88 <HAL_TIM_PeriodElapsedCallback+0x300>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 30);
 8007d6a:	4b88      	ldr	r3, [pc, #544]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	3b0a      	subs	r3, #10
 8007d72:	b298      	uxth	r0, r3
 8007d74:	4b86      	ldr	r3, [pc, #536]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b14      	subs	r3, #20
 8007d7c:	b299      	uxth	r1, r3
 8007d7e:	231e      	movs	r3, #30
 8007d80:	2228      	movs	r2, #40	; 0x28
 8007d82:	f7f9 ff67 	bl	8001c54 <BSP_LCD_FillRect>
 8007d86:	e077      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(X >= 215 && Y <= 25)
 8007d88:	4b80      	ldr	r3, [pc, #512]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	2bd6      	cmp	r3, #214	; 0xd6
 8007d90:	d913      	bls.n	8007dba <HAL_TIM_PeriodElapsedCallback+0x332>
 8007d92:	4b7f      	ldr	r3, [pc, #508]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007d94:	881b      	ldrh	r3, [r3, #0]
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	2b19      	cmp	r3, #25
 8007d9a:	d80e      	bhi.n	8007dba <HAL_TIM_PeriodElapsedCallback+0x332>
					BSP_LCD_FillRect(X-20, Y - 10, 30, 40);
 8007d9c:	4b7b      	ldr	r3, [pc, #492]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	3b14      	subs	r3, #20
 8007da4:	b298      	uxth	r0, r3
 8007da6:	4b7a      	ldr	r3, [pc, #488]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b0a      	subs	r3, #10
 8007dae:	b299      	uxth	r1, r3
 8007db0:	2328      	movs	r3, #40	; 0x28
 8007db2:	221e      	movs	r2, #30
 8007db4:	f7f9 ff4e 	bl	8001c54 <BSP_LCD_FillRect>
 8007db8:	e05e      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(X <= 25)
 8007dba:	4b74      	ldr	r3, [pc, #464]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	2b19      	cmp	r3, #25
 8007dc2:	d80e      	bhi.n	8007de2 <HAL_TIM_PeriodElapsedCallback+0x35a>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 40);
 8007dc4:	4b71      	ldr	r3, [pc, #452]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007dc6:	881b      	ldrh	r3, [r3, #0]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b0a      	subs	r3, #10
 8007dcc:	b298      	uxth	r0, r3
 8007dce:	4b70      	ldr	r3, [pc, #448]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	3b14      	subs	r3, #20
 8007dd6:	b299      	uxth	r1, r3
 8007dd8:	2328      	movs	r3, #40	; 0x28
 8007dda:	2228      	movs	r2, #40	; 0x28
 8007ddc:	f7f9 ff3a 	bl	8001c54 <BSP_LCD_FillRect>
 8007de0:	e04a      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(X >= 215)
 8007de2:	4b6a      	ldr	r3, [pc, #424]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	2bd6      	cmp	r3, #214	; 0xd6
 8007dea:	d90e      	bls.n	8007e0a <HAL_TIM_PeriodElapsedCallback+0x382>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 40);
 8007dec:	4b67      	ldr	r3, [pc, #412]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b14      	subs	r3, #20
 8007df4:	b298      	uxth	r0, r3
 8007df6:	4b66      	ldr	r3, [pc, #408]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	3b14      	subs	r3, #20
 8007dfe:	b299      	uxth	r1, r3
 8007e00:	2328      	movs	r3, #40	; 0x28
 8007e02:	221e      	movs	r2, #30
 8007e04:	f7f9 ff26 	bl	8001c54 <BSP_LCD_FillRect>
 8007e08:	e036      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(Y >= 295)
 8007e0a:	4b61      	ldr	r3, [pc, #388]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007e14:	d90e      	bls.n	8007e34 <HAL_TIM_PeriodElapsedCallback+0x3ac>
					BSP_LCD_FillRect(X-20, Y - 20, 40, 30);
 8007e16:	4b5d      	ldr	r3, [pc, #372]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b14      	subs	r3, #20
 8007e1e:	b298      	uxth	r0, r3
 8007e20:	4b5b      	ldr	r3, [pc, #364]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b14      	subs	r3, #20
 8007e28:	b299      	uxth	r1, r3
 8007e2a:	231e      	movs	r3, #30
 8007e2c:	2228      	movs	r2, #40	; 0x28
 8007e2e:	f7f9 ff11 	bl	8001c54 <BSP_LCD_FillRect>
 8007e32:	e021      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else if(Y <= 25)
 8007e34:	4b56      	ldr	r3, [pc, #344]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b19      	cmp	r3, #25
 8007e3c:	d80e      	bhi.n	8007e5c <HAL_TIM_PeriodElapsedCallback+0x3d4>
					BSP_LCD_FillRect(X-20, Y - 10, 40, 40);
 8007e3e:	4b53      	ldr	r3, [pc, #332]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b14      	subs	r3, #20
 8007e46:	b298      	uxth	r0, r3
 8007e48:	4b51      	ldr	r3, [pc, #324]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b0a      	subs	r3, #10
 8007e50:	b299      	uxth	r1, r3
 8007e52:	2328      	movs	r3, #40	; 0x28
 8007e54:	2228      	movs	r2, #40	; 0x28
 8007e56:	f7f9 fefd 	bl	8001c54 <BSP_LCD_FillRect>
 8007e5a:	e00d      	b.n	8007e78 <HAL_TIM_PeriodElapsedCallback+0x3f0>
				else
					BSP_LCD_FillRect(X-20, Y - 20, 40, 40);
 8007e5c:	4b4b      	ldr	r3, [pc, #300]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b14      	subs	r3, #20
 8007e64:	b298      	uxth	r0, r3
 8007e66:	4b4a      	ldr	r3, [pc, #296]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e68:	881b      	ldrh	r3, [r3, #0]
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3b14      	subs	r3, #20
 8007e6e:	b299      	uxth	r1, r3
 8007e70:	2328      	movs	r3, #40	; 0x28
 8007e72:	2228      	movs	r2, #40	; 0x28
 8007e74:	f7f9 feee 	bl	8001c54 <BSP_LCD_FillRect>


				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	f7f9 fbd2 	bl	8001624 <BSP_LCD_SetTextColor>

				//Y -= 10;
				BSP_LCD_FillCircle(X, Y, 10);
 8007e80:	4b42      	ldr	r3, [pc, #264]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	b298      	uxth	r0, r3
 8007e86:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007e88:	881b      	ldrh	r3, [r3, #0]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f7f9 ff3a 	bl	8001d08 <BSP_LCD_FillCircle>
				BSP_LCD_FillRect(0, 0, 240, 15);
 8007e94:	230f      	movs	r3, #15
 8007e96:	22f0      	movs	r2, #240	; 0xf0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7f9 feda 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 305, 240, 15);
 8007ea0:	230f      	movs	r3, #15
 8007ea2:	22f0      	movs	r2, #240	; 0xf0
 8007ea4:	f240 1131 	movw	r1, #305	; 0x131
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	f7f9 fed3 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 15, 15, 290);
 8007eae:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007eb2:	220f      	movs	r2, #15
 8007eb4:	210f      	movs	r1, #15
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	f7f9 fecc 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(225, 15, 15, 290);
 8007ebc:	f44f 7391 	mov.w	r3, #290	; 0x122
 8007ec0:	220f      	movs	r2, #15
 8007ec2:	210f      	movs	r1, #15
 8007ec4:	20e1      	movs	r0, #225	; 0xe1
 8007ec6:	f7f9 fec5 	bl	8001c54 <BSP_LCD_FillRect>
 8007eca:	e211      	b.n	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>

			} else if ((Y > 20) && (Kierunek == 0)) {
 8007ecc:	4b30      	ldr	r3, [pc, #192]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	2b14      	cmp	r3, #20
 8007ed4:	f240 8102 	bls.w	80080dc <HAL_TIM_PeriodElapsedCallback+0x654>
 8007ed8:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f040 80fc 	bne.w	80080dc <HAL_TIM_PeriodElapsedCallback+0x654>

				BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f7f9 fb8d 	bl	8001604 <BSP_LCD_SelectLayer>

				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007eea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007eee:	f7f9 fb99 	bl	8001624 <BSP_LCD_SetTextColor>
				if(X <= 25 && Y <= 25)
 8007ef2:	4b26      	ldr	r3, [pc, #152]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007ef4:	881b      	ldrh	r3, [r3, #0]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	2b19      	cmp	r3, #25
 8007efa:	d813      	bhi.n	8007f24 <HAL_TIM_PeriodElapsedCallback+0x49c>
 8007efc:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b19      	cmp	r3, #25
 8007f04:	d80e      	bhi.n	8007f24 <HAL_TIM_PeriodElapsedCallback+0x49c>
					BSP_LCD_FillRect(X-10, Y - 10, 40, 40);
 8007f06:	4b21      	ldr	r3, [pc, #132]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	3b0a      	subs	r3, #10
 8007f0e:	b298      	uxth	r0, r3
 8007f10:	4b1f      	ldr	r3, [pc, #124]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	3b0a      	subs	r3, #10
 8007f18:	b299      	uxth	r1, r3
 8007f1a:	2328      	movs	r3, #40	; 0x28
 8007f1c:	2228      	movs	r2, #40	; 0x28
 8007f1e:	f7f9 fe99 	bl	8001c54 <BSP_LCD_FillRect>
 8007f22:	e0b1      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(X >= 215 && Y >= 295)
 8007f24:	4b19      	ldr	r3, [pc, #100]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2bd6      	cmp	r3, #214	; 0xd6
 8007f2c:	d914      	bls.n	8007f58 <HAL_TIM_PeriodElapsedCallback+0x4d0>
 8007f2e:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007f38:	d90e      	bls.n	8007f58 <HAL_TIM_PeriodElapsedCallback+0x4d0>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 30);
 8007f3a:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b14      	subs	r3, #20
 8007f42:	b298      	uxth	r0, r3
 8007f44:	4b12      	ldr	r3, [pc, #72]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b14      	subs	r3, #20
 8007f4c:	b299      	uxth	r1, r3
 8007f4e:	231e      	movs	r3, #30
 8007f50:	221e      	movs	r2, #30
 8007f52:	f7f9 fe7f 	bl	8001c54 <BSP_LCD_FillRect>
 8007f56:	e097      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(X <= 25 && Y >= 295)
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	2b19      	cmp	r3, #25
 8007f60:	d81a      	bhi.n	8007f98 <HAL_TIM_PeriodElapsedCallback+0x510>
 8007f62:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8007f6c:	d914      	bls.n	8007f98 <HAL_TIM_PeriodElapsedCallback+0x510>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 30);
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <HAL_TIM_PeriodElapsedCallback+0x504>)
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	3b0a      	subs	r3, #10
 8007f76:	b298      	uxth	r0, r3
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b14      	subs	r3, #20
 8007f80:	b299      	uxth	r1, r3
 8007f82:	231e      	movs	r3, #30
 8007f84:	2228      	movs	r2, #40	; 0x28
 8007f86:	f7f9 fe65 	bl	8001c54 <BSP_LCD_FillRect>
 8007f8a:	e07d      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
 8007f8c:	20000532 	.word	0x20000532
 8007f90:	2000051e 	.word	0x2000051e
 8007f94:	200004b8 	.word	0x200004b8
				else if(X >= 215 && Y <= 25)
 8007f98:	4b98      	ldr	r3, [pc, #608]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007f9a:	881b      	ldrh	r3, [r3, #0]
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2bd6      	cmp	r3, #214	; 0xd6
 8007fa0:	d913      	bls.n	8007fca <HAL_TIM_PeriodElapsedCallback+0x542>
 8007fa2:	4b97      	ldr	r3, [pc, #604]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b19      	cmp	r3, #25
 8007faa:	d80e      	bhi.n	8007fca <HAL_TIM_PeriodElapsedCallback+0x542>
					BSP_LCD_FillRect(X-20, Y - 10, 30, 40);
 8007fac:	4b93      	ldr	r3, [pc, #588]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b14      	subs	r3, #20
 8007fb4:	b298      	uxth	r0, r3
 8007fb6:	4b92      	ldr	r3, [pc, #584]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8007fb8:	881b      	ldrh	r3, [r3, #0]
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b0a      	subs	r3, #10
 8007fbe:	b299      	uxth	r1, r3
 8007fc0:	2328      	movs	r3, #40	; 0x28
 8007fc2:	221e      	movs	r2, #30
 8007fc4:	f7f9 fe46 	bl	8001c54 <BSP_LCD_FillRect>
 8007fc8:	e05e      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(X <= 25)
 8007fca:	4b8c      	ldr	r3, [pc, #560]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007fcc:	881b      	ldrh	r3, [r3, #0]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b19      	cmp	r3, #25
 8007fd2:	d80e      	bhi.n	8007ff2 <HAL_TIM_PeriodElapsedCallback+0x56a>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 40);
 8007fd4:	4b89      	ldr	r3, [pc, #548]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007fd6:	881b      	ldrh	r3, [r3, #0]
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	3b0a      	subs	r3, #10
 8007fdc:	b298      	uxth	r0, r3
 8007fde:	4b88      	ldr	r3, [pc, #544]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3b14      	subs	r3, #20
 8007fe6:	b299      	uxth	r1, r3
 8007fe8:	2328      	movs	r3, #40	; 0x28
 8007fea:	2228      	movs	r2, #40	; 0x28
 8007fec:	f7f9 fe32 	bl	8001c54 <BSP_LCD_FillRect>
 8007ff0:	e04a      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(X >= 215)
 8007ff2:	4b82      	ldr	r3, [pc, #520]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2bd6      	cmp	r3, #214	; 0xd6
 8007ffa:	d90e      	bls.n	800801a <HAL_TIM_PeriodElapsedCallback+0x592>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 40);
 8007ffc:	4b7f      	ldr	r3, [pc, #508]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	3b14      	subs	r3, #20
 8008004:	b298      	uxth	r0, r3
 8008006:	4b7e      	ldr	r3, [pc, #504]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	b29b      	uxth	r3, r3
 800800c:	3b14      	subs	r3, #20
 800800e:	b299      	uxth	r1, r3
 8008010:	2328      	movs	r3, #40	; 0x28
 8008012:	221e      	movs	r2, #30
 8008014:	f7f9 fe1e 	bl	8001c54 <BSP_LCD_FillRect>
 8008018:	e036      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(Y >= 295)
 800801a:	4b79      	ldr	r3, [pc, #484]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800801c:	881b      	ldrh	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008024:	d90e      	bls.n	8008044 <HAL_TIM_PeriodElapsedCallback+0x5bc>
					BSP_LCD_FillRect(X-20, Y - 20, 40, 30);
 8008026:	4b75      	ldr	r3, [pc, #468]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	3b14      	subs	r3, #20
 800802e:	b298      	uxth	r0, r3
 8008030:	4b73      	ldr	r3, [pc, #460]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	3b14      	subs	r3, #20
 8008038:	b299      	uxth	r1, r3
 800803a:	231e      	movs	r3, #30
 800803c:	2228      	movs	r2, #40	; 0x28
 800803e:	f7f9 fe09 	bl	8001c54 <BSP_LCD_FillRect>
 8008042:	e021      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else if(Y <= 25)
 8008044:	4b6e      	ldr	r3, [pc, #440]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b29b      	uxth	r3, r3
 800804a:	2b19      	cmp	r3, #25
 800804c:	d80e      	bhi.n	800806c <HAL_TIM_PeriodElapsedCallback+0x5e4>
					BSP_LCD_FillRect(X-20, Y - 10, 40, 40);
 800804e:	4b6b      	ldr	r3, [pc, #428]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008050:	881b      	ldrh	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	3b14      	subs	r3, #20
 8008056:	b298      	uxth	r0, r3
 8008058:	4b69      	ldr	r3, [pc, #420]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b0a      	subs	r3, #10
 8008060:	b299      	uxth	r1, r3
 8008062:	2328      	movs	r3, #40	; 0x28
 8008064:	2228      	movs	r2, #40	; 0x28
 8008066:	f7f9 fdf5 	bl	8001c54 <BSP_LCD_FillRect>
 800806a:	e00d      	b.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x600>
				else
					BSP_LCD_FillRect(X-20, Y - 20, 40, 40);
 800806c:	4b63      	ldr	r3, [pc, #396]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b14      	subs	r3, #20
 8008074:	b298      	uxth	r0, r3
 8008076:	4b62      	ldr	r3, [pc, #392]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b14      	subs	r3, #20
 800807e:	b299      	uxth	r1, r3
 8008080:	2328      	movs	r3, #40	; 0x28
 8008082:	2228      	movs	r2, #40	; 0x28
 8008084:	f7f9 fde6 	bl	8001c54 <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008088:	f04f 30ff 	mov.w	r0, #4294967295
 800808c:	f7f9 faca 	bl	8001624 <BSP_LCD_SetTextColor>

				//Y -= 10;
				BSP_LCD_FillCircle(X, Y, 10);
 8008090:	4b5a      	ldr	r3, [pc, #360]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	b298      	uxth	r0, r3
 8008096:	4b5a      	ldr	r3, [pc, #360]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	b29b      	uxth	r3, r3
 800809c:	220a      	movs	r2, #10
 800809e:	4619      	mov	r1, r3
 80080a0:	f7f9 fe32 	bl	8001d08 <BSP_LCD_FillCircle>
				BSP_LCD_FillRect(0, 0, 240, 15);
 80080a4:	230f      	movs	r3, #15
 80080a6:	22f0      	movs	r2, #240	; 0xf0
 80080a8:	2100      	movs	r1, #0
 80080aa:	2000      	movs	r0, #0
 80080ac:	f7f9 fdd2 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 305, 240, 15);
 80080b0:	230f      	movs	r3, #15
 80080b2:	22f0      	movs	r2, #240	; 0xf0
 80080b4:	f240 1131 	movw	r1, #305	; 0x131
 80080b8:	2000      	movs	r0, #0
 80080ba:	f7f9 fdcb 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 15, 15, 290);
 80080be:	f44f 7391 	mov.w	r3, #290	; 0x122
 80080c2:	220f      	movs	r2, #15
 80080c4:	210f      	movs	r1, #15
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7f9 fdc4 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(225, 15, 15, 290);
 80080cc:	f44f 7391 	mov.w	r3, #290	; 0x122
 80080d0:	220f      	movs	r2, #15
 80080d2:	210f      	movs	r1, #15
 80080d4:	20e1      	movs	r0, #225	; 0xe1
 80080d6:	f7f9 fdbd 	bl	8001c54 <BSP_LCD_FillRect>
 80080da:	e109      	b.n	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>

			} else if ((Y <= 20) && (Kierunek == 0)) {
 80080dc:	4b48      	ldr	r3, [pc, #288]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b14      	cmp	r3, #20
 80080e4:	f200 8104 	bhi.w	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>
 80080e8:	4b46      	ldr	r3, [pc, #280]	; (8008204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 80fe 	bne.w	80082f0 <HAL_TIM_PeriodElapsedCallback+0x868>
				Kierunek = 1;
 80080f4:	4b43      	ldr	r3, [pc, #268]	; (8008204 <HAL_TIM_PeriodElapsedCallback+0x77c>)
 80080f6:	2201      	movs	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]

				BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 80080fa:	2000      	movs	r0, #0
 80080fc:	f7f9 fa82 	bl	8001604 <BSP_LCD_SelectLayer>

				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008100:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008104:	f7f9 fa8e 	bl	8001624 <BSP_LCD_SetTextColor>
				if(X <= 25 && Y <= 25)
 8008108:	4b3c      	ldr	r3, [pc, #240]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	2b19      	cmp	r3, #25
 8008110:	d813      	bhi.n	800813a <HAL_TIM_PeriodElapsedCallback+0x6b2>
 8008112:	4b3b      	ldr	r3, [pc, #236]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b19      	cmp	r3, #25
 800811a:	d80e      	bhi.n	800813a <HAL_TIM_PeriodElapsedCallback+0x6b2>
					BSP_LCD_FillRect(X-10, Y - 10, 40, 40);
 800811c:	4b37      	ldr	r3, [pc, #220]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b0a      	subs	r3, #10
 8008124:	b298      	uxth	r0, r3
 8008126:	4b36      	ldr	r3, [pc, #216]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b0a      	subs	r3, #10
 800812e:	b299      	uxth	r1, r3
 8008130:	2328      	movs	r3, #40	; 0x28
 8008132:	2228      	movs	r2, #40	; 0x28
 8008134:	f7f9 fd8e 	bl	8001c54 <BSP_LCD_FillRect>
 8008138:	e0b1      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(X >= 215 && Y >= 295)
 800813a:	4b30      	ldr	r3, [pc, #192]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	2bd6      	cmp	r3, #214	; 0xd6
 8008142:	d914      	bls.n	800816e <HAL_TIM_PeriodElapsedCallback+0x6e6>
 8008144:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29b      	uxth	r3, r3
 800814a:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800814e:	d90e      	bls.n	800816e <HAL_TIM_PeriodElapsedCallback+0x6e6>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 30);
 8008150:	4b2a      	ldr	r3, [pc, #168]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b14      	subs	r3, #20
 8008158:	b298      	uxth	r0, r3
 800815a:	4b29      	ldr	r3, [pc, #164]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b14      	subs	r3, #20
 8008162:	b299      	uxth	r1, r3
 8008164:	231e      	movs	r3, #30
 8008166:	221e      	movs	r2, #30
 8008168:	f7f9 fd74 	bl	8001c54 <BSP_LCD_FillRect>
 800816c:	e097      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(X <= 25 && Y >= 295)
 800816e:	4b23      	ldr	r3, [pc, #140]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	2b19      	cmp	r3, #25
 8008176:	d814      	bhi.n	80081a2 <HAL_TIM_PeriodElapsedCallback+0x71a>
 8008178:	4b21      	ldr	r3, [pc, #132]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008182:	d90e      	bls.n	80081a2 <HAL_TIM_PeriodElapsedCallback+0x71a>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 30);
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	3b0a      	subs	r3, #10
 800818c:	b298      	uxth	r0, r3
 800818e:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b14      	subs	r3, #20
 8008196:	b299      	uxth	r1, r3
 8008198:	231e      	movs	r3, #30
 800819a:	2228      	movs	r2, #40	; 0x28
 800819c:	f7f9 fd5a 	bl	8001c54 <BSP_LCD_FillRect>
 80081a0:	e07d      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(X >= 215 && Y <= 25)
 80081a2:	4b16      	ldr	r3, [pc, #88]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	2bd6      	cmp	r3, #214	; 0xd6
 80081aa:	d913      	bls.n	80081d4 <HAL_TIM_PeriodElapsedCallback+0x74c>
 80081ac:	4b14      	ldr	r3, [pc, #80]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	2b19      	cmp	r3, #25
 80081b4:	d80e      	bhi.n	80081d4 <HAL_TIM_PeriodElapsedCallback+0x74c>
					BSP_LCD_FillRect(X-20, Y - 10, 30, 40);
 80081b6:	4b11      	ldr	r3, [pc, #68]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b14      	subs	r3, #20
 80081be:	b298      	uxth	r0, r3
 80081c0:	4b0f      	ldr	r3, [pc, #60]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80081c2:	881b      	ldrh	r3, [r3, #0]
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b0a      	subs	r3, #10
 80081c8:	b299      	uxth	r1, r3
 80081ca:	2328      	movs	r3, #40	; 0x28
 80081cc:	221e      	movs	r2, #30
 80081ce:	f7f9 fd41 	bl	8001c54 <BSP_LCD_FillRect>
 80081d2:	e064      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(X <= 25)
 80081d4:	4b09      	ldr	r3, [pc, #36]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b19      	cmp	r3, #25
 80081dc:	d814      	bhi.n	8008208 <HAL_TIM_PeriodElapsedCallback+0x780>
					BSP_LCD_FillRect(X-10, Y - 20, 40, 40);
 80081de:	4b07      	ldr	r3, [pc, #28]	; (80081fc <HAL_TIM_PeriodElapsedCallback+0x774>)
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	3b0a      	subs	r3, #10
 80081e6:	b298      	uxth	r0, r3
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_TIM_PeriodElapsedCallback+0x778>)
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b14      	subs	r3, #20
 80081f0:	b299      	uxth	r1, r3
 80081f2:	2328      	movs	r3, #40	; 0x28
 80081f4:	2228      	movs	r2, #40	; 0x28
 80081f6:	f7f9 fd2d 	bl	8001c54 <BSP_LCD_FillRect>
 80081fa:	e050      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
 80081fc:	20000532 	.word	0x20000532
 8008200:	2000051e 	.word	0x2000051e
 8008204:	200004b8 	.word	0x200004b8
				else if(X >= 215)
 8008208:	4b8c      	ldr	r3, [pc, #560]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800820a:	881b      	ldrh	r3, [r3, #0]
 800820c:	b29b      	uxth	r3, r3
 800820e:	2bd6      	cmp	r3, #214	; 0xd6
 8008210:	d90e      	bls.n	8008230 <HAL_TIM_PeriodElapsedCallback+0x7a8>
					BSP_LCD_FillRect(X-20, Y - 20, 30, 40);
 8008212:	4b8a      	ldr	r3, [pc, #552]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	3b14      	subs	r3, #20
 800821a:	b298      	uxth	r0, r3
 800821c:	4b88      	ldr	r3, [pc, #544]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	3b14      	subs	r3, #20
 8008224:	b299      	uxth	r1, r3
 8008226:	2328      	movs	r3, #40	; 0x28
 8008228:	221e      	movs	r2, #30
 800822a:	f7f9 fd13 	bl	8001c54 <BSP_LCD_FillRect>
 800822e:	e036      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(Y >= 295)
 8008230:	4b83      	ldr	r3, [pc, #524]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 800823a:	d90e      	bls.n	800825a <HAL_TIM_PeriodElapsedCallback+0x7d2>
					BSP_LCD_FillRect(X-20, Y - 20, 40, 30);
 800823c:	4b7f      	ldr	r3, [pc, #508]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	3b14      	subs	r3, #20
 8008244:	b298      	uxth	r0, r3
 8008246:	4b7e      	ldr	r3, [pc, #504]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	3b14      	subs	r3, #20
 800824e:	b299      	uxth	r1, r3
 8008250:	231e      	movs	r3, #30
 8008252:	2228      	movs	r2, #40	; 0x28
 8008254:	f7f9 fcfe 	bl	8001c54 <BSP_LCD_FillRect>
 8008258:	e021      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else if(Y <= 25)
 800825a:	4b79      	ldr	r3, [pc, #484]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b19      	cmp	r3, #25
 8008262:	d80e      	bhi.n	8008282 <HAL_TIM_PeriodElapsedCallback+0x7fa>
					BSP_LCD_FillRect(X-20, Y - 10, 40, 40);
 8008264:	4b75      	ldr	r3, [pc, #468]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	3b14      	subs	r3, #20
 800826c:	b298      	uxth	r0, r3
 800826e:	4b74      	ldr	r3, [pc, #464]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b0a      	subs	r3, #10
 8008276:	b299      	uxth	r1, r3
 8008278:	2328      	movs	r3, #40	; 0x28
 800827a:	2228      	movs	r2, #40	; 0x28
 800827c:	f7f9 fcea 	bl	8001c54 <BSP_LCD_FillRect>
 8008280:	e00d      	b.n	800829e <HAL_TIM_PeriodElapsedCallback+0x816>
				else
					BSP_LCD_FillRect(X-20, Y - 20, 40, 40);
 8008282:	4b6e      	ldr	r3, [pc, #440]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b14      	subs	r3, #20
 800828a:	b298      	uxth	r0, r3
 800828c:	4b6c      	ldr	r3, [pc, #432]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b14      	subs	r3, #20
 8008294:	b299      	uxth	r1, r3
 8008296:	2328      	movs	r3, #40	; 0x28
 8008298:	2228      	movs	r2, #40	; 0x28
 800829a:	f7f9 fcdb 	bl	8001c54 <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800829e:	f04f 30ff 	mov.w	r0, #4294967295
 80082a2:	f7f9 f9bf 	bl	8001624 <BSP_LCD_SetTextColor>

				//Y += 10;
				BSP_LCD_FillCircle(X, Y, 10);
 80082a6:	4b65      	ldr	r3, [pc, #404]	; (800843c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	b298      	uxth	r0, r3
 80082ac:	4b64      	ldr	r3, [pc, #400]	; (8008440 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	220a      	movs	r2, #10
 80082b4:	4619      	mov	r1, r3
 80082b6:	f7f9 fd27 	bl	8001d08 <BSP_LCD_FillCircle>
				BSP_LCD_FillRect(0, 0, 240, 15);
 80082ba:	230f      	movs	r3, #15
 80082bc:	22f0      	movs	r2, #240	; 0xf0
 80082be:	2100      	movs	r1, #0
 80082c0:	2000      	movs	r0, #0
 80082c2:	f7f9 fcc7 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 305, 240, 15);
 80082c6:	230f      	movs	r3, #15
 80082c8:	22f0      	movs	r2, #240	; 0xf0
 80082ca:	f240 1131 	movw	r1, #305	; 0x131
 80082ce:	2000      	movs	r0, #0
 80082d0:	f7f9 fcc0 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(0, 15, 15, 290);
 80082d4:	f44f 7391 	mov.w	r3, #290	; 0x122
 80082d8:	220f      	movs	r2, #15
 80082da:	210f      	movs	r1, #15
 80082dc:	2000      	movs	r0, #0
 80082de:	f7f9 fcb9 	bl	8001c54 <BSP_LCD_FillRect>
				BSP_LCD_FillRect(225, 15, 15, 290);
 80082e2:	f44f 7391 	mov.w	r3, #290	; 0x122
 80082e6:	220f      	movs	r2, #15
 80082e8:	210f      	movs	r1, #15
 80082ea:	20e1      	movs	r0, #225	; 0xe1
 80082ec:	f7f9 fcb2 	bl	8001c54 <BSP_LCD_FillRect>
			}

		}
	}

	if (htim->Instance == TIM11) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a53      	ldr	r2, [pc, #332]	; (8008444 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	f040 81bf 	bne.w	800867a <HAL_TIM_PeriodElapsedCallback+0xbf2>
		OurL3GD20_Read();
 80082fc:	f7ff f9bc 	bl	8007678 <OurL3GD20_Read>

		if(DataNow.OsX >= 25 && DataNow.OsY <= 20)
 8008300:	4b51      	ldr	r3, [pc, #324]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008302:	881b      	ldrh	r3, [r3, #0]
 8008304:	b21b      	sxth	r3, r3
 8008306:	2b18      	cmp	r3, #24
 8008308:	dd2f      	ble.n	800836a <HAL_TIM_PeriodElapsedCallback+0x8e2>
 800830a:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800830c:	885b      	ldrh	r3, [r3, #2]
 800830e:	b21b      	sxth	r3, r3
 8008310:	2b14      	cmp	r3, #20
 8008312:	dc2a      	bgt.n	800836a <HAL_TIM_PeriodElapsedCallback+0x8e2>
			CalkaX += (long)(DataNow.OsX + ((DataOld.OsX - DataNow.OsX)*0.5));
 8008314:	4b4c      	ldr	r3, [pc, #304]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b21b      	sxth	r3, r3
 800831a:	4618      	mov	r0, r3
 800831c:	f7f8 f90a 	bl	8000534 <__aeabi_i2d>
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	4b49      	ldr	r3, [pc, #292]	; (800844c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b21b      	sxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	4b46      	ldr	r3, [pc, #280]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b21b      	sxth	r3, r3
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	4618      	mov	r0, r3
 8008336:	f7f8 f8fd 	bl	8000534 <__aeabi_i2d>
 800833a:	f04f 0200 	mov.w	r2, #0
 800833e:	4b44      	ldr	r3, [pc, #272]	; (8008450 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8008340:	f7f8 f95e 	bl	8000600 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	4620      	mov	r0, r4
 800834a:	4629      	mov	r1, r5
 800834c:	f7f7 ffa6 	bl	800029c <__adddf3>
 8008350:	4603      	mov	r3, r0
 8008352:	460c      	mov	r4, r1
 8008354:	4618      	mov	r0, r3
 8008356:	4621      	mov	r1, r4
 8008358:	f7f8 fb64 	bl	8000a24 <__aeabi_d2iz>
 800835c:	4602      	mov	r2, r0
 800835e:	4b3d      	ldr	r3, [pc, #244]	; (8008454 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4413      	add	r3, r2
 8008364:	4a3b      	ldr	r2, [pc, #236]	; (8008454 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	e033      	b.n	80083d2 <HAL_TIM_PeriodElapsedCallback+0x94a>
		else if(DataNow.OsX >= 25 && DataNow.OsY >= 25)
 800836a:	4b37      	ldr	r3, [pc, #220]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	b21b      	sxth	r3, r3
 8008370:	2b18      	cmp	r3, #24
 8008372:	dd2e      	ble.n	80083d2 <HAL_TIM_PeriodElapsedCallback+0x94a>
 8008374:	4b34      	ldr	r3, [pc, #208]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008376:	885b      	ldrh	r3, [r3, #2]
 8008378:	b21b      	sxth	r3, r3
 800837a:	2b18      	cmp	r3, #24
 800837c:	dd29      	ble.n	80083d2 <HAL_TIM_PeriodElapsedCallback+0x94a>
			CalkaX += (long)(DataNow.OsX + ((DataOld.OsX - DataNow.OsX)*0.5));
 800837e:	4b32      	ldr	r3, [pc, #200]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008380:	881b      	ldrh	r3, [r3, #0]
 8008382:	b21b      	sxth	r3, r3
 8008384:	4618      	mov	r0, r3
 8008386:	f7f8 f8d5 	bl	8000534 <__aeabi_i2d>
 800838a:	4604      	mov	r4, r0
 800838c:	460d      	mov	r5, r1
 800838e:	4b2f      	ldr	r3, [pc, #188]	; (800844c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b21b      	sxth	r3, r3
 8008394:	461a      	mov	r2, r3
 8008396:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008398:	881b      	ldrh	r3, [r3, #0]
 800839a:	b21b      	sxth	r3, r3
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	4618      	mov	r0, r3
 80083a0:	f7f8 f8c8 	bl	8000534 <__aeabi_i2d>
 80083a4:	f04f 0200 	mov.w	r2, #0
 80083a8:	4b29      	ldr	r3, [pc, #164]	; (8008450 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 80083aa:	f7f8 f929 	bl	8000600 <__aeabi_dmul>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	4620      	mov	r0, r4
 80083b4:	4629      	mov	r1, r5
 80083b6:	f7f7 ff71 	bl	800029c <__adddf3>
 80083ba:	4603      	mov	r3, r0
 80083bc:	460c      	mov	r4, r1
 80083be:	4618      	mov	r0, r3
 80083c0:	4621      	mov	r1, r4
 80083c2:	f7f8 fb2f 	bl	8000a24 <__aeabi_d2iz>
 80083c6:	4602      	mov	r2, r0
 80083c8:	4b22      	ldr	r3, [pc, #136]	; (8008454 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4413      	add	r3, r2
 80083ce:	4a21      	ldr	r2, [pc, #132]	; (8008454 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 80083d0:	6013      	str	r3, [r2, #0]

		if(DataNow.OsY >= 25 && DataNow.OsX <= 20)
 80083d2:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80083d4:	885b      	ldrh	r3, [r3, #2]
 80083d6:	b21b      	sxth	r3, r3
 80083d8:	2b18      	cmp	r3, #24
 80083da:	dd3f      	ble.n	800845c <HAL_TIM_PeriodElapsedCallback+0x9d4>
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b21b      	sxth	r3, r3
 80083e2:	2b14      	cmp	r3, #20
 80083e4:	dc3a      	bgt.n	800845c <HAL_TIM_PeriodElapsedCallback+0x9d4>
			CalkaY += (long)(DataNow.OsY + ((DataOld.OsY - DataNow.OsY)*0.5));
 80083e6:	4b18      	ldr	r3, [pc, #96]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80083e8:	885b      	ldrh	r3, [r3, #2]
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7f8 f8a1 	bl	8000534 <__aeabi_i2d>
 80083f2:	4604      	mov	r4, r0
 80083f4:	460d      	mov	r5, r1
 80083f6:	4b15      	ldr	r3, [pc, #84]	; (800844c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	b21b      	sxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8008400:	885b      	ldrh	r3, [r3, #2]
 8008402:	b21b      	sxth	r3, r3
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	4618      	mov	r0, r3
 8008408:	f7f8 f894 	bl	8000534 <__aeabi_i2d>
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8008412:	f7f8 f8f5 	bl	8000600 <__aeabi_dmul>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4620      	mov	r0, r4
 800841c:	4629      	mov	r1, r5
 800841e:	f7f7 ff3d 	bl	800029c <__adddf3>
 8008422:	4603      	mov	r3, r0
 8008424:	460c      	mov	r4, r1
 8008426:	4618      	mov	r0, r3
 8008428:	4621      	mov	r1, r4
 800842a:	f7f8 fafb 	bl	8000a24 <__aeabi_d2iz>
 800842e:	4602      	mov	r2, r0
 8008430:	4b09      	ldr	r3, [pc, #36]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4413      	add	r3, r2
 8008436:	4a08      	ldr	r2, [pc, #32]	; (8008458 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	e043      	b.n	80084c4 <HAL_TIM_PeriodElapsedCallback+0xa3c>
 800843c:	20000532 	.word	0x20000532
 8008440:	2000051e 	.word	0x2000051e
 8008444:	40014800 	.word	0x40014800
 8008448:	20000520 	.word	0x20000520
 800844c:	200004ac 	.word	0x200004ac
 8008450:	3fe00000 	.word	0x3fe00000
 8008454:	20000528 	.word	0x20000528
 8008458:	200004b4 	.word	0x200004b4
		else if(DataNow.OsX >= 25 && DataNow.OsY >= 25)
 800845c:	4b8c      	ldr	r3, [pc, #560]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b21b      	sxth	r3, r3
 8008462:	2b18      	cmp	r3, #24
 8008464:	dd2e      	ble.n	80084c4 <HAL_TIM_PeriodElapsedCallback+0xa3c>
 8008466:	4b8a      	ldr	r3, [pc, #552]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	b21b      	sxth	r3, r3
 800846c:	2b18      	cmp	r3, #24
 800846e:	dd29      	ble.n	80084c4 <HAL_TIM_PeriodElapsedCallback+0xa3c>
			CalkaY += (long)(DataNow.OsX + ((DataOld.OsX - DataNow.OsX)*0.5));
 8008470:	4b87      	ldr	r3, [pc, #540]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b21b      	sxth	r3, r3
 8008476:	4618      	mov	r0, r3
 8008478:	f7f8 f85c 	bl	8000534 <__aeabi_i2d>
 800847c:	4604      	mov	r4, r0
 800847e:	460d      	mov	r5, r1
 8008480:	4b84      	ldr	r3, [pc, #528]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b21b      	sxth	r3, r3
 8008486:	461a      	mov	r2, r3
 8008488:	4b81      	ldr	r3, [pc, #516]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 800848a:	881b      	ldrh	r3, [r3, #0]
 800848c:	b21b      	sxth	r3, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	4618      	mov	r0, r3
 8008492:	f7f8 f84f 	bl	8000534 <__aeabi_i2d>
 8008496:	f04f 0200 	mov.w	r2, #0
 800849a:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0xc10>)
 800849c:	f7f8 f8b0 	bl	8000600 <__aeabi_dmul>
 80084a0:	4602      	mov	r2, r0
 80084a2:	460b      	mov	r3, r1
 80084a4:	4620      	mov	r0, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	f7f7 fef8 	bl	800029c <__adddf3>
 80084ac:	4603      	mov	r3, r0
 80084ae:	460c      	mov	r4, r1
 80084b0:	4618      	mov	r0, r3
 80084b2:	4621      	mov	r1, r4
 80084b4:	f7f8 fab6 	bl	8000a24 <__aeabi_d2iz>
 80084b8:	4602      	mov	r2, r0
 80084ba:	4b78      	ldr	r3, [pc, #480]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4413      	add	r3, r2
 80084c0:	4a76      	ldr	r2, [pc, #472]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80084c2:	6013      	str	r3, [r2, #0]

		DataOld = DataNow;
 80084c4:	4b73      	ldr	r3, [pc, #460]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 80084c6:	4a72      	ldr	r2, [pc, #456]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 80084c8:	6811      	ldr	r1, [r2, #0]
 80084ca:	6019      	str	r1, [r3, #0]
 80084cc:	8892      	ldrh	r2, [r2, #4]
 80084ce:	809a      	strh	r2, [r3, #4]

		if(CalkaY > 10000)
 80084d0:	4b72      	ldr	r3, [pc, #456]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80084d8:	4293      	cmp	r3, r2
 80084da:	dd12      	ble.n	8008502 <HAL_TIM_PeriodElapsedCallback+0xa7a>
		{
			fPoruszonoX = 1;
 80084dc:	4b70      	ldr	r3, [pc, #448]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
			fPoruszonoY = 1;
 80084e2:	4b70      	ldr	r3, [pc, #448]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80084e4:	2201      	movs	r2, #1
 80084e6:	701a      	strb	r2, [r3, #0]

			if(X < 215)
 80084e8:	4b6f      	ldr	r3, [pc, #444]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2bd6      	cmp	r3, #214	; 0xd6
 80084f0:	d81e      	bhi.n	8008530 <HAL_TIM_PeriodElapsedCallback+0xaa8>
				X += 1;
 80084f2:	4b6d      	ldr	r3, [pc, #436]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3301      	adds	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	4b6a      	ldr	r3, [pc, #424]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 80084fe:	801a      	strh	r2, [r3, #0]
 8008500:	e016      	b.n	8008530 <HAL_TIM_PeriodElapsedCallback+0xaa8>

		}else if(CalkaY < -10000)
 8008502:	4b66      	ldr	r3, [pc, #408]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a69      	ldr	r2, [pc, #420]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008508:	4293      	cmp	r3, r2
 800850a:	da11      	bge.n	8008530 <HAL_TIM_PeriodElapsedCallback+0xaa8>
		{
			fPoruszonoX = 1;
 800850c:	4b64      	ldr	r3, [pc, #400]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800850e:	2201      	movs	r2, #1
 8008510:	701a      	strb	r2, [r3, #0]
			fPoruszonoY = 1;
 8008512:	4b64      	ldr	r3, [pc, #400]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8008514:	2201      	movs	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]

			if(X > 25)
 8008518:	4b63      	ldr	r3, [pc, #396]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800851a:	881b      	ldrh	r3, [r3, #0]
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b19      	cmp	r3, #25
 8008520:	d906      	bls.n	8008530 <HAL_TIM_PeriodElapsedCallback+0xaa8>
				X -= 1;
 8008522:	4b61      	ldr	r3, [pc, #388]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b01      	subs	r3, #1
 800852a:	b29a      	uxth	r2, r3
 800852c:	4b5e      	ldr	r3, [pc, #376]	; (80086a8 <HAL_TIM_PeriodElapsedCallback+0xc20>)
 800852e:	801a      	strh	r2, [r3, #0]

		}

		if(CalkaX > 10000)
 8008530:	4b5f      	ldr	r3, [pc, #380]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f242 7210 	movw	r2, #10000	; 0x2710
 8008538:	4293      	cmp	r3, r2
 800853a:	dd13      	ble.n	8008564 <HAL_TIM_PeriodElapsedCallback+0xadc>
		{
			fPoruszonoX = 1;
 800853c:	4b58      	ldr	r3, [pc, #352]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800853e:	2201      	movs	r2, #1
 8008540:	701a      	strb	r2, [r3, #0]
			fPoruszonoY = 1;
 8008542:	4b58      	ldr	r3, [pc, #352]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8008544:	2201      	movs	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]

			if(Y < 295)
 8008548:	4b5a      	ldr	r3, [pc, #360]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	b29b      	uxth	r3, r3
 800854e:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
 8008552:	d81e      	bhi.n	8008592 <HAL_TIM_PeriodElapsedCallback+0xb0a>
				Y += 1;
 8008554:	4b57      	ldr	r3, [pc, #348]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	3301      	adds	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	4b55      	ldr	r3, [pc, #340]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e016      	b.n	8008592 <HAL_TIM_PeriodElapsedCallback+0xb0a>

		}else if(CalkaX < -10000)
 8008564:	4b52      	ldr	r3, [pc, #328]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a50      	ldr	r2, [pc, #320]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 800856a:	4293      	cmp	r3, r2
 800856c:	da11      	bge.n	8008592 <HAL_TIM_PeriodElapsedCallback+0xb0a>
		{
			fPoruszonoX = 1;
 800856e:	4b4c      	ldr	r3, [pc, #304]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8008570:	2201      	movs	r2, #1
 8008572:	701a      	strb	r2, [r3, #0]
			fPoruszonoY = 1;
 8008574:	4b4b      	ldr	r3, [pc, #300]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8008576:	2201      	movs	r2, #1
 8008578:	701a      	strb	r2, [r3, #0]

			if(Y > 25)
 800857a:	4b4e      	ldr	r3, [pc, #312]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b19      	cmp	r3, #25
 8008582:	d906      	bls.n	8008592 <HAL_TIM_PeriodElapsedCallback+0xb0a>
				Y -= 1;
 8008584:	4b4b      	ldr	r3, [pc, #300]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	3b01      	subs	r3, #1
 800858c:	b29a      	uxth	r2, r3
 800858e:	4b49      	ldr	r3, [pc, #292]	; (80086b4 <HAL_TIM_PeriodElapsedCallback+0xc2c>)
 8008590:	801a      	strh	r2, [r3, #0]

		}

		if(fPoruszonoY == 1 && (CalkaY <= 10000 && CalkaY >= -10000))
 8008592:	4b44      	ldr	r3, [pc, #272]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b01      	cmp	r3, #1
 800859a:	d112      	bne.n	80085c2 <HAL_TIM_PeriodElapsedCallback+0xb3a>
 800859c:	4b3f      	ldr	r3, [pc, #252]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80085a4:	4293      	cmp	r3, r2
 80085a6:	dc0c      	bgt.n	80085c2 <HAL_TIM_PeriodElapsedCallback+0xb3a>
 80085a8:	4b3c      	ldr	r3, [pc, #240]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a3f      	ldr	r2, [pc, #252]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	db07      	blt.n	80085c2 <HAL_TIM_PeriodElapsedCallback+0xb3a>
		{
			CzasZerowaniaY += 1;
 80085b2:	4b41      	ldr	r3, [pc, #260]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	3301      	adds	r3, #1
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	4b3e      	ldr	r3, [pc, #248]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	e012      	b.n	80085e8 <HAL_TIM_PeriodElapsedCallback+0xb60>

		}else if(fPoruszonoY == 1 && (CalkaY > 10000 || CalkaY < -10000))
 80085c2:	4b38      	ldr	r3, [pc, #224]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d10d      	bne.n	80085e8 <HAL_TIM_PeriodElapsedCallback+0xb60>
 80085cc:	4b33      	ldr	r3, [pc, #204]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80085d4:	4293      	cmp	r3, r2
 80085d6:	dc04      	bgt.n	80085e2 <HAL_TIM_PeriodElapsedCallback+0xb5a>
 80085d8:	4b30      	ldr	r3, [pc, #192]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a33      	ldr	r2, [pc, #204]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	da02      	bge.n	80085e8 <HAL_TIM_PeriodElapsedCallback+0xb60>
		{
			CzasZerowaniaY = 0;
 80085e2:	4b35      	ldr	r3, [pc, #212]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	801a      	strh	r2, [r3, #0]
		}


		if(fPoruszonoX == 1 && (CalkaX <= 10000 && CalkaX >= -10000))
 80085e8:	4b2d      	ldr	r3, [pc, #180]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d112      	bne.n	8008618 <HAL_TIM_PeriodElapsedCallback+0xb90>
 80085f2:	4b2f      	ldr	r3, [pc, #188]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80085fa:	4293      	cmp	r3, r2
 80085fc:	dc0c      	bgt.n	8008618 <HAL_TIM_PeriodElapsedCallback+0xb90>
 80085fe:	4b2c      	ldr	r3, [pc, #176]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a2a      	ldr	r2, [pc, #168]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008604:	4293      	cmp	r3, r2
 8008606:	db07      	blt.n	8008618 <HAL_TIM_PeriodElapsedCallback+0xb90>
		{
			CzasZerowaniaX += 1;
 8008608:	4b2c      	ldr	r3, [pc, #176]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	3301      	adds	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8008614:	801a      	strh	r2, [r3, #0]
 8008616:	e012      	b.n	800863e <HAL_TIM_PeriodElapsedCallback+0xbb6>

		}else if(fPoruszonoX == 1 && (CalkaX > 10000 || CalkaX < -10000))
 8008618:	4b21      	ldr	r3, [pc, #132]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b01      	cmp	r3, #1
 8008620:	d10d      	bne.n	800863e <HAL_TIM_PeriodElapsedCallback+0xbb6>
 8008622:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f242 7210 	movw	r2, #10000	; 0x2710
 800862a:	4293      	cmp	r3, r2
 800862c:	dc04      	bgt.n	8008638 <HAL_TIM_PeriodElapsedCallback+0xbb0>
 800862e:	4b20      	ldr	r3, [pc, #128]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1e      	ldr	r2, [pc, #120]	; (80086ac <HAL_TIM_PeriodElapsedCallback+0xc24>)
 8008634:	4293      	cmp	r3, r2
 8008636:	da02      	bge.n	800863e <HAL_TIM_PeriodElapsedCallback+0xbb6>
		{
			CzasZerowaniaX = 0;
 8008638:	4b20      	ldr	r3, [pc, #128]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 800863a:	2200      	movs	r2, #0
 800863c:	801a      	strh	r2, [r3, #0]
		}

		if(CzasZerowaniaX >= 1000)
 800863e:	4b1f      	ldr	r3, [pc, #124]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008648:	d308      	bcc.n	800865c <HAL_TIM_PeriodElapsedCallback+0xbd4>
		{
			CalkaX = 0;
 800864a:	4b19      	ldr	r3, [pc, #100]	; (80086b0 <HAL_TIM_PeriodElapsedCallback+0xc28>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

			CzasZerowaniaX = 0;
 8008650:	4b1a      	ldr	r3, [pc, #104]	; (80086bc <HAL_TIM_PeriodElapsedCallback+0xc34>)
 8008652:	2200      	movs	r2, #0
 8008654:	801a      	strh	r2, [r3, #0]
			fPoruszonoX = 0;
 8008656:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0xc18>)
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
		}

		if(CzasZerowaniaY >= 1000)
 800865c:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	b29b      	uxth	r3, r3
 8008662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008666:	d308      	bcc.n	800867a <HAL_TIM_PeriodElapsedCallback+0xbf2>
		{
			CalkaY = 0;
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <HAL_TIM_PeriodElapsedCallback+0xc14>)
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]

			CzasZerowaniaY = 0;
 800866e:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <HAL_TIM_PeriodElapsedCallback+0xc30>)
 8008670:	2200      	movs	r2, #0
 8008672:	801a      	strh	r2, [r3, #0]
			fPoruszonoY = 0;
 8008674:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <HAL_TIM_PeriodElapsedCallback+0xc1c>)
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]


	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a10      	ldr	r2, [pc, #64]	; (80086c0 <HAL_TIM_PeriodElapsedCallback+0xc38>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d101      	bne.n	8008688 <HAL_TIM_PeriodElapsedCallback+0xc00>
    HAL_IncTick();
 8008684:	f7f9 ffca 	bl	800261c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bdb0      	pop	{r4, r5, r7, pc}
 8008690:	20000520 	.word	0x20000520
 8008694:	200004ac 	.word	0x200004ac
 8008698:	3fe00000 	.word	0x3fe00000
 800869c:	200004b4 	.word	0x200004b4
 80086a0:	2000052c 	.word	0x2000052c
 80086a4:	20000530 	.word	0x20000530
 80086a8:	20000532 	.word	0x20000532
 80086ac:	ffffd8f0 	.word	0xffffd8f0
 80086b0:	20000528 	.word	0x20000528
 80086b4:	2000051e 	.word	0x2000051e
 80086b8:	2000051c 	.word	0x2000051c
 80086bc:	2000052e 	.word	0x2000052e
 80086c0:	40001000 	.word	0x40001000

080086c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80086c8:	bf00      	nop
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80086d8:	4b17      	ldr	r3, [pc, #92]	; (8008738 <MX_SPI5_Init+0x64>)
 80086da:	4a18      	ldr	r2, [pc, #96]	; (800873c <MX_SPI5_Init+0x68>)
 80086dc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80086de:	4b16      	ldr	r3, [pc, #88]	; (8008738 <MX_SPI5_Init+0x64>)
 80086e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80086e4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <MX_SPI5_Init+0x64>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80086ec:	4b12      	ldr	r3, [pc, #72]	; (8008738 <MX_SPI5_Init+0x64>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086f2:	4b11      	ldr	r3, [pc, #68]	; (8008738 <MX_SPI5_Init+0x64>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086f8:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <MX_SPI5_Init+0x64>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80086fe:	4b0e      	ldr	r3, [pc, #56]	; (8008738 <MX_SPI5_Init+0x64>)
 8008700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008704:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008706:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <MX_SPI5_Init+0x64>)
 8008708:	2218      	movs	r2, #24
 800870a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800870c:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <MX_SPI5_Init+0x64>)
 800870e:	2200      	movs	r2, #0
 8008710:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <MX_SPI5_Init+0x64>)
 8008714:	2200      	movs	r2, #0
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008718:	4b07      	ldr	r3, [pc, #28]	; (8008738 <MX_SPI5_Init+0x64>)
 800871a:	2200      	movs	r2, #0
 800871c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <MX_SPI5_Init+0x64>)
 8008720:	220a      	movs	r2, #10
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008724:	4804      	ldr	r0, [pc, #16]	; (8008738 <MX_SPI5_Init+0x64>)
 8008726:	f7fc fcf6 	bl	8005116 <HAL_SPI_Init>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8008730:	f7ff ffc8 	bl	80086c4 <Error_Handler>
  }

}
 8008734:	bf00      	nop
 8008736:	bd80      	pop	{r7, pc}
 8008738:	200004bc 	.word	0x200004bc
 800873c:	40015000 	.word	0x40015000

08008740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008748:	f107 0314 	add.w	r3, r7, #20
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	609a      	str	r2, [r3, #8]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <HAL_SPI_MspInit+0x84>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d12c      	bne.n	80087bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	4a18      	ldr	r2, [pc, #96]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 8008768:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 800876a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008770:	6453      	str	r3, [r2, #68]	; 0x44
 8008772:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 8008774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800877e:	2300      	movs	r3, #0
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	4a11      	ldr	r2, [pc, #68]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 8008784:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 8008786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008788:	f043 0320 	orr.w	r3, r3, #32
 800878c:	6313      	str	r3, [r2, #48]	; 0x30
 800878e:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <HAL_SPI_MspInit+0x88>)
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800879a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800879e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087a0:	2302      	movs	r3, #2
 80087a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087a8:	2300      	movs	r3, #0
 80087aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80087ac:	2305      	movs	r3, #5
 80087ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087b0:	f107 0314 	add.w	r3, r7, #20
 80087b4:	4619      	mov	r1, r3
 80087b6:	4805      	ldr	r0, [pc, #20]	; (80087cc <HAL_SPI_MspInit+0x8c>)
 80087b8:	f7fa fdc8 	bl	800334c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80087bc:	bf00      	nop
 80087be:	3728      	adds	r7, #40	; 0x28
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40015000 	.word	0x40015000
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40021400 	.word	0x40021400

080087d0 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a08      	ldr	r2, [pc, #32]	; (8008800 <HAL_SPI_MspDeInit+0x30>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10a      	bne.n	80087f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80087e2:	4a08      	ldr	r2, [pc, #32]	; (8008804 <HAL_SPI_MspDeInit+0x34>)
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <HAL_SPI_MspDeInit+0x34>)
 80087e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80087ec:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80087ee:	f44f 7160 	mov.w	r1, #896	; 0x380
 80087f2:	4805      	ldr	r0, [pc, #20]	; (8008808 <HAL_SPI_MspDeInit+0x38>)
 80087f4:	f7fa ff54 	bl	80036a0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	40015000 	.word	0x40015000
 8008804:	40023800 	.word	0x40023800
 8008808:	40021400 	.word	0x40021400

0800880c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008812:	2300      	movs	r3, #0
 8008814:	607b      	str	r3, [r7, #4]
 8008816:	4a10      	ldr	r2, [pc, #64]	; (8008858 <HAL_MspInit+0x4c>)
 8008818:	4b0f      	ldr	r3, [pc, #60]	; (8008858 <HAL_MspInit+0x4c>)
 800881a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008820:	6453      	str	r3, [r2, #68]	; 0x44
 8008822:	4b0d      	ldr	r3, [pc, #52]	; (8008858 <HAL_MspInit+0x4c>)
 8008824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800882e:	2300      	movs	r3, #0
 8008830:	603b      	str	r3, [r7, #0]
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <HAL_MspInit+0x4c>)
 8008834:	4b08      	ldr	r3, [pc, #32]	; (8008858 <HAL_MspInit+0x4c>)
 8008836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883c:	6413      	str	r3, [r2, #64]	; 0x40
 800883e:	4b06      	ldr	r3, [pc, #24]	; (8008858 <HAL_MspInit+0x4c>)
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008846:	603b      	str	r3, [r7, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40023800 	.word	0x40023800

0800885c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08c      	sub	sp, #48	; 0x30
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008864:	2300      	movs	r3, #0
 8008866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800886c:	2200      	movs	r2, #0
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	2036      	movs	r0, #54	; 0x36
 8008872:	f7f9 ffcb 	bl	800280c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8008876:	2036      	movs	r0, #54	; 0x36
 8008878:	f7f9 ffe4 	bl	8002844 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	4a1f      	ldr	r2, [pc, #124]	; (8008900 <HAL_InitTick+0xa4>)
 8008882:	4b1f      	ldr	r3, [pc, #124]	; (8008900 <HAL_InitTick+0xa4>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f043 0310 	orr.w	r3, r3, #16
 800888a:	6413      	str	r3, [r2, #64]	; 0x40
 800888c:	4b1c      	ldr	r3, [pc, #112]	; (8008900 <HAL_InitTick+0xa4>)
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008898:	f107 0210 	add.w	r2, r7, #16
 800889c:	f107 0314 	add.w	r3, r7, #20
 80088a0:	4611      	mov	r1, r2
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fc f9e2 	bl	8004c6c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fc f9b8 	bl	8004c1c <HAL_RCC_GetPCLK1Freq>
 80088ac:	4603      	mov	r3, r0
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80088b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b4:	4a13      	ldr	r2, [pc, #76]	; (8008904 <HAL_InitTick+0xa8>)
 80088b6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ba:	0c9b      	lsrs	r3, r3, #18
 80088bc:	3b01      	subs	r3, #1
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80088c0:	4b11      	ldr	r3, [pc, #68]	; (8008908 <HAL_InitTick+0xac>)
 80088c2:	4a12      	ldr	r2, [pc, #72]	; (800890c <HAL_InitTick+0xb0>)
 80088c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80088c6:	4b10      	ldr	r3, [pc, #64]	; (8008908 <HAL_InitTick+0xac>)
 80088c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80088cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80088ce:	4a0e      	ldr	r2, [pc, #56]	; (8008908 <HAL_InitTick+0xac>)
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <HAL_InitTick+0xac>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088da:	4b0b      	ldr	r3, [pc, #44]	; (8008908 <HAL_InitTick+0xac>)
 80088dc:	2200      	movs	r2, #0
 80088de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80088e0:	4809      	ldr	r0, [pc, #36]	; (8008908 <HAL_InitTick+0xac>)
 80088e2:	f7fd f946 	bl	8005b72 <HAL_TIM_Base_Init>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80088ec:	4806      	ldr	r0, [pc, #24]	; (8008908 <HAL_InitTick+0xac>)
 80088ee:	f7fd f96b 	bl	8005bc8 <HAL_TIM_Base_Start_IT>
 80088f2:	4603      	mov	r3, r0
 80088f4:	e000      	b.n	80088f8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3730      	adds	r7, #48	; 0x30
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40023800 	.word	0x40023800
 8008904:	431bde83 	.word	0x431bde83
 8008908:	20000534 	.word	0x20000534
 800890c:	40001000 	.word	0x40001000

08008910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008910:	b480      	push	{r7}
 8008912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800891e:	b480      	push	{r7}
 8008920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008922:	e7fe      	b.n	8008922 <HardFault_Handler+0x4>

08008924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008928:	e7fe      	b.n	8008928 <MemManage_Handler+0x4>

0800892a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800892a:	b480      	push	{r7}
 800892c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800892e:	e7fe      	b.n	800892e <BusFault_Handler+0x4>

08008930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008930:	b480      	push	{r7}
 8008932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008934:	e7fe      	b.n	8008934 <UsageFault_Handler+0x4>

08008936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008936:	b480      	push	{r7}
 8008938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800893a:	bf00      	nop
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008948:	bf00      	nop
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008952:	b480      	push	{r7}
 8008954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008956:	bf00      	nop
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008964:	4803      	ldr	r0, [pc, #12]	; (8008974 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008966:	f7fd f953 	bl	8005c10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800896a:	4803      	ldr	r0, [pc, #12]	; (8008978 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800896c:	f7fd f950 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008970:	bf00      	nop
 8008972:	bd80      	pop	{r7, pc}
 8008974:	200005f4 	.word	0x200005f4
 8008978:	20000574 	.word	0x20000574

0800897c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008980:	4803      	ldr	r0, [pc, #12]	; (8008990 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8008982:	f7fd f945 	bl	8005c10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8008986:	4803      	ldr	r0, [pc, #12]	; (8008994 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8008988:	f7fd f942 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800898c:	bf00      	nop
 800898e:	bd80      	pop	{r7, pc}
 8008990:	200005f4 	.word	0x200005f4
 8008994:	200005b4 	.word	0x200005b4

08008998 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800899c:	4802      	ldr	r0, [pc, #8]	; (80089a8 <TIM6_DAC_IRQHandler+0x10>)
 800899e:	f7fd f937 	bl	8005c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80089a2:	bf00      	nop
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000534 	.word	0x20000534

080089ac <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80089b0:	4802      	ldr	r0, [pc, #8]	; (80089bc <LTDC_IRQHandler+0x10>)
 80089b2:	f7fb fa0f 	bl	8003dd4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000404 	.word	0x20000404

080089c0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80089c4:	4802      	ldr	r0, [pc, #8]	; (80089d0 <DMA2D_IRQHandler+0x10>)
 80089c6:	f7fa fa84 	bl	8002ed2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80089ca:	bf00      	nop
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	2000033c 	.word	0x2000033c

080089d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80089d4:	b590      	push	{r4, r7, lr}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	e00a      	b.n	80089fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80089e6:	68bc      	ldr	r4, [r7, #8]
 80089e8:	1c63      	adds	r3, r4, #1
 80089ea:	60bb      	str	r3, [r7, #8]
 80089ec:	f3af 8000 	nop.w
 80089f0:	4603      	mov	r3, r0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	3301      	adds	r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
 80089fc:	697a      	ldr	r2, [r7, #20]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	dbf0      	blt.n	80089e6 <_read+0x12>
	}

return len;
 8008a04:	687b      	ldr	r3, [r7, #4]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}

08008a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b086      	sub	sp, #24
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e009      	b.n	8008a34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	1c5a      	adds	r2, r3, #1
 8008a24:	60ba      	str	r2, [r7, #8]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7fe fea1 	bl	8007770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	3301      	adds	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	dbf1      	blt.n	8008a20 <_write+0x12>
	}
	return len;
 8008a3c:	687b      	ldr	r3, [r7, #4]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3718      	adds	r7, #24
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
	...

08008a48 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008a50:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <_sbrk+0x50>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <_sbrk+0x16>
		heap_end = &end;
 8008a58:	4b0f      	ldr	r3, [pc, #60]	; (8008a98 <_sbrk+0x50>)
 8008a5a:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <_sbrk+0x54>)
 8008a5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008a5e:	4b0e      	ldr	r3, [pc, #56]	; (8008a98 <_sbrk+0x50>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008a64:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <_sbrk+0x50>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	466a      	mov	r2, sp
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d907      	bls.n	8008a82 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008a72:	f000 fa1f 	bl	8008eb4 <__errno>
 8008a76:	4602      	mov	r2, r0
 8008a78:	230c      	movs	r3, #12
 8008a7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a80:	e006      	b.n	8008a90 <_sbrk+0x48>
	}

	heap_end += incr;
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <_sbrk+0x50>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	4a03      	ldr	r2, [pc, #12]	; (8008a98 <_sbrk+0x50>)
 8008a8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000278 	.word	0x20000278
 8008a9c:	20000678 	.word	0x20000678

08008aa0 <_close>:

int _close(int file)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	return -1;
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ac8:	605a      	str	r2, [r3, #4]
	return 0;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <_isatty>:

int _isatty(int file)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
	return 1;
 8008ae0:	2301      	movs	r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
	return 0;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b0c:	4a16      	ldr	r2, [pc, #88]	; (8008b68 <SystemInit+0x60>)
 8008b0e:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <SystemInit+0x60>)
 8008b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008b1c:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <SystemInit+0x64>)
 8008b1e:	4b13      	ldr	r3, [pc, #76]	; (8008b6c <SystemInit+0x64>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <SystemInit+0x64>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008b2e:	4a0f      	ldr	r2, [pc, #60]	; (8008b6c <SystemInit+0x64>)
 8008b30:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <SystemInit+0x64>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <SystemInit+0x64>)
 8008b40:	4a0b      	ldr	r2, [pc, #44]	; (8008b70 <SystemInit+0x68>)
 8008b42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008b44:	4a09      	ldr	r2, [pc, #36]	; (8008b6c <SystemInit+0x64>)
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <SystemInit+0x64>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <SystemInit+0x64>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b56:	4b04      	ldr	r3, [pc, #16]	; (8008b68 <SystemInit+0x60>)
 8008b58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b5c:	609a      	str	r2, [r3, #8]
#endif
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	e000ed00 	.word	0xe000ed00
 8008b6c:	40023800 	.word	0x40023800
 8008b70:	24003010 	.word	0x24003010

08008b74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b086      	sub	sp, #24
 8008b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b7a:	f107 0308 	add.w	r3, r7, #8
 8008b7e:	2200      	movs	r2, #0
 8008b80:	601a      	str	r2, [r3, #0]
 8008b82:	605a      	str	r2, [r3, #4]
 8008b84:	609a      	str	r2, [r3, #8]
 8008b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b88:	463b      	mov	r3, r7
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8008b90:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008b92:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <MX_TIM1_Init+0x9c>)
 8008b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008b96:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b9c:	4b1b      	ldr	r3, [pc, #108]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8008ba2:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ba8:	4b18      	ldr	r3, [pc, #96]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008bae:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bb4:	4b15      	ldr	r3, [pc, #84]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008bba:	4814      	ldr	r0, [pc, #80]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008bbc:	f7fc ffd9 	bl	8005b72 <HAL_TIM_Base_Init>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8008bc6:	f7ff fd7d 	bl	80086c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008bd0:	f107 0308 	add.w	r3, r7, #8
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	480d      	ldr	r0, [pc, #52]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008bd8:	f7fd f922 	bl	8005e20 <HAL_TIM_ConfigClockSource>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8008be2:	f7ff fd6f 	bl	80086c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008be6:	2300      	movs	r3, #0
 8008be8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bea:	2300      	movs	r3, #0
 8008bec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008bee:	463b      	mov	r3, r7
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4806      	ldr	r0, [pc, #24]	; (8008c0c <MX_TIM1_Init+0x98>)
 8008bf4:	f7fd fb2e 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8008bfe:	f7ff fd61 	bl	80086c4 <Error_Handler>
  }

}
 8008c02:	bf00      	nop
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200005f4 	.word	0x200005f4
 8008c10:	40010000 	.word	0x40010000

08008c14 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8008c18:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c1a:	4a0f      	ldr	r2, [pc, #60]	; (8008c58 <MX_TIM10_Init+0x44>)
 8008c1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c20:	f242 720f 	movw	r2, #9999	; 0x270f
 8008c24:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c2e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8008c32:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8008c40:	4804      	ldr	r0, [pc, #16]	; (8008c54 <MX_TIM10_Init+0x40>)
 8008c42:	f7fc ff96 	bl	8005b72 <HAL_TIM_Base_Init>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d001      	beq.n	8008c50 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8008c4c:	f7ff fd3a 	bl	80086c4 <Error_Handler>
  }

}
 8008c50:	bf00      	nop
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20000574 	.word	0x20000574
 8008c58:	40014400 	.word	0x40014400

08008c5c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 8008c60:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c62:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <MX_TIM11_Init+0x44>)
 8008c64:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9999;
 8008c66:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c68:	f242 720f 	movw	r2, #9999	; 0x270f
 8008c6c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c6e:	4b0b      	ldr	r3, [pc, #44]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 71;
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c76:	2247      	movs	r2, #71	; 0x47
 8008c78:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c7a:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c82:	2200      	movs	r2, #0
 8008c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008c86:	4805      	ldr	r0, [pc, #20]	; (8008c9c <MX_TIM11_Init+0x40>)
 8008c88:	f7fc ff73 	bl	8005b72 <HAL_TIM_Base_Init>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8008c92:	f7ff fd17 	bl	80086c4 <Error_Handler>
  }

}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200005b4 	.word	0x200005b4
 8008ca0:	40014800 	.word	0x40014800

08008ca4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a2e      	ldr	r2, [pc, #184]	; (8008d6c <HAL_TIM_Base_MspInit+0xc8>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d11e      	bne.n	8008cf4 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	4a2d      	ldr	r2, [pc, #180]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008cbc:	4b2c      	ldr	r3, [pc, #176]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cc0:	f043 0301 	orr.w	r3, r3, #1
 8008cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cc6:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	2019      	movs	r0, #25
 8008cd8:	f7f9 fd98 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008cdc:	2019      	movs	r0, #25
 8008cde:	f7f9 fdb1 	bl	8002844 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	201a      	movs	r0, #26
 8008ce8:	f7f9 fd90 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008cec:	201a      	movs	r0, #26
 8008cee:	f7f9 fda9 	bl	8002844 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8008cf2:	e036      	b.n	8008d62 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a1e      	ldr	r2, [pc, #120]	; (8008d74 <HAL_TIM_Base_MspInit+0xd0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d116      	bne.n	8008d2c <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008cfe:	2300      	movs	r3, #0
 8008d00:	613b      	str	r3, [r7, #16]
 8008d02:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008d0e:	4b18      	ldr	r3, [pc, #96]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d16:	613b      	str	r3, [r7, #16]
 8008d18:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	2019      	movs	r0, #25
 8008d20:	f7f9 fd74 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008d24:	2019      	movs	r0, #25
 8008d26:	f7f9 fd8d 	bl	8002844 <HAL_NVIC_EnableIRQ>
}
 8008d2a:	e01a      	b.n	8008d62 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a11      	ldr	r2, [pc, #68]	; (8008d78 <HAL_TIM_Base_MspInit+0xd4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d115      	bne.n	8008d62 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8008d36:	2300      	movs	r3, #0
 8008d38:	60fb      	str	r3, [r7, #12]
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d44:	6453      	str	r3, [r2, #68]	; 0x44
 8008d46:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <HAL_TIM_Base_MspInit+0xcc>)
 8008d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d4e:	60fb      	str	r3, [r7, #12]
 8008d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008d52:	2200      	movs	r2, #0
 8008d54:	2100      	movs	r1, #0
 8008d56:	201a      	movs	r0, #26
 8008d58:	f7f9 fd58 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008d5c:	201a      	movs	r0, #26
 8008d5e:	f7f9 fd71 	bl	8002844 <HAL_NVIC_EnableIRQ>
}
 8008d62:	bf00      	nop
 8008d64:	3718      	adds	r7, #24
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40010000 	.word	0x40010000
 8008d70:	40023800 	.word	0x40023800
 8008d74:	40014400 	.word	0x40014400
 8008d78:	40014800 	.word	0x40014800

08008d7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008d82:	4a12      	ldr	r2, [pc, #72]	; (8008dcc <MX_USART1_UART_Init+0x50>)
 8008d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d8e:	4b0e      	ldr	r3, [pc, #56]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008d90:	2200      	movs	r2, #0
 8008d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d94:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008d96:	2200      	movs	r2, #0
 8008d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008da0:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008da2:	220c      	movs	r2, #12
 8008da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008da6:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008dae:	2200      	movs	r2, #0
 8008db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008db2:	4805      	ldr	r0, [pc, #20]	; (8008dc8 <MX_USART1_UART_Init+0x4c>)
 8008db4:	f7fd faa7 	bl	8006306 <HAL_UART_Init>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008dbe:	f7ff fc81 	bl	80086c4 <Error_Handler>
  }

}
 8008dc2:	bf00      	nop
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000634 	.word	0x20000634
 8008dcc:	40011000 	.word	0x40011000

08008dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd8:	f107 0314 	add.w	r3, r7, #20
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	609a      	str	r2, [r3, #8]
 8008de4:	60da      	str	r2, [r3, #12]
 8008de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <HAL_UART_MspInit+0x84>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d12c      	bne.n	8008e4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008df8:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dfc:	f043 0310 	orr.w	r3, r3, #16
 8008e00:	6453      	str	r3, [r2, #68]	; 0x44
 8008e02:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	4a11      	ldr	r2, [pc, #68]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008e14:	4b10      	ldr	r3, [pc, #64]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e18:	f043 0301 	orr.w	r3, r3, #1
 8008e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <HAL_UART_MspInit+0x88>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8008e2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e30:	2302      	movs	r3, #2
 8008e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e34:	2301      	movs	r3, #1
 8008e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e3c:	2307      	movs	r3, #7
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e40:	f107 0314 	add.w	r3, r7, #20
 8008e44:	4619      	mov	r1, r3
 8008e46:	4805      	ldr	r0, [pc, #20]	; (8008e5c <HAL_UART_MspInit+0x8c>)
 8008e48:	f7fa fa80 	bl	800334c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008e4c:	bf00      	nop
 8008e4e:	3728      	adds	r7, #40	; 0x28
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40011000 	.word	0x40011000
 8008e58:	40023800 	.word	0x40023800
 8008e5c:	40020000 	.word	0x40020000

08008e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8008e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e98 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008e64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008e66:	e003      	b.n	8008e70 <LoopCopyDataInit>

08008e68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008e6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008e6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008e6e:	3104      	adds	r1, #4

08008e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008e70:	480b      	ldr	r0, [pc, #44]	; (8008ea0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008e72:	4b0c      	ldr	r3, [pc, #48]	; (8008ea4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008e74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008e76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008e78:	d3f6      	bcc.n	8008e68 <CopyDataInit>
  ldr  r2, =_sbss
 8008e7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ea8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008e7c:	e002      	b.n	8008e84 <LoopFillZerobss>

08008e7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008e7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008e80:	f842 3b04 	str.w	r3, [r2], #4

08008e84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008e86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008e88:	d3f9      	bcc.n	8008e7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e8a:	f7ff fe3d 	bl	8008b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e8e:	f000 f817 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e92:	f7fe fc7b 	bl	800778c <main>
  bx  lr    
 8008e96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8008e98:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8008e9c:	0800b918 	.word	0x0800b918
  ldr  r0, =_sdata
 8008ea0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008ea4:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8008ea8:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8008eac:	20000678 	.word	0x20000678

08008eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008eb0:	e7fe      	b.n	8008eb0 <ADC_IRQHandler>
	...

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	2000004c 	.word	0x2000004c

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4e0d      	ldr	r6, [pc, #52]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1ba4      	subs	r4, r4, r6
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2500      	movs	r5, #0
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4e0b      	ldr	r6, [pc, #44]	; (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	; (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f000 ff18 	bl	8009d08 <_init>
 8008ed8:	1ba4      	subs	r4, r4, r6
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2500      	movs	r5, #0
 8008ede:	42a5      	cmp	r5, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee8:	4798      	blx	r3
 8008eea:	3501      	adds	r5, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ef2:	4798      	blx	r3
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	0800b910 	.word	0x0800b910
 8008efc:	0800b910 	.word	0x0800b910
 8008f00:	0800b910 	.word	0x0800b910
 8008f04:	0800b914 	.word	0x0800b914

08008f08 <memset>:
 8008f08:	4402      	add	r2, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d100      	bne.n	8008f12 <memset+0xa>
 8008f10:	4770      	bx	lr
 8008f12:	f803 1b01 	strb.w	r1, [r3], #1
 8008f16:	e7f9      	b.n	8008f0c <memset+0x4>

08008f18 <iprintf>:
 8008f18:	b40f      	push	{r0, r1, r2, r3}
 8008f1a:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <iprintf+0x2c>)
 8008f1c:	b513      	push	{r0, r1, r4, lr}
 8008f1e:	681c      	ldr	r4, [r3, #0]
 8008f20:	b124      	cbz	r4, 8008f2c <iprintf+0x14>
 8008f22:	69a3      	ldr	r3, [r4, #24]
 8008f24:	b913      	cbnz	r3, 8008f2c <iprintf+0x14>
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 f84e 	bl	8008fc8 <__sinit>
 8008f2c:	ab05      	add	r3, sp, #20
 8008f2e:	9a04      	ldr	r2, [sp, #16]
 8008f30:	68a1      	ldr	r1, [r4, #8]
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	4620      	mov	r0, r4
 8008f36:	f000 f959 	bl	80091ec <_vfiprintf_r>
 8008f3a:	b002      	add	sp, #8
 8008f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f40:	b004      	add	sp, #16
 8008f42:	4770      	bx	lr
 8008f44:	2000004c 	.word	0x2000004c

08008f48 <_cleanup_r>:
 8008f48:	4901      	ldr	r1, [pc, #4]	; (8008f50 <_cleanup_r+0x8>)
 8008f4a:	f000 b8a9 	b.w	80090a0 <_fwalk_reent>
 8008f4e:	bf00      	nop
 8008f50:	08009ac1 	.word	0x08009ac1

08008f54 <std.isra.0>:
 8008f54:	2300      	movs	r3, #0
 8008f56:	b510      	push	{r4, lr}
 8008f58:	4604      	mov	r4, r0
 8008f5a:	6003      	str	r3, [r0, #0]
 8008f5c:	6043      	str	r3, [r0, #4]
 8008f5e:	6083      	str	r3, [r0, #8]
 8008f60:	8181      	strh	r1, [r0, #12]
 8008f62:	6643      	str	r3, [r0, #100]	; 0x64
 8008f64:	81c2      	strh	r2, [r0, #14]
 8008f66:	6103      	str	r3, [r0, #16]
 8008f68:	6143      	str	r3, [r0, #20]
 8008f6a:	6183      	str	r3, [r0, #24]
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	2208      	movs	r2, #8
 8008f70:	305c      	adds	r0, #92	; 0x5c
 8008f72:	f7ff ffc9 	bl	8008f08 <memset>
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <std.isra.0+0x38>)
 8008f78:	6263      	str	r3, [r4, #36]	; 0x24
 8008f7a:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <std.isra.0+0x3c>)
 8008f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f7e:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <std.isra.0+0x40>)
 8008f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <std.isra.0+0x44>)
 8008f84:	6224      	str	r4, [r4, #32]
 8008f86:	6323      	str	r3, [r4, #48]	; 0x30
 8008f88:	bd10      	pop	{r4, pc}
 8008f8a:	bf00      	nop
 8008f8c:	08009765 	.word	0x08009765
 8008f90:	08009787 	.word	0x08009787
 8008f94:	080097bf 	.word	0x080097bf
 8008f98:	080097e3 	.word	0x080097e3

08008f9c <__sfmoreglue>:
 8008f9c:	b570      	push	{r4, r5, r6, lr}
 8008f9e:	1e4a      	subs	r2, r1, #1
 8008fa0:	2568      	movs	r5, #104	; 0x68
 8008fa2:	4355      	muls	r5, r2
 8008fa4:	460e      	mov	r6, r1
 8008fa6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008faa:	f000 f897 	bl	80090dc <_malloc_r>
 8008fae:	4604      	mov	r4, r0
 8008fb0:	b140      	cbz	r0, 8008fc4 <__sfmoreglue+0x28>
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	e880 0042 	stmia.w	r0, {r1, r6}
 8008fb8:	300c      	adds	r0, #12
 8008fba:	60a0      	str	r0, [r4, #8]
 8008fbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008fc0:	f7ff ffa2 	bl	8008f08 <memset>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}

08008fc8 <__sinit>:
 8008fc8:	6983      	ldr	r3, [r0, #24]
 8008fca:	b510      	push	{r4, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	bb33      	cbnz	r3, 800901e <__sinit+0x56>
 8008fd0:	6483      	str	r3, [r0, #72]	; 0x48
 8008fd2:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008fd4:	6503      	str	r3, [r0, #80]	; 0x50
 8008fd6:	4b12      	ldr	r3, [pc, #72]	; (8009020 <__sinit+0x58>)
 8008fd8:	4a12      	ldr	r2, [pc, #72]	; (8009024 <__sinit+0x5c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6282      	str	r2, [r0, #40]	; 0x28
 8008fde:	4298      	cmp	r0, r3
 8008fe0:	bf04      	itt	eq
 8008fe2:	2301      	moveq	r3, #1
 8008fe4:	6183      	streq	r3, [r0, #24]
 8008fe6:	f000 f81f 	bl	8009028 <__sfp>
 8008fea:	6060      	str	r0, [r4, #4]
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 f81b 	bl	8009028 <__sfp>
 8008ff2:	60a0      	str	r0, [r4, #8]
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 f817 	bl	8009028 <__sfp>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	60e0      	str	r0, [r4, #12]
 8008ffe:	2104      	movs	r1, #4
 8009000:	6860      	ldr	r0, [r4, #4]
 8009002:	f7ff ffa7 	bl	8008f54 <std.isra.0>
 8009006:	2201      	movs	r2, #1
 8009008:	2109      	movs	r1, #9
 800900a:	68a0      	ldr	r0, [r4, #8]
 800900c:	f7ff ffa2 	bl	8008f54 <std.isra.0>
 8009010:	2202      	movs	r2, #2
 8009012:	2112      	movs	r1, #18
 8009014:	68e0      	ldr	r0, [r4, #12]
 8009016:	f7ff ff9d 	bl	8008f54 <std.isra.0>
 800901a:	2301      	movs	r3, #1
 800901c:	61a3      	str	r3, [r4, #24]
 800901e:	bd10      	pop	{r4, pc}
 8009020:	0800b870 	.word	0x0800b870
 8009024:	08008f49 	.word	0x08008f49

08009028 <__sfp>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	4b1c      	ldr	r3, [pc, #112]	; (800909c <__sfp+0x74>)
 800902c:	681e      	ldr	r6, [r3, #0]
 800902e:	69b3      	ldr	r3, [r6, #24]
 8009030:	4607      	mov	r7, r0
 8009032:	b913      	cbnz	r3, 800903a <__sfp+0x12>
 8009034:	4630      	mov	r0, r6
 8009036:	f7ff ffc7 	bl	8008fc8 <__sinit>
 800903a:	3648      	adds	r6, #72	; 0x48
 800903c:	68b4      	ldr	r4, [r6, #8]
 800903e:	6873      	ldr	r3, [r6, #4]
 8009040:	3b01      	subs	r3, #1
 8009042:	d503      	bpl.n	800904c <__sfp+0x24>
 8009044:	6833      	ldr	r3, [r6, #0]
 8009046:	b133      	cbz	r3, 8009056 <__sfp+0x2e>
 8009048:	6836      	ldr	r6, [r6, #0]
 800904a:	e7f7      	b.n	800903c <__sfp+0x14>
 800904c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009050:	b16d      	cbz	r5, 800906e <__sfp+0x46>
 8009052:	3468      	adds	r4, #104	; 0x68
 8009054:	e7f4      	b.n	8009040 <__sfp+0x18>
 8009056:	2104      	movs	r1, #4
 8009058:	4638      	mov	r0, r7
 800905a:	f7ff ff9f 	bl	8008f9c <__sfmoreglue>
 800905e:	6030      	str	r0, [r6, #0]
 8009060:	2800      	cmp	r0, #0
 8009062:	d1f1      	bne.n	8009048 <__sfp+0x20>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4604      	mov	r4, r0
 800906a:	4620      	mov	r0, r4
 800906c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800906e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009072:	81e3      	strh	r3, [r4, #14]
 8009074:	2301      	movs	r3, #1
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	6665      	str	r5, [r4, #100]	; 0x64
 800907a:	6025      	str	r5, [r4, #0]
 800907c:	60a5      	str	r5, [r4, #8]
 800907e:	6065      	str	r5, [r4, #4]
 8009080:	6125      	str	r5, [r4, #16]
 8009082:	6165      	str	r5, [r4, #20]
 8009084:	61a5      	str	r5, [r4, #24]
 8009086:	2208      	movs	r2, #8
 8009088:	4629      	mov	r1, r5
 800908a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800908e:	f7ff ff3b 	bl	8008f08 <memset>
 8009092:	6365      	str	r5, [r4, #52]	; 0x34
 8009094:	63a5      	str	r5, [r4, #56]	; 0x38
 8009096:	64a5      	str	r5, [r4, #72]	; 0x48
 8009098:	64e5      	str	r5, [r4, #76]	; 0x4c
 800909a:	e7e6      	b.n	800906a <__sfp+0x42>
 800909c:	0800b870 	.word	0x0800b870

080090a0 <_fwalk_reent>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	4680      	mov	r8, r0
 80090a6:	4689      	mov	r9, r1
 80090a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80090ac:	2600      	movs	r6, #0
 80090ae:	b914      	cbnz	r4, 80090b6 <_fwalk_reent+0x16>
 80090b0:	4630      	mov	r0, r6
 80090b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090b6:	68a5      	ldr	r5, [r4, #8]
 80090b8:	6867      	ldr	r7, [r4, #4]
 80090ba:	3f01      	subs	r7, #1
 80090bc:	d501      	bpl.n	80090c2 <_fwalk_reent+0x22>
 80090be:	6824      	ldr	r4, [r4, #0]
 80090c0:	e7f5      	b.n	80090ae <_fwalk_reent+0xe>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d907      	bls.n	80090d8 <_fwalk_reent+0x38>
 80090c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090cc:	3301      	adds	r3, #1
 80090ce:	d003      	beq.n	80090d8 <_fwalk_reent+0x38>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4640      	mov	r0, r8
 80090d4:	47c8      	blx	r9
 80090d6:	4306      	orrs	r6, r0
 80090d8:	3568      	adds	r5, #104	; 0x68
 80090da:	e7ee      	b.n	80090ba <_fwalk_reent+0x1a>

080090dc <_malloc_r>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	1ccd      	adds	r5, r1, #3
 80090e0:	f025 0503 	bic.w	r5, r5, #3
 80090e4:	3508      	adds	r5, #8
 80090e6:	2d0c      	cmp	r5, #12
 80090e8:	bf38      	it	cc
 80090ea:	250c      	movcc	r5, #12
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	4606      	mov	r6, r0
 80090f0:	db01      	blt.n	80090f6 <_malloc_r+0x1a>
 80090f2:	42a9      	cmp	r1, r5
 80090f4:	d903      	bls.n	80090fe <_malloc_r+0x22>
 80090f6:	230c      	movs	r3, #12
 80090f8:	6033      	str	r3, [r6, #0]
 80090fa:	2000      	movs	r0, #0
 80090fc:	bd70      	pop	{r4, r5, r6, pc}
 80090fe:	f000 fd7f 	bl	8009c00 <__malloc_lock>
 8009102:	4a23      	ldr	r2, [pc, #140]	; (8009190 <_malloc_r+0xb4>)
 8009104:	6814      	ldr	r4, [r2, #0]
 8009106:	4621      	mov	r1, r4
 8009108:	b991      	cbnz	r1, 8009130 <_malloc_r+0x54>
 800910a:	4c22      	ldr	r4, [pc, #136]	; (8009194 <_malloc_r+0xb8>)
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	b91b      	cbnz	r3, 8009118 <_malloc_r+0x3c>
 8009110:	4630      	mov	r0, r6
 8009112:	f000 fb17 	bl	8009744 <_sbrk_r>
 8009116:	6020      	str	r0, [r4, #0]
 8009118:	4629      	mov	r1, r5
 800911a:	4630      	mov	r0, r6
 800911c:	f000 fb12 	bl	8009744 <_sbrk_r>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d126      	bne.n	8009172 <_malloc_r+0x96>
 8009124:	230c      	movs	r3, #12
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	4630      	mov	r0, r6
 800912a:	f000 fd6a 	bl	8009c02 <__malloc_unlock>
 800912e:	e7e4      	b.n	80090fa <_malloc_r+0x1e>
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	1b5b      	subs	r3, r3, r5
 8009134:	d41a      	bmi.n	800916c <_malloc_r+0x90>
 8009136:	2b0b      	cmp	r3, #11
 8009138:	d90f      	bls.n	800915a <_malloc_r+0x7e>
 800913a:	600b      	str	r3, [r1, #0]
 800913c:	50cd      	str	r5, [r1, r3]
 800913e:	18cc      	adds	r4, r1, r3
 8009140:	4630      	mov	r0, r6
 8009142:	f000 fd5e 	bl	8009c02 <__malloc_unlock>
 8009146:	f104 000b 	add.w	r0, r4, #11
 800914a:	1d23      	adds	r3, r4, #4
 800914c:	f020 0007 	bic.w	r0, r0, #7
 8009150:	1ac3      	subs	r3, r0, r3
 8009152:	d01b      	beq.n	800918c <_malloc_r+0xb0>
 8009154:	425a      	negs	r2, r3
 8009156:	50e2      	str	r2, [r4, r3]
 8009158:	bd70      	pop	{r4, r5, r6, pc}
 800915a:	428c      	cmp	r4, r1
 800915c:	bf0d      	iteet	eq
 800915e:	6863      	ldreq	r3, [r4, #4]
 8009160:	684b      	ldrne	r3, [r1, #4]
 8009162:	6063      	strne	r3, [r4, #4]
 8009164:	6013      	streq	r3, [r2, #0]
 8009166:	bf18      	it	ne
 8009168:	460c      	movne	r4, r1
 800916a:	e7e9      	b.n	8009140 <_malloc_r+0x64>
 800916c:	460c      	mov	r4, r1
 800916e:	6849      	ldr	r1, [r1, #4]
 8009170:	e7ca      	b.n	8009108 <_malloc_r+0x2c>
 8009172:	1cc4      	adds	r4, r0, #3
 8009174:	f024 0403 	bic.w	r4, r4, #3
 8009178:	42a0      	cmp	r0, r4
 800917a:	d005      	beq.n	8009188 <_malloc_r+0xac>
 800917c:	1a21      	subs	r1, r4, r0
 800917e:	4630      	mov	r0, r6
 8009180:	f000 fae0 	bl	8009744 <_sbrk_r>
 8009184:	3001      	adds	r0, #1
 8009186:	d0cd      	beq.n	8009124 <_malloc_r+0x48>
 8009188:	6025      	str	r5, [r4, #0]
 800918a:	e7d9      	b.n	8009140 <_malloc_r+0x64>
 800918c:	bd70      	pop	{r4, r5, r6, pc}
 800918e:	bf00      	nop
 8009190:	2000027c 	.word	0x2000027c
 8009194:	20000280 	.word	0x20000280

08009198 <__sfputc_r>:
 8009198:	6893      	ldr	r3, [r2, #8]
 800919a:	3b01      	subs	r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	b410      	push	{r4}
 80091a0:	6093      	str	r3, [r2, #8]
 80091a2:	da09      	bge.n	80091b8 <__sfputc_r+0x20>
 80091a4:	6994      	ldr	r4, [r2, #24]
 80091a6:	42a3      	cmp	r3, r4
 80091a8:	db02      	blt.n	80091b0 <__sfputc_r+0x18>
 80091aa:	b2cb      	uxtb	r3, r1
 80091ac:	2b0a      	cmp	r3, #10
 80091ae:	d103      	bne.n	80091b8 <__sfputc_r+0x20>
 80091b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091b4:	f000 bb1a 	b.w	80097ec <__swbuf_r>
 80091b8:	6813      	ldr	r3, [r2, #0]
 80091ba:	1c58      	adds	r0, r3, #1
 80091bc:	6010      	str	r0, [r2, #0]
 80091be:	7019      	strb	r1, [r3, #0]
 80091c0:	b2c8      	uxtb	r0, r1
 80091c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <__sfputs_r>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	4614      	mov	r4, r2
 80091d0:	18d5      	adds	r5, r2, r3
 80091d2:	42ac      	cmp	r4, r5
 80091d4:	d101      	bne.n	80091da <__sfputs_r+0x12>
 80091d6:	2000      	movs	r0, #0
 80091d8:	e007      	b.n	80091ea <__sfputs_r+0x22>
 80091da:	463a      	mov	r2, r7
 80091dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e0:	4630      	mov	r0, r6
 80091e2:	f7ff ffd9 	bl	8009198 <__sfputc_r>
 80091e6:	1c43      	adds	r3, r0, #1
 80091e8:	d1f3      	bne.n	80091d2 <__sfputs_r+0xa>
 80091ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091ec <_vfiprintf_r>:
 80091ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f0:	b09d      	sub	sp, #116	; 0x74
 80091f2:	460c      	mov	r4, r1
 80091f4:	4617      	mov	r7, r2
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	4606      	mov	r6, r0
 80091fa:	b118      	cbz	r0, 8009204 <_vfiprintf_r+0x18>
 80091fc:	6983      	ldr	r3, [r0, #24]
 80091fe:	b90b      	cbnz	r3, 8009204 <_vfiprintf_r+0x18>
 8009200:	f7ff fee2 	bl	8008fc8 <__sinit>
 8009204:	4b7c      	ldr	r3, [pc, #496]	; (80093f8 <_vfiprintf_r+0x20c>)
 8009206:	429c      	cmp	r4, r3
 8009208:	d157      	bne.n	80092ba <_vfiprintf_r+0xce>
 800920a:	6874      	ldr	r4, [r6, #4]
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	0718      	lsls	r0, r3, #28
 8009210:	d55d      	bpl.n	80092ce <_vfiprintf_r+0xe2>
 8009212:	6923      	ldr	r3, [r4, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d05a      	beq.n	80092ce <_vfiprintf_r+0xe2>
 8009218:	2300      	movs	r3, #0
 800921a:	9309      	str	r3, [sp, #36]	; 0x24
 800921c:	2320      	movs	r3, #32
 800921e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009222:	2330      	movs	r3, #48	; 0x30
 8009224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009228:	f04f 0b01 	mov.w	fp, #1
 800922c:	46b8      	mov	r8, r7
 800922e:	4645      	mov	r5, r8
 8009230:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d155      	bne.n	80092e4 <_vfiprintf_r+0xf8>
 8009238:	ebb8 0a07 	subs.w	sl, r8, r7
 800923c:	d00b      	beq.n	8009256 <_vfiprintf_r+0x6a>
 800923e:	4653      	mov	r3, sl
 8009240:	463a      	mov	r2, r7
 8009242:	4621      	mov	r1, r4
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff ffbf 	bl	80091c8 <__sfputs_r>
 800924a:	3001      	adds	r0, #1
 800924c:	f000 80c4 	beq.w	80093d8 <_vfiprintf_r+0x1ec>
 8009250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009252:	4453      	add	r3, sl
 8009254:	9309      	str	r3, [sp, #36]	; 0x24
 8009256:	f898 3000 	ldrb.w	r3, [r8]
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80bc 	beq.w	80093d8 <_vfiprintf_r+0x1ec>
 8009260:	2300      	movs	r3, #0
 8009262:	f04f 32ff 	mov.w	r2, #4294967295
 8009266:	9304      	str	r3, [sp, #16]
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	9205      	str	r2, [sp, #20]
 800926c:	9306      	str	r3, [sp, #24]
 800926e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009272:	931a      	str	r3, [sp, #104]	; 0x68
 8009274:	2205      	movs	r2, #5
 8009276:	7829      	ldrb	r1, [r5, #0]
 8009278:	4860      	ldr	r0, [pc, #384]	; (80093fc <_vfiprintf_r+0x210>)
 800927a:	f7f6 ffb9 	bl	80001f0 <memchr>
 800927e:	f105 0801 	add.w	r8, r5, #1
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	2800      	cmp	r0, #0
 8009286:	d131      	bne.n	80092ec <_vfiprintf_r+0x100>
 8009288:	06d9      	lsls	r1, r3, #27
 800928a:	bf44      	itt	mi
 800928c:	2220      	movmi	r2, #32
 800928e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009292:	071a      	lsls	r2, r3, #28
 8009294:	bf44      	itt	mi
 8009296:	222b      	movmi	r2, #43	; 0x2b
 8009298:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800929c:	782a      	ldrb	r2, [r5, #0]
 800929e:	2a2a      	cmp	r2, #42	; 0x2a
 80092a0:	d02c      	beq.n	80092fc <_vfiprintf_r+0x110>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	2100      	movs	r1, #0
 80092a6:	200a      	movs	r0, #10
 80092a8:	46a8      	mov	r8, r5
 80092aa:	3501      	adds	r5, #1
 80092ac:	f898 3000 	ldrb.w	r3, [r8]
 80092b0:	3b30      	subs	r3, #48	; 0x30
 80092b2:	2b09      	cmp	r3, #9
 80092b4:	d96d      	bls.n	8009392 <_vfiprintf_r+0x1a6>
 80092b6:	b371      	cbz	r1, 8009316 <_vfiprintf_r+0x12a>
 80092b8:	e026      	b.n	8009308 <_vfiprintf_r+0x11c>
 80092ba:	4b51      	ldr	r3, [pc, #324]	; (8009400 <_vfiprintf_r+0x214>)
 80092bc:	429c      	cmp	r4, r3
 80092be:	d101      	bne.n	80092c4 <_vfiprintf_r+0xd8>
 80092c0:	68b4      	ldr	r4, [r6, #8]
 80092c2:	e7a3      	b.n	800920c <_vfiprintf_r+0x20>
 80092c4:	4b4f      	ldr	r3, [pc, #316]	; (8009404 <_vfiprintf_r+0x218>)
 80092c6:	429c      	cmp	r4, r3
 80092c8:	bf08      	it	eq
 80092ca:	68f4      	ldreq	r4, [r6, #12]
 80092cc:	e79e      	b.n	800920c <_vfiprintf_r+0x20>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4630      	mov	r0, r6
 80092d2:	f000 faef 	bl	80098b4 <__swsetup_r>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d09e      	beq.n	8009218 <_vfiprintf_r+0x2c>
 80092da:	f04f 30ff 	mov.w	r0, #4294967295
 80092de:	b01d      	add	sp, #116	; 0x74
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	2b25      	cmp	r3, #37	; 0x25
 80092e6:	d0a7      	beq.n	8009238 <_vfiprintf_r+0x4c>
 80092e8:	46a8      	mov	r8, r5
 80092ea:	e7a0      	b.n	800922e <_vfiprintf_r+0x42>
 80092ec:	4a43      	ldr	r2, [pc, #268]	; (80093fc <_vfiprintf_r+0x210>)
 80092ee:	1a80      	subs	r0, r0, r2
 80092f0:	fa0b f000 	lsl.w	r0, fp, r0
 80092f4:	4318      	orrs	r0, r3
 80092f6:	9004      	str	r0, [sp, #16]
 80092f8:	4645      	mov	r5, r8
 80092fa:	e7bb      	b.n	8009274 <_vfiprintf_r+0x88>
 80092fc:	9a03      	ldr	r2, [sp, #12]
 80092fe:	1d11      	adds	r1, r2, #4
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	9103      	str	r1, [sp, #12]
 8009304:	2a00      	cmp	r2, #0
 8009306:	db01      	blt.n	800930c <_vfiprintf_r+0x120>
 8009308:	9207      	str	r2, [sp, #28]
 800930a:	e004      	b.n	8009316 <_vfiprintf_r+0x12a>
 800930c:	4252      	negs	r2, r2
 800930e:	f043 0302 	orr.w	r3, r3, #2
 8009312:	9207      	str	r2, [sp, #28]
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	f898 3000 	ldrb.w	r3, [r8]
 800931a:	2b2e      	cmp	r3, #46	; 0x2e
 800931c:	d110      	bne.n	8009340 <_vfiprintf_r+0x154>
 800931e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009322:	2b2a      	cmp	r3, #42	; 0x2a
 8009324:	f108 0101 	add.w	r1, r8, #1
 8009328:	d137      	bne.n	800939a <_vfiprintf_r+0x1ae>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9203      	str	r2, [sp, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfb8      	it	lt
 8009336:	f04f 33ff 	movlt.w	r3, #4294967295
 800933a:	f108 0802 	add.w	r8, r8, #2
 800933e:	9305      	str	r3, [sp, #20]
 8009340:	4d31      	ldr	r5, [pc, #196]	; (8009408 <_vfiprintf_r+0x21c>)
 8009342:	f898 1000 	ldrb.w	r1, [r8]
 8009346:	2203      	movs	r2, #3
 8009348:	4628      	mov	r0, r5
 800934a:	f7f6 ff51 	bl	80001f0 <memchr>
 800934e:	b140      	cbz	r0, 8009362 <_vfiprintf_r+0x176>
 8009350:	2340      	movs	r3, #64	; 0x40
 8009352:	1b40      	subs	r0, r0, r5
 8009354:	fa03 f000 	lsl.w	r0, r3, r0
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	4303      	orrs	r3, r0
 800935c:	9304      	str	r3, [sp, #16]
 800935e:	f108 0801 	add.w	r8, r8, #1
 8009362:	f898 1000 	ldrb.w	r1, [r8]
 8009366:	4829      	ldr	r0, [pc, #164]	; (800940c <_vfiprintf_r+0x220>)
 8009368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800936c:	2206      	movs	r2, #6
 800936e:	f108 0701 	add.w	r7, r8, #1
 8009372:	f7f6 ff3d 	bl	80001f0 <memchr>
 8009376:	2800      	cmp	r0, #0
 8009378:	d034      	beq.n	80093e4 <_vfiprintf_r+0x1f8>
 800937a:	4b25      	ldr	r3, [pc, #148]	; (8009410 <_vfiprintf_r+0x224>)
 800937c:	bb03      	cbnz	r3, 80093c0 <_vfiprintf_r+0x1d4>
 800937e:	9b03      	ldr	r3, [sp, #12]
 8009380:	3307      	adds	r3, #7
 8009382:	f023 0307 	bic.w	r3, r3, #7
 8009386:	3308      	adds	r3, #8
 8009388:	9303      	str	r3, [sp, #12]
 800938a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800938c:	444b      	add	r3, r9
 800938e:	9309      	str	r3, [sp, #36]	; 0x24
 8009390:	e74c      	b.n	800922c <_vfiprintf_r+0x40>
 8009392:	fb00 3202 	mla	r2, r0, r2, r3
 8009396:	2101      	movs	r1, #1
 8009398:	e786      	b.n	80092a8 <_vfiprintf_r+0xbc>
 800939a:	2300      	movs	r3, #0
 800939c:	9305      	str	r3, [sp, #20]
 800939e:	4618      	mov	r0, r3
 80093a0:	250a      	movs	r5, #10
 80093a2:	4688      	mov	r8, r1
 80093a4:	3101      	adds	r1, #1
 80093a6:	f898 2000 	ldrb.w	r2, [r8]
 80093aa:	3a30      	subs	r2, #48	; 0x30
 80093ac:	2a09      	cmp	r2, #9
 80093ae:	d903      	bls.n	80093b8 <_vfiprintf_r+0x1cc>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0c5      	beq.n	8009340 <_vfiprintf_r+0x154>
 80093b4:	9005      	str	r0, [sp, #20]
 80093b6:	e7c3      	b.n	8009340 <_vfiprintf_r+0x154>
 80093b8:	fb05 2000 	mla	r0, r5, r0, r2
 80093bc:	2301      	movs	r3, #1
 80093be:	e7f0      	b.n	80093a2 <_vfiprintf_r+0x1b6>
 80093c0:	ab03      	add	r3, sp, #12
 80093c2:	9300      	str	r3, [sp, #0]
 80093c4:	4622      	mov	r2, r4
 80093c6:	4b13      	ldr	r3, [pc, #76]	; (8009414 <_vfiprintf_r+0x228>)
 80093c8:	a904      	add	r1, sp, #16
 80093ca:	4630      	mov	r0, r6
 80093cc:	f3af 8000 	nop.w
 80093d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80093d4:	4681      	mov	r9, r0
 80093d6:	d1d8      	bne.n	800938a <_vfiprintf_r+0x19e>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	065b      	lsls	r3, r3, #25
 80093dc:	f53f af7d 	bmi.w	80092da <_vfiprintf_r+0xee>
 80093e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093e2:	e77c      	b.n	80092de <_vfiprintf_r+0xf2>
 80093e4:	ab03      	add	r3, sp, #12
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4622      	mov	r2, r4
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <_vfiprintf_r+0x228>)
 80093ec:	a904      	add	r1, sp, #16
 80093ee:	4630      	mov	r0, r6
 80093f0:	f000 f888 	bl	8009504 <_printf_i>
 80093f4:	e7ec      	b.n	80093d0 <_vfiprintf_r+0x1e4>
 80093f6:	bf00      	nop
 80093f8:	0800b894 	.word	0x0800b894
 80093fc:	0800b8d4 	.word	0x0800b8d4
 8009400:	0800b8b4 	.word	0x0800b8b4
 8009404:	0800b874 	.word	0x0800b874
 8009408:	0800b8da 	.word	0x0800b8da
 800940c:	0800b8de 	.word	0x0800b8de
 8009410:	00000000 	.word	0x00000000
 8009414:	080091c9 	.word	0x080091c9

08009418 <_printf_common>:
 8009418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	4691      	mov	r9, r2
 800941e:	461f      	mov	r7, r3
 8009420:	688a      	ldr	r2, [r1, #8]
 8009422:	690b      	ldr	r3, [r1, #16]
 8009424:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009428:	4293      	cmp	r3, r2
 800942a:	bfb8      	it	lt
 800942c:	4613      	movlt	r3, r2
 800942e:	f8c9 3000 	str.w	r3, [r9]
 8009432:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009436:	4606      	mov	r6, r0
 8009438:	460c      	mov	r4, r1
 800943a:	b112      	cbz	r2, 8009442 <_printf_common+0x2a>
 800943c:	3301      	adds	r3, #1
 800943e:	f8c9 3000 	str.w	r3, [r9]
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	0699      	lsls	r1, r3, #26
 8009446:	bf42      	ittt	mi
 8009448:	f8d9 3000 	ldrmi.w	r3, [r9]
 800944c:	3302      	addmi	r3, #2
 800944e:	f8c9 3000 	strmi.w	r3, [r9]
 8009452:	6825      	ldr	r5, [r4, #0]
 8009454:	f015 0506 	ands.w	r5, r5, #6
 8009458:	d107      	bne.n	800946a <_printf_common+0x52>
 800945a:	f104 0a19 	add.w	sl, r4, #25
 800945e:	68e3      	ldr	r3, [r4, #12]
 8009460:	f8d9 2000 	ldr.w	r2, [r9]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	429d      	cmp	r5, r3
 8009468:	db29      	blt.n	80094be <_printf_common+0xa6>
 800946a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800946e:	6822      	ldr	r2, [r4, #0]
 8009470:	3300      	adds	r3, #0
 8009472:	bf18      	it	ne
 8009474:	2301      	movne	r3, #1
 8009476:	0692      	lsls	r2, r2, #26
 8009478:	d42e      	bmi.n	80094d8 <_printf_common+0xc0>
 800947a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800947e:	4639      	mov	r1, r7
 8009480:	4630      	mov	r0, r6
 8009482:	47c0      	blx	r8
 8009484:	3001      	adds	r0, #1
 8009486:	d021      	beq.n	80094cc <_printf_common+0xb4>
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	68e5      	ldr	r5, [r4, #12]
 800948c:	f8d9 2000 	ldr.w	r2, [r9]
 8009490:	f003 0306 	and.w	r3, r3, #6
 8009494:	2b04      	cmp	r3, #4
 8009496:	bf08      	it	eq
 8009498:	1aad      	subeq	r5, r5, r2
 800949a:	68a3      	ldr	r3, [r4, #8]
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	bf0c      	ite	eq
 80094a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094a4:	2500      	movne	r5, #0
 80094a6:	4293      	cmp	r3, r2
 80094a8:	bfc4      	itt	gt
 80094aa:	1a9b      	subgt	r3, r3, r2
 80094ac:	18ed      	addgt	r5, r5, r3
 80094ae:	f04f 0900 	mov.w	r9, #0
 80094b2:	341a      	adds	r4, #26
 80094b4:	454d      	cmp	r5, r9
 80094b6:	d11b      	bne.n	80094f0 <_printf_common+0xd8>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094be:	2301      	movs	r3, #1
 80094c0:	4652      	mov	r2, sl
 80094c2:	4639      	mov	r1, r7
 80094c4:	4630      	mov	r0, r6
 80094c6:	47c0      	blx	r8
 80094c8:	3001      	adds	r0, #1
 80094ca:	d103      	bne.n	80094d4 <_printf_common+0xbc>
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295
 80094d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094d4:	3501      	adds	r5, #1
 80094d6:	e7c2      	b.n	800945e <_printf_common+0x46>
 80094d8:	18e1      	adds	r1, r4, r3
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	2030      	movs	r0, #48	; 0x30
 80094de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094e2:	4422      	add	r2, r4
 80094e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094ec:	3302      	adds	r3, #2
 80094ee:	e7c4      	b.n	800947a <_printf_common+0x62>
 80094f0:	2301      	movs	r3, #1
 80094f2:	4622      	mov	r2, r4
 80094f4:	4639      	mov	r1, r7
 80094f6:	4630      	mov	r0, r6
 80094f8:	47c0      	blx	r8
 80094fa:	3001      	adds	r0, #1
 80094fc:	d0e6      	beq.n	80094cc <_printf_common+0xb4>
 80094fe:	f109 0901 	add.w	r9, r9, #1
 8009502:	e7d7      	b.n	80094b4 <_printf_common+0x9c>

08009504 <_printf_i>:
 8009504:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009508:	4617      	mov	r7, r2
 800950a:	7e0a      	ldrb	r2, [r1, #24]
 800950c:	b085      	sub	sp, #20
 800950e:	2a6e      	cmp	r2, #110	; 0x6e
 8009510:	4698      	mov	r8, r3
 8009512:	4606      	mov	r6, r0
 8009514:	460c      	mov	r4, r1
 8009516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009518:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800951c:	f000 80bc 	beq.w	8009698 <_printf_i+0x194>
 8009520:	d81a      	bhi.n	8009558 <_printf_i+0x54>
 8009522:	2a63      	cmp	r2, #99	; 0x63
 8009524:	d02e      	beq.n	8009584 <_printf_i+0x80>
 8009526:	d80a      	bhi.n	800953e <_printf_i+0x3a>
 8009528:	2a00      	cmp	r2, #0
 800952a:	f000 80c8 	beq.w	80096be <_printf_i+0x1ba>
 800952e:	2a58      	cmp	r2, #88	; 0x58
 8009530:	f000 808a 	beq.w	8009648 <_printf_i+0x144>
 8009534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009538:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800953c:	e02a      	b.n	8009594 <_printf_i+0x90>
 800953e:	2a64      	cmp	r2, #100	; 0x64
 8009540:	d001      	beq.n	8009546 <_printf_i+0x42>
 8009542:	2a69      	cmp	r2, #105	; 0x69
 8009544:	d1f6      	bne.n	8009534 <_printf_i+0x30>
 8009546:	6821      	ldr	r1, [r4, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800954e:	d023      	beq.n	8009598 <_printf_i+0x94>
 8009550:	1d11      	adds	r1, r2, #4
 8009552:	6019      	str	r1, [r3, #0]
 8009554:	6813      	ldr	r3, [r2, #0]
 8009556:	e027      	b.n	80095a8 <_printf_i+0xa4>
 8009558:	2a73      	cmp	r2, #115	; 0x73
 800955a:	f000 80b4 	beq.w	80096c6 <_printf_i+0x1c2>
 800955e:	d808      	bhi.n	8009572 <_printf_i+0x6e>
 8009560:	2a6f      	cmp	r2, #111	; 0x6f
 8009562:	d02a      	beq.n	80095ba <_printf_i+0xb6>
 8009564:	2a70      	cmp	r2, #112	; 0x70
 8009566:	d1e5      	bne.n	8009534 <_printf_i+0x30>
 8009568:	680a      	ldr	r2, [r1, #0]
 800956a:	f042 0220 	orr.w	r2, r2, #32
 800956e:	600a      	str	r2, [r1, #0]
 8009570:	e003      	b.n	800957a <_printf_i+0x76>
 8009572:	2a75      	cmp	r2, #117	; 0x75
 8009574:	d021      	beq.n	80095ba <_printf_i+0xb6>
 8009576:	2a78      	cmp	r2, #120	; 0x78
 8009578:	d1dc      	bne.n	8009534 <_printf_i+0x30>
 800957a:	2278      	movs	r2, #120	; 0x78
 800957c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009580:	496e      	ldr	r1, [pc, #440]	; (800973c <_printf_i+0x238>)
 8009582:	e064      	b.n	800964e <_printf_i+0x14a>
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800958a:	1d11      	adds	r1, r2, #4
 800958c:	6019      	str	r1, [r3, #0]
 800958e:	6813      	ldr	r3, [r2, #0]
 8009590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009594:	2301      	movs	r3, #1
 8009596:	e0a3      	b.n	80096e0 <_printf_i+0x1dc>
 8009598:	f011 0f40 	tst.w	r1, #64	; 0x40
 800959c:	f102 0104 	add.w	r1, r2, #4
 80095a0:	6019      	str	r1, [r3, #0]
 80095a2:	d0d7      	beq.n	8009554 <_printf_i+0x50>
 80095a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da03      	bge.n	80095b4 <_printf_i+0xb0>
 80095ac:	222d      	movs	r2, #45	; 0x2d
 80095ae:	425b      	negs	r3, r3
 80095b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80095b4:	4962      	ldr	r1, [pc, #392]	; (8009740 <_printf_i+0x23c>)
 80095b6:	220a      	movs	r2, #10
 80095b8:	e017      	b.n	80095ea <_printf_i+0xe6>
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	6819      	ldr	r1, [r3, #0]
 80095be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80095c2:	d003      	beq.n	80095cc <_printf_i+0xc8>
 80095c4:	1d08      	adds	r0, r1, #4
 80095c6:	6018      	str	r0, [r3, #0]
 80095c8:	680b      	ldr	r3, [r1, #0]
 80095ca:	e006      	b.n	80095da <_printf_i+0xd6>
 80095cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095d0:	f101 0004 	add.w	r0, r1, #4
 80095d4:	6018      	str	r0, [r3, #0]
 80095d6:	d0f7      	beq.n	80095c8 <_printf_i+0xc4>
 80095d8:	880b      	ldrh	r3, [r1, #0]
 80095da:	4959      	ldr	r1, [pc, #356]	; (8009740 <_printf_i+0x23c>)
 80095dc:	2a6f      	cmp	r2, #111	; 0x6f
 80095de:	bf14      	ite	ne
 80095e0:	220a      	movne	r2, #10
 80095e2:	2208      	moveq	r2, #8
 80095e4:	2000      	movs	r0, #0
 80095e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80095ea:	6865      	ldr	r5, [r4, #4]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	f2c0 809c 	blt.w	800972c <_printf_i+0x228>
 80095f4:	6820      	ldr	r0, [r4, #0]
 80095f6:	f020 0004 	bic.w	r0, r0, #4
 80095fa:	6020      	str	r0, [r4, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d13f      	bne.n	8009680 <_printf_i+0x17c>
 8009600:	2d00      	cmp	r5, #0
 8009602:	f040 8095 	bne.w	8009730 <_printf_i+0x22c>
 8009606:	4675      	mov	r5, lr
 8009608:	2a08      	cmp	r2, #8
 800960a:	d10b      	bne.n	8009624 <_printf_i+0x120>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	07da      	lsls	r2, r3, #31
 8009610:	d508      	bpl.n	8009624 <_printf_i+0x120>
 8009612:	6923      	ldr	r3, [r4, #16]
 8009614:	6862      	ldr	r2, [r4, #4]
 8009616:	429a      	cmp	r2, r3
 8009618:	bfde      	ittt	le
 800961a:	2330      	movle	r3, #48	; 0x30
 800961c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009624:	ebae 0305 	sub.w	r3, lr, r5
 8009628:	6123      	str	r3, [r4, #16]
 800962a:	f8cd 8000 	str.w	r8, [sp]
 800962e:	463b      	mov	r3, r7
 8009630:	aa03      	add	r2, sp, #12
 8009632:	4621      	mov	r1, r4
 8009634:	4630      	mov	r0, r6
 8009636:	f7ff feef 	bl	8009418 <_printf_common>
 800963a:	3001      	adds	r0, #1
 800963c:	d155      	bne.n	80096ea <_printf_i+0x1e6>
 800963e:	f04f 30ff 	mov.w	r0, #4294967295
 8009642:	b005      	add	sp, #20
 8009644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009648:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800964c:	493c      	ldr	r1, [pc, #240]	; (8009740 <_printf_i+0x23c>)
 800964e:	6822      	ldr	r2, [r4, #0]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	f012 0f80 	tst.w	r2, #128	; 0x80
 8009656:	f100 0504 	add.w	r5, r0, #4
 800965a:	601d      	str	r5, [r3, #0]
 800965c:	d001      	beq.n	8009662 <_printf_i+0x15e>
 800965e:	6803      	ldr	r3, [r0, #0]
 8009660:	e002      	b.n	8009668 <_printf_i+0x164>
 8009662:	0655      	lsls	r5, r2, #25
 8009664:	d5fb      	bpl.n	800965e <_printf_i+0x15a>
 8009666:	8803      	ldrh	r3, [r0, #0]
 8009668:	07d0      	lsls	r0, r2, #31
 800966a:	bf44      	itt	mi
 800966c:	f042 0220 	orrmi.w	r2, r2, #32
 8009670:	6022      	strmi	r2, [r4, #0]
 8009672:	b91b      	cbnz	r3, 800967c <_printf_i+0x178>
 8009674:	6822      	ldr	r2, [r4, #0]
 8009676:	f022 0220 	bic.w	r2, r2, #32
 800967a:	6022      	str	r2, [r4, #0]
 800967c:	2210      	movs	r2, #16
 800967e:	e7b1      	b.n	80095e4 <_printf_i+0xe0>
 8009680:	4675      	mov	r5, lr
 8009682:	fbb3 f0f2 	udiv	r0, r3, r2
 8009686:	fb02 3310 	mls	r3, r2, r0, r3
 800968a:	5ccb      	ldrb	r3, [r1, r3]
 800968c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009690:	4603      	mov	r3, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	d1f5      	bne.n	8009682 <_printf_i+0x17e>
 8009696:	e7b7      	b.n	8009608 <_printf_i+0x104>
 8009698:	6808      	ldr	r0, [r1, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6949      	ldr	r1, [r1, #20]
 800969e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80096a2:	d004      	beq.n	80096ae <_printf_i+0x1aa>
 80096a4:	1d10      	adds	r0, r2, #4
 80096a6:	6018      	str	r0, [r3, #0]
 80096a8:	6813      	ldr	r3, [r2, #0]
 80096aa:	6019      	str	r1, [r3, #0]
 80096ac:	e007      	b.n	80096be <_printf_i+0x1ba>
 80096ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80096b2:	f102 0004 	add.w	r0, r2, #4
 80096b6:	6018      	str	r0, [r3, #0]
 80096b8:	6813      	ldr	r3, [r2, #0]
 80096ba:	d0f6      	beq.n	80096aa <_printf_i+0x1a6>
 80096bc:	8019      	strh	r1, [r3, #0]
 80096be:	2300      	movs	r3, #0
 80096c0:	6123      	str	r3, [r4, #16]
 80096c2:	4675      	mov	r5, lr
 80096c4:	e7b1      	b.n	800962a <_printf_i+0x126>
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	1d11      	adds	r1, r2, #4
 80096ca:	6019      	str	r1, [r3, #0]
 80096cc:	6815      	ldr	r5, [r2, #0]
 80096ce:	6862      	ldr	r2, [r4, #4]
 80096d0:	2100      	movs	r1, #0
 80096d2:	4628      	mov	r0, r5
 80096d4:	f7f6 fd8c 	bl	80001f0 <memchr>
 80096d8:	b108      	cbz	r0, 80096de <_printf_i+0x1da>
 80096da:	1b40      	subs	r0, r0, r5
 80096dc:	6060      	str	r0, [r4, #4]
 80096de:	6863      	ldr	r3, [r4, #4]
 80096e0:	6123      	str	r3, [r4, #16]
 80096e2:	2300      	movs	r3, #0
 80096e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e8:	e79f      	b.n	800962a <_printf_i+0x126>
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	462a      	mov	r2, r5
 80096ee:	4639      	mov	r1, r7
 80096f0:	4630      	mov	r0, r6
 80096f2:	47c0      	blx	r8
 80096f4:	3001      	adds	r0, #1
 80096f6:	d0a2      	beq.n	800963e <_printf_i+0x13a>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	079b      	lsls	r3, r3, #30
 80096fc:	d507      	bpl.n	800970e <_printf_i+0x20a>
 80096fe:	2500      	movs	r5, #0
 8009700:	f104 0919 	add.w	r9, r4, #25
 8009704:	68e3      	ldr	r3, [r4, #12]
 8009706:	9a03      	ldr	r2, [sp, #12]
 8009708:	1a9b      	subs	r3, r3, r2
 800970a:	429d      	cmp	r5, r3
 800970c:	db05      	blt.n	800971a <_printf_i+0x216>
 800970e:	68e0      	ldr	r0, [r4, #12]
 8009710:	9b03      	ldr	r3, [sp, #12]
 8009712:	4298      	cmp	r0, r3
 8009714:	bfb8      	it	lt
 8009716:	4618      	movlt	r0, r3
 8009718:	e793      	b.n	8009642 <_printf_i+0x13e>
 800971a:	2301      	movs	r3, #1
 800971c:	464a      	mov	r2, r9
 800971e:	4639      	mov	r1, r7
 8009720:	4630      	mov	r0, r6
 8009722:	47c0      	blx	r8
 8009724:	3001      	adds	r0, #1
 8009726:	d08a      	beq.n	800963e <_printf_i+0x13a>
 8009728:	3501      	adds	r5, #1
 800972a:	e7eb      	b.n	8009704 <_printf_i+0x200>
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1a7      	bne.n	8009680 <_printf_i+0x17c>
 8009730:	780b      	ldrb	r3, [r1, #0]
 8009732:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009736:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800973a:	e765      	b.n	8009608 <_printf_i+0x104>
 800973c:	0800b8f6 	.word	0x0800b8f6
 8009740:	0800b8e5 	.word	0x0800b8e5

08009744 <_sbrk_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4c06      	ldr	r4, [pc, #24]	; (8009760 <_sbrk_r+0x1c>)
 8009748:	2300      	movs	r3, #0
 800974a:	4605      	mov	r5, r0
 800974c:	4608      	mov	r0, r1
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	f7ff f97a 	bl	8008a48 <_sbrk>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_sbrk_r+0x1a>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	b103      	cbz	r3, 800975e <_sbrk_r+0x1a>
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20000674 	.word	0x20000674

08009764 <__sread>:
 8009764:	b510      	push	{r4, lr}
 8009766:	460c      	mov	r4, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	f000 fa98 	bl	8009ca0 <_read_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	bfab      	itete	ge
 8009774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009776:	89a3      	ldrhlt	r3, [r4, #12]
 8009778:	181b      	addge	r3, r3, r0
 800977a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800977e:	bfac      	ite	ge
 8009780:	6563      	strge	r3, [r4, #84]	; 0x54
 8009782:	81a3      	strhlt	r3, [r4, #12]
 8009784:	bd10      	pop	{r4, pc}

08009786 <__swrite>:
 8009786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800978a:	461f      	mov	r7, r3
 800978c:	898b      	ldrh	r3, [r1, #12]
 800978e:	05db      	lsls	r3, r3, #23
 8009790:	4605      	mov	r5, r0
 8009792:	460c      	mov	r4, r1
 8009794:	4616      	mov	r6, r2
 8009796:	d505      	bpl.n	80097a4 <__swrite+0x1e>
 8009798:	2302      	movs	r3, #2
 800979a:	2200      	movs	r2, #0
 800979c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a0:	f000 f9b8 	bl	8009b14 <_lseek_r>
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	4632      	mov	r2, r6
 80097b2:	463b      	mov	r3, r7
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ba:	f000 b869 	b.w	8009890 <_write_r>

080097be <__sseek>:
 80097be:	b510      	push	{r4, lr}
 80097c0:	460c      	mov	r4, r1
 80097c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c6:	f000 f9a5 	bl	8009b14 <_lseek_r>
 80097ca:	1c43      	adds	r3, r0, #1
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	bf15      	itete	ne
 80097d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80097d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097da:	81a3      	strheq	r3, [r4, #12]
 80097dc:	bf18      	it	ne
 80097de:	81a3      	strhne	r3, [r4, #12]
 80097e0:	bd10      	pop	{r4, pc}

080097e2 <__sclose>:
 80097e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e6:	f000 b8d3 	b.w	8009990 <_close_r>
	...

080097ec <__swbuf_r>:
 80097ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ee:	460e      	mov	r6, r1
 80097f0:	4614      	mov	r4, r2
 80097f2:	4605      	mov	r5, r0
 80097f4:	b118      	cbz	r0, 80097fe <__swbuf_r+0x12>
 80097f6:	6983      	ldr	r3, [r0, #24]
 80097f8:	b90b      	cbnz	r3, 80097fe <__swbuf_r+0x12>
 80097fa:	f7ff fbe5 	bl	8008fc8 <__sinit>
 80097fe:	4b21      	ldr	r3, [pc, #132]	; (8009884 <__swbuf_r+0x98>)
 8009800:	429c      	cmp	r4, r3
 8009802:	d12a      	bne.n	800985a <__swbuf_r+0x6e>
 8009804:	686c      	ldr	r4, [r5, #4]
 8009806:	69a3      	ldr	r3, [r4, #24]
 8009808:	60a3      	str	r3, [r4, #8]
 800980a:	89a3      	ldrh	r3, [r4, #12]
 800980c:	071a      	lsls	r2, r3, #28
 800980e:	d52e      	bpl.n	800986e <__swbuf_r+0x82>
 8009810:	6923      	ldr	r3, [r4, #16]
 8009812:	b363      	cbz	r3, 800986e <__swbuf_r+0x82>
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	6820      	ldr	r0, [r4, #0]
 8009818:	1ac0      	subs	r0, r0, r3
 800981a:	6963      	ldr	r3, [r4, #20]
 800981c:	b2f6      	uxtb	r6, r6
 800981e:	4298      	cmp	r0, r3
 8009820:	4637      	mov	r7, r6
 8009822:	db04      	blt.n	800982e <__swbuf_r+0x42>
 8009824:	4621      	mov	r1, r4
 8009826:	4628      	mov	r0, r5
 8009828:	f000 f94a 	bl	8009ac0 <_fflush_r>
 800982c:	bb28      	cbnz	r0, 800987a <__swbuf_r+0x8e>
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	3b01      	subs	r3, #1
 8009832:	60a3      	str	r3, [r4, #8]
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	6022      	str	r2, [r4, #0]
 800983a:	701e      	strb	r6, [r3, #0]
 800983c:	6963      	ldr	r3, [r4, #20]
 800983e:	3001      	adds	r0, #1
 8009840:	4298      	cmp	r0, r3
 8009842:	d004      	beq.n	800984e <__swbuf_r+0x62>
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	07db      	lsls	r3, r3, #31
 8009848:	d519      	bpl.n	800987e <__swbuf_r+0x92>
 800984a:	2e0a      	cmp	r6, #10
 800984c:	d117      	bne.n	800987e <__swbuf_r+0x92>
 800984e:	4621      	mov	r1, r4
 8009850:	4628      	mov	r0, r5
 8009852:	f000 f935 	bl	8009ac0 <_fflush_r>
 8009856:	b190      	cbz	r0, 800987e <__swbuf_r+0x92>
 8009858:	e00f      	b.n	800987a <__swbuf_r+0x8e>
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <__swbuf_r+0x9c>)
 800985c:	429c      	cmp	r4, r3
 800985e:	d101      	bne.n	8009864 <__swbuf_r+0x78>
 8009860:	68ac      	ldr	r4, [r5, #8]
 8009862:	e7d0      	b.n	8009806 <__swbuf_r+0x1a>
 8009864:	4b09      	ldr	r3, [pc, #36]	; (800988c <__swbuf_r+0xa0>)
 8009866:	429c      	cmp	r4, r3
 8009868:	bf08      	it	eq
 800986a:	68ec      	ldreq	r4, [r5, #12]
 800986c:	e7cb      	b.n	8009806 <__swbuf_r+0x1a>
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f81f 	bl	80098b4 <__swsetup_r>
 8009876:	2800      	cmp	r0, #0
 8009878:	d0cc      	beq.n	8009814 <__swbuf_r+0x28>
 800987a:	f04f 37ff 	mov.w	r7, #4294967295
 800987e:	4638      	mov	r0, r7
 8009880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009882:	bf00      	nop
 8009884:	0800b894 	.word	0x0800b894
 8009888:	0800b8b4 	.word	0x0800b8b4
 800988c:	0800b874 	.word	0x0800b874

08009890 <_write_r>:
 8009890:	b538      	push	{r3, r4, r5, lr}
 8009892:	4c07      	ldr	r4, [pc, #28]	; (80098b0 <_write_r+0x20>)
 8009894:	4605      	mov	r5, r0
 8009896:	4608      	mov	r0, r1
 8009898:	4611      	mov	r1, r2
 800989a:	2200      	movs	r2, #0
 800989c:	6022      	str	r2, [r4, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	f7ff f8b5 	bl	8008a0e <_write>
 80098a4:	1c43      	adds	r3, r0, #1
 80098a6:	d102      	bne.n	80098ae <_write_r+0x1e>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	b103      	cbz	r3, 80098ae <_write_r+0x1e>
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	bd38      	pop	{r3, r4, r5, pc}
 80098b0:	20000674 	.word	0x20000674

080098b4 <__swsetup_r>:
 80098b4:	4b32      	ldr	r3, [pc, #200]	; (8009980 <__swsetup_r+0xcc>)
 80098b6:	b570      	push	{r4, r5, r6, lr}
 80098b8:	681d      	ldr	r5, [r3, #0]
 80098ba:	4606      	mov	r6, r0
 80098bc:	460c      	mov	r4, r1
 80098be:	b125      	cbz	r5, 80098ca <__swsetup_r+0x16>
 80098c0:	69ab      	ldr	r3, [r5, #24]
 80098c2:	b913      	cbnz	r3, 80098ca <__swsetup_r+0x16>
 80098c4:	4628      	mov	r0, r5
 80098c6:	f7ff fb7f 	bl	8008fc8 <__sinit>
 80098ca:	4b2e      	ldr	r3, [pc, #184]	; (8009984 <__swsetup_r+0xd0>)
 80098cc:	429c      	cmp	r4, r3
 80098ce:	d10f      	bne.n	80098f0 <__swsetup_r+0x3c>
 80098d0:	686c      	ldr	r4, [r5, #4]
 80098d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	0715      	lsls	r5, r2, #28
 80098da:	d42c      	bmi.n	8009936 <__swsetup_r+0x82>
 80098dc:	06d0      	lsls	r0, r2, #27
 80098de:	d411      	bmi.n	8009904 <__swsetup_r+0x50>
 80098e0:	2209      	movs	r2, #9
 80098e2:	6032      	str	r2, [r6, #0]
 80098e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	bd70      	pop	{r4, r5, r6, pc}
 80098f0:	4b25      	ldr	r3, [pc, #148]	; (8009988 <__swsetup_r+0xd4>)
 80098f2:	429c      	cmp	r4, r3
 80098f4:	d101      	bne.n	80098fa <__swsetup_r+0x46>
 80098f6:	68ac      	ldr	r4, [r5, #8]
 80098f8:	e7eb      	b.n	80098d2 <__swsetup_r+0x1e>
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <__swsetup_r+0xd8>)
 80098fc:	429c      	cmp	r4, r3
 80098fe:	bf08      	it	eq
 8009900:	68ec      	ldreq	r4, [r5, #12]
 8009902:	e7e6      	b.n	80098d2 <__swsetup_r+0x1e>
 8009904:	0751      	lsls	r1, r2, #29
 8009906:	d512      	bpl.n	800992e <__swsetup_r+0x7a>
 8009908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800990a:	b141      	cbz	r1, 800991e <__swsetup_r+0x6a>
 800990c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009910:	4299      	cmp	r1, r3
 8009912:	d002      	beq.n	800991a <__swsetup_r+0x66>
 8009914:	4630      	mov	r0, r6
 8009916:	f000 f975 	bl	8009c04 <_free_r>
 800991a:	2300      	movs	r3, #0
 800991c:	6363      	str	r3, [r4, #52]	; 0x34
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009924:	81a3      	strh	r3, [r4, #12]
 8009926:	2300      	movs	r3, #0
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	6923      	ldr	r3, [r4, #16]
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	89a3      	ldrh	r3, [r4, #12]
 8009930:	f043 0308 	orr.w	r3, r3, #8
 8009934:	81a3      	strh	r3, [r4, #12]
 8009936:	6923      	ldr	r3, [r4, #16]
 8009938:	b94b      	cbnz	r3, 800994e <__swsetup_r+0x9a>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009944:	d003      	beq.n	800994e <__swsetup_r+0x9a>
 8009946:	4621      	mov	r1, r4
 8009948:	4630      	mov	r0, r6
 800994a:	f000 f919 	bl	8009b80 <__smakebuf_r>
 800994e:	89a2      	ldrh	r2, [r4, #12]
 8009950:	f012 0301 	ands.w	r3, r2, #1
 8009954:	d00c      	beq.n	8009970 <__swsetup_r+0xbc>
 8009956:	2300      	movs	r3, #0
 8009958:	60a3      	str	r3, [r4, #8]
 800995a:	6963      	ldr	r3, [r4, #20]
 800995c:	425b      	negs	r3, r3
 800995e:	61a3      	str	r3, [r4, #24]
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	b953      	cbnz	r3, 800997a <__swsetup_r+0xc6>
 8009964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009968:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800996c:	d1ba      	bne.n	80098e4 <__swsetup_r+0x30>
 800996e:	bd70      	pop	{r4, r5, r6, pc}
 8009970:	0792      	lsls	r2, r2, #30
 8009972:	bf58      	it	pl
 8009974:	6963      	ldrpl	r3, [r4, #20]
 8009976:	60a3      	str	r3, [r4, #8]
 8009978:	e7f2      	b.n	8009960 <__swsetup_r+0xac>
 800997a:	2000      	movs	r0, #0
 800997c:	e7f7      	b.n	800996e <__swsetup_r+0xba>
 800997e:	bf00      	nop
 8009980:	2000004c 	.word	0x2000004c
 8009984:	0800b894 	.word	0x0800b894
 8009988:	0800b8b4 	.word	0x0800b8b4
 800998c:	0800b874 	.word	0x0800b874

08009990 <_close_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4c06      	ldr	r4, [pc, #24]	; (80099ac <_close_r+0x1c>)
 8009994:	2300      	movs	r3, #0
 8009996:	4605      	mov	r5, r0
 8009998:	4608      	mov	r0, r1
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	f7ff f880 	bl	8008aa0 <_close>
 80099a0:	1c43      	adds	r3, r0, #1
 80099a2:	d102      	bne.n	80099aa <_close_r+0x1a>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	b103      	cbz	r3, 80099aa <_close_r+0x1a>
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	bd38      	pop	{r3, r4, r5, pc}
 80099ac:	20000674 	.word	0x20000674

080099b0 <__sflush_r>:
 80099b0:	898a      	ldrh	r2, [r1, #12]
 80099b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b6:	4605      	mov	r5, r0
 80099b8:	0710      	lsls	r0, r2, #28
 80099ba:	460c      	mov	r4, r1
 80099bc:	d45a      	bmi.n	8009a74 <__sflush_r+0xc4>
 80099be:	684b      	ldr	r3, [r1, #4]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc05      	bgt.n	80099d0 <__sflush_r+0x20>
 80099c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	dc02      	bgt.n	80099d0 <__sflush_r+0x20>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099d2:	2e00      	cmp	r6, #0
 80099d4:	d0f9      	beq.n	80099ca <__sflush_r+0x1a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099dc:	682f      	ldr	r7, [r5, #0]
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	d033      	beq.n	8009a4a <__sflush_r+0x9a>
 80099e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	075a      	lsls	r2, r3, #29
 80099e8:	d505      	bpl.n	80099f6 <__sflush_r+0x46>
 80099ea:	6863      	ldr	r3, [r4, #4]
 80099ec:	1ac0      	subs	r0, r0, r3
 80099ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f0:	b10b      	cbz	r3, 80099f6 <__sflush_r+0x46>
 80099f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099f4:	1ac0      	subs	r0, r0, r3
 80099f6:	2300      	movs	r3, #0
 80099f8:	4602      	mov	r2, r0
 80099fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099fc:	6a21      	ldr	r1, [r4, #32]
 80099fe:	4628      	mov	r0, r5
 8009a00:	47b0      	blx	r6
 8009a02:	1c43      	adds	r3, r0, #1
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	d106      	bne.n	8009a16 <__sflush_r+0x66>
 8009a08:	6829      	ldr	r1, [r5, #0]
 8009a0a:	291d      	cmp	r1, #29
 8009a0c:	d84b      	bhi.n	8009aa6 <__sflush_r+0xf6>
 8009a0e:	4a2b      	ldr	r2, [pc, #172]	; (8009abc <__sflush_r+0x10c>)
 8009a10:	40ca      	lsrs	r2, r1
 8009a12:	07d6      	lsls	r6, r2, #31
 8009a14:	d547      	bpl.n	8009aa6 <__sflush_r+0xf6>
 8009a16:	2200      	movs	r2, #0
 8009a18:	6062      	str	r2, [r4, #4]
 8009a1a:	04d9      	lsls	r1, r3, #19
 8009a1c:	6922      	ldr	r2, [r4, #16]
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	d504      	bpl.n	8009a2c <__sflush_r+0x7c>
 8009a22:	1c42      	adds	r2, r0, #1
 8009a24:	d101      	bne.n	8009a2a <__sflush_r+0x7a>
 8009a26:	682b      	ldr	r3, [r5, #0]
 8009a28:	b903      	cbnz	r3, 8009a2c <__sflush_r+0x7c>
 8009a2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d0ca      	beq.n	80099ca <__sflush_r+0x1a>
 8009a34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d002      	beq.n	8009a42 <__sflush_r+0x92>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	f000 f8e1 	bl	8009c04 <_free_r>
 8009a42:	2000      	movs	r0, #0
 8009a44:	6360      	str	r0, [r4, #52]	; 0x34
 8009a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4a:	6a21      	ldr	r1, [r4, #32]
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	4628      	mov	r0, r5
 8009a50:	47b0      	blx	r6
 8009a52:	1c41      	adds	r1, r0, #1
 8009a54:	d1c6      	bne.n	80099e4 <__sflush_r+0x34>
 8009a56:	682b      	ldr	r3, [r5, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d0c3      	beq.n	80099e4 <__sflush_r+0x34>
 8009a5c:	2b1d      	cmp	r3, #29
 8009a5e:	d001      	beq.n	8009a64 <__sflush_r+0xb4>
 8009a60:	2b16      	cmp	r3, #22
 8009a62:	d101      	bne.n	8009a68 <__sflush_r+0xb8>
 8009a64:	602f      	str	r7, [r5, #0]
 8009a66:	e7b0      	b.n	80099ca <__sflush_r+0x1a>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	690f      	ldr	r7, [r1, #16]
 8009a76:	2f00      	cmp	r7, #0
 8009a78:	d0a7      	beq.n	80099ca <__sflush_r+0x1a>
 8009a7a:	0793      	lsls	r3, r2, #30
 8009a7c:	680e      	ldr	r6, [r1, #0]
 8009a7e:	bf08      	it	eq
 8009a80:	694b      	ldreq	r3, [r1, #20]
 8009a82:	600f      	str	r7, [r1, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2300      	movne	r3, #0
 8009a88:	eba6 0807 	sub.w	r8, r6, r7
 8009a8c:	608b      	str	r3, [r1, #8]
 8009a8e:	f1b8 0f00 	cmp.w	r8, #0
 8009a92:	dd9a      	ble.n	80099ca <__sflush_r+0x1a>
 8009a94:	4643      	mov	r3, r8
 8009a96:	463a      	mov	r2, r7
 8009a98:	6a21      	ldr	r1, [r4, #32]
 8009a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b0      	blx	r6
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	dc07      	bgt.n	8009ab4 <__sflush_r+0x104>
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab4:	4407      	add	r7, r0
 8009ab6:	eba8 0800 	sub.w	r8, r8, r0
 8009aba:	e7e8      	b.n	8009a8e <__sflush_r+0xde>
 8009abc:	20400001 	.word	0x20400001

08009ac0 <_fflush_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	690b      	ldr	r3, [r1, #16]
 8009ac4:	4605      	mov	r5, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	b1db      	cbz	r3, 8009b02 <_fflush_r+0x42>
 8009aca:	b118      	cbz	r0, 8009ad4 <_fflush_r+0x14>
 8009acc:	6983      	ldr	r3, [r0, #24]
 8009ace:	b90b      	cbnz	r3, 8009ad4 <_fflush_r+0x14>
 8009ad0:	f7ff fa7a 	bl	8008fc8 <__sinit>
 8009ad4:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <_fflush_r+0x48>)
 8009ad6:	429c      	cmp	r4, r3
 8009ad8:	d109      	bne.n	8009aee <_fflush_r+0x2e>
 8009ada:	686c      	ldr	r4, [r5, #4]
 8009adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ae0:	b17b      	cbz	r3, 8009b02 <_fflush_r+0x42>
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009aea:	f7ff bf61 	b.w	80099b0 <__sflush_r>
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <_fflush_r+0x4c>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	d101      	bne.n	8009af8 <_fflush_r+0x38>
 8009af4:	68ac      	ldr	r4, [r5, #8]
 8009af6:	e7f1      	b.n	8009adc <_fflush_r+0x1c>
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <_fflush_r+0x50>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	bf08      	it	eq
 8009afe:	68ec      	ldreq	r4, [r5, #12]
 8009b00:	e7ec      	b.n	8009adc <_fflush_r+0x1c>
 8009b02:	2000      	movs	r0, #0
 8009b04:	bd38      	pop	{r3, r4, r5, pc}
 8009b06:	bf00      	nop
 8009b08:	0800b894 	.word	0x0800b894
 8009b0c:	0800b8b4 	.word	0x0800b8b4
 8009b10:	0800b874 	.word	0x0800b874

08009b14 <_lseek_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4c07      	ldr	r4, [pc, #28]	; (8009b34 <_lseek_r+0x20>)
 8009b18:	4605      	mov	r5, r0
 8009b1a:	4608      	mov	r0, r1
 8009b1c:	4611      	mov	r1, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	6022      	str	r2, [r4, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f7fe ffe3 	bl	8008aee <_lseek>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_lseek_r+0x1e>
 8009b2c:	6823      	ldr	r3, [r4, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_lseek_r+0x1e>
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20000674 	.word	0x20000674

08009b38 <__swhatbuf_r>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	460e      	mov	r6, r1
 8009b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b40:	2900      	cmp	r1, #0
 8009b42:	b090      	sub	sp, #64	; 0x40
 8009b44:	4614      	mov	r4, r2
 8009b46:	461d      	mov	r5, r3
 8009b48:	da07      	bge.n	8009b5a <__swhatbuf_r+0x22>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	602b      	str	r3, [r5, #0]
 8009b4e:	89b3      	ldrh	r3, [r6, #12]
 8009b50:	061a      	lsls	r2, r3, #24
 8009b52:	d410      	bmi.n	8009b76 <__swhatbuf_r+0x3e>
 8009b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b58:	e00e      	b.n	8009b78 <__swhatbuf_r+0x40>
 8009b5a:	aa01      	add	r2, sp, #4
 8009b5c:	f000 f8b2 	bl	8009cc4 <_fstat_r>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	dbf2      	blt.n	8009b4a <__swhatbuf_r+0x12>
 8009b64:	9a02      	ldr	r2, [sp, #8]
 8009b66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b6e:	425a      	negs	r2, r3
 8009b70:	415a      	adcs	r2, r3
 8009b72:	602a      	str	r2, [r5, #0]
 8009b74:	e7ee      	b.n	8009b54 <__swhatbuf_r+0x1c>
 8009b76:	2340      	movs	r3, #64	; 0x40
 8009b78:	2000      	movs	r0, #0
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	b010      	add	sp, #64	; 0x40
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}

08009b80 <__smakebuf_r>:
 8009b80:	898b      	ldrh	r3, [r1, #12]
 8009b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b84:	079d      	lsls	r5, r3, #30
 8009b86:	4606      	mov	r6, r0
 8009b88:	460c      	mov	r4, r1
 8009b8a:	d507      	bpl.n	8009b9c <__smakebuf_r+0x1c>
 8009b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	6123      	str	r3, [r4, #16]
 8009b94:	2301      	movs	r3, #1
 8009b96:	6163      	str	r3, [r4, #20]
 8009b98:	b002      	add	sp, #8
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	ab01      	add	r3, sp, #4
 8009b9e:	466a      	mov	r2, sp
 8009ba0:	f7ff ffca 	bl	8009b38 <__swhatbuf_r>
 8009ba4:	9900      	ldr	r1, [sp, #0]
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7ff fa97 	bl	80090dc <_malloc_r>
 8009bae:	b948      	cbnz	r0, 8009bc4 <__smakebuf_r+0x44>
 8009bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d4ef      	bmi.n	8009b98 <__smakebuf_r+0x18>
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	f043 0302 	orr.w	r3, r3, #2
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	e7e3      	b.n	8009b8c <__smakebuf_r+0xc>
 8009bc4:	4b0d      	ldr	r3, [pc, #52]	; (8009bfc <__smakebuf_r+0x7c>)
 8009bc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	6020      	str	r0, [r4, #0]
 8009bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bd0:	81a3      	strh	r3, [r4, #12]
 8009bd2:	9b00      	ldr	r3, [sp, #0]
 8009bd4:	6163      	str	r3, [r4, #20]
 8009bd6:	9b01      	ldr	r3, [sp, #4]
 8009bd8:	6120      	str	r0, [r4, #16]
 8009bda:	b15b      	cbz	r3, 8009bf4 <__smakebuf_r+0x74>
 8009bdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be0:	4630      	mov	r0, r6
 8009be2:	f000 f881 	bl	8009ce8 <_isatty_r>
 8009be6:	b128      	cbz	r0, 8009bf4 <__smakebuf_r+0x74>
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	f043 0301 	orr.w	r3, r3, #1
 8009bf2:	81a3      	strh	r3, [r4, #12]
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	431d      	orrs	r5, r3
 8009bf8:	81a5      	strh	r5, [r4, #12]
 8009bfa:	e7cd      	b.n	8009b98 <__smakebuf_r+0x18>
 8009bfc:	08008f49 	.word	0x08008f49

08009c00 <__malloc_lock>:
 8009c00:	4770      	bx	lr

08009c02 <__malloc_unlock>:
 8009c02:	4770      	bx	lr

08009c04 <_free_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4605      	mov	r5, r0
 8009c08:	2900      	cmp	r1, #0
 8009c0a:	d045      	beq.n	8009c98 <_free_r+0x94>
 8009c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c10:	1f0c      	subs	r4, r1, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfb8      	it	lt
 8009c16:	18e4      	addlt	r4, r4, r3
 8009c18:	f7ff fff2 	bl	8009c00 <__malloc_lock>
 8009c1c:	4a1f      	ldr	r2, [pc, #124]	; (8009c9c <_free_r+0x98>)
 8009c1e:	6813      	ldr	r3, [r2, #0]
 8009c20:	4610      	mov	r0, r2
 8009c22:	b933      	cbnz	r3, 8009c32 <_free_r+0x2e>
 8009c24:	6063      	str	r3, [r4, #4]
 8009c26:	6014      	str	r4, [r2, #0]
 8009c28:	4628      	mov	r0, r5
 8009c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2e:	f7ff bfe8 	b.w	8009c02 <__malloc_unlock>
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	d90c      	bls.n	8009c50 <_free_r+0x4c>
 8009c36:	6821      	ldr	r1, [r4, #0]
 8009c38:	1862      	adds	r2, r4, r1
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	bf04      	itt	eq
 8009c3e:	681a      	ldreq	r2, [r3, #0]
 8009c40:	685b      	ldreq	r3, [r3, #4]
 8009c42:	6063      	str	r3, [r4, #4]
 8009c44:	bf04      	itt	eq
 8009c46:	1852      	addeq	r2, r2, r1
 8009c48:	6022      	streq	r2, [r4, #0]
 8009c4a:	6004      	str	r4, [r0, #0]
 8009c4c:	e7ec      	b.n	8009c28 <_free_r+0x24>
 8009c4e:	4613      	mov	r3, r2
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	b10a      	cbz	r2, 8009c58 <_free_r+0x54>
 8009c54:	42a2      	cmp	r2, r4
 8009c56:	d9fa      	bls.n	8009c4e <_free_r+0x4a>
 8009c58:	6819      	ldr	r1, [r3, #0]
 8009c5a:	1858      	adds	r0, r3, r1
 8009c5c:	42a0      	cmp	r0, r4
 8009c5e:	d10b      	bne.n	8009c78 <_free_r+0x74>
 8009c60:	6820      	ldr	r0, [r4, #0]
 8009c62:	4401      	add	r1, r0
 8009c64:	1858      	adds	r0, r3, r1
 8009c66:	4282      	cmp	r2, r0
 8009c68:	6019      	str	r1, [r3, #0]
 8009c6a:	d1dd      	bne.n	8009c28 <_free_r+0x24>
 8009c6c:	6810      	ldr	r0, [r2, #0]
 8009c6e:	6852      	ldr	r2, [r2, #4]
 8009c70:	605a      	str	r2, [r3, #4]
 8009c72:	4401      	add	r1, r0
 8009c74:	6019      	str	r1, [r3, #0]
 8009c76:	e7d7      	b.n	8009c28 <_free_r+0x24>
 8009c78:	d902      	bls.n	8009c80 <_free_r+0x7c>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	602b      	str	r3, [r5, #0]
 8009c7e:	e7d3      	b.n	8009c28 <_free_r+0x24>
 8009c80:	6820      	ldr	r0, [r4, #0]
 8009c82:	1821      	adds	r1, r4, r0
 8009c84:	428a      	cmp	r2, r1
 8009c86:	bf04      	itt	eq
 8009c88:	6811      	ldreq	r1, [r2, #0]
 8009c8a:	6852      	ldreq	r2, [r2, #4]
 8009c8c:	6062      	str	r2, [r4, #4]
 8009c8e:	bf04      	itt	eq
 8009c90:	1809      	addeq	r1, r1, r0
 8009c92:	6021      	streq	r1, [r4, #0]
 8009c94:	605c      	str	r4, [r3, #4]
 8009c96:	e7c7      	b.n	8009c28 <_free_r+0x24>
 8009c98:	bd38      	pop	{r3, r4, r5, pc}
 8009c9a:	bf00      	nop
 8009c9c:	2000027c 	.word	0x2000027c

08009ca0 <_read_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4c07      	ldr	r4, [pc, #28]	; (8009cc0 <_read_r+0x20>)
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	4608      	mov	r0, r1
 8009ca8:	4611      	mov	r1, r2
 8009caa:	2200      	movs	r2, #0
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f7fe fe90 	bl	80089d4 <_read>
 8009cb4:	1c43      	adds	r3, r0, #1
 8009cb6:	d102      	bne.n	8009cbe <_read_r+0x1e>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	b103      	cbz	r3, 8009cbe <_read_r+0x1e>
 8009cbc:	602b      	str	r3, [r5, #0]
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	20000674 	.word	0x20000674

08009cc4 <_fstat_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4c07      	ldr	r4, [pc, #28]	; (8009ce4 <_fstat_r+0x20>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4605      	mov	r5, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	4611      	mov	r1, r2
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	f7fe fef1 	bl	8008ab8 <_fstat>
 8009cd6:	1c43      	adds	r3, r0, #1
 8009cd8:	d102      	bne.n	8009ce0 <_fstat_r+0x1c>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	b103      	cbz	r3, 8009ce0 <_fstat_r+0x1c>
 8009cde:	602b      	str	r3, [r5, #0]
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20000674 	.word	0x20000674

08009ce8 <_isatty_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4c06      	ldr	r4, [pc, #24]	; (8009d04 <_isatty_r+0x1c>)
 8009cec:	2300      	movs	r3, #0
 8009cee:	4605      	mov	r5, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	6023      	str	r3, [r4, #0]
 8009cf4:	f7fe fef0 	bl	8008ad8 <_isatty>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_isatty_r+0x1a>
 8009cfc:	6823      	ldr	r3, [r4, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_isatty_r+0x1a>
 8009d00:	602b      	str	r3, [r5, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000674 	.word	0x20000674

08009d08 <_init>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	bf00      	nop
 8009d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0e:	bc08      	pop	{r3}
 8009d10:	469e      	mov	lr, r3
 8009d12:	4770      	bx	lr

08009d14 <_fini>:
 8009d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d16:	bf00      	nop
 8009d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1a:	bc08      	pop	{r3}
 8009d1c:	469e      	mov	lr, r3
 8009d1e:	4770      	bx	lr
