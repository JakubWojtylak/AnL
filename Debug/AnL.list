
AnL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b844  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00072adc  0800b9f4  0800b9f4  0001b9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0807e4d0  0807e4d0  0008e4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0807e4d8  0807e4d8  0008e4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0807e4dc  0807e4dc  0008e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000000  0807e4e0  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000900e4  2**0
                  CONTENTS
  8 .bss          00000698  200000e4  200000e4  000900e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000077c  2000077c  000900e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000900e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   000275de  00000000  00000000  00090114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004fe7  00000000  00000000  000b76f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001d18  00000000  00000000  000bc6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a98  00000000  00000000  000be3f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000df39  00000000  00000000  000bfe90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000838f  00000000  00000000  000cddc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d6158  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f50  00000000  00000000  000d61d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b9dc 	.word	0x0800b9dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	0800b9dc 	.word	0x0800b9dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b97a 	b.w	8000d80 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	9e08      	ldr	r6, [sp, #32]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d151      	bne.n	8000b58 <__udivmoddi4+0xb4>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	d96d      	bls.n	8000b96 <__udivmoddi4+0xf2>
 8000aba:	fab2 fe82 	clz	lr, r2
 8000abe:	f1be 0f00 	cmp.w	lr, #0
 8000ac2:	d00b      	beq.n	8000adc <__udivmoddi4+0x38>
 8000ac4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ac8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ad0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ad4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ad8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ae6:	fa1f f987 	uxth.w	r9, r7
 8000aea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000af2:	fb08 f309 	mul.w	r3, r8, r9
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x6c>
 8000afa:	19ed      	adds	r5, r5, r7
 8000afc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000b00:	f080 8123 	bcs.w	8000d4a <__udivmoddi4+0x2a6>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f240 8120 	bls.w	8000d4a <__udivmoddi4+0x2a6>
 8000b0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0e:	443d      	add	r5, r7
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b20:	fb00 f909 	mul.w	r9, r0, r9
 8000b24:	45a1      	cmp	r9, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x98>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b2e:	f080 810a 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8107 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 0409 	sub.w	r4, r4, r9
 8000b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d061      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6034      	str	r4, [r6, #0]
 8000b52:	6073      	str	r3, [r6, #4]
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0xc8>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d054      	beq.n	8000c0a <__udivmoddi4+0x166>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b66:	4608      	mov	r0, r1
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	fab3 f183 	clz	r1, r3
 8000b70:	2900      	cmp	r1, #0
 8000b72:	f040 808e 	bne.w	8000c92 <__udivmoddi4+0x1ee>
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xdc>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80fa 	bhi.w	8000d74 <__udivmoddi4+0x2d0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb65 0503 	sbc.w	r5, r5, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	46ac      	mov	ip, r5
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d03f      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	b912      	cbnz	r2, 8000b9e <__udivmoddi4+0xfa>
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b9e:	fab7 fe87 	clz	lr, r7
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d134      	bne.n	8000c12 <__udivmoddi4+0x16e>
 8000ba8:	1beb      	subs	r3, r5, r7
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bb6:	0c25      	lsrs	r5, r4, #16
 8000bb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc0:	fb0c f308 	mul.w	r3, ip, r8
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x134>
 8000bc8:	19ed      	adds	r5, r5, r7
 8000bca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x132>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	f200 80d1 	bhi.w	8000d78 <__udivmoddi4+0x2d4>
 8000bd6:	4680      	mov	r8, r0
 8000bd8:	1aed      	subs	r5, r5, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000be0:	fb02 5510 	mls	r5, r2, r0, r5
 8000be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000be8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x15c>
 8000bf0:	19e4      	adds	r4, r4, r7
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x15a>
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	f200 80b8 	bhi.w	8000d6e <__udivmoddi4+0x2ca>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c08:	e79d      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1ce 0420 	rsb	r4, lr, #32
 8000c16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	fa25 f404 	lsr.w	r4, r5, r4
 8000c28:	ea48 0803 	orr.w	r8, r8, r3
 8000c2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c34:	fb02 4411 	mls	r4, r2, r1, r4
 8000c38:	fa1f fc87 	uxth.w	ip, r7
 8000c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c40:	fb01 f30c 	mul.w	r3, r1, ip
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x1bc>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c52:	f080 808a 	bcs.w	8000d6a <__udivmoddi4+0x2c6>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	f240 8087 	bls.w	8000d6a <__udivmoddi4+0x2c6>
 8000c5c:	3902      	subs	r1, #2
 8000c5e:	443d      	add	r5, r7
 8000c60:	1aeb      	subs	r3, r5, r3
 8000c62:	fa1f f588 	uxth.w	r5, r8
 8000c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c72:	fb00 f30c 	mul.w	r3, r0, ip
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x1e6>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c80:	d26f      	bcs.n	8000d62 <__udivmoddi4+0x2be>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0x2be>
 8000c86:	3802      	subs	r0, #2
 8000c88:	443d      	add	r5, r7
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	e78f      	b.n	8000bb2 <__udivmoddi4+0x10e>
 8000c92:	f1c1 0720 	rsb	r7, r1, #32
 8000c96:	fa22 f807 	lsr.w	r8, r2, r7
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca0:	ea48 0303 	orr.w	r3, r8, r3
 8000ca4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cbe:	fa1f f883 	uxth.w	r8, r3
 8000cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cc6:	fb09 f408 	mul.w	r4, r9, r8
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x244>
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cdc:	d243      	bcs.n	8000d66 <__udivmoddi4+0x2c2>
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d941      	bls.n	8000d66 <__udivmoddi4+0x2c2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	441d      	add	r5, r3
 8000ce8:	1b2d      	subs	r5, r5, r4
 8000cea:	fa1f fe8e 	uxth.w	lr, lr
 8000cee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cf2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cfa:	fb00 f808 	mul.w	r8, r0, r8
 8000cfe:	45a0      	cmp	r8, r4
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x26e>
 8000d02:	18e4      	adds	r4, r4, r3
 8000d04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d08:	d229      	bcs.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0a:	45a0      	cmp	r8, r4
 8000d0c:	d927      	bls.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	441c      	add	r4, r3
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c6      	mov	lr, r8
 8000d22:	464d      	mov	r5, r9
 8000d24:	d315      	bcc.n	8000d52 <__udivmoddi4+0x2ae>
 8000d26:	d012      	beq.n	8000d4e <__udivmoddi4+0x2aa>
 8000d28:	b156      	cbz	r6, 8000d40 <__udivmoddi4+0x29c>
 8000d2a:	ebba 030e 	subs.w	r3, sl, lr
 8000d2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d32:	fa04 f707 	lsl.w	r7, r4, r7
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	40cc      	lsrs	r4, r1
 8000d3c:	6037      	str	r7, [r6, #0]
 8000d3e:	6074      	str	r4, [r6, #4]
 8000d40:	2100      	movs	r1, #0
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4618      	mov	r0, r3
 8000d48:	e6f8      	b.n	8000b3c <__udivmoddi4+0x98>
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	e6e0      	b.n	8000b10 <__udivmoddi4+0x6c>
 8000d4e:	45c2      	cmp	sl, r8
 8000d50:	d2ea      	bcs.n	8000d28 <__udivmoddi4+0x284>
 8000d52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d56:	eb69 0503 	sbc.w	r5, r9, r3
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7e4      	b.n	8000d28 <__udivmoddi4+0x284>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	e7d7      	b.n	8000d12 <__udivmoddi4+0x26e>
 8000d62:	4640      	mov	r0, r8
 8000d64:	e791      	b.n	8000c8a <__udivmoddi4+0x1e6>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e7be      	b.n	8000ce8 <__udivmoddi4+0x244>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	e778      	b.n	8000c60 <__udivmoddi4+0x1bc>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	e745      	b.n	8000c00 <__udivmoddi4+0x15c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e708      	b.n	8000b8a <__udivmoddi4+0xe6>
 8000d78:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	e72b      	b.n	8000bd8 <__udivmoddi4+0x134>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d88:	f000 fc76 	bl	8001678 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d8c:	20ca      	movs	r0, #202	; 0xca
 8000d8e:	f000 f95d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d92:	20c3      	movs	r0, #195	; 0xc3
 8000d94:	f000 f967 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d98:	2008      	movs	r0, #8
 8000d9a:	f000 f964 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000d9e:	2050      	movs	r0, #80	; 0x50
 8000da0:	f000 f961 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000da4:	20cf      	movs	r0, #207	; 0xcf
 8000da6:	f000 f951 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f95b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000db0:	20c1      	movs	r0, #193	; 0xc1
 8000db2:	f000 f958 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000db6:	2030      	movs	r0, #48	; 0x30
 8000db8:	f000 f955 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000dbc:	20ed      	movs	r0, #237	; 0xed
 8000dbe:	f000 f945 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 f94f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 f949 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dd4:	2081      	movs	r0, #129	; 0x81
 8000dd6:	f000 f946 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000dda:	20e8      	movs	r0, #232	; 0xe8
 8000ddc:	f000 f936 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000de0:	2085      	movs	r0, #133	; 0x85
 8000de2:	f000 f940 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f93d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000dec:	2078      	movs	r0, #120	; 0x78
 8000dee:	f000 f93a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000df2:	20cb      	movs	r0, #203	; 0xcb
 8000df4:	f000 f92a 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000df8:	2039      	movs	r0, #57	; 0x39
 8000dfa:	f000 f934 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f000 f931 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f92e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e0a:	2034      	movs	r0, #52	; 0x34
 8000e0c:	f000 f92b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f000 f928 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e16:	20f7      	movs	r0, #247	; 0xf7
 8000e18:	f000 f918 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f000 f922 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e22:	20ea      	movs	r0, #234	; 0xea
 8000e24:	f000 f912 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f91c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f919 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e34:	20b1      	movs	r0, #177	; 0xb1
 8000e36:	f000 f909 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f913 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e40:	201b      	movs	r0, #27
 8000e42:	f000 f910 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e46:	20b6      	movs	r0, #182	; 0xb6
 8000e48:	f000 f900 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f000 f90a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e52:	20a2      	movs	r0, #162	; 0xa2
 8000e54:	f000 f907 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e58:	20c0      	movs	r0, #192	; 0xc0
 8000e5a:	f000 f8f7 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f000 f901 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e64:	20c1      	movs	r0, #193	; 0xc1
 8000e66:	f000 f8f1 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f000 f8fb 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e70:	20c5      	movs	r0, #197	; 0xc5
 8000e72:	f000 f8eb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e76:	2045      	movs	r0, #69	; 0x45
 8000e78:	f000 f8f5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f000 f8f2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e82:	20c7      	movs	r0, #199	; 0xc7
 8000e84:	f000 f8e2 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e88:	2090      	movs	r0, #144	; 0x90
 8000e8a:	f000 f8ec 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f000 f8dc 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 f8e6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000e9a:	20f2      	movs	r0, #242	; 0xf2
 8000e9c:	f000 f8d6 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 f8e0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ea6:	20b0      	movs	r0, #176	; 0xb0
 8000ea8:	f000 f8d0 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000eac:	20c2      	movs	r0, #194	; 0xc2
 8000eae:	f000 f8da 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eb2:	20b6      	movs	r0, #182	; 0xb6
 8000eb4:	f000 f8ca 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f000 f8d4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ebe:	20a7      	movs	r0, #167	; 0xa7
 8000ec0:	f000 f8d1 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 f8ce 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f000 f8cb 	bl	8001066 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ed0:	202a      	movs	r0, #42	; 0x2a
 8000ed2:	f000 f8bb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8c5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f8c2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f8bf 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ee8:	20ef      	movs	r0, #239	; 0xef
 8000eea:	f000 f8bc 	bl	8001066 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000eee:	202b      	movs	r0, #43	; 0x2b
 8000ef0:	f000 f8ac 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f8b6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f8b3 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f8b0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f8ad 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f0c:	20f6      	movs	r0, #246	; 0xf6
 8000f0e:	f000 f89d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f8a7 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f8a4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 f8a1 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f24:	202c      	movs	r0, #44	; 0x2c
 8000f26:	f000 f891 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8000f2a:	20c8      	movs	r0, #200	; 0xc8
 8000f2c:	f000 fc92 	bl	8001854 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f000 f88b 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f895 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f3c:	20e0      	movs	r0, #224	; 0xe0
 8000f3e:	f000 f885 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f88f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f48:	2029      	movs	r0, #41	; 0x29
 8000f4a:	f000 f88c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f4e:	2024      	movs	r0, #36	; 0x24
 8000f50:	f000 f889 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 f886 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f000 f883 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f60:	2009      	movs	r0, #9
 8000f62:	f000 f880 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f66:	204e      	movs	r0, #78	; 0x4e
 8000f68:	f000 f87d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f6c:	2078      	movs	r0, #120	; 0x78
 8000f6e:	f000 f87a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f72:	203c      	movs	r0, #60	; 0x3c
 8000f74:	f000 f877 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f000 f874 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f7e:	2013      	movs	r0, #19
 8000f80:	f000 f871 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f000 f86e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f000 f86b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f90:	2011      	movs	r0, #17
 8000f92:	f000 f868 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f865 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000f9c:	20e1      	movs	r0, #225	; 0xe1
 8000f9e:	f000 f855 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f85f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fa8:	2016      	movs	r0, #22
 8000faa:	f000 f85c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 f859 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f856 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 f853 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f000 f850 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000fc6:	2031      	movs	r0, #49	; 0x31
 8000fc8:	f000 f84d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fcc:	2033      	movs	r0, #51	; 0x33
 8000fce:	f000 f84a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000fd2:	2042      	movs	r0, #66	; 0x42
 8000fd4:	f000 f847 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f000 f844 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f841 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 f83e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 f83b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000ff0:	202f      	movs	r0, #47	; 0x2f
 8000ff2:	f000 f838 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f835 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ffc:	2011      	movs	r0, #17
 8000ffe:	f000 f825 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f000 fc26 	bl	8001854 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001008:	2029      	movs	r0, #41	; 0x29
 800100a:	f000 f81f 	bl	800104c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f000 f81c 	bl	800104c <ili9341_WriteReg>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800101c:	f000 fb2c 	bl	8001678 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001020:	2103      	movs	r1, #3
 8001022:	20d3      	movs	r0, #211	; 0xd3
 8001024:	f000 f82c 	bl	8001080 <ili9341_ReadData>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001034:	2029      	movs	r0, #41	; 0x29
 8001036:	f000 f809 	bl	800104c <ili9341_WriteReg>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 f802 	bl	800104c <ili9341_WriteReg>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fba7 	bl	80017ac <LCD_IO_WriteReg>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb78 	bl	8001768 <LCD_IO_WriteData>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4613      	mov	r3, r2
 800108e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001090:	797a      	ldrb	r2, [r7, #5]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbaa 	bl	80017f0 <LCD_IO_ReadData>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80010d6:	f000 fbc9 	bl	800186c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fc0b 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80010f8:	f107 030f 	add.w	r3, r7, #15
 80010fc:	2201      	movs	r2, #1
 80010fe:	2123      	movs	r1, #35	; 0x23
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fbff 	bl	8001904 <GYRO_IO_Write>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001122:	f000 fba3 	bl	800186c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2201      	movs	r2, #1
 800112a:	210f      	movs	r1, #15
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fc1b 	bl	8001968 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001132:	79fb      	ldrb	r3, [r7, #7]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	2201      	movs	r2, #1
 8001146:	2124      	movs	r1, #36	; 0x24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fc0d 	bl	8001968 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	2201      	movs	r2, #1
 800115c:	2124      	movs	r1, #36	; 0x24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fbd0 	bl	8001904 <GYRO_IO_Write>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001180:	f107 030f 	add.w	r3, r7, #15
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fbbb 	bl	8001904 <GYRO_IO_Write>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011a8:	f107 030f 	add.w	r3, r7, #15
 80011ac:	2201      	movs	r2, #1
 80011ae:	2130      	movs	r1, #48	; 0x30
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fbd9 	bl	8001968 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80011b6:	f107 030e 	add.w	r3, r7, #14
 80011ba:	2201      	movs	r2, #1
 80011bc:	2122      	movs	r1, #34	; 0x22
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fbd2 	bl	8001968 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	121b      	asrs	r3, r3, #8
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f023 0320 	bic.w	r3, r3, #32
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	2201      	movs	r2, #1
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fb7f 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001206:	f107 030e 	add.w	r3, r7, #14
 800120a:	2201      	movs	r2, #1
 800120c:	2122      	movs	r1, #34	; 0x22
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fb78 	bl	8001904 <GYRO_IO_Write>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001226:	f107 030f 	add.w	r3, r7, #15
 800122a:	2201      	movs	r2, #1
 800122c:	2122      	movs	r1, #34	; 0x22
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fb9a 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10a      	bne.n	8001250 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124a:	b2db      	uxtb	r3, r3
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e00c      	b.n	800126a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d109      	bne.n	800126a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f023 0308 	bic.w	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800126a:	f107 030f 	add.w	r3, r7, #15
 800126e:	2201      	movs	r2, #1
 8001270:	2122      	movs	r1, #34	; 0x22
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fb46 	bl	8001904 <GYRO_IO_Write>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800128a:	f107 030f 	add.w	r3, r7, #15
 800128e:	2201      	movs	r2, #1
 8001290:	2122      	movs	r1, #34	; 0x22
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fb68 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e009      	b.n	80012c2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 0308 	bic.w	r3, r3, #8
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	2201      	movs	r2, #1
 80012c8:	2122      	movs	r1, #34	; 0x22
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fb1a 	bl	8001904 <GYRO_IO_Write>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80012e2:	f107 030f 	add.w	r3, r7, #15
 80012e6:	2201      	movs	r2, #1
 80012e8:	2121      	movs	r1, #33	; 0x21
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fb3c 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4313      	orrs	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	2201      	movs	r2, #1
 800130a:	2121      	movs	r1, #33	; 0x21
 800130c:	4618      	mov	r0, r3
 800130e:	f000 faf9 	bl	8001904 <GYRO_IO_Write>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001324:	f107 030f 	add.w	r3, r7, #15
 8001328:	2201      	movs	r2, #1
 800132a:	2124      	movs	r1, #36	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fb1b 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f023 0310 	bic.w	r3, r3, #16
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4313      	orrs	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	2201      	movs	r2, #1
 800134c:	2124      	movs	r1, #36	; 0x24
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fad8 	bl	8001904 <GYRO_IO_Write>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001386:	f107 030f 	add.w	r3, r7, #15
 800138a:	2201      	movs	r2, #1
 800138c:	2123      	movs	r1, #35	; 0x23
 800138e:	4618      	mov	r0, r3
 8001390:	f000 faea 	bl	8001968 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2206      	movs	r2, #6
 800139a:	2128      	movs	r1, #40	; 0x28
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fae3 	bl	8001968 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d126      	bne.n	80013fa <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	e01f      	b.n	80013f2 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	3301      	adds	r3, #1
 80013b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013bc:	4413      	add	r3, r2
 80013be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013d0:	440b      	add	r3, r1
 80013d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b21a      	sxth	r2, r3
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013e6:	440b      	add	r3, r1
 80013e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	3301      	adds	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	dddc      	ble.n	80013b2 <L3GD20_ReadXYZAngRate+0x56>
 80013f8:	e025      	b.n	8001446 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e01f      	b.n	8001440 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001408:	4413      	add	r3, r2
 800140a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800140e:	b29b      	uxth	r3, r3
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b29a      	uxth	r2, r3
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	3301      	adds	r3, #1
 800141a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800141e:	440b      	add	r3, r1
 8001420:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001434:	440b      	add	r3, r1
 8001436:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3301      	adds	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b02      	cmp	r3, #2
 8001444:	dddc      	ble.n	8001400 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800144c:	2b10      	cmp	r3, #16
 800144e:	d006      	beq.n	800145e <L3GD20_ReadXYZAngRate+0x102>
 8001450:	2b20      	cmp	r3, #32
 8001452:	d007      	beq.n	8001464 <L3GD20_ReadXYZAngRate+0x108>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d108      	bne.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <L3GD20_ReadXYZAngRate+0x154>)
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800145c:	e005      	b.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <L3GD20_ReadXYZAngRate+0x158>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001462:	e002      	b.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <L3GD20_ReadXYZAngRate+0x15c>)
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001468:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	e017      	b.n	80014a0 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	441a      	add	r2, r3
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001480:	440b      	add	r3, r1
 8001482:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	edc2 7a00 	vstr	s15, [r2]
  for(i=0; i<3; i++)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	3301      	adds	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	dde4      	ble.n	8001470 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	410c0000 	.word	0x410c0000
 80014b4:	418c0000 	.word	0x418c0000
 80014b8:	428c0000 	.word	0x428c0000

080014bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <SPIx_Init+0x6c>)
 80014c2:	f004 fe99 	bl	80061f8 <HAL_SPI_GetState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <SPIx_Init+0x6c>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <SPIx_Init+0x70>)
 80014d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <SPIx_Init+0x6c>)
 80014d4:	2218      	movs	r2, #24
 80014d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <SPIx_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <SPIx_Init+0x6c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <SPIx_Init+0x6c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <SPIx_Init+0x6c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <SPIx_Init+0x6c>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <SPIx_Init+0x6c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <SPIx_Init+0x6c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <SPIx_Init+0x6c>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <SPIx_Init+0x6c>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SPIx_Init+0x6c>)
 8001512:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001516:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <SPIx_Init+0x6c>)
 800151a:	f000 f873 	bl	8001604 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <SPIx_Init+0x6c>)
 8001520:	f004 fa07 	bl	8005932 <HAL_SPI_Init>
  } 
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000100 	.word	0x20000100
 800152c:	40015000 	.word	0x40015000

08001530 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <SPIx_Read+0x38>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f107 0108 	add.w	r1, r7, #8
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <SPIx_Read+0x3c>)
 800154c:	f004 fbae 	bl	8005cac <HAL_SPI_Receive>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800155a:	f000 f847 	bl	80015ec <SPIx_Error>
  }
  
  return readvalue;
 800155e:	68bb      	ldr	r3, [r7, #8]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000074 	.word	0x20000074
 800156c:	20000100 	.word	0x20000100

08001570 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <SPIx_Write+0x34>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1db9      	adds	r1, r7, #6
 8001584:	2201      	movs	r2, #1
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <SPIx_Write+0x38>)
 8001588:	f004 fa5e 	bl	8005a48 <HAL_SPI_Transmit>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001596:	f000 f829 	bl	80015ec <SPIx_Error>
  }
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000074 	.word	0x20000074
 80015a8:	20000100 	.word	0x20000100

080015ac <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <SPIx_WriteRead+0x38>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	1df9      	adds	r1, r7, #7
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <SPIx_WriteRead+0x3c>)
 80015ca:	f004 fc75 	bl	8005eb8 <HAL_SPI_TransmitReceive>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80015d4:	f000 f80a 	bl	80015ec <SPIx_Error>
  }
  
  return receivedbyte;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000074 	.word	0x20000074
 80015e8:	20000100 	.word	0x20000100

080015ec <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <SPIx_Error+0x14>)
 80015f2:	f004 fa01 	bl	80059f8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80015f6:	f7ff ff61 	bl	80014bc <SPIx_Init>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000100 	.word	0x20000100

08001604 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <SPIx_MspInit+0x6c>)
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <SPIx_MspInit+0x6c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SPIx_MspInit+0x6c>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <SPIx_MspInit+0x6c>)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SPIx_MspInit+0x6c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <SPIx_MspInit+0x6c>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001644:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001656:	2305      	movs	r3, #5
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <SPIx_MspInit+0x70>)
 8001662:	f002 fa69 	bl	8003b38 <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40021400 	.word	0x40021400

08001678 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <LCD_IO_Init+0xe0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d164      	bne.n	8001750 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <LCD_IO_Init+0xe0>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <LCD_IO_Init+0xe4>)
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <LCD_IO_Init+0xe4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <LCD_IO_Init+0xe4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4827      	ldr	r0, [pc, #156]	; (8001760 <LCD_IO_Init+0xe8>)
 80016c2:	f002 fa39 	bl	8003b38 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <LCD_IO_Init+0xe4>)
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <LCD_IO_Init+0xe4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <LCD_IO_Init+0xe4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <LCD_IO_Init+0xe8>)
 80016fc:	f002 fa1c 	bl	8003b38 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <LCD_IO_Init+0xe4>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <LCD_IO_Init+0xe4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <LCD_IO_Init+0xe4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800171c:	2304      	movs	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <LCD_IO_Init+0xec>)
 8001734:	f002 fa00 	bl	8003b38 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001738:	2200      	movs	r2, #0
 800173a:	2104      	movs	r1, #4
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <LCD_IO_Init+0xec>)
 800173e:	f002 fcc9 	bl	80040d4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001742:	2201      	movs	r2, #1
 8001744:	2104      	movs	r1, #4
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <LCD_IO_Init+0xec>)
 8001748:	f002 fcc4 	bl	80040d4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800174c:	f7ff feb6 	bl	80014bc <SPIx_Init>
  }
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000158 	.word	0x20000158
 800175c:	40023800 	.word	0x40023800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40020800 	.word	0x40020800

08001768 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <LCD_IO_WriteData+0x3c>)
 800177a:	f002 fcab 	bl	80040d4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001784:	f002 fca6 	bl	80040d4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef0 	bl	8001570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001796:	f002 fc9d 	bl	80040d4 <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40020800 	.word	0x40020800

080017ac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <LCD_IO_WriteReg+0x3c>)
 80017be:	f002 fc89 	bl	80040d4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80017c2:	2200      	movs	r2, #0
 80017c4:	2104      	movs	r1, #4
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017c8:	f002 fc84 	bl	80040d4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecd 	bl	8001570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80017d6:	2201      	movs	r2, #1
 80017d8:	2104      	movs	r1, #4
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017dc:	f002 fc7a 	bl	80040d4 <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40020800 	.word	0x40020800

080017f0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <LCD_IO_ReadData+0x5c>)
 800180a:	f002 fc63 	bl	80040d4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001816:	f002 fc5d 	bl	80040d4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fea7 	bl	8001570 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe83 	bl	8001530 <SPIx_Read>
 800182a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001834:	f002 fc4e 	bl	80040d4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001838:	2201      	movs	r2, #1
 800183a:	2104      	movs	r1, #4
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <LCD_IO_ReadData+0x5c>)
 800183e:	f002 fc49 	bl	80040d4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00

08001854 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 faf3 	bl	8002e48 <HAL_Delay>
  //wait_ms(Delay);
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <GYRO_IO_Init+0x8c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800188e:	2302      	movs	r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <GYRO_IO_Init+0x90>)
 80018a6:	f002 f947 	bl	8003b38 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80018aa:	2201      	movs	r2, #1
 80018ac:	2102      	movs	r1, #2
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <GYRO_IO_Init+0x90>)
 80018b0:	f002 fc10 	bl	80040d4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80018d0:	2306      	movs	r3, #6
 80018d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <GYRO_IO_Init+0x94>)
 80018e8:	f002 f926 	bl	8003b38 <HAL_GPIO_Init>

  SPIx_Init();
 80018ec:	f7ff fde6 	bl	80014bc <SPIx_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000

08001904 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d903      	bls.n	8001922 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <GYRO_IO_Write+0x60>)
 8001928:	f002 fbd4 	bl	80040d4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe3c 	bl	80015ac <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001934:	e00a      	b.n	800194c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe36 	bl	80015ac <SPIx_WriteRead>
    NumByteToWrite--;
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3301      	adds	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	2102      	movs	r1, #2
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <GYRO_IO_Write+0x60>)
 8001958:	f002 fbbc 	bl	80040d4 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020800 	.word	0x40020800

08001968 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
 8001974:	4613      	mov	r3, r2
 8001976:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d904      	bls.n	8001988 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	e003      	b.n	8001990 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <GYRO_IO_Read+0x70>)
 8001996:	f002 fb9d 	bl	80040d4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe05 	bl	80015ac <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80019a2:	e00c      	b.n	80019be <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fe01 	bl	80015ac <SPIx_WriteRead>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80019b2:	883b      	ldrh	r3, [r7, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80019be:	883b      	ldrh	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ef      	bne.n	80019a4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80019c4:	2201      	movs	r2, #1
 80019c6:	2102      	movs	r1, #2
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <GYRO_IO_Read+0x70>)
 80019ca:	f002 fb83 	bl	80040d4 <HAL_GPIO_WritePin>
}  
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800

080019dc <BSP_GYRO_Init>:
/**
  * @brief  Set Gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80019e6:	2300      	movs	r3, #0
 80019e8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};
 80019ea:	2300      	movs	r3, #0
 80019ec:	703b      	strb	r3, [r7, #0]
 80019ee:	2300      	movs	r3, #0
 80019f0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4798      	blx	r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	2bd4      	cmp	r3, #212	; 0xd4
 80019fc:	d005      	beq.n	8001a0a <BSP_GYRO_Init+0x2e>
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	2bd5      	cmp	r3, #213	; 0xd5
 8001a08:	d146      	bne.n	8001a98 <BSP_GYRO_Init+0xbc>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 8001a0e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001a10:	2308      	movs	r3, #8
 8001a12:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001a1c:	2330      	movs	r3, #48	; 0x30
 8001a1e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001a20:	2300      	movs	r3, #0
 8001a22:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001a24:	2300      	movs	r3, #0
 8001a26:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a2c:	793a      	ldrb	r2, [r7, #4]
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001a34:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001a42:	7a3a      	ldrb	r2, [r7, #8]
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
                         L3GD20_InitStructure.Full_Scale) << 8);
 8001a4a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	89bb      	ldrh	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	89ba      	ldrh	r2, [r7, #12]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001a70:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001a72:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	89ba      	ldrh	r2, [r7, #12]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4610      	mov	r0, r2
 8001a86:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	2010      	movs	r0, #16
 8001a90:	4798      	blx	r3

    ret = GYRO_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e001      	b.n	8001a9c <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000038 	.word	0x20000038
 8001aac:	2000015c 	.word	0x2000015c

08001ab0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <BSP_LCD_Init+0xc0>)
 8001ab8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001abc:	2209      	movs	r2, #9
 8001abe:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ac8:	221d      	movs	r2, #29
 8001aca:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ad4:	f240 120d 	movw	r2, #269	; 0x10d
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001adc:	f240 1243 	movw	r2, #323	; 0x143
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ae4:	f240 1217 	movw	r2, #279	; 0x117
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001aec:	f240 1247 	movw	r2, #327	; 0x147
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b12:	22c0      	movs	r2, #192	; 0xc0
 8001b14:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b18:	2204      	movs	r2, #4
 8001b1a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b26:	f003 fce1 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001b42:	f000 fd43 	bl	80025cc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001b46:	4809      	ldr	r0, [pc, #36]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b48:	f002 fc82 	bl	8004450 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <BSP_LCD_Init+0xc8>)
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <BSP_LCD_Init+0xcc>)
 8001b50:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <BSP_LCD_Init+0xc8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001b5a:	f000 ff69 	bl	8002a30 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <BSP_LCD_Init+0xd0>)
 8001b60:	f000 f8b4 	bl	8001ccc <BSP_LCD_SetFont>

  return LCD_OK;
 8001b64:	2300      	movs	r3, #0
}  
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200002c0 	.word	0x200002c0
 8001b70:	40016800 	.word	0x40016800
 8001b74:	200001a0 	.word	0x200001a0
 8001b78:	20000368 	.word	0x20000368
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	2000006c 	.word	0x2000006c

08001b84 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <BSP_LCD_GetXSize+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4798      	blx	r3
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000368 	.word	0x20000368

08001b9c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <BSP_LCD_GetYSize+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000368 	.word	0x20000368

08001bb4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001bc4:	f7ff ffde 	bl	8001b84 <BSP_LCD_GetXSize>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001bd0:	f7ff ffe4 	bl	8001b9c <BSP_LCD_GetYSize>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001be0:	23ff      	movs	r3, #255	; 0xff
 8001be2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c00:	2307      	movs	r3, #7
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001c04:	f7ff ffbe 	bl	8001b84 <BSP_LCD_GetXSize>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001c0c:	f7ff ffc6 	bl	8001b9c <BSP_LCD_GetYSize>
 8001c10:	4603      	mov	r3, r0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4814      	ldr	r0, [pc, #80]	; (8001c70 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c1e:	f002 fda9 	bl	8004774 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	4913      	ldr	r1, [pc, #76]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3304      	adds	r3, #4
 8001c32:	f04f 32ff 	mov.w	r2, #4294967295
 8001c36:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	3308      	adds	r3, #8
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001c4a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	4909      	ldr	r1, [pc, #36]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c62:	f002 fdc5 	bl	80047f0 <HAL_LTDC_EnableDither>
}
 8001c66:	bf00      	nop
 8001c68:	3740      	adds	r7, #64	; 0x40
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002c0 	.word	0x200002c0
 8001c74:	200001d4 	.word	0x200001d4
 8001c78:	2000006c 	.word	0x2000006c

08001c7c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <BSP_LCD_SelectLayer+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200001d0 	.word	0x200001d0

08001c9c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <BSP_LCD_SetTextColor+0x28>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <BSP_LCD_SetTextColor+0x2c>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	200001d0 	.word	0x200001d0
 8001cc8:	200001d4 	.word	0x200001d4

08001ccc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <BSP_LCD_SetFont+0x2c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4908      	ldr	r1, [pc, #32]	; (8001cfc <BSP_LCD_SetFont+0x30>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200001d0 	.word	0x200001d0
 8001cfc:	200001d4 	.word	0x200001d4

08001d00 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <BSP_LCD_Clear+0x48>)
 8001d0a:	681c      	ldr	r4, [r3, #0]
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <BSP_LCD_Clear+0x48>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <BSP_LCD_Clear+0x4c>)
 8001d12:	2134      	movs	r1, #52	; 0x34
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	335c      	adds	r3, #92	; 0x5c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461d      	mov	r5, r3
 8001d20:	f7ff ff30 	bl	8001b84 <BSP_LCD_GetXSize>
 8001d24:	4606      	mov	r6, r0
 8001d26:	f7ff ff39 	bl	8001b9c <BSP_LCD_GetYSize>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	4632      	mov	r2, r6
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f000 fdfc 	bl	8002938 <FillBuffer>
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	200001d0 	.word	0x200001d0
 8001d4c:	200002c0 	.word	0x200002c0

08001d50 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	492d      	ldr	r1, [pc, #180]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	4827      	ldr	r0, [pc, #156]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	3304      	adds	r3, #4
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4403      	add	r3, r0
 8001d90:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	491f      	ldr	r1, [pc, #124]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	88da      	ldrh	r2, [r3, #6]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	fb12 f303 	smulbb	r3, r2, r3
 8001db0:	b29c      	uxth	r4, r3
 8001db2:	f7ff fee7 	bl	8001b84 <BSP_LCD_GetXSize>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b298      	uxth	r0, r3
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4915      	ldr	r1, [pc, #84]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3308      	adds	r3, #8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	88db      	ldrh	r3, [r3, #6]
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 faef 	bl	80023b8 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	490d      	ldr	r1, [pc, #52]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff4b 	bl	8001c9c <BSP_LCD_SetTextColor>
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200001d0 	.word	0x200001d0
 8001e14:	200001d4 	.word	0x200001d4

08001e18 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4c14      	ldr	r4, [pc, #80]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4423      	add	r3, r4
 8001e56:	3308      	adds	r3, #8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e5c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4c0d      	ldr	r4, [pc, #52]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4423      	add	r3, r4
 8001e70:	3308      	adds	r3, #8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	3307      	adds	r3, #7
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da00      	bge.n	8001e7e <BSP_LCD_DisplayChar+0x66>
 8001e7c:	3307      	adds	r3, #7
 8001e7e:	10db      	asrs	r3, r3, #3
 8001e80:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e84:	18ca      	adds	r2, r1, r3
 8001e86:	88b9      	ldrh	r1, [r7, #4]
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fc9a 	bl	80027c4 <DrawChar>
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	200001d0 	.word	0x200001d0
 8001e9c:	200001d4 	.word	0x200001d4

08001ea0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	80bb      	strh	r3, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <BSP_LCD_DrawHLine+0x70>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a16      	ldr	r2, [pc, #88]	; (8001f14 <BSP_LCD_DrawHLine+0x74>)
 8001ebc:	2134      	movs	r1, #52	; 0x34
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	335c      	adds	r3, #92	; 0x5c
 8001ec6:	681c      	ldr	r4, [r3, #0]
 8001ec8:	f7ff fe5c 	bl	8001b84 <BSP_LCD_GetXSize>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	fb03 f202 	mul.w	r2, r3, r2
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4423      	add	r3, r4
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <BSP_LCD_DrawHLine+0x70>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	68fc      	ldr	r4, [r7, #12]
 8001ee4:	887d      	ldrh	r5, [r7, #2]
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <BSP_LCD_DrawHLine+0x70>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	490b      	ldr	r1, [pc, #44]	; (8001f18 <BSP_LCD_DrawHLine+0x78>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2301      	movs	r3, #1
 8001f00:	462a      	mov	r2, r5
 8001f02:	4621      	mov	r1, r4
 8001f04:	f000 fd18 	bl	8002938 <FillBuffer>
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	200001d0 	.word	0x200001d0
 8001f14:	200002c0 	.word	0x200002c0
 8001f18:	200001d4 	.word	0x200001d4

08001f1c <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b08b      	sub	sp, #44	; 0x2c
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4604      	mov	r4, r0
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	80fb      	strh	r3, [r7, #6]
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80bb      	strh	r3, [r7, #4]
 8001f32:	460b      	mov	r3, r1
 8001f34:	807b      	strh	r3, [r7, #2]
 8001f36:	4613      	mov	r3, r2
 8001f38:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	823b      	strh	r3, [r7, #16]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	81fb      	strh	r3, [r7, #14]
 8001f42:	2300      	movs	r3, #0
 8001f44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f46:	2300      	movs	r3, #0
 8001f48:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f4e:	2300      	movs	r3, #0
 8001f50:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8001f52:	2300      	movs	r3, #0
 8001f54:	83fb      	strh	r3, [r7, #30]
 8001f56:	2300      	movs	r3, #0
 8001f58:	83bb      	strh	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	837b      	strh	r3, [r7, #26]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	833b      	strh	r3, [r7, #24]
 8001f62:	2300      	movs	r3, #0
 8001f64:	82fb      	strh	r3, [r7, #22]
 8001f66:	2300      	movs	r3, #0
 8001f68:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	88fb      	ldrh	r3, [r7, #6]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bfb8      	it	lt
 8001f78:	425b      	neglt	r3, r3
 8001f7a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8001f7c:	883a      	ldrh	r2, [r7, #0]
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bfb8      	it	lt
 8001f86:	425b      	neglt	r3, r3
 8001f88:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	88fb      	ldrh	r3, [r7, #6]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d304      	bcc.n	8001fa4 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	843b      	strh	r3, [r7, #32]
 8001fa2:	e005      	b.n	8001fb0 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8001fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8001faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fae:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8001fb0:	883a      	ldrh	r2, [r7, #0]
 8001fb2:	88bb      	ldrh	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d304      	bcc.n	8001fc2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	83bb      	strh	r3, [r7, #28]
 8001fc0:	e005      	b.n	8001fce <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8001fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8001fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fcc:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8001fce:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	db10      	blt.n	8001ffc <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8001fda:	2300      	movs	r3, #0
 8001fdc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8001fde:	2300      	movs	r3, #0
 8001fe0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8001fe2:	8a3b      	ldrh	r3, [r7, #16]
 8001fe4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8001fe6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001fea:	0fda      	lsrs	r2, r3, #31
 8001fec:	4413      	add	r3, r2
 8001fee:	105b      	asrs	r3, r3, #1
 8001ff0:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8001ff6:	8a3b      	ldrh	r3, [r7, #16]
 8001ff8:	82bb      	strh	r3, [r7, #20]
 8001ffa:	e00f      	b.n	800201c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002000:	2300      	movs	r3, #0
 8002002:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002004:	89fb      	ldrh	r3, [r7, #14]
 8002006:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002008:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800200c:	0fda      	lsrs	r2, r3, #31
 800200e:	4413      	add	r3, r2
 8002010:	105b      	asrs	r3, r3, #1
 8002012:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002014:	8a3b      	ldrh	r3, [r7, #16]
 8002016:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800201c:	2300      	movs	r3, #0
 800201e:	827b      	strh	r3, [r7, #18]
 8002020:	e038      	b.n	8002094 <BSP_LCD_DrawLine+0x178>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002022:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002024:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <BSP_LCD_DrawLine+0x18c>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4920      	ldr	r1, [pc, #128]	; (80020ac <BSP_LCD_DrawLine+0x190>)
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4621      	mov	r1, r4
 800203c:	f000 fb9c 	bl	8002778 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002040:	8b3a      	ldrh	r2, [r7, #24]
 8002042:	8afb      	ldrh	r3, [r7, #22]
 8002044:	4413      	add	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800204a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800204e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002052:	429a      	cmp	r2, r3
 8002054:	db0e      	blt.n	8002074 <BSP_LCD_DrawLine+0x158>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002056:	8b3a      	ldrh	r2, [r7, #24]
 8002058:	8b7b      	ldrh	r3, [r7, #26]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002060:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002062:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002064:	4413      	add	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 800206a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800206c:	8bfb      	ldrh	r3, [r7, #30]
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002074:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002076:	8c3b      	ldrh	r3, [r7, #32]
 8002078:	4413      	add	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 800207e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002080:	8bbb      	ldrh	r3, [r7, #28]
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800208c:	b29b      	uxth	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b29b      	uxth	r3, r3
 8002092:	827b      	strh	r3, [r7, #18]
 8002094:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002098:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800209c:	429a      	cmp	r2, r3
 800209e:	ddc0      	ble.n	8002022 <BSP_LCD_DrawLine+0x106>
  }
}
 80020a0:	bf00      	nop
 80020a2:	372c      	adds	r7, #44	; 0x2c
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	200001d0 	.word	0x200001d0
 80020ac:	200001d4 	.word	0x200001d4

080020b0 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
 80020ba:	460b      	mov	r3, r1
 80020bc:	80bb      	strh	r3, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	f1c3 0303 	rsb	r3, r3, #3
 80020ca:	617b      	str	r3, [r7, #20]
  curx = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 80020d4:	e0cf      	b.n	8002276 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4413      	add	r3, r2
 80020de:	b298      	uxth	r0, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	88ba      	ldrh	r2, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	b29c      	uxth	r4, r3
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4967      	ldr	r1, [pc, #412]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4621      	mov	r1, r4
 8002100:	f000 fb3a 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	b29b      	uxth	r3, r3
 8002108:	88fa      	ldrh	r2, [r7, #6]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	b298      	uxth	r0, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	b29b      	uxth	r3, r3
 8002112:	88ba      	ldrh	r2, [r7, #4]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	b29c      	uxth	r4, r3
 8002118:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	495b      	ldr	r1, [pc, #364]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	4621      	mov	r1, r4
 800212e:	f000 fb23 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	b29a      	uxth	r2, r3
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	4413      	add	r3, r2
 800213a:	b298      	uxth	r0, r3
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	b29b      	uxth	r3, r3
 8002140:	88ba      	ldrh	r2, [r7, #4]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	b29c      	uxth	r4, r3
 8002146:	4b50      	ldr	r3, [pc, #320]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4950      	ldr	r1, [pc, #320]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 800214c:	4613      	mov	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4621      	mov	r1, r4
 800215c:	f000 fb0c 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	b29b      	uxth	r3, r3
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	b298      	uxth	r0, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	b29b      	uxth	r3, r3
 800216e:	88ba      	ldrh	r2, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	b29c      	uxth	r4, r3
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4944      	ldr	r1, [pc, #272]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	461a      	mov	r2, r3
 8002188:	4621      	mov	r1, r4
 800218a:	f000 faf5 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	b29a      	uxth	r2, r3
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	4413      	add	r3, r2
 8002196:	b298      	uxth	r0, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	b29a      	uxth	r2, r3
 800219c:	88bb      	ldrh	r3, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	b29c      	uxth	r4, r3
 80021a2:	4b39      	ldr	r3, [pc, #228]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4939      	ldr	r1, [pc, #228]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4621      	mov	r1, r4
 80021b8:	f000 fade 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	88fa      	ldrh	r2, [r7, #6]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	b298      	uxth	r0, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	88bb      	ldrh	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	b29c      	uxth	r4, r3
 80021d0:	4b2d      	ldr	r3, [pc, #180]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	492d      	ldr	r1, [pc, #180]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	4621      	mov	r1, r4
 80021e6:	f000 fac7 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	4413      	add	r3, r2
 80021f2:	b298      	uxth	r0, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	88bb      	ldrh	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	b29c      	uxth	r4, r3
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	4922      	ldr	r1, [pc, #136]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 8002204:	4613      	mov	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4621      	mov	r1, r4
 8002214:	f000 fab0 	bl	8002778 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	b29b      	uxth	r3, r3
 800221c:	88fa      	ldrh	r2, [r7, #6]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b298      	uxth	r0, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	b29a      	uxth	r2, r3
 8002226:	88bb      	ldrh	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	b29c      	uxth	r4, r3
 800222c:	4b16      	ldr	r3, [pc, #88]	; (8002288 <BSP_LCD_DrawCircle+0x1d8>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4916      	ldr	r1, [pc, #88]	; (800228c <BSP_LCD_DrawCircle+0x1dc>)
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4621      	mov	r1, r4
 8002242:	f000 fa99 	bl	8002778 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b00      	cmp	r3, #0
 800224a:	da06      	bge.n	800225a <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	009a      	lsls	r2, r3, #2
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4413      	add	r3, r2
 8002254:	3306      	adds	r3, #6
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e00a      	b.n	8002270 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	4413      	add	r3, r2
 8002266:	330a      	adds	r3, #10
 8002268:	617b      	str	r3, [r7, #20]
      cury--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3301      	adds	r3, #1
 8002274:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	429a      	cmp	r2, r3
 800227c:	f67f af2b 	bls.w	80020d6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	200001d0 	.word	0x200001d0
 800228c:	200001d4 	.word	0x200001d4

08002290 <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	2300      	movs	r3, #0
 80022aa:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (pBmp + 10);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	330a      	adds	r3, #10
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (pBmp + 12)) << 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	330c      	adds	r3, #12
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	461a      	mov	r2, r3
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	4313      	orrs	r3, r2
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (pBmp + 18);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3312      	adds	r3, #18
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	61bb      	str	r3, [r7, #24]
  width |= (*(uint16_t *) (pBmp + 20)) << 16;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3314      	adds	r3, #20
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	041b      	lsls	r3, r3, #16
 80022dc:	461a      	mov	r2, r3
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = *(uint16_t *) (pBmp + 22);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3316      	adds	r3, #22
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	617b      	str	r3, [r7, #20]
  height |= (*(uint16_t *) (pBmp + 24)) << 16; 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3318      	adds	r3, #24
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	461a      	mov	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
 
  /* Read bit/pixel */
  bitpixel = *(uint16_t *) (pBmp + 28);   
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	331c      	adds	r3, #28
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <BSP_LCD_DrawBitmap+0x120>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <BSP_LCD_DrawBitmap+0x124>)
 800230a:	2134      	movs	r1, #52	; 0x34
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	335c      	adds	r3, #92	; 0x5c
 8002314:	681c      	ldr	r4, [r3, #0]
 8002316:	f7ff fc35 	bl	8001b84 <BSP_LCD_GetXSize>
 800231a:	4602      	mov	r2, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	fb03 f202 	mul.w	r2, r3, r2
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4423      	add	r3, r4
 800232a:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	3b20      	subs	r3, #32
 8002330:	2b07      	cmp	r3, #7
 8002332:	d802      	bhi.n	800233a <BSP_LCD_DrawBitmap+0xaa>
  {
    inputcolormode = CM_ARGB8888;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e008      	b.n	800234c <BSP_LCD_DrawBitmap+0xbc>
  }
  else if ((bitpixel/8) == 2)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	3b10      	subs	r3, #16
 800233e:	2b07      	cmp	r3, #7
 8002340:	d802      	bhi.n	8002348 <BSP_LCD_DrawBitmap+0xb8>
  {
    inputcolormode = CM_RGB565;
 8002342:	2302      	movs	r3, #2
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e001      	b.n	800234c <BSP_LCD_DrawBitmap+0xbc>
  }
  else
  {
    inputcolormode = CM_RGB888;
 8002348:	2301      	movs	r3, #1
 800234a:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3b01      	subs	r3, #1
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	08d2      	lsrs	r2, r2, #3
 800235a:	fb02 f203 	mul.w	r2, r2, r3
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	4413      	add	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002368:	2300      	movs	r3, #0
 800236a:	627b      	str	r3, [r7, #36]	; 0x24
 800236c:	e018      	b.n	80023a0 <BSP_LCD_DrawBitmap+0x110>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 800236e:	6a39      	ldr	r1, [r7, #32]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb17 	bl	80029a8 <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 800237a:	f7ff fc03 	bl	8001b84 <BSP_LCD_GetXSize>
 800237e:	4603      	mov	r3, r0
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	6a3a      	ldr	r2, [r7, #32]
 8002384:	4413      	add	r3, r2
 8002386:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	08db      	lsrs	r3, r3, #3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	fb02 f303 	mul.w	r3, r2, r3
 8002392:	425b      	negs	r3, r3
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3e2      	bcc.n	800236e <BSP_LCD_DrawBitmap+0xde>
  }
}
 80023a8:	bf00      	nop
 80023aa:	372c      	adds	r7, #44	; 0x2c
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}
 80023b0:	200001d0 	.word	0x200001d0
 80023b4:	200002c0 	.word	0x200002c0

080023b8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80023b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af02      	add	r7, sp, #8
 80023c0:	4604      	mov	r4, r0
 80023c2:	4608      	mov	r0, r1
 80023c4:	4611      	mov	r1, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	80fb      	strh	r3, [r7, #6]
 80023cc:	4603      	mov	r3, r0
 80023ce:	80bb      	strh	r3, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80023dc:	4b20      	ldr	r3, [pc, #128]	; (8002460 <BSP_LCD_FillRect+0xa8>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4920      	ldr	r1, [pc, #128]	; (8002464 <BSP_LCD_FillRect+0xac>)
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fc54 	bl	8001c9c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <BSP_LCD_FillRect+0xa8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <BSP_LCD_FillRect+0xb0>)
 80023fa:	2134      	movs	r1, #52	; 0x34
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	335c      	adds	r3, #92	; 0x5c
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	f7ff fbbd 	bl	8001b84 <BSP_LCD_GetXSize>
 800240a:	4602      	mov	r2, r0
 800240c:	88bb      	ldrh	r3, [r7, #4]
 800240e:	fb03 f202 	mul.w	r2, r3, r2
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4423      	add	r3, r4
 800241a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <BSP_LCD_FillRect+0xa8>)
 800241e:	681c      	ldr	r4, [r3, #0]
 8002420:	68fd      	ldr	r5, [r7, #12]
 8002422:	887e      	ldrh	r6, [r7, #2]
 8002424:	f8b7 8000 	ldrh.w	r8, [r7]
 8002428:	f7ff fbac 	bl	8001b84 <BSP_LCD_GetXSize>
 800242c:	4602      	mov	r2, r0
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	1ad1      	subs	r1, r2, r3
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <BSP_LCD_FillRect+0xa8>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	480b      	ldr	r0, [pc, #44]	; (8002464 <BSP_LCD_FillRect+0xac>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4403      	add	r3, r0
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	9100      	str	r1, [sp, #0]
 8002448:	4643      	mov	r3, r8
 800244a:	4632      	mov	r2, r6
 800244c:	4629      	mov	r1, r5
 800244e:	4620      	mov	r0, r4
 8002450:	f000 fa72 	bl	8002938 <FillBuffer>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800245e:	bf00      	nop
 8002460:	200001d0 	.word	0x200001d0
 8002464:	200001d4 	.word	0x200001d4
 8002468:	200002c0 	.word	0x200002c0

0800246c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	460b      	mov	r3, r1
 8002478:	80bb      	strh	r3, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	f1c3 0303 	rsb	r3, r3, #3
 8002486:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002490:	4b44      	ldr	r3, [pc, #272]	; (80025a4 <BSP_LCD_FillCircle+0x138>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4944      	ldr	r1, [pc, #272]	; (80025a8 <BSP_LCD_FillCircle+0x13c>)
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fbfa 	bl	8001c9c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80024a8:	e061      	b.n	800256e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d021      	beq.n	80024f4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	b298      	uxth	r0, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	88bb      	ldrh	r3, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	b299      	uxth	r1, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	f7ff fce7 	bl	8001ea0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	b298      	uxth	r0, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	88ba      	ldrh	r2, [r7, #4]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	b299      	uxth	r1, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	f7ff fcd6 	bl	8001ea0 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d021      	beq.n	800253e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	88fa      	ldrh	r2, [r7, #6]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	b298      	uxth	r0, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	b29b      	uxth	r3, r3
 8002508:	88ba      	ldrh	r2, [r7, #4]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	b299      	uxth	r1, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	b29b      	uxth	r3, r3
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	f7ff fcc2 	bl	8001ea0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	b29b      	uxth	r3, r3
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	b298      	uxth	r0, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b29a      	uxth	r2, r3
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	b299      	uxth	r1, r3
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	b29b      	uxth	r3, r3
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	f7ff fcb1 	bl	8001ea0 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	da06      	bge.n	8002552 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	009a      	lsls	r2, r3, #2
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4413      	add	r3, r2
 800254c:	3306      	adds	r3, #6
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	e00a      	b.n	8002568 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4413      	add	r3, r2
 800255e:	330a      	adds	r3, #10
 8002560:	617b      	str	r3, [r7, #20]
      cury--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b01      	subs	r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	3301      	adds	r3, #1
 800256c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	429a      	cmp	r2, r3
 8002574:	d999      	bls.n	80024aa <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <BSP_LCD_FillCircle+0x138>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	490b      	ldr	r1, [pc, #44]	; (80025a8 <BSP_LCD_FillCircle+0x13c>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fb87 	bl	8001c9c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	88b9      	ldrh	r1, [r7, #4]
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff fd8b 	bl	80020b0 <BSP_LCD_DrawCircle>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200001d0 	.word	0x200001d0
 80025a8:	200001d4 	.word	0x200001d4

080025ac <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <BSP_LCD_DisplayOn+0x1c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80025ba:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <BSP_LCD_DisplayOn+0x1c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4798      	blx	r3
  }
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000368 	.word	0x20000368

080025cc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <BSP_LCD_MspInit+0x190>)
 80025d8:	4b60      	ldr	r3, [pc, #384]	; (800275c <BSP_LCD_MspInit+0x190>)
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b5e      	ldr	r3, [pc, #376]	; (800275c <BSP_LCD_MspInit+0x190>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ea:	623b      	str	r3, [r7, #32]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <BSP_LCD_MspInit+0x190>)
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <BSP_LCD_MspInit+0x190>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b57      	ldr	r3, [pc, #348]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	4a53      	ldr	r2, [pc, #332]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002610:	4b52      	ldr	r3, [pc, #328]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6313      	str	r3, [r2, #48]	; 0x30
 800261a:	4b50      	ldr	r3, [pc, #320]	; (800275c <BSP_LCD_MspInit+0x190>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <BSP_LCD_MspInit+0x190>)
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <BSP_LCD_MspInit+0x190>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6313      	str	r3, [r2, #48]	; 0x30
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4a45      	ldr	r2, [pc, #276]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <BSP_LCD_MspInit+0x190>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b42      	ldr	r3, [pc, #264]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	4a3e      	ldr	r2, [pc, #248]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002664:	4b3d      	ldr	r3, [pc, #244]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f043 0308 	orr.w	r3, r3, #8
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b3b      	ldr	r3, [pc, #236]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	4a37      	ldr	r2, [pc, #220]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <BSP_LCD_MspInit+0x190>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f043 0320 	orr.w	r3, r3, #32
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <BSP_LCD_MspInit+0x190>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4a30      	ldr	r2, [pc, #192]	; (800275c <BSP_LCD_MspInit+0x190>)
 800269c:	4b2f      	ldr	r3, [pc, #188]	; (800275c <BSP_LCD_MspInit+0x190>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <BSP_LCD_MspInit+0x190>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80026b2:	f641 0358 	movw	r3, #6232	; 0x1858
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80026c0:	2302      	movs	r3, #2
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80026c4:	230e      	movs	r3, #14
 80026c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80026c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	4824      	ldr	r0, [pc, #144]	; (8002760 <BSP_LCD_MspInit+0x194>)
 80026d0:	f001 fa32 	bl	8003b38 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80026d4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80026da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026de:	4619      	mov	r1, r3
 80026e0:	4820      	ldr	r0, [pc, #128]	; (8002764 <BSP_LCD_MspInit+0x198>)
 80026e2:	f001 fa29 	bl	8003b38 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80026e6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	481d      	ldr	r0, [pc, #116]	; (8002768 <BSP_LCD_MspInit+0x19c>)
 80026f4:	f001 fa20 	bl	8003b38 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80026f8:	2348      	movs	r3, #72	; 0x48
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80026fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002700:	4619      	mov	r1, r3
 8002702:	481a      	ldr	r0, [pc, #104]	; (800276c <BSP_LCD_MspInit+0x1a0>)
 8002704:	f001 fa18 	bl	8003b38 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4619      	mov	r1, r3
 8002714:	4816      	ldr	r0, [pc, #88]	; (8002770 <BSP_LCD_MspInit+0x1a4>)
 8002716:	f001 fa0f 	bl	8003b38 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800271a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <BSP_LCD_MspInit+0x1a8>)
 8002728:	f001 fa06 	bl	8003b38 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800272c:	2303      	movs	r3, #3
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002730:	2309      	movs	r3, #9
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002738:	4619      	mov	r1, r3
 800273a:	480a      	ldr	r0, [pc, #40]	; (8002764 <BSP_LCD_MspInit+0x198>)
 800273c:	f001 f9fc 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	4619      	mov	r1, r3
 800274c:	4809      	ldr	r0, [pc, #36]	; (8002774 <BSP_LCD_MspInit+0x1a8>)
 800274e:	f001 f9f3 	bl	8003b38 <HAL_GPIO_Init>
}
 8002752:	bf00      	nop
 8002754:	3738      	adds	r7, #56	; 0x38
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021400 	.word	0x40021400
 8002774:	40021800 	.word	0x40021800

08002778 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002778:	b5b0      	push	{r4, r5, r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	603a      	str	r2, [r7, #0]
 8002782:	80fb      	strh	r3, [r7, #6]
 8002784:	460b      	mov	r3, r1
 8002786:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <BSP_LCD_DrawPixel+0x44>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <BSP_LCD_DrawPixel+0x48>)
 800278e:	2134      	movs	r1, #52	; 0x34
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	335c      	adds	r3, #92	; 0x5c
 8002798:	681c      	ldr	r4, [r3, #0]
 800279a:	88bd      	ldrh	r5, [r7, #4]
 800279c:	f7ff f9f2 	bl	8001b84 <BSP_LCD_GetXSize>
 80027a0:	4603      	mov	r3, r0
 80027a2:	fb03 f205 	mul.w	r2, r3, r5
 80027a6:	88fb      	ldrh	r3, [r7, #6]
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4423      	add	r3, r4
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bdb0      	pop	{r4, r5, r7, pc}
 80027bc:	200001d0 	.word	0x200001d0
 80027c0:	200002c0 	.word	0x200002c0

080027c4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	603a      	str	r2, [r7, #0]
 80027ce:	80fb      	strh	r3, [r7, #6]
 80027d0:	460b      	mov	r3, r1
 80027d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61fb      	str	r3, [r7, #28]
 80027d8:	2300      	movs	r3, #0
 80027da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80027e0:	4b53      	ldr	r3, [pc, #332]	; (8002930 <DrawChar+0x16c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4953      	ldr	r1, [pc, #332]	; (8002934 <DrawChar+0x170>)
 80027e6:	4613      	mov	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3308      	adds	r3, #8
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	88db      	ldrh	r3, [r3, #6]
 80027f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <DrawChar+0x16c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	494d      	ldr	r1, [pc, #308]	; (8002934 <DrawChar+0x170>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	3308      	adds	r3, #8
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	889b      	ldrh	r3, [r3, #4]
 800280e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002810:	8a3b      	ldrh	r3, [r7, #16]
 8002812:	3307      	adds	r3, #7
 8002814:	2b00      	cmp	r3, #0
 8002816:	da00      	bge.n	800281a <DrawChar+0x56>
 8002818:	3307      	adds	r3, #7
 800281a:	10db      	asrs	r3, r3, #3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	b2da      	uxtb	r2, r3
 8002822:	8a3b      	ldrh	r3, [r7, #16]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e076      	b.n	800291e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002830:	8a3b      	ldrh	r3, [r7, #16]
 8002832:	3307      	adds	r3, #7
 8002834:	2b00      	cmp	r3, #0
 8002836:	da00      	bge.n	800283a <DrawChar+0x76>
 8002838:	3307      	adds	r3, #7
 800283a:	10db      	asrs	r3, r3, #3
 800283c:	461a      	mov	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fb03 f302 	mul.w	r3, r3, r2
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	4413      	add	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800284a:	8a3b      	ldrh	r3, [r7, #16]
 800284c:	3307      	adds	r3, #7
 800284e:	2b00      	cmp	r3, #0
 8002850:	da00      	bge.n	8002854 <DrawChar+0x90>
 8002852:	3307      	adds	r3, #7
 8002854:	10db      	asrs	r3, r3, #3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d002      	beq.n	8002860 <DrawChar+0x9c>
 800285a:	2b02      	cmp	r3, #2
 800285c:	d004      	beq.n	8002868 <DrawChar+0xa4>
 800285e:	e00c      	b.n	800287a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	e016      	b.n	8002896 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	3201      	adds	r2, #1
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	617b      	str	r3, [r7, #20]
      break;
 8002878:	e00d      	b.n	8002896 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	041a      	lsls	r2, r3, #16
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3301      	adds	r3, #1
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	021b      	lsls	r3, r3, #8
 8002888:	4313      	orrs	r3, r2
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	3202      	adds	r2, #2
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]
      break;
 8002894:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e036      	b.n	800290a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800289c:	8a3a      	ldrh	r2, [r7, #16]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	1ad2      	subs	r2, r2, r3
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	4413      	add	r3, r2
 80028a6:	3b01      	subs	r3, #1
 80028a8:	2201      	movs	r2, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	4413      	add	r3, r2
 80028c0:	b298      	uxth	r0, r3
 80028c2:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <DrawChar+0x16c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	491b      	ldr	r1, [pc, #108]	; (8002934 <DrawChar+0x170>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	88bb      	ldrh	r3, [r7, #4]
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7ff ff4e 	bl	8002778 <BSP_LCD_DrawPixel>
 80028dc:	e012      	b.n	8002904 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	88fb      	ldrh	r3, [r7, #6]
 80028e4:	4413      	add	r3, r2
 80028e6:	b298      	uxth	r0, r3
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <DrawChar+0x16c>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4911      	ldr	r1, [pc, #68]	; (8002934 <DrawChar+0x170>)
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3304      	adds	r3, #4
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	4619      	mov	r1, r3
 8002900:	f7ff ff3a 	bl	8002778 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	3301      	adds	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	8a3a      	ldrh	r2, [r7, #16]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	429a      	cmp	r2, r3
 8002910:	d8c4      	bhi.n	800289c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	3301      	adds	r3, #1
 8002916:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3301      	adds	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	8a7a      	ldrh	r2, [r7, #18]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	429a      	cmp	r2, r3
 8002924:	d884      	bhi.n	8002830 <DrawChar+0x6c>
  }
}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	200001d0 	.word	0x200001d0
 8002934:	200001d4 	.word	0x200001d4

08002938 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <FillBuffer+0x68>)
 8002948:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800294c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <FillBuffer+0x68>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <FillBuffer+0x68>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <FillBuffer+0x68>)
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <FillBuffer+0x6c>)
 800295e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002960:	480f      	ldr	r0, [pc, #60]	; (80029a0 <FillBuffer+0x68>)
 8002962:	f000 fd4f 	bl	8003404 <HAL_DMA2D_Init>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d115      	bne.n	8002998 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800296c:	68f9      	ldr	r1, [r7, #12]
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <FillBuffer+0x68>)
 8002970:	f000 ffb6 	bl	80038e0 <HAL_DMA2D_ConfigLayer>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10e      	bne.n	8002998 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69f9      	ldr	r1, [r7, #28]
 8002984:	4806      	ldr	r0, [pc, #24]	; (80029a0 <FillBuffer+0x68>)
 8002986:	f000 fd86 	bl	8003496 <HAL_DMA2D_Start>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002990:	210a      	movs	r1, #10
 8002992:	4803      	ldr	r0, [pc, #12]	; (80029a0 <FillBuffer+0x68>)
 8002994:	f000 fdaa 	bl	80034ec <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000160 	.word	0x20000160
 80029a4:	4002b000 	.word	0x4002b000

080029a8 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029bc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80029d6:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029de:	2200      	movs	r2, #0
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029e4:	4a11      	ldr	r2, [pc, #68]	; (8002a2c <ConvertLineToARGB8888+0x84>)
 80029e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80029e8:	480f      	ldr	r0, [pc, #60]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029ea:	f000 fd0b 	bl	8003404 <HAL_DMA2D_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d115      	bne.n	8002a20 <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 80029f4:	2101      	movs	r1, #1
 80029f6:	480c      	ldr	r0, [pc, #48]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 80029f8:	f000 ff72 	bl	80038e0 <HAL_DMA2D_ConfigLayer>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10e      	bne.n	8002a20 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	2301      	movs	r3, #1
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4806      	ldr	r0, [pc, #24]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 8002a0e:	f000 fd42 	bl	8003496 <HAL_DMA2D_Start>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d103      	bne.n	8002a20 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002a18:	210a      	movs	r1, #10
 8002a1a:	4803      	ldr	r0, [pc, #12]	; (8002a28 <ConvertLineToARGB8888+0x80>)
 8002a1c:	f000 fd66 	bl	80034ec <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002a20:	bf00      	nop
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000160 	.word	0x20000160
 8002a2c:	4002b000 	.word	0x4002b000

08002a30 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a36:	4a2a      	ldr	r2, [pc, #168]	; (8002ae0 <BSP_SDRAM_Init+0xb0>)
 8002a38:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002a3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002a40:	4b28      	ldr	r3, [pc, #160]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a42:	2207      	movs	r2, #7
 8002a44:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a48:	2204      	movs	r2, #4
 8002a4a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a4e:	2207      	movs	r2, #7
 8002a50:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a54:	2202      	movs	r2, #2
 8002a56:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002a58:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002a5e:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002a60:	2202      	movs	r2, #2
 8002a62:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a70:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a72:	2204      	movs	r2, #4
 8002a74:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a76:	4b19      	ldr	r3, [pc, #100]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a78:	2210      	movs	r2, #16
 8002a7a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a7e:	2240      	movs	r2, #64	; 0x40
 8002a80:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a84:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002a88:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a96:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002a9e:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	480c      	ldr	r0, [pc, #48]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002aaa:	f000 f87f 	bl	8002bac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <BSP_SDRAM_Init+0xb4>)
 8002ab0:	480a      	ldr	r0, [pc, #40]	; (8002adc <BSP_SDRAM_Init+0xac>)
 8002ab2:	f002 febf 	bl	8005834 <HAL_SDRAM_Init>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <BSP_SDRAM_Init+0xb8>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e002      	b.n	8002aca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ac4:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <BSP_SDRAM_Init+0xb8>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002aca:	f240 506a 	movw	r0, #1386	; 0x56a
 8002ace:	f000 f80d 	bl	8002aec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <BSP_SDRAM_Init+0xb8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200001ec 	.word	0x200001ec
 8002ae0:	a0000140 	.word	0xa0000140
 8002ae4:	20000220 	.word	0x20000220
 8002ae8:	20000078 	.word	0x20000078

08002aec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002af8:	4b2a      	ldr	r3, [pc, #168]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002afe:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b00:	2208      	movs	r2, #8
 8002b02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b04:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b14:	4923      	ldr	r1, [pc, #140]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b16:	4824      	ldr	r0, [pc, #144]	; (8002ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b18:	f002 fec0 	bl	800589c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f000 f993 	bl	8002e48 <HAL_Delay>
  //wait_ms(1);
  
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b3e:	4919      	ldr	r1, [pc, #100]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b40:	4819      	ldr	r0, [pc, #100]	; (8002ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b42:	f002 feab 	bl	800589c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b46:	4b17      	ldr	r3, [pc, #92]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b4c:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b4e:	2208      	movs	r2, #8
 8002b50:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002b52:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b54:	2204      	movs	r2, #4
 8002b56:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b62:	4910      	ldr	r1, [pc, #64]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b64:	4810      	ldr	r0, [pc, #64]	; (8002ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b66:	f002 fe99 	bl	800589c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002b6a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002b6e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b72:	2204      	movs	r2, #4
 8002b74:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b78:	2208      	movs	r2, #8
 8002b7a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b7c:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a07      	ldr	r2, [pc, #28]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b86:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b8c:	4905      	ldr	r1, [pc, #20]	; (8002ba4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b90:	f002 fe84 	bl	800589c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b98:	f002 feab 	bl	80058f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	2000023c 	.word	0x2000023c
 8002ba8:	200001ec 	.word	0x200001ec

08002bac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b090      	sub	sp, #64	; 0x40
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ec 	beq.w	8002d96 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	4a77      	ldr	r2, [pc, #476]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bc4:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6393      	str	r3, [r2, #56]	; 0x38
 8002bce:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	4a70      	ldr	r2, [pc, #448]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002be0:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bea:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	623b      	str	r3, [r7, #32]
 8002bfa:	4a69      	ldr	r2, [pc, #420]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f043 0302 	orr.w	r3, r3, #2
 8002c04:	6313      	str	r3, [r2, #48]	; 0x30
 8002c06:	4b66      	ldr	r3, [pc, #408]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	4a62      	ldr	r2, [pc, #392]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f043 0304 	orr.w	r3, r3, #4
 8002c20:	6313      	str	r3, [r2, #48]	; 0x30
 8002c22:	4b5f      	ldr	r3, [pc, #380]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	f003 0304 	and.w	r3, r3, #4
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	4a5b      	ldr	r2, [pc, #364]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c34:	4b5a      	ldr	r3, [pc, #360]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f043 0308 	orr.w	r3, r3, #8
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b58      	ldr	r3, [pc, #352]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	4a54      	ldr	r2, [pc, #336]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f043 0320 	orr.w	r3, r3, #32
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b4a      	ldr	r3, [pc, #296]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4a46      	ldr	r2, [pc, #280]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c88:	4b45      	ldr	r3, [pc, #276]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c90:	6313      	str	r3, [r2, #48]	; 0x30
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <BSP_SDRAM_MspInit+0x1f4>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002caa:	230c      	movs	r3, #12
 8002cac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002cae:	2360      	movs	r3, #96	; 0x60
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	483a      	ldr	r0, [pc, #232]	; (8002da4 <BSP_SDRAM_MspInit+0x1f8>)
 8002cba:	f000 ff3d 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4837      	ldr	r0, [pc, #220]	; (8002da8 <BSP_SDRAM_MspInit+0x1fc>)
 8002cca:	f000 ff35 	bl	8003b38 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002cce:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4834      	ldr	r0, [pc, #208]	; (8002dac <BSP_SDRAM_MspInit+0x200>)
 8002cdc:	f000 ff2c 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ce0:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cea:	4619      	mov	r1, r3
 8002cec:	4830      	ldr	r0, [pc, #192]	; (8002db0 <BSP_SDRAM_MspInit+0x204>)
 8002cee:	f000 ff23 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002cf2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	482d      	ldr	r0, [pc, #180]	; (8002db4 <BSP_SDRAM_MspInit+0x208>)
 8002d00:	f000 ff1a 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002d04:	f248 1333 	movw	r3, #33075	; 0x8133
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002d0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4829      	ldr	r0, [pc, #164]	; (8002db8 <BSP_SDRAM_MspInit+0x20c>)
 8002d12:	f000 ff11 	bl	8003b38 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d28:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d30:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002d32:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d38:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d40:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d4e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002d50:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d56:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d58:	2203      	movs	r2, #3
 8002d5a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <BSP_SDRAM_MspInit+0x214>)
 8002d6c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
 8002d74:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002d7a:	4810      	ldr	r0, [pc, #64]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d7c:	f000 fa34 	bl	80031e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002d80:	480e      	ldr	r0, [pc, #56]	; (8002dbc <BSP_SDRAM_MspInit+0x210>)
 8002d82:	f000 f983 	bl	800308c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	210f      	movs	r1, #15
 8002d8a:	2038      	movs	r0, #56	; 0x38
 8002d8c:	f000 f934 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d90:	2038      	movs	r0, #56	; 0x38
 8002d92:	f000 f94d 	bl	8003030 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002d96:	bf00      	nop
 8002d98:	3740      	adds	r7, #64	; 0x40
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40021400 	.word	0x40021400
 8002db8:	40021800 	.word	0x40021800
 8002dbc:	2000024c 	.word	0x2000024c
 8002dc0:	40026410 	.word	0x40026410

08002dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc8:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <HAL_Init+0x40>)
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <HAL_Init+0x40>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dd4:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <HAL_Init+0x40>)
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_Init+0x40>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_Init+0x40>)
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_Init+0x40>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dec:	2003      	movs	r0, #3
 8002dee:	f000 f8f8 	bl	8002fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f007 fb9c 	bl	800a530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df8:	f007 fb72 	bl	800a4e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023c00 	.word	0x40023c00

08002e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_IncTick+0x20>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x24>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4413      	add	r3, r2
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_IncTick+0x24>)
 8002e1a:	6013      	str	r3, [r2, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000079 	.word	0x20000079
 8002e2c:	2000036c 	.word	0x2000036c

08002e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return uwTick;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HAL_GetTick+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2000036c 	.word	0x2000036c

08002e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff ffee 	bl	8002e30 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d005      	beq.n	8002e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_Delay+0x40>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e6e:	bf00      	nop
 8002e70:	f7ff ffde 	bl	8002e30 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3f7      	bcc.n	8002e70 <HAL_Delay+0x28>
  {
  }
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000079 	.word	0x20000079

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ebe:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	60d3      	str	r3, [r2, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000ed00 	.word	0xe000ed00

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	4909      	ldr	r1, [pc, #36]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	79fa      	ldrb	r2, [r7, #7]
 8002f0c:	f002 021f 	and.w	r2, r2, #31
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	490d      	ldr	r1, [pc, #52]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	4909      	ldr	r1, [pc, #36]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	1e5a      	subs	r2, r3, #1
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	1e59      	subs	r1, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	; 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff4e 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800300a:	f7ff ff63 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 800300e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff ffb3 	bl	8002f80 <NVIC_EncodePriority>
 800301a:	4602      	mov	r2, r0
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff82 	bl	8002f2c <__NVIC_SetPriority>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff56 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e011      	b.n	8003082 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	795b      	ldrb	r3, [r3, #5]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f004 f9e6 	bl	8007440 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003098:	f7ff feca 	bl	8002e30 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e099      	b.n	80031dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c8:	e00f      	b.n	80030ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ca:	f7ff feb1 	bl	8002e30 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d908      	bls.n	80030ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e078      	b.n	80031dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e8      	bne.n	80030ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <HAL_DMA_Init+0x158>)
 8003104:	4013      	ands	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003116:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003122:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800312e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	2b04      	cmp	r3, #4
 8003142:	d107      	bne.n	8003154 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4313      	orrs	r3, r2
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0307 	bic.w	r3, r3, #7
 800316a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b04      	cmp	r3, #4
 800317c:	d117      	bne.n	80031ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8bd 	bl	8003310 <DMA_CheckFifoParam>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031aa:	2301      	movs	r3, #1
 80031ac:	e016      	b.n	80031dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f874 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 80031bc:	4603      	mov	r3, r0
 80031be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	223f      	movs	r2, #63	; 0x3f
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	f010803f 	.word	0xf010803f

080031e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e050      	b.n	800329c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d101      	bne.n	800320a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	e048      	b.n	800329c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2200      	movs	r2, #0
 8003228:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2221      	movs	r2, #33	; 0x21
 8003248:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f82a 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 8003250:	4603      	mov	r3, r0
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800327c:	223f      	movs	r2, #63	; 0x3f
 800327e:	409a      	lsls	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b10      	subs	r3, #16
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <DMA_CalcBaseAndBitshift+0x64>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <DMA_CalcBaseAndBitshift+0x68>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d909      	bls.n	80032e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	; 0x58
 80032e4:	e007      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	aaaaaaab 	.word	0xaaaaaaab
 800330c:	0800d540 	.word	0x0800d540

08003310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d855      	bhi.n	80033dc <DMA_CheckFifoParam+0xcc>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <DMA_CheckFifoParam+0x28>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800335b 	.word	0x0800335b
 8003340:	08003349 	.word	0x08003349
 8003344:	080033dd 	.word	0x080033dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d045      	beq.n	80033e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e042      	b.n	80033e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003362:	d13f      	bne.n	80033e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e03c      	b.n	80033e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d121      	bne.n	80033b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d836      	bhi.n	80033e8 <DMA_CheckFifoParam+0xd8>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <DMA_CheckFifoParam+0x70>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003397 	.word	0x08003397
 8003388:	08003391 	.word	0x08003391
 800338c:	080033a9 	.word	0x080033a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e02f      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e021      	b.n	80033ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b0:	d11e      	bne.n	80033f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033b6:	e01b      	b.n	80033f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <DMA_CheckFifoParam+0xb4>
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d003      	beq.n	80033ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033c2:	e018      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e015      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      break;
 80033da:	e00b      	b.n	80033f4 <DMA_CheckFifoParam+0xe4>
      break;
 80033dc:	bf00      	nop
 80033de:	e00a      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e0:	bf00      	nop
 80033e2:	e008      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e4:	bf00      	nop
 80033e6:	e006      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e8:	bf00      	nop
 80033ea:	e004      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ec:	bf00      	nop
 80033ee:	e002      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033f4:	bf00      	nop
    }
  } 
  
  return status; 
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03b      	b.n	800348e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f004 f85c 	bl	80074e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2202      	movs	r2, #2
 8003434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6852      	ldr	r2, [r2, #4]
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003458:	f022 0107 	bic.w	r1, r2, #7
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6892      	ldr	r2, [r2, #8]
 8003460:	430a      	orrs	r2, r1
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003472:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	68c9      	ldr	r1, [r1, #12]
 800347a:	430b      	orrs	r3, r1
 800347c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af02      	add	r7, sp, #8
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_DMA2D_Start+0x1c>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e018      	b.n	80034e4 <HAL_DMA2D_Start+0x4e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68b9      	ldr	r1, [r7, #8]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 fa97 	bl	8003a00 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f042 0201 	orr.w	r2, r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d056      	beq.n	80035b6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003508:	f7ff fc92 	bl	8002e30 <HAL_GetTick>
 800350c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800350e:	e04b      	b.n	80035a8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800351e:	2b00      	cmp	r3, #0
 8003520:	d023      	beq.n	800356a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	f043 0202 	orr.w	r2, r3, #2
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	f043 0201 	orr.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2221      	movs	r2, #33	; 0x21
 8003554:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2204      	movs	r2, #4
 800355a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0a5      	b.n	80036b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d01a      	beq.n	80035a8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003572:	f7ff fc5d 	bl	8002e30 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	429a      	cmp	r2, r3
 8003580:	d802      	bhi.n	8003588 <HAL_DMA2D_PollForTransfer+0x9c>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10f      	bne.n	80035a8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358c:	f043 0220 	orr.w	r2, r3, #32
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e086      	b.n	80036b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ac      	beq.n	8003510 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d061      	beq.n	800369c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035d8:	f7ff fc2a 	bl	8002e30 <HAL_GetTick>
 80035dc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80035de:	e056      	b.n	800368e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02e      	beq.n	8003650 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2229      	movs	r2, #41	; 0x29
 800363a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2204      	movs	r2, #4
 8003640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e032      	b.n	80036b6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d01a      	beq.n	800368e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003658:	f7ff fbea 	bl	8002e30 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	1ad2      	subs	r2, r2, r3
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d802      	bhi.n	800366e <HAL_DMA2D_PollForTransfer+0x182>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10f      	bne.n	800368e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	f043 0220 	orr.w	r2, r3, #32
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2203      	movs	r2, #3
 800367e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e013      	b.n	80036b6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0a1      	beq.n	80035e0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2212      	movs	r2, #18
 80036a2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d026      	beq.n	800372e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d021      	beq.n	800372e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036f8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	f043 0201 	orr.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2204      	movs	r2, #4
 8003712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d026      	beq.n	8003786 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d021      	beq.n	8003786 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003750:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2220      	movs	r2, #32
 8003758:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375e:	f043 0202 	orr.w	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d026      	beq.n	80037de <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003796:	2b00      	cmp	r3, #0
 8003798:	d021      	beq.n	80037de <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6812      	ldr	r2, [r2, #0]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2208      	movs	r2, #8
 80037b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	f043 0204 	orr.w	r2, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2204      	movs	r2, #4
 80037c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00e      	beq.n	8003810 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003800:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2204      	movs	r2, #4
 8003808:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f853 	bl	80038b6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d024      	beq.n	8003864 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01f      	beq.n	8003864 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003832:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2202      	movs	r2, #2
 800383a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01f      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d01a      	beq.n	80038ae <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003886:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2210      	movs	r2, #16
 800388e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f80e 	bl	80038ca <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_DMA2D_ConfigLayer+0x20>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e077      	b.n	80039f0 <HAL_DMA2D_ConfigLayer+0x110>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	3318      	adds	r3, #24
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_DMA2D_ConfigLayer+0x11c>)
 800392c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d003      	beq.n	800393e <HAL_DMA2D_ConfigLayer+0x5e>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b09      	cmp	r3, #9
 800393c:	d107      	bne.n	800394e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e005      	b.n	800395a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d11f      	bne.n	80039a0 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	43d2      	mvns	r2, r2
 800396e:	4011      	ands	r1, r2
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	430a      	orrs	r2, r1
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b0a      	cmp	r3, #10
 8003986:	d003      	beq.n	8003990 <HAL_DMA2D_ConfigLayer+0xb0>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2b09      	cmp	r3, #9
 800398e:	d126      	bne.n	80039de <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	68d2      	ldr	r2, [r2, #12]
 8003998:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
 800399e:	e01e      	b.n	80039de <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	69d1      	ldr	r1, [r2, #28]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	43d2      	mvns	r2, r2
 80039ae:	4011      	ands	r1, r2
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b0a      	cmp	r3, #10
 80039c6:	d003      	beq.n	80039d0 <HAL_DMA2D_ConfigLayer+0xf0>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b09      	cmp	r3, #9
 80039ce:	d106      	bne.n	80039de <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80039dc:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	371c      	adds	r7, #28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	ff03000f 	.word	0xff03000f

08003a00 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b08b      	sub	sp, #44	; 0x2c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a18:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	0410      	lsls	r0, r2, #16
 8003a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a22:	4302      	orrs	r2, r0
 8003a24:	430a      	orrs	r2, r1
 8003a26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a38:	d174      	bne.n	8003b24 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a40:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a48:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a50:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d108      	bne.n	8003a72 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a70:	e053      	b.n	8003b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
 8003a86:	e048      	b.n	8003b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d111      	bne.n	8003ab4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	0cdb      	lsrs	r3, r3, #19
 8003a94:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	0a9b      	lsrs	r3, r3, #10
 8003a9a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	02db      	lsls	r3, r3, #11
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e032      	b.n	8003b1a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d117      	bne.n	8003aec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	0fdb      	lsrs	r3, r3, #31
 8003ac0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	0cdb      	lsrs	r3, r3, #19
 8003ac6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	0adb      	lsrs	r3, r3, #11
 8003acc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	08db      	lsrs	r3, r3, #3
 8003ad2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	029b      	lsls	r3, r3, #10
 8003adc:	431a      	orrs	r2, r3
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	03db      	lsls	r3, r3, #15
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aea:	e016      	b.n	8003b1a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	0f1b      	lsrs	r3, r3, #28
 8003af0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	0d1b      	lsrs	r3, r3, #20
 8003af6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	0b1b      	lsrs	r3, r3, #12
 8003afc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	011a      	lsls	r2, r3, #4
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	031b      	lsls	r3, r3, #12
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003b22:	e003      	b.n	8003b2c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	372c      	adds	r7, #44	; 0x2c
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e177      	b.n	8003e44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b54:	2201      	movs	r2, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	f040 8166 	bne.w	8003e3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x4a>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b12      	cmp	r3, #18
 8003b80:	d123      	bne.n	8003bca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	08da      	lsrs	r2, r3, #3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3208      	adds	r2, #8
 8003b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	220f      	movs	r2, #15
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	08da      	lsrs	r2, r3, #3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3208      	adds	r2, #8
 8003bc4:	69b9      	ldr	r1, [r7, #24]
 8003bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0203 	and.w	r2, r3, #3
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d00b      	beq.n	8003c1e <HAL_GPIO_Init+0xe6>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d007      	beq.n	8003c1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c12:	2b11      	cmp	r3, #17
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b12      	cmp	r3, #18
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80c0 	beq.w	8003e3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	4a65      	ldr	r2, [pc, #404]	; (8003e58 <HAL_GPIO_Init+0x320>)
 8003cc4:	4b64      	ldr	r3, [pc, #400]	; (8003e58 <HAL_GPIO_Init+0x320>)
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cce:	4b62      	ldr	r3, [pc, #392]	; (8003e58 <HAL_GPIO_Init+0x320>)
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cda:	4a60      	ldr	r2, [pc, #384]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	220f      	movs	r2, #15
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_GPIO_Init+0x328>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d037      	beq.n	8003d76 <HAL_GPIO_Init+0x23e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_GPIO_Init+0x32c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d031      	beq.n	8003d72 <HAL_GPIO_Init+0x23a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a55      	ldr	r2, [pc, #340]	; (8003e68 <HAL_GPIO_Init+0x330>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d02b      	beq.n	8003d6e <HAL_GPIO_Init+0x236>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a54      	ldr	r2, [pc, #336]	; (8003e6c <HAL_GPIO_Init+0x334>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d025      	beq.n	8003d6a <HAL_GPIO_Init+0x232>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a53      	ldr	r2, [pc, #332]	; (8003e70 <HAL_GPIO_Init+0x338>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01f      	beq.n	8003d66 <HAL_GPIO_Init+0x22e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <HAL_GPIO_Init+0x33c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d019      	beq.n	8003d62 <HAL_GPIO_Init+0x22a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a51      	ldr	r2, [pc, #324]	; (8003e78 <HAL_GPIO_Init+0x340>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <HAL_GPIO_Init+0x226>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <HAL_GPIO_Init+0x344>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00d      	beq.n	8003d5a <HAL_GPIO_Init+0x222>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x348>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <HAL_GPIO_Init+0x21e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4e      	ldr	r2, [pc, #312]	; (8003e84 <HAL_GPIO_Init+0x34c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_GPIO_Init+0x21a>
 8003d4e:	2309      	movs	r3, #9
 8003d50:	e012      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d52:	230a      	movs	r3, #10
 8003d54:	e010      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d56:	2308      	movs	r3, #8
 8003d58:	e00e      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d5a:	2307      	movs	r3, #7
 8003d5c:	e00c      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d5e:	2306      	movs	r3, #6
 8003d60:	e00a      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d62:	2305      	movs	r3, #5
 8003d64:	e008      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d66:	2304      	movs	r3, #4
 8003d68:	e006      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e004      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <HAL_GPIO_Init+0x240>
 8003d76:	2300      	movs	r3, #0
 8003d78:	69fa      	ldr	r2, [r7, #28]
 8003d7a:	f002 0203 	and.w	r2, r2, #3
 8003d7e:	0092      	lsls	r2, r2, #2
 8003d80:	4093      	lsls	r3, r2
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d88:	4934      	ldr	r1, [pc, #208]	; (8003e5c <HAL_GPIO_Init+0x324>)
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	089b      	lsrs	r3, r3, #2
 8003d8e:	3302      	adds	r3, #2
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d96:	4b3c      	ldr	r3, [pc, #240]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4013      	ands	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dba:	4a33      	ldr	r2, [pc, #204]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dc0:	4b31      	ldr	r3, [pc, #196]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003de4:	4a28      	ldr	r2, [pc, #160]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dea:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e0e:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e38:	4a13      	ldr	r2, [pc, #76]	; (8003e88 <HAL_GPIO_Init+0x350>)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3301      	adds	r3, #1
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	f67f ae84 	bls.w	8003b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	3724      	adds	r7, #36	; 0x24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	40013800 	.word	0x40013800
 8003e60:	40020000 	.word	0x40020000
 8003e64:	40020400 	.word	0x40020400
 8003e68:	40020800 	.word	0x40020800
 8003e6c:	40020c00 	.word	0x40020c00
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40021400 	.word	0x40021400
 8003e78:	40021800 	.word	0x40021800
 8003e7c:	40021c00 	.word	0x40021c00
 8003e80:	40022000 	.word	0x40022000
 8003e84:	40022400 	.word	0x40022400
 8003e88:	40013c00 	.word	0x40013c00

08003e8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e0da      	b.n	800405e <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	f040 80ca 	bne.w	8004058 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ec4:	4a6b      	ldr	r2, [pc, #428]	; (8004074 <HAL_GPIO_DeInit+0x1e8>)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	3302      	adds	r3, #2
 8003ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	220f      	movs	r2, #15
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a63      	ldr	r2, [pc, #396]	; (8004078 <HAL_GPIO_DeInit+0x1ec>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d037      	beq.n	8003f5e <HAL_GPIO_DeInit+0xd2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a62      	ldr	r2, [pc, #392]	; (800407c <HAL_GPIO_DeInit+0x1f0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_GPIO_DeInit+0xce>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a61      	ldr	r2, [pc, #388]	; (8004080 <HAL_GPIO_DeInit+0x1f4>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02b      	beq.n	8003f56 <HAL_GPIO_DeInit+0xca>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a60      	ldr	r2, [pc, #384]	; (8004084 <HAL_GPIO_DeInit+0x1f8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d025      	beq.n	8003f52 <HAL_GPIO_DeInit+0xc6>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a5f      	ldr	r2, [pc, #380]	; (8004088 <HAL_GPIO_DeInit+0x1fc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d01f      	beq.n	8003f4e <HAL_GPIO_DeInit+0xc2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a5e      	ldr	r2, [pc, #376]	; (800408c <HAL_GPIO_DeInit+0x200>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d019      	beq.n	8003f4a <HAL_GPIO_DeInit+0xbe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a5d      	ldr	r2, [pc, #372]	; (8004090 <HAL_GPIO_DeInit+0x204>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_GPIO_DeInit+0xba>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a5c      	ldr	r2, [pc, #368]	; (8004094 <HAL_GPIO_DeInit+0x208>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00d      	beq.n	8003f42 <HAL_GPIO_DeInit+0xb6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a5b      	ldr	r2, [pc, #364]	; (8004098 <HAL_GPIO_DeInit+0x20c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d007      	beq.n	8003f3e <HAL_GPIO_DeInit+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a5a      	ldr	r2, [pc, #360]	; (800409c <HAL_GPIO_DeInit+0x210>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_GPIO_DeInit+0xae>
 8003f36:	2309      	movs	r3, #9
 8003f38:	e012      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f3a:	230a      	movs	r3, #10
 8003f3c:	e010      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f3e:	2308      	movs	r3, #8
 8003f40:	e00e      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f42:	2307      	movs	r3, #7
 8003f44:	e00c      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f46:	2306      	movs	r3, #6
 8003f48:	e00a      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f4a:	2305      	movs	r3, #5
 8003f4c:	e008      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f4e:	2304      	movs	r3, #4
 8003f50:	e006      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f52:	2303      	movs	r3, #3
 8003f54:	e004      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f56:	2302      	movs	r3, #2
 8003f58:	e002      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_GPIO_DeInit+0xd4>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	f002 0203 	and.w	r2, r2, #3
 8003f66:	0092      	lsls	r2, r2, #2
 8003f68:	fa03 f202 	lsl.w	r2, r3, r2
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d132      	bne.n	8003fd8 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003f82:	483c      	ldr	r0, [pc, #240]	; (8004074 <HAL_GPIO_DeInit+0x1e8>)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	089b      	lsrs	r3, r3, #2
 8003f88:	493a      	ldr	r1, [pc, #232]	; (8004074 <HAL_GPIO_DeInit+0x1e8>)
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	0892      	lsrs	r2, r2, #2
 8003f8e:	3202      	adds	r2, #2
 8003f90:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	43d2      	mvns	r2, r2
 8003f98:	400a      	ands	r2, r1
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003fa0:	493f      	ldr	r1, [pc, #252]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fa2:	4b3f      	ldr	r3, [pc, #252]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	4013      	ands	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003fae:	493c      	ldr	r1, [pc, #240]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fb0:	4b3b      	ldr	r3, [pc, #236]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fbc:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fbe:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fca:	4935      	ldr	r1, [pc, #212]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fcc:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_GPIO_DeInit+0x214>)
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2103      	movs	r1, #3
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	401a      	ands	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	08da      	lsrs	r2, r3, #3
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	08d9      	lsrs	r1, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3108      	adds	r1, #8
 8003ffa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	200f      	movs	r0, #15
 8004008:	fa00 f303 	lsl.w	r3, r0, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	4019      	ands	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3208      	adds	r2, #8
 8004014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2103      	movs	r1, #3
 8004022:	fa01 f303 	lsl.w	r3, r1, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	401a      	ands	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	2101      	movs	r1, #1
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	43db      	mvns	r3, r3
 800403c:	401a      	ands	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68da      	ldr	r2, [r3, #12]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	2103      	movs	r1, #3
 800404c:	fa01 f303 	lsl.w	r3, r1, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	401a      	ands	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	3301      	adds	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	f67f af21 	bls.w	8003ea8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40013800 	.word	0x40013800
 8004078:	40020000 	.word	0x40020000
 800407c:	40020400 	.word	0x40020400
 8004080:	40020800 	.word	0x40020800
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021000 	.word	0x40021000
 800408c:	40021400 	.word	0x40021400
 8004090:	40021800 	.word	0x40021800
 8004094:	40021c00 	.word	0x40021c00
 8004098:	40022000 	.word	0x40022000
 800409c:	40022400 	.word	0x40022400
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e001      	b.n	80040c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040f0:	e003      	b.n	80040fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e10f      	b.n	800433a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f003 fc44 	bl	80079bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800414c:	f001 f974 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a7b      	ldr	r2, [pc, #492]	; (8004344 <HAL_I2C_Init+0x23c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d807      	bhi.n	800416c <HAL_I2C_Init+0x64>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4a7a      	ldr	r2, [pc, #488]	; (8004348 <HAL_I2C_Init+0x240>)
 8004160:	4293      	cmp	r3, r2
 8004162:	bf94      	ite	ls
 8004164:	2301      	movls	r3, #1
 8004166:	2300      	movhi	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e006      	b.n	800417a <HAL_I2C_Init+0x72>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a77      	ldr	r2, [pc, #476]	; (800434c <HAL_I2C_Init+0x244>)
 8004170:	4293      	cmp	r3, r2
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0db      	b.n	800433a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4a72      	ldr	r2, [pc, #456]	; (8004350 <HAL_I2C_Init+0x248>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	0c9b      	lsrs	r3, r3, #18
 800418c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	6852      	ldr	r2, [r2, #4]
 8004198:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	4863      	ldr	r0, [pc, #396]	; (8004344 <HAL_I2C_Init+0x23c>)
 80041b6:	4283      	cmp	r3, r0
 80041b8:	d802      	bhi.n	80041c0 <HAL_I2C_Init+0xb8>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	3301      	adds	r3, #1
 80041be:	e009      	b.n	80041d4 <HAL_I2C_Init+0xcc>
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	4862      	ldr	r0, [pc, #392]	; (8004354 <HAL_I2C_Init+0x24c>)
 80041cc:	fba0 0303 	umull	r0, r3, r0, r3
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	3301      	adds	r3, #1
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4955      	ldr	r1, [pc, #340]	; (8004344 <HAL_I2C_Init+0x23c>)
 80041f0:	428b      	cmp	r3, r1
 80041f2:	d80d      	bhi.n	8004210 <HAL_I2C_Init+0x108>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e59      	subs	r1, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004202:	3301      	adds	r3, #1
 8004204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004208:	2b04      	cmp	r3, #4
 800420a:	bf38      	it	cc
 800420c:	2304      	movcc	r3, #4
 800420e:	e04f      	b.n	80042b0 <HAL_I2C_Init+0x1a8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d111      	bne.n	800423c <HAL_I2C_Init+0x134>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e5c      	subs	r4, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	440b      	add	r3, r1
 8004226:	fbb4 f3f3 	udiv	r3, r4, r3
 800422a:	3301      	adds	r3, #1
 800422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004230:	2b00      	cmp	r3, #0
 8004232:	bf0c      	ite	eq
 8004234:	2301      	moveq	r3, #1
 8004236:	2300      	movne	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e012      	b.n	8004262 <HAL_I2C_Init+0x15a>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	1e5c      	subs	r4, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6859      	ldr	r1, [r3, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	0099      	lsls	r1, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Init+0x162>
 8004266:	2301      	movs	r3, #1
 8004268:	e022      	b.n	80042b0 <HAL_I2C_Init+0x1a8>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10e      	bne.n	8004290 <HAL_I2C_Init+0x188>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1e5c      	subs	r4, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6859      	ldr	r1, [r3, #4]
 800427a:	460b      	mov	r3, r1
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	440b      	add	r3, r1
 8004280:	fbb4 f3f3 	udiv	r3, r4, r3
 8004284:	3301      	adds	r3, #1
 8004286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800428e:	e00f      	b.n	80042b0 <HAL_I2C_Init+0x1a8>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1e5c      	subs	r4, r3, #1
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6859      	ldr	r1, [r3, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	0099      	lsls	r1, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	6812      	ldr	r2, [r2, #0]
 80042be:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	69d0      	ldr	r0, [r2, #28]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6a12      	ldr	r2, [r2, #32]
 80042ca:	4302      	orrs	r2, r0
 80042cc:	430a      	orrs	r2, r1
 80042ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	6908      	ldr	r0, [r1, #16]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	68c9      	ldr	r1, [r1, #12]
 80042ea:	4301      	orrs	r1, r0
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6950      	ldr	r0, [r2, #20]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6992      	ldr	r2, [r2, #24]
 8004306:	4302      	orrs	r2, r0
 8004308:	430a      	orrs	r2, r1
 800430a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	bd90      	pop	{r4, r7, pc}
 8004342:	bf00      	nop
 8004344:	000186a0 	.word	0x000186a0
 8004348:	001e847f 	.word	0x001e847f
 800434c:	003d08ff 	.word	0x003d08ff
 8004350:	431bde83 	.word	0x431bde83
 8004354:	10624dd3 	.word	0x10624dd3

08004358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b20      	cmp	r3, #32
 800436c:	d129      	bne.n	80043c2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2224      	movs	r2, #36	; 0x24
 8004372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004390:	f022 0210 	bic.w	r2, r2, #16
 8004394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	6812      	ldr	r2, [r2, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	e000      	b.n	80043c4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d12a      	bne.n	8004440 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2224      	movs	r2, #36	; 0x24
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6812      	ldr	r2, [r2, #0]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	f022 0201 	bic.w	r2, r2, #1
 8004400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800440a:	89fb      	ldrh	r3, [r7, #14]
 800440c:	f023 030f 	bic.w	r3, r3, #15
 8004410:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	b29a      	uxth	r2, r3
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	4313      	orrs	r3, r2
 800441a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	89fa      	ldrh	r2, [r7, #14]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6812      	ldr	r2, [r2, #0]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e000      	b.n	8004442 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004440:	2302      	movs	r3, #2
  }
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e0bf      	b.n	80045e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f003 fb8a 	bl	8007b90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	6992      	ldr	r2, [r2, #24]
 800448e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004492:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	6991      	ldr	r1, [r2, #24]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6850      	ldr	r0, [r2, #4]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044ac:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6912      	ldr	r2, [r2, #16]
 80044b2:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044b4:	430a      	orrs	r2, r1
 80044b6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_LTDC_Init+0x19c>)
 80044c4:	400b      	ands	r3, r1
 80044c6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	6891      	ldr	r1, [r2, #8]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6990      	ldr	r0, [r2, #24]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4302      	orrs	r2, r0
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68d9      	ldr	r1, [r3, #12]
 80044f0:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <HAL_LTDC_Init+0x19c>)
 80044f2:	400b      	ands	r3, r1
 80044f4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	68d1      	ldr	r1, [r2, #12]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6a10      	ldr	r0, [r2, #32]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4302      	orrs	r2, r0
 8004510:	430a      	orrs	r2, r1
 8004512:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6919      	ldr	r1, [r3, #16]
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_LTDC_Init+0x19c>)
 8004520:	400b      	ands	r3, r1
 8004522:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	6911      	ldr	r1, [r2, #16]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4302      	orrs	r2, r0
 800453e:	430a      	orrs	r2, r1
 8004540:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	6959      	ldr	r1, [r3, #20]
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_LTDC_Init+0x19c>)
 800454e:	400b      	ands	r3, r1
 8004550:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	041b      	lsls	r3, r3, #16
 8004558:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6951      	ldr	r1, [r2, #20]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4302      	orrs	r2, r0
 800456c:	430a      	orrs	r2, r1
 800456e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004580:	041b      	lsls	r3, r3, #16
 8004582:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800458e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4302      	orrs	r2, r0
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80045aa:	4302      	orrs	r2, r0
 80045ac:	430a      	orrs	r2, r1
 80045ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045ba:	f042 0206 	orr.w	r2, r2, #6
 80045be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	6992      	ldr	r2, [r2, #24]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	f000f800 	.word	0xf000f800

080045f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_LTDC_IRQHandler+0x6a>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d01e      	beq.n	800465a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2204      	movs	r2, #4
 8004632:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800463a:	f043 0201 	orr.w	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2204      	movs	r2, #4
 8004648:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f86f 	bl	8004738 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_LTDC_IRQHandler+0xbc>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01e      	beq.n	80046ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004678:	f022 0202 	bic.w	r2, r2, #2
 800467c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2202      	movs	r2, #2
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800468c:	f043 0202 	orr.w	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2204      	movs	r2, #4
 800469a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f846 	bl	8004738 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d01b      	beq.n	80046ee <HAL_LTDC_IRQHandler+0xfe>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046ca:	f022 0201 	bic.w	r2, r2, #1
 80046ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f82f 	bl	800474c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01b      	beq.n	8004730 <HAL_LTDC_IRQHandler+0x140>
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0308 	and.w	r3, r3, #8
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d016      	beq.n	8004730 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800470c:	f022 0208 	bic.w	r2, r2, #8
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2208      	movs	r2, #8
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f818 	bl	8004760 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004774:	b5b0      	push	{r4, r5, r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_LTDC_ConfigLayer+0x1a>
 800478a:	2302      	movs	r3, #2
 800478c:	e02c      	b.n	80047e8 <HAL_LTDC_ConfigLayer+0x74>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2134      	movs	r1, #52	; 0x34
 80047a4:	fb01 f303 	mul.w	r3, r1, r3
 80047a8:	4413      	add	r3, r2
 80047aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4614      	mov	r4, r2
 80047b2:	461d      	mov	r5, r3
 80047b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f83b 	bl	8004844 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bdb0      	pop	{r4, r5, r7, pc}

080047f0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_LTDC_EnableDither+0x16>
 8004802:	2302      	movs	r3, #2
 8004804:	e016      	b.n	8004834 <HAL_LTDC_EnableDither+0x44>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_LTDC_EnableDither+0x50>)
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_LTDC_EnableDither+0x50>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	40016800 	.word	0x40016800

08004844 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004844:	b480      	push	{r7}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004860:	4413      	add	r3, r2
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	01db      	lsls	r3, r3, #7
 8004870:	4413      	add	r3, r2
 8004872:	3384      	adds	r3, #132	; 0x84
 8004874:	461a      	mov	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4619      	mov	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	01db      	lsls	r3, r3, #7
 8004880:	440b      	add	r3, r1
 8004882:	3384      	adds	r3, #132	; 0x84
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800488a:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	01db      	lsls	r3, r3, #7
 8004896:	4413      	add	r3, r2
 8004898:	3384      	adds	r3, #132	; 0x84
 800489a:	4619      	mov	r1, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ac:	4413      	add	r3, r2
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048c4:	4413      	add	r3, r2
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	01db      	lsls	r3, r3, #7
 80048d4:	4413      	add	r3, r2
 80048d6:	3384      	adds	r3, #132	; 0x84
 80048d8:	461a      	mov	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	01db      	lsls	r3, r3, #7
 80048e4:	440b      	add	r3, r1
 80048e6:	3384      	adds	r3, #132	; 0x84
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80048ee:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	01db      	lsls	r3, r3, #7
 80048fa:	4413      	add	r3, r2
 80048fc:	3384      	adds	r3, #132	; 0x84
 80048fe:	4619      	mov	r1, r3
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490e:	4413      	add	r3, r2
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	01db      	lsls	r3, r3, #7
 8004922:	4413      	add	r3, r2
 8004924:	3384      	adds	r3, #132	; 0x84
 8004926:	461a      	mov	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4619      	mov	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	440b      	add	r3, r1
 8004934:	3384      	adds	r3, #132	; 0x84
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	461a      	mov	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	01db      	lsls	r3, r3, #7
 8004948:	4413      	add	r3, r2
 800494a:	3384      	adds	r3, #132	; 0x84
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004964:	041b      	lsls	r3, r3, #16
 8004966:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	061b      	lsls	r3, r3, #24
 800496e:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	461a      	mov	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	01db      	lsls	r3, r3, #7
 800497a:	4413      	add	r3, r2
 800497c:	3384      	adds	r3, #132	; 0x84
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	01db      	lsls	r3, r3, #7
 800498a:	4413      	add	r3, r2
 800498c:	3384      	adds	r3, #132	; 0x84
 800498e:	461a      	mov	r2, r3
 8004990:	2300      	movs	r3, #0
 8004992:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4413      	add	r3, r2
 80049a0:	3384      	adds	r3, #132	; 0x84
 80049a2:	4619      	mov	r1, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049aa:	461a      	mov	r2, r3
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	01db      	lsls	r3, r3, #7
 80049c4:	4413      	add	r3, r2
 80049c6:	3384      	adds	r3, #132	; 0x84
 80049c8:	461a      	mov	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4619      	mov	r1, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	01db      	lsls	r3, r3, #7
 80049d4:	440b      	add	r3, r1
 80049d6:	3384      	adds	r3, #132	; 0x84
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80049de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	01db      	lsls	r3, r3, #7
 80049ea:	4413      	add	r3, r2
 80049ec:	3384      	adds	r3, #132	; 0x84
 80049ee:	461a      	mov	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	01db      	lsls	r3, r3, #7
 8004a00:	4413      	add	r3, r2
 8004a02:	3384      	adds	r3, #132	; 0x84
 8004a04:	461a      	mov	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	01db      	lsls	r3, r3, #7
 8004a10:	440b      	add	r3, r1
 8004a12:	3384      	adds	r3, #132	; 0x84
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004a1a:	f023 0307 	bic.w	r3, r3, #7
 8004a1e:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	01db      	lsls	r3, r3, #7
 8004a2a:	4413      	add	r3, r2
 8004a2c:	3384      	adds	r3, #132	; 0x84
 8004a2e:	4619      	mov	r1, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	01db      	lsls	r3, r3, #7
 8004a46:	4413      	add	r3, r2
 8004a48:	3384      	adds	r3, #132	; 0x84
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	01db      	lsls	r3, r3, #7
 8004a56:	4413      	add	r3, r2
 8004a58:	3384      	adds	r3, #132	; 0x84
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	01db      	lsls	r3, r3, #7
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3384      	adds	r3, #132	; 0x84
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d102      	bne.n	8004a84 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8004a7e:	2304      	movs	r3, #4
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	e01b      	b.n	8004abc <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d102      	bne.n	8004a92 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	e014      	b.n	8004abc <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d00b      	beq.n	8004ab2 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d007      	beq.n	8004ab2 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d003      	beq.n	8004ab2 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004aae:	2b07      	cmp	r3, #7
 8004ab0:	d102      	bne.n	8004ab8 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	e001      	b.n	8004abc <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	01db      	lsls	r3, r3, #7
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3384      	adds	r3, #132	; 0x84
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	01db      	lsls	r3, r3, #7
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3384      	adds	r3, #132	; 0x84
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ae0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	01db      	lsls	r3, r3, #7
 8004aec:	4413      	add	r3, r2
 8004aee:	3384      	adds	r3, #132	; 0x84
 8004af0:	4618      	mov	r0, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	fb02 f303 	mul.w	r3, r2, r3
 8004afc:	041a      	lsls	r2, r3, #16
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	1acb      	subs	r3, r1, r3
 8004b08:	69f9      	ldr	r1, [r7, #28]
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	3303      	adds	r3, #3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	01db      	lsls	r3, r3, #7
 8004b1e:	4413      	add	r3, r2
 8004b20:	3384      	adds	r3, #132	; 0x84
 8004b22:	461a      	mov	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	440b      	add	r3, r1
 8004b30:	3384      	adds	r3, #132	; 0x84
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b38:	f023 0307 	bic.w	r3, r3, #7
 8004b3c:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	4413      	add	r3, r2
 8004b4a:	3384      	adds	r3, #132	; 0x84
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	01db      	lsls	r3, r3, #7
 8004b5e:	4413      	add	r3, r2
 8004b60:	3384      	adds	r3, #132	; 0x84
 8004b62:	461a      	mov	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	01db      	lsls	r3, r3, #7
 8004b6e:	440b      	add	r3, r1
 8004b70:	3384      	adds	r3, #132	; 0x84
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	6013      	str	r3, [r2, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3724      	adds	r7, #36	; 0x24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	4a20      	ldr	r2, [pc, #128]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b98:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_PWREx_EnableOverDrive+0x94>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bb4:	f7fe f93c 	bl	8002e30 <HAL_GetTick>
 8004bb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bba:	e009      	b.n	8004bd0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bbc:	f7fe f938 	bl	8002e30 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bca:	d901      	bls.n	8004bd0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e01f      	b.n	8004c10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d1ee      	bne.n	8004bbc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004be4:	f7fe f924 	bl	8002e30 <HAL_GetTick>
 8004be8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bea:	e009      	b.n	8004c00 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bec:	f7fe f920 	bl	8002e30 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bfa:	d901      	bls.n	8004c00 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e007      	b.n	8004c10 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <HAL_PWREx_EnableOverDrive+0x98>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c0c:	d1ee      	bne.n	8004bec <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	420e0040 	.word	0x420e0040
 8004c20:	40007000 	.word	0x40007000
 8004c24:	420e0044 	.word	0x420e0044

08004c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e22d      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d075      	beq.n	8004d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c46:	4ba3      	ldr	r3, [pc, #652]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d00c      	beq.n	8004c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c52:	4ba0      	ldr	r3, [pc, #640]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d112      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5e:	4b9d      	ldr	r3, [pc, #628]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c6c:	4b99      	ldr	r3, [pc, #612]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d05b      	beq.n	8004d30 <HAL_RCC_OscConfig+0x108>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d157      	bne.n	8004d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e208      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCC_OscConfig+0x74>
 8004c8e:	4a91      	ldr	r2, [pc, #580]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	4b90      	ldr	r3, [pc, #576]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e01d      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca4:	d10c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x98>
 8004ca6:	4a8b      	ldr	r2, [pc, #556]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004ca8:	4b8a      	ldr	r3, [pc, #552]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4a88      	ldr	r2, [pc, #544]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	4b87      	ldr	r3, [pc, #540]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e00b      	b.n	8004cd8 <HAL_RCC_OscConfig+0xb0>
 8004cc0:	4a84      	ldr	r2, [pc, #528]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cc2:	4b84      	ldr	r3, [pc, #528]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	4a81      	ldr	r2, [pc, #516]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cce:	4b81      	ldr	r3, [pc, #516]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d013      	beq.n	8004d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fe f8a6 	bl	8002e30 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce8:	f7fe f8a2 	bl	8002e30 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b64      	cmp	r3, #100	; 0x64
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e1cd      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	4b76      	ldr	r3, [pc, #472]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0xc0>
 8004d06:	e014      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fe f892 	bl	8002e30 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d10:	f7fe f88e 	bl	8002e30 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1b9      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	4b6c      	ldr	r3, [pc, #432]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0xe8>
 8004d2e:	e000      	b.n	8004d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d063      	beq.n	8004e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d3e:	4b65      	ldr	r3, [pc, #404]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 030c 	and.w	r3, r3, #12
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00b      	beq.n	8004d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4a:	4b62      	ldr	r3, [pc, #392]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d11c      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d56:	4b5f      	ldr	r3, [pc, #380]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d116      	bne.n	8004d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d62:	4b5c      	ldr	r3, [pc, #368]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d001      	beq.n	8004d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e18d      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4956      	ldr	r1, [pc, #344]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d7c:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	e03a      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d020      	beq.n	8004dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d98:	4b4f      	ldr	r3, [pc, #316]	; (8004ed8 <HAL_RCC_OscConfig+0x2b0>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9e:	f7fe f847 	bl	8002e30 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da6:	f7fe f843 	bl	8002e30 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e16e      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db8:	4b46      	ldr	r3, [pc, #280]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc4:	4943      	ldr	r1, [pc, #268]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc6:	4b43      	ldr	r3, [pc, #268]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]
 8004dd8:	e015      	b.n	8004e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dda:	4b3f      	ldr	r3, [pc, #252]	; (8004ed8 <HAL_RCC_OscConfig+0x2b0>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de0:	f7fe f826 	bl	8002e30 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de8:	f7fe f822 	bl	8002e30 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e14d      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfa:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f0      	bne.n	8004de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d030      	beq.n	8004e74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d016      	beq.n	8004e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1a:	4b30      	ldr	r3, [pc, #192]	; (8004edc <HAL_RCC_OscConfig+0x2b4>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fe f806 	bl	8002e30 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e28:	f7fe f802 	bl	8002e30 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e12d      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3a:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0x200>
 8004e46:	e015      	b.n	8004e74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e48:	4b24      	ldr	r3, [pc, #144]	; (8004edc <HAL_RCC_OscConfig+0x2b4>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd ffef 	bl	8002e30 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e56:	f7fd ffeb 	bl	8002e30 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e116      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e68:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f0      	bne.n	8004e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 80a0 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10f      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	4b0e      	ldr	r3, [pc, #56]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCC_OscConfig+0x2b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d121      	bne.n	8004f02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_RCC_OscConfig+0x2b8>)
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <HAL_RCC_OscConfig+0x2b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eca:	f7fd ffb1 	bl	8002e30 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ed0:	e011      	b.n	8004ef6 <HAL_RCC_OscConfig+0x2ce>
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	42470000 	.word	0x42470000
 8004edc:	42470e80 	.word	0x42470e80
 8004ee0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee4:	f7fd ffa4 	bl	8002e30 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0cf      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef6:	4b6a      	ldr	r3, [pc, #424]	; (80050a0 <HAL_RCC_OscConfig+0x478>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x2f0>
 8004f0a:	4a66      	ldr	r2, [pc, #408]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f0c:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	; 0x70
 8004f16:	e01c      	b.n	8004f52 <HAL_RCC_OscConfig+0x32a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCC_OscConfig+0x312>
 8004f20:	4a60      	ldr	r2, [pc, #384]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f22:	4b60      	ldr	r3, [pc, #384]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f043 0304 	orr.w	r3, r3, #4
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	4a5d      	ldr	r2, [pc, #372]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	f043 0301 	orr.w	r3, r3, #1
 8004f36:	6713      	str	r3, [r2, #112]	; 0x70
 8004f38:	e00b      	b.n	8004f52 <HAL_RCC_OscConfig+0x32a>
 8004f3a:	4a5a      	ldr	r2, [pc, #360]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f3c:	4b59      	ldr	r3, [pc, #356]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	f023 0301 	bic.w	r3, r3, #1
 8004f44:	6713      	str	r3, [r2, #112]	; 0x70
 8004f46:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f48:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d015      	beq.n	8004f86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fd ff69 	bl	8002e30 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fd ff65 	bl	8002e30 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e08e      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f78:	4b4a      	ldr	r3, [pc, #296]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ee      	beq.n	8004f62 <HAL_RCC_OscConfig+0x33a>
 8004f84:	e014      	b.n	8004fb0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f86:	f7fd ff53 	bl	8002e30 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fd ff4f 	bl	8002e30 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e078      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa4:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb6:	4a3b      	ldr	r2, [pc, #236]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004fb8:	4b3a      	ldr	r3, [pc, #232]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d064      	beq.n	8005094 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d05c      	beq.n	8005090 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d141      	bne.n	8005062 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <HAL_RCC_OscConfig+0x480>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fd ff24 	bl	8002e30 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd ff20 	bl	8002e30 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e04b      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	019b      	lsls	r3, r3, #6
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	085b      	lsrs	r3, r3, #1
 8005024:	3b01      	subs	r3, #1
 8005026:	041b      	lsls	r3, r3, #16
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	061b      	lsls	r3, r3, #24
 8005030:	4313      	orrs	r3, r2
 8005032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005034:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_RCC_OscConfig+0x480>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fd fef9 	bl	8002e30 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7fd fef5 	bl	8002e30 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e020      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005054:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x41a>
 8005060:	e018      	b.n	8005094 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <HAL_RCC_OscConfig+0x480>)
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fd fee2 	bl	8002e30 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005070:	f7fd fede 	bl	8002e30 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e009      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005082:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <HAL_RCC_OscConfig+0x47c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x448>
 800508e:	e001      	b.n	8005094 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40007000 	.word	0x40007000
 80050a4:	40023800 	.word	0x40023800
 80050a8:	42470060 	.word	0x42470060

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0ca      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b67      	ldr	r3, [pc, #412]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 020f 	and.w	r2, r3, #15
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d20c      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b64      	ldr	r3, [pc, #400]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b62      	ldr	r3, [pc, #392]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 020f 	and.w	r2, r3, #15
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b6      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4a58      	ldr	r2, [pc, #352]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005102:	4b58      	ldr	r3, [pc, #352]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800510a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4a52      	ldr	r2, [pc, #328]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800511a:	4b52      	ldr	r3, [pc, #328]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	494f      	ldr	r1, [pc, #316]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d044      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b46      	ldr	r3, [pc, #280]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d119      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07d      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b3e      	ldr	r3, [pc, #248]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06d      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3a      	ldr	r3, [pc, #232]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e065      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4936      	ldr	r1, [pc, #216]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f023 0203 	bic.w	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fd fe48 	bl	8002e30 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fd fe44 	bl	8002e30 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04d      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2a      	ldr	r3, [pc, #168]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 020f 	and.w	r2, r3, #15
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d90c      	bls.n	80051f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b21      	ldr	r3, [pc, #132]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b1f      	ldr	r3, [pc, #124]	; (8005260 <HAL_RCC_ClockConfig+0x1b4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 020f 	and.w	r2, r3, #15
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e030      	b.n	8005256 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4918      	ldr	r1, [pc, #96]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005202:	4b18      	ldr	r3, [pc, #96]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521e:	4911      	ldr	r1, [pc, #68]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005232:	f000 f81d 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005236:	4601      	mov	r1, r0
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
 8005246:	fa21 f303 	lsr.w	r3, r1, r3
 800524a:	4a08      	ldr	r2, [pc, #32]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800524e:	2000      	movs	r0, #0
 8005250:	f005 f96e 	bl	800a530 <HAL_InitTick>

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40023c00 	.word	0x40023c00
 8005264:	40023800 	.word	0x40023800
 8005268:	0807e420 	.word	0x0807e420
 800526c:	2000007c 	.word	0x2000007c

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	b08f      	sub	sp, #60	; 0x3c
 8005276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527c:	2300      	movs	r3, #0
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	2300      	movs	r3, #0
 8005282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005288:	4b62      	ldr	r3, [pc, #392]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 030c 	and.w	r3, r3, #12
 8005290:	2b04      	cmp	r3, #4
 8005292:	d007      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005294:	2b08      	cmp	r3, #8
 8005296:	d008      	beq.n	80052aa <HAL_RCC_GetSysClockFreq+0x3a>
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 80b2 	bne.w	8005402 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800529e:	4b5e      	ldr	r3, [pc, #376]	; (8005418 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80052a2:	e0b1      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052a4:	4b5d      	ldr	r3, [pc, #372]	; (800541c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80052a8:	e0ae      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052aa:	4b5a      	ldr	r3, [pc, #360]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052b4:	4b57      	ldr	r3, [pc, #348]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d04e      	beq.n	800535e <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c0:	4b54      	ldr	r3, [pc, #336]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	ea01 0103 	and.w	r1, r1, r3
 80052d6:	ea02 0204 	and.w	r2, r2, r4
 80052da:	460b      	mov	r3, r1
 80052dc:	4614      	mov	r4, r2
 80052de:	0160      	lsls	r0, r4, #5
 80052e0:	6278      	str	r0, [r7, #36]	; 0x24
 80052e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052e4:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80052e8:	6278      	str	r0, [r7, #36]	; 0x24
 80052ea:	015b      	lsls	r3, r3, #5
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	eb64 0402 	sbc.w	r4, r4, r2
 80052f8:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80052fc:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8005300:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8005304:	ebb8 0803 	subs.w	r8, r8, r3
 8005308:	eb69 0904 	sbc.w	r9, r9, r4
 800530c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800531e:	61bb      	str	r3, [r7, #24]
 8005320:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8005324:	eb18 0801 	adds.w	r8, r8, r1
 8005328:	eb49 0902 	adc.w	r9, r9, r2
 800532c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8005344:	4640      	mov	r0, r8
 8005346:	4649      	mov	r1, r9
 8005348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534a:	f04f 0400 	mov.w	r4, #0
 800534e:	461a      	mov	r2, r3
 8005350:	4623      	mov	r3, r4
 8005352:	f7fb fb8f 	bl	8000a74 <__aeabi_uldivmod>
 8005356:	4603      	mov	r3, r0
 8005358:	460c      	mov	r4, r1
 800535a:	637b      	str	r3, [r7, #52]	; 0x34
 800535c:	e043      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800535e:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	ea01 0103 	and.w	r1, r1, r3
 8005374:	ea02 0204 	and.w	r2, r2, r4
 8005378:	460b      	mov	r3, r1
 800537a:	4614      	mov	r4, r2
 800537c:	0160      	lsls	r0, r4, #5
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	015b      	lsls	r3, r3, #5
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005390:	1a5b      	subs	r3, r3, r1
 8005392:	eb64 0402 	sbc.w	r4, r4, r2
 8005396:	01a6      	lsls	r6, r4, #6
 8005398:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800539c:	019d      	lsls	r5, r3, #6
 800539e:	1aed      	subs	r5, r5, r3
 80053a0:	eb66 0604 	sbc.w	r6, r6, r4
 80053a4:	00f3      	lsls	r3, r6, #3
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	00eb      	lsls	r3, r5, #3
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	e897 0060 	ldmia.w	r7, {r5, r6}
 80053b8:	186d      	adds	r5, r5, r1
 80053ba:	eb46 0602 	adc.w	r6, r6, r2
 80053be:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80053c2:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80053c6:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80053ca:	4655      	mov	r5, sl
 80053cc:	465e      	mov	r6, fp
 80053ce:	4628      	mov	r0, r5
 80053d0:	4631      	mov	r1, r6
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	461a      	mov	r2, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	f7fb fb4a 	bl	8000a74 <__aeabi_uldivmod>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053e6:	4b0b      	ldr	r3, [pc, #44]	; (8005414 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80053f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005400:	e002      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005406:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800540a:	4618      	mov	r0, r3
 800540c:	373c      	adds	r7, #60	; 0x3c
 800540e:	46bd      	mov	sp, r7
 8005410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005414:	40023800 	.word	0x40023800
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	2000007c 	.word	0x2000007c

08005438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4601      	mov	r1, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0a9b      	lsrs	r3, r3, #10
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4a03      	ldr	r2, [pc, #12]	; (800545c <HAL_RCC_GetPCLK1Freq+0x24>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	0807e430 	.word	0x0807e430

08005460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005464:	f7ff ffdc 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005468:	4601      	mov	r1, r0
 800546a:	4b05      	ldr	r3, [pc, #20]	; (8005480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	0b5b      	lsrs	r3, r3, #13
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	4a03      	ldr	r2, [pc, #12]	; (8005484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005476:	5cd3      	ldrb	r3, [r2, r3]
 8005478:	fa21 f303 	lsr.w	r3, r1, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40023800 	.word	0x40023800
 8005484:	0807e430 	.word	0x0807e430

08005488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	220f      	movs	r2, #15
 8005496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <HAL_RCC_GetClockConfig+0x5c>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0203 	and.w	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_RCC_GetClockConfig+0x5c>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <HAL_RCC_GetClockConfig+0x5c>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <HAL_RCC_GetClockConfig+0x5c>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054ca:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <HAL_RCC_GetClockConfig+0x60>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 020f 	and.w	r2, r3, #15
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	601a      	str	r2, [r3, #0]
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40023c00 	.word	0x40023c00

080054ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005510:	2b00      	cmp	r3, #0
 8005512:	d061      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005514:	4ba3      	ldr	r3, [pc, #652]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800551a:	f7fd fc89 	bl	8002e30 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005522:	f7fd fc85 	bl	8002e30 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e177      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005534:	4b9c      	ldr	r3, [pc, #624]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f0      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800554c:	4996      	ldr	r1, [pc, #600]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	019a      	lsls	r2, r3, #6
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	071b      	lsls	r3, r3, #28
 800555a:	4313      	orrs	r3, r2
 800555c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01f      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800556c:	4b8e      	ldr	r3, [pc, #568]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800556e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005572:	0f1b      	lsrs	r3, r3, #28
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800557a:	498b      	ldr	r1, [pc, #556]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	019a      	lsls	r2, r3, #6
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	061b      	lsls	r3, r3, #24
 8005588:	431a      	orrs	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	071b      	lsls	r3, r3, #28
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005594:	4984      	ldr	r1, [pc, #528]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005596:	4b84      	ldr	r3, [pc, #528]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559c:	f023 021f 	bic.w	r2, r3, #31
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055ac:	4b7d      	ldr	r3, [pc, #500]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055b2:	f7fd fc3d 	bl	8002e30 <HAL_GetTick>
 80055b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055ba:	f7fd fc39 	bl	8002e30 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e12b      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055cc:	4b76      	ldr	r3, [pc, #472]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d105      	bne.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d079      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055f0:	4b6e      	ldr	r3, [pc, #440]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055f6:	f7fd fc1b 	bl	8002e30 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80055fe:	f7fd fc17 	bl	8002e30 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e109      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005610:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561c:	d0ef      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d020      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800562a:	4b5f      	ldr	r3, [pc, #380]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	0f1b      	lsrs	r3, r3, #28
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005638:	495b      	ldr	r1, [pc, #364]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	019a      	lsls	r2, r3, #6
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	431a      	orrs	r2, r3
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	071b      	lsls	r3, r3, #28
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005652:	4955      	ldr	r1, [pc, #340]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005654:	4b54      	ldr	r3, [pc, #336]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800565a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	3b01      	subs	r3, #1
 8005664:	021b      	lsls	r3, r3, #8
 8005666:	4313      	orrs	r3, r2
 8005668:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01e      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005678:	4b4b      	ldr	r3, [pc, #300]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800567a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	f003 030f 	and.w	r3, r3, #15
 8005684:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005686:	4948      	ldr	r1, [pc, #288]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	019a      	lsls	r2, r3, #6
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	061b      	lsls	r3, r3, #24
 8005692:	431a      	orrs	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	071b      	lsls	r3, r3, #28
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80056a0:	4941      	ldr	r1, [pc, #260]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056a2:	4b41      	ldr	r3, [pc, #260]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fd fbb8 	bl	8002e30 <HAL_GetTick>
 80056c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80056c4:	f7fd fbb4 	bl	8002e30 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e0a6      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80056d6:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e2:	d1ef      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 808d 	beq.w	800580c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
 8005702:	4b29      	ldr	r3, [pc, #164]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800570e:	4a28      	ldr	r2, [pc, #160]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005718:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800571a:	f7fd fb89 	bl	8002e30 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005722:	f7fd fb85 	bl	8002e30 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e077      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005748:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d039      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005754:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d032      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800575e:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005766:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005768:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005774:	4a0c      	ldr	r2, [pc, #48]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800577a:	4b0b      	ldr	r3, [pc, #44]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800577c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d11e      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005786:	f7fd fb53 	bl	8002e30 <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578c:	e014      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578e:	f7fd fb4f 	bl	8002e30 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	4293      	cmp	r3, r2
 800579e:	d90b      	bls.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e03f      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80057a4:	42470068 	.word	0x42470068
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470070 	.word	0x42470070
 80057b0:	40007000 	.word	0x40007000
 80057b4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0e4      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d0:	d10d      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x302>
 80057d2:	4916      	ldr	r1, [pc, #88]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057d4:	4b15      	ldr	r3, [pc, #84]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	4313      	orrs	r3, r2
 80057ea:	608b      	str	r3, [r1, #8]
 80057ec:	e005      	b.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80057ee:	4a0f      	ldr	r2, [pc, #60]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057f0:	4b0e      	ldr	r3, [pc, #56]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057f8:	6093      	str	r3, [r2, #8]
 80057fa:	490c      	ldr	r1, [pc, #48]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057fc:	4b0b      	ldr	r3, [pc, #44]	; (800582c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80057fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005808:	4313      	orrs	r3, r2
 800580a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005818:	4a05      	ldr	r2, [pc, #20]	; (8005830 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005820:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40023800 	.word	0x40023800
 8005830:	424711e0 	.word	0x424711e0

08005834 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e025      	b.n	8005894 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 ff3f 	bl	80076e0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2202      	movs	r2, #2
 8005866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f001 fc8d 	bl	8007194 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	461a      	mov	r2, r3
 8005884:	6839      	ldr	r1, [r7, #0]
 8005886:	f001 fcf8 	bl	800727a <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d101      	bne.n	80058b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80058b4:	2302      	movs	r3, #2
 80058b6:	e018      	b.n	80058ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fd55 	bl	8007378 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d104      	bne.n	80058e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2205      	movs	r2, #5
 80058da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80058de:	e003      	b.n	80058e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b082      	sub	sp, #8
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b02      	cmp	r3, #2
 8005906:	d101      	bne.n	800590c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
 800590a:	e00e      	b.n	800592a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fd68 	bl	80073f0 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e055      	b.n	80059f0 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f004 fd58 	bl	800a414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6851      	ldr	r1, [r2, #4]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6892      	ldr	r2, [r2, #8]
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	68d2      	ldr	r2, [r2, #12]
 800598e:	4311      	orrs	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	6912      	ldr	r2, [r2, #16]
 8005994:	4311      	orrs	r1, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6952      	ldr	r2, [r2, #20]
 800599a:	4311      	orrs	r1, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6992      	ldr	r2, [r2, #24]
 80059a0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80059a4:	4311      	orrs	r1, r2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	69d2      	ldr	r2, [r2, #28]
 80059aa:	4311      	orrs	r1, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6a12      	ldr	r2, [r2, #32]
 80059b0:	4311      	orrs	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059b6:	430a      	orrs	r2, r1
 80059b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6992      	ldr	r2, [r2, #24]
 80059c2:	0c12      	lsrs	r2, r2, #16
 80059c4:	f002 0104 	and.w	r1, r2, #4
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	69d2      	ldr	r2, [r2, #28]
 80059da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e01a      	b.n	8005a40 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f004 fd3e 	bl	800a4a4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_SPI_Transmit+0x22>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e11c      	b.n	8005ca4 <HAL_SPI_Transmit+0x25c>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a72:	f7fd f9dd 	bl	8002e30 <HAL_GetTick>
 8005a76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a78:	88fb      	ldrh	r3, [r7, #6]
 8005a7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d002      	beq.n	8005a8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a8c:	e101      	b.n	8005c92 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_SPI_Transmit+0x52>
 8005a94:	88fb      	ldrh	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a9e:	e0f8      	b.n	8005c92 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2203      	movs	r2, #3
 8005aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	88fa      	ldrh	r2, [r7, #6]
 8005ab8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae6:	d107      	bne.n	8005af8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	6812      	ldr	r2, [r2, #0]
 8005af0:	6812      	ldr	r2, [r2, #0]
 8005af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d007      	beq.n	8005b16 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	6812      	ldr	r2, [r2, #0]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1e:	d14b      	bne.n	8005bb8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d002      	beq.n	8005b2e <HAL_SPI_Transmit+0xe6>
 8005b28:	8afb      	ldrh	r3, [r7, #22]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d13e      	bne.n	8005bac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b36:	8812      	ldrh	r2, [r2, #0]
 8005b38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	1c9a      	adds	r2, r3, #2
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b52:	e02b      	b.n	8005bac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d112      	bne.n	8005b88 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b6a:	8812      	ldrh	r2, [r2, #0]
 8005b6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b86:	e011      	b.n	8005bac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b88:	f7fd f952 	bl	8002e30 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	1ad2      	subs	r2, r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d303      	bcc.n	8005ba0 <HAL_SPI_Transmit+0x158>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9e:	d102      	bne.n	8005ba6 <HAL_SPI_Transmit+0x15e>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d102      	bne.n	8005bac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005baa:	e072      	b.n	8005c92 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1ce      	bne.n	8005b54 <HAL_SPI_Transmit+0x10c>
 8005bb6:	e04c      	b.n	8005c52 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_SPI_Transmit+0x17e>
 8005bc0:	8afb      	ldrh	r3, [r7, #22]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d140      	bne.n	8005c48 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	330c      	adds	r3, #12
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bd0:	7812      	ldrb	r2, [r2, #0]
 8005bd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005bec:	e02c      	b.n	8005c48 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d113      	bne.n	8005c24 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c22:	e011      	b.n	8005c48 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c24:	f7fd f904 	bl	8002e30 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d303      	bcc.n	8005c3c <HAL_SPI_Transmit+0x1f4>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3a:	d102      	bne.n	8005c42 <HAL_SPI_Transmit+0x1fa>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c46:	e024      	b.n	8005c92 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1cd      	bne.n	8005bee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fb7b 	bl	8006352 <SPI_EndRxTxTransaction>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2220      	movs	r2, #32
 8005c66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c70:	2300      	movs	r3, #0
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3720      	adds	r7, #32
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b088      	sub	sp, #32
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc8:	d112      	bne.n	8005cf0 <HAL_SPI_Receive+0x44>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005cda:	88fa      	ldrh	r2, [r7, #6]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	68b9      	ldr	r1, [r7, #8]
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 f8e6 	bl	8005eb8 <HAL_SPI_TransmitReceive>
 8005cec:	4603      	mov	r3, r0
 8005cee:	e0df      	b.n	8005eb0 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_SPI_Receive+0x52>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e0d8      	b.n	8005eb0 <HAL_SPI_Receive+0x204>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d06:	f7fd f893 	bl	8002e30 <HAL_GetTick>
 8005d0a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d002      	beq.n	8005d1e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d18:	2302      	movs	r3, #2
 8005d1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d1c:	e0bf      	b.n	8005e9e <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <HAL_SPI_Receive+0x7e>
 8005d24:	88fb      	ldrh	r3, [r7, #6]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d102      	bne.n	8005d30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d2e:	e0b6      	b.n	8005e9e <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2204      	movs	r2, #4
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d76:	d107      	bne.n	8005d88 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	6812      	ldr	r2, [r2, #0]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b40      	cmp	r3, #64	; 0x40
 8005d94:	d007      	beq.n	8005da6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005da4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d161      	bne.n	8005e72 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005dae:	e02d      	b.n	8005e0c <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d114      	bne.n	8005de8 <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	320c      	adds	r2, #12
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	b2d2      	uxtb	r2, r2
 8005dcc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	3b01      	subs	r3, #1
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005de6:	e011      	b.n	8005e0c <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de8:	f7fd f822 	bl	8002e30 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d303      	bcc.n	8005e00 <HAL_SPI_Receive+0x154>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfe:	d102      	bne.n	8005e06 <HAL_SPI_Receive+0x15a>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e0a:	e048      	b.n	8005e9e <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1cc      	bne.n	8005db0 <HAL_SPI_Receive+0x104>
 8005e16:	e031      	b.n	8005e7c <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d113      	bne.n	8005e4e <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	68d2      	ldr	r2, [r2, #12]
 8005e30:	b292      	uxth	r2, r2
 8005e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	1c9a      	adds	r2, r3, #2
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e4c:	e011      	b.n	8005e72 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e4e:	f7fc ffef 	bl	8002e30 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad2      	subs	r2, r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d303      	bcc.n	8005e66 <HAL_SPI_Receive+0x1ba>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e64:	d102      	bne.n	8005e6c <HAL_SPI_Receive+0x1c0>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e70:	e015      	b.n	8005e9e <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1cd      	bne.n	8005e18 <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 fa31 	bl	80062e8 <SPI_EndRxTransaction>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d001      	beq.n	8005e9e <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	; 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x26>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e188      	b.n	80061f0 <HAL_SPI_TransmitReceive+0x338>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee6:	f7fc ffa3 	bl	8002e30 <HAL_GetTick>
 8005eea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d00f      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x70>
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0e:	d107      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <HAL_SPI_TransmitReceive+0x68>
 8005f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d003      	beq.n	8005f28 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f26:	e159      	b.n	80061dc <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_SPI_TransmitReceive+0x82>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SPI_TransmitReceive+0x82>
 8005f34:	887b      	ldrh	r3, [r7, #2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005f40:	e14c      	b.n	80061dc <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b04      	cmp	r3, #4
 8005f4c:	d003      	beq.n	8005f56 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2205      	movs	r2, #5
 8005f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	887a      	ldrh	r2, [r7, #2]
 8005f66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	887a      	ldrh	r2, [r7, #2]
 8005f6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	887a      	ldrh	r2, [r7, #2]
 8005f78:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	887a      	ldrh	r2, [r7, #2]
 8005f7e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d007      	beq.n	8005faa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6812      	ldr	r2, [r2, #0]
 8005fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb2:	d178      	bne.n	80060a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x10a>
 8005fbc:	8b7b      	ldrh	r3, [r7, #26]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d166      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	1c9a      	adds	r2, r3, #2
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe6:	e053      	b.n	8006090 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d11b      	bne.n	800602e <HAL_SPI_TransmitReceive+0x176>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <HAL_SPI_TransmitReceive+0x176>
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	2b01      	cmp	r3, #1
 8006004:	d113      	bne.n	800602e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800600e:	8812      	ldrh	r2, [r2, #0]
 8006010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800602a:	2300      	movs	r3, #0
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b01      	cmp	r3, #1
 800603a:	d119      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x1b8>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006040:	b29b      	uxth	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d014      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	68d2      	ldr	r2, [r2, #12]
 8006050:	b292      	uxth	r2, r2
 8006052:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	1c9a      	adds	r2, r3, #2
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800606c:	2301      	movs	r3, #1
 800606e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006070:	f7fc fede 	bl	8002e30 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	1ad2      	subs	r2, r2, r3
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	429a      	cmp	r2, r3
 800607e:	d307      	bcc.n	8006090 <HAL_SPI_TransmitReceive+0x1d8>
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006086:	d003      	beq.n	8006090 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800608e:	e0a5      	b.n	80061dc <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1a6      	bne.n	8005fe8 <HAL_SPI_TransmitReceive+0x130>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1a1      	bne.n	8005fe8 <HAL_SPI_TransmitReceive+0x130>
 80060a4:	e07c      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0x1fc>
 80060ae:	8b7b      	ldrh	r3, [r7, #26]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d16b      	bne.n	800618c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	330c      	adds	r3, #12
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060be:	7812      	ldrb	r2, [r2, #0]
 80060c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	3b01      	subs	r3, #1
 80060d4:	b29a      	uxth	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060da:	e057      	b.n	800618c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d11c      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x26c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d017      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x26c>
 80060f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d114      	bne.n	8006124 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b01      	subs	r3, #1
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d119      	bne.n	8006166 <HAL_SPI_TransmitReceive+0x2ae>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d014      	beq.n	8006166 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	6812      	ldr	r2, [r2, #0]
 8006144:	68d2      	ldr	r2, [r2, #12]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	3b01      	subs	r3, #1
 800615c:	b29a      	uxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006162:	2301      	movs	r3, #1
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006166:	f7fc fe63 	bl	8002e30 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	1ad2      	subs	r2, r2, r3
 8006170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006172:	429a      	cmp	r2, r3
 8006174:	d303      	bcc.n	800617e <HAL_SPI_TransmitReceive+0x2c6>
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d102      	bne.n	8006184 <HAL_SPI_TransmitReceive+0x2cc>
 800617e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006180:	2b00      	cmp	r3, #0
 8006182:	d103      	bne.n	800618c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800618a:	e027      	b.n	80061dc <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006190:	b29b      	uxth	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1a2      	bne.n	80060dc <HAL_SPI_TransmitReceive+0x224>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d19d      	bne.n	80060dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 f8d4 	bl	8006352 <SPI_EndRxTxTransaction>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80061bc:	e00e      	b.n	80061dc <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061c6:	2300      	movs	r3, #0
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80061ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3730      	adds	r7, #48	; 0x30
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006206:	b2db      	uxtb	r3, r3
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006224:	e04c      	b.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d048      	beq.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800622e:	f7fc fdff 	bl	8002e30 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	1ad2      	subs	r2, r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	429a      	cmp	r2, r3
 800623c:	d202      	bcs.n	8006244 <SPI_WaitFlagStateUntilTimeout+0x30>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d13d      	bne.n	80062c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6812      	ldr	r2, [r2, #0]
 800624c:	6852      	ldr	r2, [r2, #4]
 800624e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006252:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625c:	d111      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d004      	beq.n	8006272 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d107      	bne.n	8006282 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006280:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	d10f      	bne.n	80062ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e00f      	b.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	401a      	ands	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d1a3      	bne.n	8006226 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062fc:	d111      	bne.n	8006322 <SPI_EndRxTransaction+0x3a>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006306:	d004      	beq.n	8006312 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006310:	d107      	bne.n	8006322 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006320:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	2180      	movs	r1, #128	; 0x80
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7ff ff71 	bl	8006214 <SPI_WaitFlagStateUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e000      	b.n	800634a <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af02      	add	r7, sp, #8
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2200      	movs	r2, #0
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ff53 	bl	8006214 <SPI_WaitFlagStateUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e000      	b.n	8006386 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e01d      	b.n	80063dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f004 fadf 	bl	800a978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f000 fa15 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	68d2      	ldr	r2, [r2, #12]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b06      	cmp	r3, #6
 800640c:	d007      	beq.n	800641e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6812      	ldr	r2, [r2, #0]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	f042 0201 	orr.w	r2, r2, #1
 800641c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d122      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d11b      	bne.n	8006488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0202 	mvn.w	r2, #2
 8006458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f9a5 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006474:	e005      	b.n	8006482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f997 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f9a8 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b04      	cmp	r3, #4
 8006494:	d122      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d11b      	bne.n	80064dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f06f 0204 	mvn.w	r2, #4
 80064ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f97b 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 80064c8:	e005      	b.n	80064d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f96d 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f97e 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d122      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0308 	and.w	r3, r3, #8
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d11b      	bne.n	8006530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0208 	mvn.w	r2, #8
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2204      	movs	r2, #4
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f951 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f943 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f954 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0310 	and.w	r3, r3, #16
 800653a:	2b10      	cmp	r3, #16
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0310 	and.w	r3, r3, #16
 8006548:	2b10      	cmp	r3, #16
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0210 	mvn.w	r2, #16
 8006554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2208      	movs	r2, #8
 800655a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f927 	bl	80067be <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f919 	bl	80067aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f92a 	bl	80067d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b01      	cmp	r3, #1
 8006590:	d10e      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b01      	cmp	r3, #1
 800659e:	d107      	bne.n	80065b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0201 	mvn.w	r2, #1
 80065a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f002 fa40 	bl	8008a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d10e      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c8:	2b80      	cmp	r3, #128	; 0x80
 80065ca:	d107      	bne.n	80065dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fa99 	bl	8006b0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e6:	2b40      	cmp	r3, #64	; 0x40
 80065e8:	d10e      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d107      	bne.n	8006608 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f8ef 	bl	80067e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b20      	cmp	r3, #32
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b20      	cmp	r3, #32
 8006622:	d107      	bne.n	8006634 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0220 	mvn.w	r2, #32
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa63 	bl	8006afa <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_TIM_ConfigClockSource+0x18>
 8006650:	2302      	movs	r3, #2
 8006652:	e0a6      	b.n	80067a2 <HAL_TIM_ConfigClockSource+0x166>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800667a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b40      	cmp	r3, #64	; 0x40
 800668a:	d067      	beq.n	800675c <HAL_TIM_ConfigClockSource+0x120>
 800668c:	2b40      	cmp	r3, #64	; 0x40
 800668e:	d80b      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x6c>
 8006690:	2b10      	cmp	r3, #16
 8006692:	d073      	beq.n	800677c <HAL_TIM_ConfigClockSource+0x140>
 8006694:	2b10      	cmp	r3, #16
 8006696:	d802      	bhi.n	800669e <HAL_TIM_ConfigClockSource+0x62>
 8006698:	2b00      	cmp	r3, #0
 800669a:	d06f      	beq.n	800677c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800669c:	e078      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d06c      	beq.n	800677c <HAL_TIM_ConfigClockSource+0x140>
 80066a2:	2b30      	cmp	r3, #48	; 0x30
 80066a4:	d06a      	beq.n	800677c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80066a6:	e073      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066a8:	2b70      	cmp	r3, #112	; 0x70
 80066aa:	d00d      	beq.n	80066c8 <HAL_TIM_ConfigClockSource+0x8c>
 80066ac:	2b70      	cmp	r3, #112	; 0x70
 80066ae:	d804      	bhi.n	80066ba <HAL_TIM_ConfigClockSource+0x7e>
 80066b0:	2b50      	cmp	r3, #80	; 0x50
 80066b2:	d033      	beq.n	800671c <HAL_TIM_ConfigClockSource+0xe0>
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d041      	beq.n	800673c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80066b8:	e06a      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066be:	d066      	beq.n	800678e <HAL_TIM_ConfigClockSource+0x152>
 80066c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066c4:	d017      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80066c6:	e063      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6899      	ldr	r1, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f000 f9aa 	bl	8006a30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]
      break;
 80066f4:	e04c      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f000 f993 	bl	8006a30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6812      	ldr	r2, [r2, #0]
 8006712:	6892      	ldr	r2, [r2, #8]
 8006714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006718:	609a      	str	r2, [r3, #8]
      break;
 800671a:	e039      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6818      	ldr	r0, [r3, #0]
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	461a      	mov	r2, r3
 800672a:	f000 f907 	bl	800693c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2150      	movs	r1, #80	; 0x50
 8006734:	4618      	mov	r0, r3
 8006736:	f000 f960 	bl	80069fa <TIM_ITRx_SetConfig>
      break;
 800673a:	e029      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	6859      	ldr	r1, [r3, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	461a      	mov	r2, r3
 800674a:	f000 f926 	bl	800699a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2160      	movs	r1, #96	; 0x60
 8006754:	4618      	mov	r0, r3
 8006756:	f000 f950 	bl	80069fa <TIM_ITRx_SetConfig>
      break;
 800675a:	e019      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	6859      	ldr	r1, [r3, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	461a      	mov	r2, r3
 800676a:	f000 f8e7 	bl	800693c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2140      	movs	r1, #64	; 0x40
 8006774:	4618      	mov	r0, r3
 8006776:	f000 f940 	bl	80069fa <TIM_ITRx_SetConfig>
      break;
 800677a:	e009      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 f937 	bl	80069fa <TIM_ITRx_SetConfig>
      break;
 800678c:	e000      	b.n	8006790 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800678e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067b2:	bf00      	nop
 80067b4:	370c      	adds	r7, #12
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a40      	ldr	r2, [pc, #256]	; (8006910 <TIM_Base_SetConfig+0x114>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d00f      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a3d      	ldr	r2, [pc, #244]	; (8006914 <TIM_Base_SetConfig+0x118>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a3c      	ldr	r2, [pc, #240]	; (8006918 <TIM_Base_SetConfig+0x11c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a3b      	ldr	r2, [pc, #236]	; (800691c <TIM_Base_SetConfig+0x120>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a3a      	ldr	r2, [pc, #232]	; (8006920 <TIM_Base_SetConfig+0x124>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2f      	ldr	r2, [pc, #188]	; (8006910 <TIM_Base_SetConfig+0x114>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d02b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d027      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <TIM_Base_SetConfig+0x118>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d023      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a2b      	ldr	r2, [pc, #172]	; (8006918 <TIM_Base_SetConfig+0x11c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01f      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a2a      	ldr	r2, [pc, #168]	; (800691c <TIM_Base_SetConfig+0x120>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a29      	ldr	r2, [pc, #164]	; (8006920 <TIM_Base_SetConfig+0x124>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d017      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a28      	ldr	r2, [pc, #160]	; (8006924 <TIM_Base_SetConfig+0x128>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <TIM_Base_SetConfig+0x12c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <TIM_Base_SetConfig+0x130>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <TIM_Base_SetConfig+0x134>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a24      	ldr	r2, [pc, #144]	; (8006934 <TIM_Base_SetConfig+0x138>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a23      	ldr	r2, [pc, #140]	; (8006938 <TIM_Base_SetConfig+0x13c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d108      	bne.n	80068c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <TIM_Base_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <TIM_Base_SetConfig+0x124>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d103      	bne.n	80068fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	615a      	str	r2, [r3, #20]
}
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40010000 	.word	0x40010000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40010400 	.word	0x40010400
 8006924:	40014000 	.word	0x40014000
 8006928:	40014400 	.word	0x40014400
 800692c:	40014800 	.word	0x40014800
 8006930:	40001800 	.word	0x40001800
 8006934:	40001c00 	.word	0x40001c00
 8006938:	40002000 	.word	0x40002000

0800693c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 030a 	bic.w	r3, r3, #10
 8006978:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800699a:	b480      	push	{r7}
 800699c:	b087      	sub	sp, #28
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0210 	bic.w	r2, r3, #16
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	031b      	lsls	r3, r3, #12
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	4313      	orrs	r3, r2
 80069e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f043 0307 	orr.w	r3, r3, #7
 8006a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	021a      	lsls	r2, r3, #8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	609a      	str	r2, [r3, #8]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e032      	b.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b082      	sub	sp, #8
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e03f      	b.n	8006bb4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d106      	bne.n	8006b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f003 ffab 	bl	800aaa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2224      	movs	r2, #36	; 0x24
 8006b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6812      	ldr	r2, [r2, #0]
 8006b5e:	68d2      	ldr	r2, [r2, #12]
 8006b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f90a 	bl	8006d80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	6912      	ldr	r2, [r2, #16]
 8006b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6812      	ldr	r2, [r2, #0]
 8006b84:	6952      	ldr	r2, [r2, #20]
 8006b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	68d2      	ldr	r2, [r2, #12]
 8006b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	f040 8082 	bne.w	8006ce2 <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <HAL_UART_Transmit+0x2e>
 8006be4:	88fb      	ldrh	r3, [r7, #6]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e07a      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_UART_Transmit+0x40>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e073      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2221      	movs	r2, #33	; 0x21
 8006c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c12:	f7fc f90d 	bl	8002e30 <HAL_GetTick>
 8006c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	88fa      	ldrh	r2, [r7, #6]
 8006c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c24:	e041      	b.n	8006caa <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c3c:	d121      	bne.n	8006c82 <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	2200      	movs	r2, #0
 8006c46:	2180      	movs	r1, #128	; 0x80
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f84f 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d001      	beq.n	8006c58 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e045      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d103      	bne.n	8006c7a <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3302      	adds	r3, #2
 8006c76:	60bb      	str	r3, [r7, #8]
 8006c78:	e017      	b.n	8006caa <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60bb      	str	r3, [r7, #8]
 8006c80:	e013      	b.n	8006caa <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2180      	movs	r1, #128	; 0x80
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f82d 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e023      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	1c59      	adds	r1, r3, #1
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1b8      	bne.n	8006c26 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2140      	movs	r1, #64	; 0x40
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 f814 	bl	8006cec <UART_WaitOnFlagUntilTimeout>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d001      	beq.n	8006cce <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e00a      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e000      	b.n	8006ce4 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8006ce2:	2302      	movs	r3, #2
  }
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	603b      	str	r3, [r7, #0]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cfc:	e02c      	b.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d04:	d028      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d007      	beq.n	8006d1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d0c:	f7fc f890 	bl	8002e30 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	1ad2      	subs	r2, r2, r3
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d91d      	bls.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	68d2      	ldr	r2, [r2, #12]
 8006d26:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d2a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	6952      	ldr	r2, [r2, #20]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e00f      	b.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	401a      	ands	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	bf0c      	ite	eq
 8006d68:	2301      	moveq	r3, #1
 8006d6a:	2300      	movne	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	79fb      	ldrb	r3, [r7, #7]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d0c3      	beq.n	8006cfe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6812      	ldr	r2, [r2, #0]
 8006d90:	6912      	ldr	r2, [r2, #16]
 8006d92:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	68d2      	ldr	r2, [r2, #12]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006dc4:	f023 030c 	bic.w	r3, r3, #12
 8006dc8:	68f9      	ldr	r1, [r7, #12]
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	6952      	ldr	r2, [r2, #20]
 8006dd8:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	6992      	ldr	r2, [r2, #24]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dec:	f040 80e4 	bne.w	8006fb8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4aab      	ldr	r2, [pc, #684]	; (80070a4 <UART_SetConfig+0x324>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <UART_SetConfig+0x84>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4aaa      	ldr	r2, [pc, #680]	; (80070a8 <UART_SetConfig+0x328>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d16c      	bne.n	8006ede <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681c      	ldr	r4, [r3, #0]
 8006e08:	f7fe fb2a 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	009a      	lsls	r2, r3, #2
 8006e16:	441a      	add	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	4aa2      	ldr	r2, [pc, #648]	; (80070ac <UART_SetConfig+0x32c>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	011d      	lsls	r5, r3, #4
 8006e2c:	f7fe fb18 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009a      	lsls	r2, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	005b      	lsls	r3, r3, #1
 8006e42:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e46:	f7fe fb0b 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	009a      	lsls	r2, r3, #2
 8006e54:	441a      	add	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	4a92      	ldr	r2, [pc, #584]	; (80070ac <UART_SetConfig+0x32c>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	2264      	movs	r2, #100	; 0x64
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	1af3      	subs	r3, r6, r3
 8006e70:	00db      	lsls	r3, r3, #3
 8006e72:	3332      	adds	r3, #50	; 0x32
 8006e74:	4a8d      	ldr	r2, [pc, #564]	; (80070ac <UART_SetConfig+0x32c>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e82:	441d      	add	r5, r3
 8006e84:	f7fe faec 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009a      	lsls	r2, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e9e:	f7fe fadf 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009a      	lsls	r2, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb8:	4a7c      	ldr	r2, [pc, #496]	; (80070ac <UART_SetConfig+0x32c>)
 8006eba:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebe:	095b      	lsrs	r3, r3, #5
 8006ec0:	2264      	movs	r2, #100	; 0x64
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	1af3      	subs	r3, r6, r3
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	3332      	adds	r3, #50	; 0x32
 8006ecc:	4a77      	ldr	r2, [pc, #476]	; (80070ac <UART_SetConfig+0x32c>)
 8006ece:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	442b      	add	r3, r5
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	e154      	b.n	8007188 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681c      	ldr	r4, [r3, #0]
 8006ee2:	f7fe faa9 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009a      	lsls	r2, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efc:	4a6b      	ldr	r2, [pc, #428]	; (80070ac <UART_SetConfig+0x32c>)
 8006efe:	fba2 2303 	umull	r2, r3, r2, r3
 8006f02:	095b      	lsrs	r3, r3, #5
 8006f04:	011d      	lsls	r5, r3, #4
 8006f06:	f7fe fa97 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	009a      	lsls	r2, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f20:	f7fe fa8a 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006f24:	4602      	mov	r2, r0
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009a      	lsls	r2, r3, #2
 8006f2e:	441a      	add	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	005b      	lsls	r3, r3, #1
 8006f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f3a:	4a5c      	ldr	r2, [pc, #368]	; (80070ac <UART_SetConfig+0x32c>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	2264      	movs	r2, #100	; 0x64
 8006f44:	fb02 f303 	mul.w	r3, r2, r3
 8006f48:	1af3      	subs	r3, r6, r3
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	3332      	adds	r3, #50	; 0x32
 8006f4e:	4a57      	ldr	r2, [pc, #348]	; (80070ac <UART_SetConfig+0x32c>)
 8006f50:	fba2 2303 	umull	r2, r3, r2, r3
 8006f54:	095b      	lsrs	r3, r3, #5
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f5c:	441d      	add	r5, r3
 8006f5e:	f7fe fa6b 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009a      	lsls	r2, r3, #2
 8006f6c:	441a      	add	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f78:	f7fe fa5e 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009a      	lsls	r2, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	4a46      	ldr	r2, [pc, #280]	; (80070ac <UART_SetConfig+0x32c>)
 8006f94:	fba2 2303 	umull	r2, r3, r2, r3
 8006f98:	095b      	lsrs	r3, r3, #5
 8006f9a:	2264      	movs	r2, #100	; 0x64
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	1af3      	subs	r3, r6, r3
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	3332      	adds	r3, #50	; 0x32
 8006fa6:	4a41      	ldr	r2, [pc, #260]	; (80070ac <UART_SetConfig+0x32c>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	442b      	add	r3, r5
 8006fb4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8006fb6:	e0e7      	b.n	8007188 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a39      	ldr	r2, [pc, #228]	; (80070a4 <UART_SetConfig+0x324>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <UART_SetConfig+0x24c>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a38      	ldr	r2, [pc, #224]	; (80070a8 <UART_SetConfig+0x328>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d171      	bne.n	80070b0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681c      	ldr	r4, [r3, #0]
 8006fd0:	f7fe fa46 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009a      	lsls	r2, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	4a30      	ldr	r2, [pc, #192]	; (80070ac <UART_SetConfig+0x32c>)
 8006fec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	011d      	lsls	r5, r3, #4
 8006ff4:	f7fe fa34 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009a      	lsls	r2, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	fbb2 f6f3 	udiv	r6, r2, r3
 800700e:	f7fe fa27 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8007012:	4602      	mov	r2, r0
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009a      	lsls	r2, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	4a20      	ldr	r2, [pc, #128]	; (80070ac <UART_SetConfig+0x32c>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2264      	movs	r2, #100	; 0x64
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	1af3      	subs	r3, r6, r3
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	3332      	adds	r3, #50	; 0x32
 800703c:	4a1b      	ldr	r2, [pc, #108]	; (80070ac <UART_SetConfig+0x32c>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007048:	441d      	add	r5, r3
 800704a:	f7fe fa09 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 800704e:	4602      	mov	r2, r0
 8007050:	4613      	mov	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	009a      	lsls	r2, r3, #2
 8007058:	441a      	add	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	fbb2 f6f3 	udiv	r6, r2, r3
 8007064:	f7fe f9fc 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8007068:	4602      	mov	r2, r0
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009a      	lsls	r2, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	4a0b      	ldr	r2, [pc, #44]	; (80070ac <UART_SetConfig+0x32c>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	095b      	lsrs	r3, r3, #5
 8007086:	2264      	movs	r2, #100	; 0x64
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	1af3      	subs	r3, r6, r3
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	3332      	adds	r3, #50	; 0x32
 8007092:	4a06      	ldr	r2, [pc, #24]	; (80070ac <UART_SetConfig+0x32c>)
 8007094:	fba2 2303 	umull	r2, r3, r2, r3
 8007098:	095b      	lsrs	r3, r3, #5
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	442b      	add	r3, r5
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	e071      	b.n	8007188 <UART_SetConfig+0x408>
 80070a4:	40011000 	.word	0x40011000
 80070a8:	40011400 	.word	0x40011400
 80070ac:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681c      	ldr	r4, [r3, #0]
 80070b4:	f7fe f9c0 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 80070b8:	4602      	mov	r2, r0
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009a      	lsls	r2, r3, #2
 80070c2:	441a      	add	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ce:	4a30      	ldr	r2, [pc, #192]	; (8007190 <UART_SetConfig+0x410>)
 80070d0:	fba2 2303 	umull	r2, r3, r2, r3
 80070d4:	095b      	lsrs	r3, r3, #5
 80070d6:	011d      	lsls	r5, r3, #4
 80070d8:	f7fe f9ae 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009a      	lsls	r2, r3, #2
 80070e6:	441a      	add	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80070f2:	f7fe f9a1 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 80070f6:	4602      	mov	r2, r0
 80070f8:	4613      	mov	r3, r2
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	009a      	lsls	r2, r3, #2
 8007100:	441a      	add	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	4a20      	ldr	r2, [pc, #128]	; (8007190 <UART_SetConfig+0x410>)
 800710e:	fba2 2303 	umull	r2, r3, r2, r3
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	2264      	movs	r2, #100	; 0x64
 8007116:	fb02 f303 	mul.w	r3, r2, r3
 800711a:	1af3      	subs	r3, r6, r3
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	3332      	adds	r3, #50	; 0x32
 8007120:	4a1b      	ldr	r2, [pc, #108]	; (8007190 <UART_SetConfig+0x410>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800712c:	441d      	add	r5, r3
 800712e:	f7fe f983 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8007132:	4602      	mov	r2, r0
 8007134:	4613      	mov	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	4413      	add	r3, r2
 800713a:	009a      	lsls	r2, r3, #2
 800713c:	441a      	add	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	fbb2 f6f3 	udiv	r6, r2, r3
 8007148:	f7fe f976 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 800714c:	4602      	mov	r2, r0
 800714e:	4613      	mov	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4413      	add	r3, r2
 8007154:	009a      	lsls	r2, r3, #2
 8007156:	441a      	add	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007162:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <UART_SetConfig+0x410>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	2264      	movs	r2, #100	; 0x64
 800716c:	fb02 f303 	mul.w	r3, r2, r3
 8007170:	1af3      	subs	r3, r6, r3
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	3332      	adds	r3, #50	; 0x32
 8007176:	4a06      	ldr	r2, [pc, #24]	; (8007190 <UART_SetConfig+0x410>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	095b      	lsrs	r3, r3, #5
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	442b      	add	r3, r5
 8007184:	60a3      	str	r3, [r4, #8]
}
 8007186:	e7ff      	b.n	8007188 <UART_SetConfig+0x408>
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007190:	51eb851f 	.word	0x51eb851f

08007194 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d029      	beq.n	8007202 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80071ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071be:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071c8:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80071ce:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80071d4:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80071da:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80071e0:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80071e6:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80071ec:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80071f2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e034      	b.n	800726c <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800720e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007218:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800721e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007236:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007240:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007246:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800724c:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007252:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007258:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	4313      	orrs	r3, r2
 800725e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d02e      	beq.n	80072f2 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80072a0:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80072b0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80072ba:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80072c4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80072ce:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80072d8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	3b01      	subs	r3, #1
 80072e0:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80072e2:	4313      	orrs	r3, r2
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	609a      	str	r2, [r3, #8]
 80072f0:	e03b      	b.n	800736a <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007302:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	3b01      	subs	r3, #1
 800730a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	3b01      	subs	r3, #1
 8007312:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007314:	4313      	orrs	r3, r2
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007328:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007338:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	3b01      	subs	r3, #1
 8007340:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007342:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	3b01      	subs	r3, #1
 800734a:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800734c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	3b01      	subs	r3, #1
 8007354:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007356:	4313      	orrs	r3, r2
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007394:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	3b01      	subs	r3, #1
 800739c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800739e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80073b0:	f7fb fd3e 	bl	8002e30 <HAL_GetTick>
 80073b4:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80073b6:	e010      	b.n	80073da <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d00c      	beq.n	80073da <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <FMC_SDRAM_SendCommand+0x5e>
 80073c6:	f7fb fd33 	bl	8002e30 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d901      	bls.n	80073da <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e006      	b.n	80073e8 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	f003 0320 	and.w	r3, r3, #32
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d0e8      	beq.n	80073b8 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
	...

08007418 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <MX_CRC_Init+0x20>)
 800741e:	4a07      	ldr	r2, [pc, #28]	; (800743c <MX_CRC_Init+0x24>)
 8007420:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007422:	4805      	ldr	r0, [pc, #20]	; (8007438 <MX_CRC_Init+0x20>)
 8007424:	f7fb fe12 	bl	800304c <HAL_CRC_Init>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d001      	beq.n	8007432 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800742e:	f002 ffb3 	bl	800a398 <Error_Handler>
  }

}
 8007432:	bf00      	nop
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	20000370 	.word	0x20000370
 800743c:	40023000 	.word	0x40023000

08007440 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0b      	ldr	r2, [pc, #44]	; (800747c <HAL_CRC_MspInit+0x3c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <HAL_CRC_MspInit+0x40>)
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <HAL_CRC_MspInit+0x40>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007460:	6313      	str	r3, [r2, #48]	; 0x30
 8007462:	4b07      	ldr	r3, [pc, #28]	; (8007480 <HAL_CRC_MspInit+0x40>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40023000 	.word	0x40023000
 8007480:	40023800 	.word	0x40023800

08007484 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8007488:	4b15      	ldr	r3, [pc, #84]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 800748a:	4a16      	ldr	r2, [pc, #88]	; (80074e4 <MX_DMA2D_Init+0x60>)
 800748c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 8007490:	2200      	movs	r2, #0
 8007492:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8007494:	4b12      	ldr	r3, [pc, #72]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 8007496:	2202      	movs	r2, #2
 8007498:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800749a:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 800749c:	2200      	movs	r2, #0
 800749e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80074a6:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074a8:	2202      	movs	r2, #2
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80074ac:	4b0c      	ldr	r3, [pc, #48]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80074b8:	4809      	ldr	r0, [pc, #36]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074ba:	f7fb ffa3 	bl	8003404 <HAL_DMA2D_Init>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80074c4:	f002 ff68 	bl	800a398 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80074c8:	2101      	movs	r1, #1
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <MX_DMA2D_Init+0x5c>)
 80074cc:	f7fc fa08 	bl	80038e0 <HAL_DMA2D_ConfigLayer>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80074d6:	f002 ff5f 	bl	800a398 <Error_Handler>
  }

}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20000378 	.word	0x20000378
 80074e4:	4002b000 	.word	0x4002b000

080074e8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a0e      	ldr	r2, [pc, #56]	; (8007530 <HAL_DMA2D_MspInit+0x48>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d115      	bne.n	8007526 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	4a0d      	ldr	r2, [pc, #52]	; (8007534 <HAL_DMA2D_MspInit+0x4c>)
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <HAL_DMA2D_MspInit+0x4c>)
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007508:	6313      	str	r3, [r2, #48]	; 0x30
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <HAL_DMA2D_MspInit+0x4c>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8007516:	2200      	movs	r2, #0
 8007518:	2105      	movs	r1, #5
 800751a:	205a      	movs	r0, #90	; 0x5a
 800751c:	f7fb fd6c 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8007520:	205a      	movs	r0, #90	; 0x5a
 8007522:	f7fb fd85 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8007526:	bf00      	nop
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	4002b000 	.word	0x4002b000
 8007534:	40023800 	.word	0x40023800

08007538 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800753e:	4b20      	ldr	r3, [pc, #128]	; (80075c0 <MX_FMC_Init+0x88>)
 8007540:	4a20      	ldr	r2, [pc, #128]	; (80075c4 <MX_FMC_Init+0x8c>)
 8007542:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8007544:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <MX_FMC_Init+0x88>)
 8007546:	2201      	movs	r2, #1
 8007548:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800754a:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <MX_FMC_Init+0x88>)
 800754c:	2200      	movs	r2, #0
 800754e:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007550:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <MX_FMC_Init+0x88>)
 8007552:	2204      	movs	r2, #4
 8007554:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007556:	4b1a      	ldr	r3, [pc, #104]	; (80075c0 <MX_FMC_Init+0x88>)
 8007558:	2210      	movs	r2, #16
 800755a:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800755c:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <MX_FMC_Init+0x88>)
 800755e:	2240      	movs	r2, #64	; 0x40
 8007560:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <MX_FMC_Init+0x88>)
 8007564:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007568:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <MX_FMC_Init+0x88>)
 800756c:	2200      	movs	r2, #0
 800756e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007570:	4b13      	ldr	r3, [pc, #76]	; (80075c0 <MX_FMC_Init+0x88>)
 8007572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007576:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8007578:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <MX_FMC_Init+0x88>)
 800757a:	2200      	movs	r2, #0
 800757c:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800757e:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <MX_FMC_Init+0x88>)
 8007580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007584:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8007586:	2302      	movs	r3, #2
 8007588:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800758a:	2307      	movs	r3, #7
 800758c:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800758e:	2304      	movs	r3, #4
 8007590:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8007592:	2307      	movs	r3, #7
 8007594:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8007596:	2303      	movs	r3, #3
 8007598:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800759a:	2302      	movs	r3, #2
 800759c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800759e:	2302      	movs	r3, #2
 80075a0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80075a2:	1d3b      	adds	r3, r7, #4
 80075a4:	4619      	mov	r1, r3
 80075a6:	4806      	ldr	r0, [pc, #24]	; (80075c0 <MX_FMC_Init+0x88>)
 80075a8:	f7fe f944 	bl	8005834 <HAL_SDRAM_Init>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 80075b2:	f002 fef1 	bl	800a398 <Error_Handler>
  }

}
 80075b6:	bf00      	nop
 80075b8:	3720      	adds	r7, #32
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200003b8 	.word	0x200003b8
 80075c4:	a0000140 	.word	0xa0000140

080075c8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 80075ce:	4b3c      	ldr	r3, [pc, #240]	; (80076c0 <HAL_FMC_MspInit+0xf8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d16f      	bne.n	80076b6 <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 80075d6:	4b3a      	ldr	r3, [pc, #232]	; (80076c0 <HAL_FMC_MspInit+0xf8>)
 80075d8:	2201      	movs	r2, #1
 80075da:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80075dc:	2300      	movs	r3, #0
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	4a38      	ldr	r2, [pc, #224]	; (80076c4 <HAL_FMC_MspInit+0xfc>)
 80075e2:	4b38      	ldr	r3, [pc, #224]	; (80076c4 <HAL_FMC_MspInit+0xfc>)
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	f043 0301 	orr.w	r3, r3, #1
 80075ea:	6393      	str	r3, [r2, #56]	; 0x38
 80075ec:	4b35      	ldr	r3, [pc, #212]	; (80076c4 <HAL_FMC_MspInit+0xfc>)
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80075f8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80075fc:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fe:	2302      	movs	r3, #2
 8007600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007606:	2303      	movs	r3, #3
 8007608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800760a:	230c      	movs	r3, #12
 800760c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	4619      	mov	r1, r3
 8007612:	482d      	ldr	r0, [pc, #180]	; (80076c8 <HAL_FMC_MspInit+0x100>)
 8007614:	f7fc fa90 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8007618:	2301      	movs	r3, #1
 800761a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800761c:	2302      	movs	r3, #2
 800761e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007624:	2303      	movs	r3, #3
 8007626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007628:	230c      	movs	r3, #12
 800762a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800762c:	1d3b      	adds	r3, r7, #4
 800762e:	4619      	mov	r1, r3
 8007630:	4826      	ldr	r0, [pc, #152]	; (80076cc <HAL_FMC_MspInit+0x104>)
 8007632:	f7fc fa81 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 8007636:	f248 1333 	movw	r3, #33075	; 0x8133
 800763a:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763c:	2302      	movs	r3, #2
 800763e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007644:	2303      	movs	r3, #3
 8007646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007648:	230c      	movs	r3, #12
 800764a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800764c:	1d3b      	adds	r3, r7, #4
 800764e:	4619      	mov	r1, r3
 8007650:	481f      	ldr	r0, [pc, #124]	; (80076d0 <HAL_FMC_MspInit+0x108>)
 8007652:	f7fc fa71 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 8007656:	f64f 7383 	movw	r3, #65411	; 0xff83
 800765a:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2302      	movs	r3, #2
 800765e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007664:	2303      	movs	r3, #3
 8007666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007668:	230c      	movs	r3, #12
 800766a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800766c:	1d3b      	adds	r3, r7, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4818      	ldr	r0, [pc, #96]	; (80076d4 <HAL_FMC_MspInit+0x10c>)
 8007672:	f7fc fa61 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 8007676:	f24c 7303 	movw	r3, #50947	; 0xc703
 800767a:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767c:	2302      	movs	r3, #2
 800767e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007684:	2303      	movs	r3, #3
 8007686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007688:	230c      	movs	r3, #12
 800768a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800768c:	1d3b      	adds	r3, r7, #4
 800768e:	4619      	mov	r1, r3
 8007690:	4811      	ldr	r0, [pc, #68]	; (80076d8 <HAL_FMC_MspInit+0x110>)
 8007692:	f7fc fa51 	bl	8003b38 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8007696:	2360      	movs	r3, #96	; 0x60
 8007698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800769a:	2302      	movs	r3, #2
 800769c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076a2:	2303      	movs	r3, #3
 80076a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80076a6:	230c      	movs	r3, #12
 80076a8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076aa:	1d3b      	adds	r3, r7, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	480b      	ldr	r0, [pc, #44]	; (80076dc <HAL_FMC_MspInit+0x114>)
 80076b0:	f7fc fa42 	bl	8003b38 <HAL_GPIO_Init>
 80076b4:	e000      	b.n	80076b8 <HAL_FMC_MspInit+0xf0>
    return;
 80076b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	200002ac 	.word	0x200002ac
 80076c4:	40023800 	.word	0x40023800
 80076c8:	40021400 	.word	0x40021400
 80076cc:	40020800 	.word	0x40020800
 80076d0:	40021800 	.word	0x40021800
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40020c00 	.word	0x40020c00
 80076dc:	40020400 	.word	0x40020400

080076e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80076e8:	f7ff ff6e 	bl	80075c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80076ec:	bf00      	nop
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0

}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
	...

08007704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08e      	sub	sp, #56	; 0x38
 8007708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	605a      	str	r2, [r3, #4]
 8007714:	609a      	str	r2, [r3, #8]
 8007716:	60da      	str	r2, [r3, #12]
 8007718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
 800771e:	4a80      	ldr	r2, [pc, #512]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007720:	4b7f      	ldr	r3, [pc, #508]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	f043 0320 	orr.w	r3, r3, #32
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b7d      	ldr	r3, [pc, #500]	; (8007920 <MX_GPIO_Init+0x21c>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	623b      	str	r3, [r7, #32]
 8007734:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
 800773a:	4a79      	ldr	r2, [pc, #484]	; (8007920 <MX_GPIO_Init+0x21c>)
 800773c:	4b78      	ldr	r3, [pc, #480]	; (8007920 <MX_GPIO_Init+0x21c>)
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b76      	ldr	r3, [pc, #472]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	61fb      	str	r3, [r7, #28]
 8007750:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	4a72      	ldr	r2, [pc, #456]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007758:	4b71      	ldr	r3, [pc, #452]	; (8007920 <MX_GPIO_Init+0x21c>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	f043 0304 	orr.w	r3, r3, #4
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
 8007762:	4b6f      	ldr	r3, [pc, #444]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	61bb      	str	r3, [r7, #24]
 800776c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	4a6b      	ldr	r2, [pc, #428]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007774:	4b6a      	ldr	r3, [pc, #424]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f043 0301 	orr.w	r3, r3, #1
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b68      	ldr	r3, [pc, #416]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	4a64      	ldr	r2, [pc, #400]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007790:	4b63      	ldr	r3, [pc, #396]	; (8007920 <MX_GPIO_Init+0x21c>)
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b61      	ldr	r3, [pc, #388]	; (8007920 <MX_GPIO_Init+0x21c>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	4a5d      	ldr	r2, [pc, #372]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077ac:	4b5c      	ldr	r3, [pc, #368]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b4:	6313      	str	r3, [r2, #48]	; 0x30
 80077b6:	4b5a      	ldr	r3, [pc, #360]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80077c2:	2300      	movs	r3, #0
 80077c4:	60bb      	str	r3, [r7, #8]
 80077c6:	4a56      	ldr	r2, [pc, #344]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077c8:	4b55      	ldr	r3, [pc, #340]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	f043 0310 	orr.w	r3, r3, #16
 80077d0:	6313      	str	r3, [r2, #48]	; 0x30
 80077d2:	4b53      	ldr	r3, [pc, #332]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	60bb      	str	r3, [r7, #8]
 80077dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80077de:	2300      	movs	r3, #0
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	4a4f      	ldr	r2, [pc, #316]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077e4:	4b4e      	ldr	r3, [pc, #312]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	f043 0308 	orr.w	r3, r3, #8
 80077ec:	6313      	str	r3, [r2, #48]	; 0x30
 80077ee:	4b4c      	ldr	r3, [pc, #304]	; (8007920 <MX_GPIO_Init+0x21c>)
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	607b      	str	r3, [r7, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80077fa:	2200      	movs	r2, #0
 80077fc:	2116      	movs	r1, #22
 80077fe:	4849      	ldr	r0, [pc, #292]	; (8007924 <MX_GPIO_Init+0x220>)
 8007800:	f7fc fc68 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8007804:	2200      	movs	r2, #0
 8007806:	2180      	movs	r1, #128	; 0x80
 8007808:	4847      	ldr	r0, [pc, #284]	; (8007928 <MX_GPIO_Init+0x224>)
 800780a:	f7fc fc63 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800780e:	2200      	movs	r2, #0
 8007810:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007814:	4845      	ldr	r0, [pc, #276]	; (800792c <MX_GPIO_Init+0x228>)
 8007816:	f7fc fc5d 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800781a:	2200      	movs	r2, #0
 800781c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8007820:	4843      	ldr	r0, [pc, #268]	; (8007930 <MX_GPIO_Init+0x22c>)
 8007822:	f7fc fc57 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8007826:	2316      	movs	r3, #22
 8007828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800782a:	2301      	movs	r3, #1
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782e:	2300      	movs	r3, #0
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007832:	2300      	movs	r3, #0
 8007834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783a:	4619      	mov	r1, r3
 800783c:	4839      	ldr	r0, [pc, #228]	; (8007924 <MX_GPIO_Init+0x220>)
 800783e:	f7fc f97b 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BB_Pin;
 8007842:	2301      	movs	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007846:	2300      	movs	r3, #0
 8007848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784a:	2300      	movs	r3, #0
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BB_GPIO_Port, &GPIO_InitStruct);
 800784e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007852:	4619      	mov	r1, r3
 8007854:	4834      	ldr	r0, [pc, #208]	; (8007928 <MX_GPIO_Init+0x224>)
 8007856:	f7fc f96f 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800785a:	2380      	movs	r3, #128	; 0x80
 800785c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800785e:	2301      	movs	r3, #1
 8007860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007862:	2300      	movs	r3, #0
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007866:	2300      	movs	r3, #0
 8007868:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800786a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800786e:	4619      	mov	r1, r3
 8007870:	482d      	ldr	r0, [pc, #180]	; (8007928 <MX_GPIO_Init+0x224>)
 8007872:	f7fc f961 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8007876:	2320      	movs	r3, #32
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <MX_GPIO_Init+0x230>)
 800787c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800787e:	2300      	movs	r3, #0
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007886:	4619      	mov	r1, r3
 8007888:	4826      	ldr	r0, [pc, #152]	; (8007924 <MX_GPIO_Init+0x220>)
 800788a:	f7fc f955 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800788e:	2304      	movs	r3, #4
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007892:	2300      	movs	r3, #0
 8007894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007896:	2300      	movs	r3, #0
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800789a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800789e:	4619      	mov	r1, r3
 80078a0:	4825      	ldr	r0, [pc, #148]	; (8007938 <MX_GPIO_Init+0x234>)
 80078a2:	f7fc f949 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80078a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078ac:	2300      	movs	r3, #0
 80078ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80078b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b8:	4619      	mov	r1, r3
 80078ba:	481c      	ldr	r0, [pc, #112]	; (800792c <MX_GPIO_Init+0x228>)
 80078bc:	f7fc f93c 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80078c0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078c6:	2301      	movs	r3, #1
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078ce:	2300      	movs	r3, #0
 80078d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80078d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d6:	4619      	mov	r1, r3
 80078d8:	4814      	ldr	r0, [pc, #80]	; (800792c <MX_GPIO_Init+0x228>)
 80078da:	f7fc f92d 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT1_Pin;
 80078de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80078e4:	4b13      	ldr	r3, [pc, #76]	; (8007934 <MX_GPIO_Init+0x230>)
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078e8:	2300      	movs	r3, #0
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT1_GPIO_Port, &GPIO_InitStruct);
 80078ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078f0:	4619      	mov	r1, r3
 80078f2:	480d      	ldr	r0, [pc, #52]	; (8007928 <MX_GPIO_Init+0x224>)
 80078f4:	f7fc f920 	bl	8003b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80078f8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078fe:	2301      	movs	r3, #1
 8007900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007902:	2300      	movs	r3, #0
 8007904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007906:	2300      	movs	r3, #0
 8007908:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800790a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800790e:	4619      	mov	r1, r3
 8007910:	4807      	ldr	r0, [pc, #28]	; (8007930 <MX_GPIO_Init+0x22c>)
 8007912:	f7fc f911 	bl	8003b38 <HAL_GPIO_Init>

}
 8007916:	bf00      	nop
 8007918:	3738      	adds	r7, #56	; 0x38
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	40023800 	.word	0x40023800
 8007924:	40020800 	.word	0x40020800
 8007928:	40020000 	.word	0x40020000
 800792c:	40020c00 	.word	0x40020c00
 8007930:	40021800 	.word	0x40021800
 8007934:	10120000 	.word	0x10120000
 8007938:	40020400 	.word	0x40020400

0800793c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007940:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007942:	4a1c      	ldr	r2, [pc, #112]	; (80079b4 <MX_I2C3_Init+0x78>)
 8007944:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007946:	4b1a      	ldr	r3, [pc, #104]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007948:	4a1b      	ldr	r2, [pc, #108]	; (80079b8 <MX_I2C3_Init+0x7c>)
 800794a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800794c:	4b18      	ldr	r3, [pc, #96]	; (80079b0 <MX_I2C3_Init+0x74>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007952:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007954:	2200      	movs	r2, #0
 8007956:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007958:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <MX_I2C3_Init+0x74>)
 800795a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800795e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007960:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007962:	2200      	movs	r2, #0
 8007964:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007966:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007968:	2200      	movs	r2, #0
 800796a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800796c:	4b10      	ldr	r3, [pc, #64]	; (80079b0 <MX_I2C3_Init+0x74>)
 800796e:	2200      	movs	r2, #0
 8007970:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007972:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <MX_I2C3_Init+0x74>)
 8007974:	2200      	movs	r2, #0
 8007976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007978:	480d      	ldr	r0, [pc, #52]	; (80079b0 <MX_I2C3_Init+0x74>)
 800797a:	f7fc fbc5 	bl	8004108 <HAL_I2C_Init>
 800797e:	4603      	mov	r3, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007984:	f002 fd08 	bl	800a398 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007988:	2100      	movs	r1, #0
 800798a:	4809      	ldr	r0, [pc, #36]	; (80079b0 <MX_I2C3_Init+0x74>)
 800798c:	f7fc fce4 	bl	8004358 <HAL_I2CEx_ConfigAnalogFilter>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007996:	f002 fcff 	bl	800a398 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800799a:	2100      	movs	r1, #0
 800799c:	4804      	ldr	r0, [pc, #16]	; (80079b0 <MX_I2C3_Init+0x74>)
 800799e:	f7fc fd17 	bl	80043d0 <HAL_I2CEx_ConfigDigitalFilter>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80079a8:	f002 fcf6 	bl	800a398 <Error_Handler>
  }

}
 80079ac:	bf00      	nop
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200003ec 	.word	0x200003ec
 80079b4:	40005c00 	.word	0x40005c00
 80079b8:	000186a0 	.word	0x000186a0

080079bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c4:	f107 0314 	add.w	r3, r7, #20
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	60da      	str	r2, [r3, #12]
 80079d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a29      	ldr	r2, [pc, #164]	; (8007a80 <HAL_I2C_MspInit+0xc4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d14b      	bne.n	8007a76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	4a28      	ldr	r2, [pc, #160]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 80079e4:	4b27      	ldr	r3, [pc, #156]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	f043 0304 	orr.w	r3, r3, #4
 80079ec:	6313      	str	r3, [r2, #48]	; 0x30
 80079ee:	4b25      	ldr	r3, [pc, #148]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	4a21      	ldr	r2, [pc, #132]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a00:	4b20      	ldr	r3, [pc, #128]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	f043 0301 	orr.w	r3, r3, #1
 8007a08:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0a:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f003 0301 	and.w	r3, r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a1c:	2312      	movs	r3, #18
 8007a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a20:	2301      	movs	r3, #1
 8007a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a24:	2303      	movs	r3, #3
 8007a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a28:	2304      	movs	r3, #4
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a2c:	f107 0314 	add.w	r3, r7, #20
 8007a30:	4619      	mov	r1, r3
 8007a32:	4815      	ldr	r0, [pc, #84]	; (8007a88 <HAL_I2C_MspInit+0xcc>)
 8007a34:	f7fc f880 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a3e:	2312      	movs	r3, #18
 8007a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a42:	2301      	movs	r3, #1
 8007a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a46:	2303      	movs	r3, #3
 8007a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a4a:	2304      	movs	r3, #4
 8007a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a4e:	f107 0314 	add.w	r3, r7, #20
 8007a52:	4619      	mov	r1, r3
 8007a54:	480d      	ldr	r0, [pc, #52]	; (8007a8c <HAL_I2C_MspInit+0xd0>)
 8007a56:	f7fc f86f 	bl	8003b38 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
 8007a5e:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a60:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a68:	6413      	str	r3, [r2, #64]	; 0x40
 8007a6a:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_I2C_MspInit+0xc8>)
 8007a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007a76:	bf00      	nop
 8007a78:	3728      	adds	r7, #40	; 0x28
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40005c00 	.word	0x40005c00
 8007a84:	40023800 	.word	0x40023800
 8007a88:	40020800 	.word	0x40020800
 8007a8c:	40020000 	.word	0x40020000

08007a90 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	; 0x38
 8007a94:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007a96:	1d3b      	adds	r3, r7, #4
 8007a98:	2234      	movs	r2, #52	; 0x34
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f003 f89d 	bl	800abdc <memset>

  hltdc.Instance = LTDC;
 8007aa2:	4b39      	ldr	r3, [pc, #228]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007aa4:	4a39      	ldr	r2, [pc, #228]	; (8007b8c <MX_LTDC_Init+0xfc>)
 8007aa6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007aa8:	4b37      	ldr	r3, [pc, #220]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007aaa:	2200      	movs	r2, #0
 8007aac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007aae:	4b36      	ldr	r3, [pc, #216]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007ab4:	4b34      	ldr	r3, [pc, #208]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007aba:	4b33      	ldr	r3, [pc, #204]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8007ac0:	4b31      	ldr	r3, [pc, #196]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ac2:	2209      	movs	r2, #9
 8007ac4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8007ac6:	4b30      	ldr	r3, [pc, #192]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ac8:	2201      	movs	r2, #1
 8007aca:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007acc:	4b2e      	ldr	r3, [pc, #184]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ace:	221d      	movs	r2, #29
 8007ad0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8007ad2:	4b2d      	ldr	r3, [pc, #180]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ad4:	2203      	movs	r2, #3
 8007ad6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8007ad8:	4b2b      	ldr	r3, [pc, #172]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ada:	f240 120d 	movw	r2, #269	; 0x10d
 8007ade:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8007ae0:	4b29      	ldr	r3, [pc, #164]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007ae2:	f240 1243 	movw	r2, #323	; 0x143
 8007ae6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8007ae8:	4b27      	ldr	r3, [pc, #156]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007aea:	f240 1217 	movw	r2, #279	; 0x117
 8007aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8007af0:	4b25      	ldr	r3, [pc, #148]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007af2:	f240 1247 	movw	r2, #327	; 0x147
 8007af6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007af8:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007b00:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007b08:	4b1f      	ldr	r3, [pc, #124]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007b10:	481d      	ldr	r0, [pc, #116]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007b12:	f7fc fc9d 	bl	8004450 <HAL_LTDC_Init>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8007b1c:	f002 fc3c 	bl	800a398 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8007b24:	23f0      	movs	r3, #240	; 0xf0
 8007b26:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8007b2c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007b30:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007b32:	2302      	movs	r3, #2
 8007b34:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8007b36:	23ff      	movs	r3, #255	; 0xff
 8007b38:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007b3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007b42:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007b44:	2307      	movs	r3, #7
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007b48:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007b4e:	23f0      	movs	r3, #240	; 0xf0
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8007b52:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007b56:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <MX_LTDC_Init+0xf8>)
 8007b72:	f7fc fdff 	bl	8004774 <HAL_LTDC_ConfigLayer>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007b7c:	f002 fc0c 	bl	800a398 <Error_Handler>
  }

}
 8007b80:	bf00      	nop
 8007b82:	3738      	adds	r7, #56	; 0x38
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20000440 	.word	0x20000440
 8007b8c:	40016800 	.word	0x40016800

08007b90 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	60da      	str	r2, [r3, #12]
 8007ba6:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a7b      	ldr	r2, [pc, #492]	; (8007d9c <HAL_LTDC_MspInit+0x20c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f040 80f0 	bne.w	8007d94 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	623b      	str	r3, [r7, #32]
 8007bb8:	4a79      	ldr	r2, [pc, #484]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bba:	4b79      	ldr	r3, [pc, #484]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8007bc4:	4b76      	ldr	r3, [pc, #472]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007bcc:	623b      	str	r3, [r7, #32]
 8007bce:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	4a72      	ldr	r2, [pc, #456]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bd6:	4b72      	ldr	r3, [pc, #456]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	f043 0320 	orr.w	r3, r3, #32
 8007bde:	6313      	str	r3, [r2, #48]	; 0x30
 8007be0:	4b6f      	ldr	r3, [pc, #444]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bec:	2300      	movs	r3, #0
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	4a6b      	ldr	r2, [pc, #428]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bf2:	4b6b      	ldr	r3, [pc, #428]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8007bfc:	4b68      	ldr	r3, [pc, #416]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c08:	2300      	movs	r3, #0
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	4a64      	ldr	r2, [pc, #400]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c0e:	4b64      	ldr	r3, [pc, #400]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c12:	f043 0302 	orr.w	r3, r3, #2
 8007c16:	6313      	str	r3, [r2, #48]	; 0x30
 8007c18:	4b61      	ldr	r3, [pc, #388]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	4a5d      	ldr	r2, [pc, #372]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c2a:	4b5d      	ldr	r3, [pc, #372]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c32:	6313      	str	r3, [r2, #48]	; 0x30
 8007c34:	4b5a      	ldr	r3, [pc, #360]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c3c:	613b      	str	r3, [r7, #16]
 8007c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	4a56      	ldr	r2, [pc, #344]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c46:	4b56      	ldr	r3, [pc, #344]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	f043 0304 	orr.w	r3, r3, #4
 8007c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8007c50:	4b53      	ldr	r3, [pc, #332]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	4a4f      	ldr	r2, [pc, #316]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c62:	4b4f      	ldr	r3, [pc, #316]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	f043 0308 	orr.w	r3, r3, #8
 8007c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <HAL_LTDC_MspInit+0x210>)
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	60bb      	str	r3, [r7, #8]
 8007c76:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8007c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c86:	2300      	movs	r3, #0
 8007c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007c8a:	230e      	movs	r3, #14
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c92:	4619      	mov	r1, r3
 8007c94:	4843      	ldr	r0, [pc, #268]	; (8007da4 <HAL_LTDC_MspInit+0x214>)
 8007c96:	f7fb ff4f 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8007c9a:	f641 0358 	movw	r3, #6232	; 0x1858
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007cac:	230e      	movs	r3, #14
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	483c      	ldr	r0, [pc, #240]	; (8007da8 <HAL_LTDC_MspInit+0x218>)
 8007cb8:	f7fb ff3e 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007ccc:	2309      	movs	r3, #9
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	4835      	ldr	r0, [pc, #212]	; (8007dac <HAL_LTDC_MspInit+0x21c>)
 8007cd8:	f7fb ff2e 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8007cdc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cea:	2300      	movs	r3, #0
 8007cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007cee:	230e      	movs	r3, #14
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	482c      	ldr	r0, [pc, #176]	; (8007dac <HAL_LTDC_MspInit+0x21c>)
 8007cfa:	f7fb ff1d 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8007cfe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d04:	2302      	movs	r3, #2
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007d10:	230e      	movs	r3, #14
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d18:	4619      	mov	r1, r3
 8007d1a:	4825      	ldr	r0, [pc, #148]	; (8007db0 <HAL_LTDC_MspInit+0x220>)
 8007d1c:	f7fb ff0c 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|GPIO_PIN_10;
 8007d20:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d26:	2302      	movs	r3, #2
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007d32:	230e      	movs	r3, #14
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	481d      	ldr	r0, [pc, #116]	; (8007db4 <HAL_LTDC_MspInit+0x224>)
 8007d3e:	f7fb fefb 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|GPIO_PIN_6;
 8007d42:	2348      	movs	r3, #72	; 0x48
 8007d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d46:	2302      	movs	r3, #2
 8007d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007d52:	230e      	movs	r3, #14
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4816      	ldr	r0, [pc, #88]	; (8007db8 <HAL_LTDC_MspInit+0x228>)
 8007d5e:	f7fb feeb 	bl	8003b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007d62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d70:	2300      	movs	r3, #0
 8007d72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007d74:	2309      	movs	r3, #9
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	480c      	ldr	r0, [pc, #48]	; (8007db0 <HAL_LTDC_MspInit+0x220>)
 8007d80:	f7fb feda 	bl	8003b38 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8007d84:	2200      	movs	r2, #0
 8007d86:	2105      	movs	r1, #5
 8007d88:	2058      	movs	r0, #88	; 0x58
 8007d8a:	f7fb f935 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007d8e:	2058      	movs	r0, #88	; 0x58
 8007d90:	f7fb f94e 	bl	8003030 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007d94:	bf00      	nop
 8007d96:	3738      	adds	r7, #56	; 0x38
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40016800 	.word	0x40016800
 8007da0:	40023800 	.word	0x40023800
 8007da4:	40021400 	.word	0x40021400
 8007da8:	40020000 	.word	0x40020000
 8007dac:	40020400 	.word	0x40020400
 8007db0:	40021800 	.word	0x40021800
 8007db4:	40020800 	.word	0x40020800
 8007db8:	40020c00 	.word	0x40020c00

08007dbc <spi5_sendrecv>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi5_sendrecv(uint8_t byte)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t answer;

	HAL_SPI_TransmitReceive(&hspi5, &byte, &answer, 1, HAL_MAX_DELAY);
 8007dc6:	f107 020f 	add.w	r2, r7, #15
 8007dca:	1df9      	adds	r1, r7, #7
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4803      	ldr	r0, [pc, #12]	; (8007de4 <spi5_sendrecv+0x28>)
 8007dd6:	f7fe f86f 	bl	8005eb8 <HAL_SPI_TransmitReceive>

	return answer;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000514 	.word	0x20000514

08007de8 <SPI5_read>:

uint8_t SPI5_read(uint8_t address)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
	uint8_t dane;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8007df2:	2200      	movs	r2, #0
 8007df4:	2102      	movs	r1, #2
 8007df6:	480c      	ldr	r0, [pc, #48]	; (8007e28 <SPI5_read+0x40>)
 8007df8:	f7fc f96c 	bl	80040d4 <HAL_GPIO_WritePin>
	spi5_sendrecv(address | 0x80);
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ffd9 	bl	8007dbc <spi5_sendrecv>
	dane = spi5_sendrecv(0xFF);
 8007e0a:	20ff      	movs	r0, #255	; 0xff
 8007e0c:	f7ff ffd6 	bl	8007dbc <spi5_sendrecv>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8007e14:	2201      	movs	r2, #1
 8007e16:	2102      	movs	r1, #2
 8007e18:	4803      	ldr	r0, [pc, #12]	; (8007e28 <SPI5_read+0x40>)
 8007e1a:	f7fc f95b 	bl	80040d4 <HAL_GPIO_WritePin>

	return dane;
 8007e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40020800 	.word	0x40020800

08007e2c <OurL3GD20_Read>:
	//Everything OK
	return 0;
}

void OurL3GD20_Read()
{
 8007e2c:	b590      	push	{r4, r7, lr}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
	float s;
	short temp1, temp2, temp3;

	// Read X axis

	temp1 = (SPI5_read(0x28) | SPI5_read(0x29) << 8);
 8007e32:	2028      	movs	r0, #40	; 0x28
 8007e34:	f7ff ffd8 	bl	8007de8 <SPI5_read>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	b21c      	sxth	r4, r3
 8007e3c:	2029      	movs	r0, #41	; 0x29
 8007e3e:	f7ff ffd3 	bl	8007de8 <SPI5_read>
 8007e42:	4603      	mov	r3, r0
 8007e44:	021b      	lsls	r3, r3, #8
 8007e46:	b21b      	sxth	r3, r3
 8007e48:	4323      	orrs	r3, r4
 8007e4a:	82fb      	strh	r3, [r7, #22]
	temp2 = (SPI5_read(0x2A) | SPI5_read(0x2B) << 8);
 8007e4c:	202a      	movs	r0, #42	; 0x2a
 8007e4e:	f7ff ffcb 	bl	8007de8 <SPI5_read>
 8007e52:	4603      	mov	r3, r0
 8007e54:	b21c      	sxth	r4, r3
 8007e56:	202b      	movs	r0, #43	; 0x2b
 8007e58:	f7ff ffc6 	bl	8007de8 <SPI5_read>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	021b      	lsls	r3, r3, #8
 8007e60:	b21b      	sxth	r3, r3
 8007e62:	4323      	orrs	r3, r4
 8007e64:	82bb      	strh	r3, [r7, #20]
	temp3 = (SPI5_read(0x2C) | SPI5_read(0x2D) << 8);
 8007e66:	202c      	movs	r0, #44	; 0x2c
 8007e68:	f7ff ffbe 	bl	8007de8 <SPI5_read>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	b21c      	sxth	r4, r3
 8007e70:	202d      	movs	r0, #45	; 0x2d
 8007e72:	f7ff ffb9 	bl	8007de8 <SPI5_read>
 8007e76:	4603      	mov	r3, r0
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	b21b      	sxth	r3, r3
 8007e7c:	4323      	orrs	r3, r4
 8007e7e:	827b      	strh	r3, [r7, #18]

	// Sensitivity at 250 range = 8.75 mdps/digit
	s = 8.75 * 0.001;
 8007e80:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <OurL3GD20_Read+0xcc>)
 8007e82:	60fb      	str	r3, [r7, #12]

	DataNow.OsX = (short) ((float) temp1 * s);
 8007e84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007e88:	ee07 3a90 	vmov	s15, r3
 8007e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007e9c:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ea0:	88bb      	ldrh	r3, [r7, #4]
 8007ea2:	b21a      	sxth	r2, r3
 8007ea4:	4b15      	ldr	r3, [pc, #84]	; (8007efc <OurL3GD20_Read+0xd0>)
 8007ea6:	801a      	strh	r2, [r3, #0]
	DataNow.OsY = (short) ((float) temp2 * s);
 8007ea8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007eac:	ee07 3a90 	vmov	s15, r3
 8007eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8007eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec0:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ec4:	88bb      	ldrh	r3, [r7, #4]
 8007ec6:	b21a      	sxth	r2, r3
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <OurL3GD20_Read+0xd0>)
 8007eca:	805a      	strh	r2, [r3, #2]
	DataNow.OsZ = (short) ((float) temp3 * s);
 8007ecc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ed8:	edd7 7a03 	vldr	s15, [r7, #12]
 8007edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ee4:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ee8:	88bb      	ldrh	r3, [r7, #4]
 8007eea:	b21a      	sxth	r2, r3
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <OurL3GD20_Read+0xd0>)
 8007eee:	809a      	strh	r2, [r3, #4]

}
 8007ef0:	bf00      	nop
 8007ef2:	371c      	adds	r7, #28
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd90      	pop	{r4, r7, pc}
 8007ef8:	3c0f5c29 	.word	0x3c0f5c29
 8007efc:	200005c4 	.word	0x200005c4

08007f00 <send_char>:

void send_char(char c)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1000);
 8007f0a:	1df9      	adds	r1, r7, #7
 8007f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f10:	2201      	movs	r2, #1
 8007f12:	4803      	ldr	r0, [pc, #12]	; (8007f20 <send_char+0x20>)
 8007f14:	f7fe fe52 	bl	8006bbc <HAL_UART_Transmit>
}
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000738 	.word	0x20000738

08007f24 <__io_putchar>:

int __io_putchar(int ch)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
	send_char(ch);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff ffe5 	bl	8007f00 <send_char>
	return ch;
 8007f36:	687b      	ldr	r3, [r7, #4]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007f40:	b5b0      	push	{r4, r5, r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8007f46:	f7fa ff3d 	bl	8002dc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007f4a:	f000 fce7 	bl	800891c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007f4e:	f7ff fbd9 	bl	8007704 <MX_GPIO_Init>
	MX_CRC_Init();
 8007f52:	f7ff fa61 	bl	8007418 <MX_CRC_Init>
	MX_DMA2D_Init();
 8007f56:	f7ff fa95 	bl	8007484 <MX_DMA2D_Init>
	MX_FMC_Init();
 8007f5a:	f7ff faed 	bl	8007538 <MX_FMC_Init>
	MX_LTDC_Init();
 8007f5e:	f7ff fd97 	bl	8007a90 <MX_LTDC_Init>
	MX_SPI5_Init();
 8007f62:	f002 fa21 	bl	800a3a8 <MX_SPI5_Init>
	MX_TIM1_Init();
 8007f66:	f002 fc6f 	bl	800a848 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8007f6a:	f002 fd71 	bl	800aa50 <MX_USART1_UART_Init>
	MX_I2C3_Init();
 8007f6e:	f7ff fce5 	bl	800793c <MX_I2C3_Init>
	MX_TIM10_Init();
 8007f72:	f002 fcb9 	bl	800a8e8 <MX_TIM10_Init>
	MX_TIM11_Init();
 8007f76:	f002 fcdb 	bl	800a930 <MX_TIM11_Init>
	MX_GFXSIMULATOR_Init();
 8007f7a:	f7ff fbbb 	bl	80076f4 <MX_GFXSIMULATOR_Init>
	/* USER CODE BEGIN 2 */

	__HAL_SPI_ENABLE(&hspi5);
 8007f7e:	4bac      	ldr	r3, [pc, #688]	; (8008230 <main+0x2f0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4aab      	ldr	r2, [pc, #684]	; (8008230 <main+0x2f0>)
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f8c:	601a      	str	r2, [r3, #0]

	//Do testu*************
	LicznikPomocniczy = 0;
 8007f8e:	4ba9      	ldr	r3, [pc, #676]	; (8008234 <main+0x2f4>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	701a      	strb	r2, [r3, #0]
	LicznikPomocniczyRomberg = 0;
 8007f94:	4ba8      	ldr	r3, [pc, #672]	; (8008238 <main+0x2f8>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
	//*********************

	//Poczatkowy stan gry**
	StanGry = Menu;
 8007f9a:	4ba8      	ldr	r3, [pc, #672]	; (800823c <main+0x2fc>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
	StanMenu = NowaGra;
 8007fa0:	4ba7      	ldr	r3, [pc, #668]	; (8008240 <main+0x300>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
	ZmienionoStanMenu = 1;
 8007fa6:	4ba7      	ldr	r3, [pc, #668]	; (8008244 <main+0x304>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
	ZmienionoStanPoziomow = 1;
 8007fac:	4ba6      	ldr	r3, [pc, #664]	; (8008248 <main+0x308>)
 8007fae:	2201      	movs	r2, #1
 8007fb0:	701a      	strb	r2, [r3, #0]
	WybranyPoziom = 0;
 8007fb2:	4ba6      	ldr	r3, [pc, #664]	; (800824c <main+0x30c>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	701a      	strb	r2, [r3, #0]
	RozpoczetoNowaGre = 0;
 8007fb8:	4ba5      	ldr	r3, [pc, #660]	; (8008250 <main+0x310>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
	//*********************

	OpoznienieDodatniX = 0;
 8007fbe:	4ba5      	ldr	r3, [pc, #660]	; (8008254 <main+0x314>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	701a      	strb	r2, [r3, #0]
	OpoznienieDodatniY = 0;
 8007fc4:	4ba4      	ldr	r3, [pc, #656]	; (8008258 <main+0x318>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	701a      	strb	r2, [r3, #0]
	OpoznienieUjemnyX = 0;
 8007fca:	4ba4      	ldr	r3, [pc, #656]	; (800825c <main+0x31c>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	701a      	strb	r2, [r3, #0]
	OpoznienieUjemnyY = 0;
 8007fd0:	4ba3      	ldr	r3, [pc, #652]	; (8008260 <main+0x320>)
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	701a      	strb	r2, [r3, #0]

	Animacja = 0;
 8007fd6:	4ba3      	ldr	r3, [pc, #652]	; (8008264 <main+0x324>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
	Direction = 1;
 8007fdc:	4ba2      	ldr	r3, [pc, #648]	; (8008268 <main+0x328>)
 8007fde:	2201      	movs	r2, #1
 8007fe0:	701a      	strb	r2, [r3, #0]
	X = 120;
 8007fe2:	4ba2      	ldr	r3, [pc, #648]	; (800826c <main+0x32c>)
 8007fe4:	2278      	movs	r2, #120	; 0x78
 8007fe6:	801a      	strh	r2, [r3, #0]
	Y = 170;
 8007fe8:	4ba1      	ldr	r3, [pc, #644]	; (8008270 <main+0x330>)
 8007fea:	22aa      	movs	r2, #170	; 0xaa
 8007fec:	801a      	strh	r2, [r3, #0]
	dT = 0.001;
 8007fee:	4ba1      	ldr	r3, [pc, #644]	; (8008274 <main+0x334>)
 8007ff0:	4aa1      	ldr	r2, [pc, #644]	; (8008278 <main+0x338>)
 8007ff2:	601a      	str	r2, [r3, #0]
	fMovedX = 0;
 8007ff4:	4ba1      	ldr	r3, [pc, #644]	; (800827c <main+0x33c>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
	fMovedY = 0;
 8007ffa:	4ba1      	ldr	r3, [pc, #644]	; (8008280 <main+0x340>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
	ResetTimeX = 0;
 8008000:	4ba0      	ldr	r3, [pc, #640]	; (8008284 <main+0x344>)
 8008002:	2200      	movs	r2, #0
 8008004:	801a      	strh	r2, [r3, #0]
	ResetTimeY = 0;
 8008006:	4ba0      	ldr	r3, [pc, #640]	; (8008288 <main+0x348>)
 8008008:	2200      	movs	r2, #0
 800800a:	801a      	strh	r2, [r3, #0]

	BSP_LCD_Init();
 800800c:	f7f9 fd50 	bl	8001ab0 <BSP_LCD_Init>
	//BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER+1024*1024*4);
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 8008010:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8008014:	2000      	movs	r0, #0
 8008016:	f7f9 fdcd 	bl	8001bb4 <BSP_LCD_LayerDefaultInit>

	BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 800801a:	2000      	movs	r0, #0
 800801c:	f7f9 fe2e 	bl	8001c7c <BSP_LCD_SelectLayer>

	BSP_LCD_DisplayOn();
 8008020:	f7fa fac4 	bl	80025ac <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008024:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008028:	f7f9 fe6a 	bl	8001d00 <BSP_LCD_Clear>
//	//*********************************

	//BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
	//BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello");

	HAL_Delay(1000);
 800802c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008030:	f7fa ff0a 	bl	8002e48 <HAL_Delay>
	BSP_LCD_ClearStringLine(5);
 8008034:	2005      	movs	r0, #5
 8008036:	f7f9 fe8b 	bl	8001d50 <BSP_LCD_ClearStringLine>

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800803a:	f04f 30ff 	mov.w	r0, #4294967295
 800803e:	f7f9 fe5f 	bl	8001d00 <BSP_LCD_Clear>
//	BSP_LCD_FillRect(0, 305, 240, 15);
//	BSP_LCD_FillRect(0, 15, 15, 290);
//	BSP_LCD_FillRect(225, 15, 15, 290);
	//*********************************

	if(BSP_GYRO_Init() == GYRO_ERROR)
 8008042:	f7f9 fccb 	bl	80019dc <BSP_GYRO_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b01      	cmp	r3, #1
 800804a:	d106      	bne.n	800805a <main+0x11a>
	{
		printf("Nie udalo sie polaczyc z zyroskopem");
 800804c:	488f      	ldr	r0, [pc, #572]	; (800828c <main+0x34c>)
 800804e:	f002 fdcd 	bl	800abec <iprintf>
		HAL_Delay(10000);
 8008052:	f242 7010 	movw	r0, #10000	; 0x2710
 8008056:	f7fa fef7 	bl	8002e48 <HAL_Delay>
	}


	czasZmiany = 0;
 800805a:	4b8d      	ldr	r3, [pc, #564]	; (8008290 <main+0x350>)
 800805c:	2200      	movs	r2, #0
 800805e:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8008060:	488c      	ldr	r0, [pc, #560]	; (8008294 <main+0x354>)
 8008062:	f7fe f9bf 	bl	80063e4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8008066:	488c      	ldr	r0, [pc, #560]	; (8008298 <main+0x358>)
 8008068:	f7fe f9bc 	bl	80063e4 <HAL_TIM_Base_Start_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GetTick() - czasZmiany > 2000)
 800806c:	f7fa fee0 	bl	8002e30 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	4b87      	ldr	r3, [pc, #540]	; (8008290 <main+0x350>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800807c:	d935      	bls.n	80080ea <main+0x1aa>
		{
			if (StanGry == Menu)
 800807e:	4b6f      	ldr	r3, [pc, #444]	; (800823c <main+0x2fc>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b00      	cmp	r3, #0
 8008086:	d113      	bne.n	80080b0 <main+0x170>
			{

				StanMenu = (StanMenu + 1) % 3;
 8008088:	4b6d      	ldr	r3, [pc, #436]	; (8008240 <main+0x300>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	b2db      	uxtb	r3, r3
 800808e:	1c5a      	adds	r2, r3, #1
 8008090:	4b82      	ldr	r3, [pc, #520]	; (800829c <main+0x35c>)
 8008092:	fb83 3102 	smull	r3, r1, r3, r2
 8008096:	17d3      	asrs	r3, r2, #31
 8008098:	1ac9      	subs	r1, r1, r3
 800809a:	460b      	mov	r3, r1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	440b      	add	r3, r1
 80080a0:	1ad1      	subs	r1, r2, r3
 80080a2:	b2ca      	uxtb	r2, r1
 80080a4:	4b66      	ldr	r3, [pc, #408]	; (8008240 <main+0x300>)
 80080a6:	701a      	strb	r2, [r3, #0]
				ZmienionoStanMenu = 1;
 80080a8:	4b66      	ldr	r3, [pc, #408]	; (8008244 <main+0x304>)
 80080aa:	2201      	movs	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e017      	b.n	80080e0 <main+0x1a0>

			}
			else if (StanGry == WyborPoziomu)
 80080b0:	4b62      	ldr	r3, [pc, #392]	; (800823c <main+0x2fc>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d112      	bne.n	80080e0 <main+0x1a0>
			{
				WybranyPoziom = (WybranyPoziom + 1) % 3;
 80080ba:	4b64      	ldr	r3, [pc, #400]	; (800824c <main+0x30c>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	4b76      	ldr	r3, [pc, #472]	; (800829c <main+0x35c>)
 80080c4:	fb83 3102 	smull	r3, r1, r3, r2
 80080c8:	17d3      	asrs	r3, r2, #31
 80080ca:	1ac9      	subs	r1, r1, r3
 80080cc:	460b      	mov	r3, r1
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	440b      	add	r3, r1
 80080d2:	1ad1      	subs	r1, r2, r3
 80080d4:	b2ca      	uxtb	r2, r1
 80080d6:	4b5d      	ldr	r3, [pc, #372]	; (800824c <main+0x30c>)
 80080d8:	701a      	strb	r2, [r3, #0]
				ZmienionoStanPoziomow = 1;
 80080da:	4b5b      	ldr	r3, [pc, #364]	; (8008248 <main+0x308>)
 80080dc:	2201      	movs	r2, #1
 80080de:	701a      	strb	r2, [r3, #0]
			}

			czasZmiany = HAL_GetTick();
 80080e0:	f7fa fea6 	bl	8002e30 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	4b6a      	ldr	r3, [pc, #424]	; (8008290 <main+0x350>)
 80080e8:	601a      	str	r2, [r3, #0]
		}
		//Sprawdzanie stanu przycisku*****************
		OdczytanyStanPrzycisku = HAL_GPIO_ReadPin(BB_GPIO_Port, BB_Pin);
 80080ea:	2101      	movs	r1, #1
 80080ec:	486c      	ldr	r0, [pc, #432]	; (80082a0 <main+0x360>)
 80080ee:	f7fb ffd9 	bl	80040a4 <HAL_GPIO_ReadPin>
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]

		if (OdczytanyStanPrzycisku != PoprzedniStanPrzycisku)
 80080f6:	4b6b      	ldr	r3, [pc, #428]	; (80082a4 <main+0x364>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	79fa      	ldrb	r2, [r7, #7]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d004      	beq.n	800810a <main+0x1ca>
		{
			PoprzedniCzasPrzycisku = HAL_GetTick();
 8008100:	f7fa fe96 	bl	8002e30 <HAL_GetTick>
 8008104:	4602      	mov	r2, r0
 8008106:	4b68      	ldr	r3, [pc, #416]	; (80082a8 <main+0x368>)
 8008108:	601a      	str	r2, [r3, #0]
		}

		if ((HAL_GetTick() - PoprzedniCzasPrzycisku) > 10)
 800810a:	f7fa fe91 	bl	8002e30 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	4b65      	ldr	r3, [pc, #404]	; (80082a8 <main+0x368>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b0a      	cmp	r3, #10
 8008118:	d946      	bls.n	80081a8 <main+0x268>
		{
			if (OdczytanyStanPrzycisku != StanPrzycisku)
 800811a:	4b64      	ldr	r3, [pc, #400]	; (80082ac <main+0x36c>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	79fa      	ldrb	r2, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d041      	beq.n	80081a8 <main+0x268>
			{
				StanPrzycisku = OdczytanyStanPrzycisku;
 8008124:	4a61      	ldr	r2, [pc, #388]	; (80082ac <main+0x36c>)
 8008126:	79fb      	ldrb	r3, [r7, #7]
 8008128:	7013      	strb	r3, [r2, #0]
//					}
				//}

				//Przetestowac !!!!!!!!!!!!!!!!!
				//Jezeli przytrzymamy przycisk dluzej nastapi przejscie miedzy gra, a menu
				if (StanPrzycisku == GPIO_PIN_SET)
 800812a:	4b60      	ldr	r3, [pc, #384]	; (80082ac <main+0x36c>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d13a      	bne.n	80081a8 <main+0x268>
				{

					if (StanGry == Menu && StanMenu == NowaGra)
 8008132:	4b42      	ldr	r3, [pc, #264]	; (800823c <main+0x2fc>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10b      	bne.n	8008154 <main+0x214>
 800813c:	4b40      	ldr	r3, [pc, #256]	; (8008240 <main+0x300>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <main+0x214>
					{
						StanGry = Gra;
 8008146:	4b3d      	ldr	r3, [pc, #244]	; (800823c <main+0x2fc>)
 8008148:	2201      	movs	r2, #1
 800814a:	701a      	strb	r2, [r3, #0]
						RozpoczetoNowaGre = 1;
 800814c:	4b40      	ldr	r3, [pc, #256]	; (8008250 <main+0x310>)
 800814e:	2201      	movs	r2, #1
 8008150:	701a      	strb	r2, [r3, #0]
 8008152:	e024      	b.n	800819e <main+0x25e>

					}
					else if (StanGry == Menu && StanMenu == ZmienPoziom)
 8008154:	4b39      	ldr	r3, [pc, #228]	; (800823c <main+0x2fc>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10e      	bne.n	800817c <main+0x23c>
 800815e:	4b38      	ldr	r3, [pc, #224]	; (8008240 <main+0x300>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	d109      	bne.n	800817c <main+0x23c>
					{
						StanGry = WyborPoziomu;
 8008168:	4b34      	ldr	r3, [pc, #208]	; (800823c <main+0x2fc>)
 800816a:	2202      	movs	r2, #2
 800816c:	701a      	strb	r2, [r3, #0]
						WybranyPoziom = 0;
 800816e:	4b37      	ldr	r3, [pc, #220]	; (800824c <main+0x30c>)
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]
						ZmienionoStanPoziomow = 1;
 8008174:	4b34      	ldr	r3, [pc, #208]	; (8008248 <main+0x308>)
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	e010      	b.n	800819e <main+0x25e>

					}
					else if (StanGry == WyborPoziomu)
 800817c:	4b2f      	ldr	r3, [pc, #188]	; (800823c <main+0x2fc>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d103      	bne.n	800818e <main+0x24e>
					{
						StanGry = Menu;
 8008186:	4b2d      	ldr	r3, [pc, #180]	; (800823c <main+0x2fc>)
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e007      	b.n	800819e <main+0x25e>

					}
					else if (StanGry == Gra)
 800818e:	4b2b      	ldr	r3, [pc, #172]	; (800823c <main+0x2fc>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	d102      	bne.n	800819e <main+0x25e>
					{
						StanGry = Menu;
 8008198:	4b28      	ldr	r3, [pc, #160]	; (800823c <main+0x2fc>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
					}

					PoprzedniCzasPrzycisku = HAL_GetTick();
 800819e:	f7fa fe47 	bl	8002e30 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	4b40      	ldr	r3, [pc, #256]	; (80082a8 <main+0x368>)
 80081a6:	601a      	str	r2, [r3, #0]

				}
			}
		}

		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;
 80081a8:	4a3e      	ldr	r2, [pc, #248]	; (80082a4 <main+0x364>)
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	7013      	strb	r3, [r2, #0]

		//Koniec sprawdzania stanu przycisku**********

		//Petla gry***********************************

		if (StanGry == Menu)
 80081ae:	4b23      	ldr	r3, [pc, #140]	; (800823c <main+0x2fc>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d124      	bne.n	8008202 <main+0x2c2>
		{
			if (ZmienionoStanMenu == 1)
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <main+0x304>)
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f040 834e 	bne.w	8008860 <main+0x920>
			{
				switch (StanMenu)
 80081c4:	4b1e      	ldr	r3, [pc, #120]	; (8008240 <main+0x300>)
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d009      	beq.n	80081e2 <main+0x2a2>
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d00d      	beq.n	80081ee <main+0x2ae>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d111      	bne.n	80081fa <main+0x2ba>
				{
				case NowaGra:
					BSP_LCD_DrawBitmap(0, 0,
 80081d6:	4a36      	ldr	r2, [pc, #216]	; (80082b0 <main+0x370>)
 80081d8:	2100      	movs	r1, #0
 80081da:	2000      	movs	r0, #0
 80081dc:	f7fa f858 	bl	8002290 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_nowagra);
					break;
 80081e0:	e00b      	b.n	80081fa <main+0x2ba>

				case KontynuujGre:
					BSP_LCD_DrawBitmap(0, 0,
 80081e2:	4a34      	ldr	r2, [pc, #208]	; (80082b4 <main+0x374>)
 80081e4:	2100      	movs	r1, #0
 80081e6:	2000      	movs	r0, #0
 80081e8:	f7fa f852 	bl	8002290 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_kontynuuj);
					break;
 80081ec:	e005      	b.n	80081fa <main+0x2ba>

				case ZmienPoziom:

					BSP_LCD_DrawBitmap(0, 0,
 80081ee:	4a32      	ldr	r2, [pc, #200]	; (80082b8 <main+0x378>)
 80081f0:	2100      	movs	r1, #0
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7fa f84c 	bl	8002290 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_poziomy);
					break;
 80081f8:	bf00      	nop
				}

				ZmienionoStanMenu = 0;
 80081fa:	4b12      	ldr	r3, [pc, #72]	; (8008244 <main+0x304>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	701a      	strb	r2, [r3, #0]
 8008200:	e32e      	b.n	8008860 <main+0x920>
			}

		}
		else if (StanGry == WyborPoziomu)
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <main+0x2fc>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b02      	cmp	r3, #2
 800820a:	f040 80ed 	bne.w	80083e8 <main+0x4a8>
		{
			if (ZmienionoStanPoziomow == 1)
 800820e:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <main+0x308>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b01      	cmp	r3, #1
 8008216:	f040 8323 	bne.w	8008860 <main+0x920>
			{
				switch (WybranyPoziom)
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <main+0x30c>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	2b01      	cmp	r3, #1
 8008222:	d079      	beq.n	8008318 <main+0x3d8>
 8008224:	2b02      	cmp	r3, #2
 8008226:	f000 80a9 	beq.w	800837c <main+0x43c>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d046      	beq.n	80082bc <main+0x37c>
					BSP_LCD_FillRect(160, 20, 60, 60);
					BSP_LCD_DisplayChar(170, 30, 51);
					break;

				default:
					break;
 800822e:	e0d7      	b.n	80083e0 <main+0x4a0>
 8008230:	20000514 	.word	0x20000514
 8008234:	20000600 	.word	0x20000600
 8008238:	2000057c 	.word	0x2000057c
 800823c:	20000611 	.word	0x20000611
 8008240:	200005ed 	.word	0x200005ed
 8008244:	20000612 	.word	0x20000612
 8008248:	20000597 	.word	0x20000597
 800824c:	20000626 	.word	0x20000626
 8008250:	20000608 	.word	0x20000608
 8008254:	2000056c 	.word	0x2000056c
 8008258:	200005a4 	.word	0x200005a4
 800825c:	20000596 	.word	0x20000596
 8008260:	200005f4 	.word	0x200005f4
 8008264:	200005ec 	.word	0x200005ec
 8008268:	200004ee 	.word	0x200004ee
 800826c:	20000634 	.word	0x20000634
 8008270:	200005b8 	.word	0x200005b8
 8008274:	2000058c 	.word	0x2000058c
 8008278:	3a83126f 	.word	0x3a83126f
 800827c:	200005d4 	.word	0x200005d4
 8008280:	20000610 	.word	0x20000610
 8008284:	200005ca 	.word	0x200005ca
 8008288:	20000624 	.word	0x20000624
 800828c:	0800b9f4 	.word	0x0800b9f4
 8008290:	200005fc 	.word	0x200005fc
 8008294:	20000678 	.word	0x20000678
 8008298:	200006b8 	.word	0x200006b8
 800829c:	55555556 	.word	0x55555556
 80082a0:	40020000 	.word	0x40020000
 80082a4:	200002b0 	.word	0x200002b0
 80082a8:	20000570 	.word	0x20000570
 80082ac:	20000574 	.word	0x20000574
 80082b0:	08032d68 	.word	0x08032d68
 80082b4:	0800d548 	.word	0x0800d548
 80082b8:	08058588 	.word	0x08058588
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 80082bc:	f04f 30ff 	mov.w	r0, #4294967295
 80082c0:	f7f9 fd1e 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80082c4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80082c8:	f7f9 fce8 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 80082cc:	233c      	movs	r3, #60	; 0x3c
 80082ce:	223c      	movs	r2, #60	; 0x3c
 80082d0:	2114      	movs	r1, #20
 80082d2:	2014      	movs	r0, #20
 80082d4:	f7fa f870 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 80082d8:	2231      	movs	r2, #49	; 0x31
 80082da:	211e      	movs	r1, #30
 80082dc:	201e      	movs	r0, #30
 80082de:	f7f9 fd9b 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80082e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80082e6:	f7f9 fcd9 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 80082ea:	233c      	movs	r3, #60	; 0x3c
 80082ec:	223c      	movs	r2, #60	; 0x3c
 80082ee:	2114      	movs	r1, #20
 80082f0:	205a      	movs	r0, #90	; 0x5a
 80082f2:	f7fa f861 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 80082f6:	2232      	movs	r2, #50	; 0x32
 80082f8:	211e      	movs	r1, #30
 80082fa:	2064      	movs	r0, #100	; 0x64
 80082fc:	f7f9 fd8c 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8008300:	233c      	movs	r3, #60	; 0x3c
 8008302:	223c      	movs	r2, #60	; 0x3c
 8008304:	2114      	movs	r1, #20
 8008306:	20a0      	movs	r0, #160	; 0xa0
 8008308:	f7fa f856 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 800830c:	2233      	movs	r2, #51	; 0x33
 800830e:	211e      	movs	r1, #30
 8008310:	20aa      	movs	r0, #170	; 0xaa
 8008312:	f7f9 fd81 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 8008316:	e063      	b.n	80083e0 <main+0x4a0>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	f7f9 fcf0 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008320:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008324:	f7f9 fcba 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8008328:	233c      	movs	r3, #60	; 0x3c
 800832a:	223c      	movs	r2, #60	; 0x3c
 800832c:	2114      	movs	r1, #20
 800832e:	2014      	movs	r0, #20
 8008330:	f7fa f842 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8008334:	2231      	movs	r2, #49	; 0x31
 8008336:	211e      	movs	r1, #30
 8008338:	201e      	movs	r0, #30
 800833a:	f7f9 fd6d 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800833e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008342:	f7f9 fcab 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8008346:	233c      	movs	r3, #60	; 0x3c
 8008348:	223c      	movs	r2, #60	; 0x3c
 800834a:	2114      	movs	r1, #20
 800834c:	205a      	movs	r0, #90	; 0x5a
 800834e:	f7fa f833 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8008352:	2232      	movs	r2, #50	; 0x32
 8008354:	211e      	movs	r1, #30
 8008356:	2064      	movs	r0, #100	; 0x64
 8008358:	f7f9 fd5e 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800835c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008360:	f7f9 fc9c 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8008364:	233c      	movs	r3, #60	; 0x3c
 8008366:	223c      	movs	r2, #60	; 0x3c
 8008368:	2114      	movs	r1, #20
 800836a:	20a0      	movs	r0, #160	; 0xa0
 800836c:	f7fa f824 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 8008370:	2233      	movs	r2, #51	; 0x33
 8008372:	211e      	movs	r1, #30
 8008374:	20aa      	movs	r0, #170	; 0xaa
 8008376:	f7f9 fd4f 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 800837a:	e031      	b.n	80083e0 <main+0x4a0>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	f7f9 fcbe 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008384:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008388:	f7f9 fc88 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 800838c:	233c      	movs	r3, #60	; 0x3c
 800838e:	223c      	movs	r2, #60	; 0x3c
 8008390:	2114      	movs	r1, #20
 8008392:	2014      	movs	r0, #20
 8008394:	f7fa f810 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8008398:	2231      	movs	r2, #49	; 0x31
 800839a:	211e      	movs	r1, #30
 800839c:	201e      	movs	r0, #30
 800839e:	f7f9 fd3b 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80083a2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80083a6:	f7f9 fc79 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 80083aa:	233c      	movs	r3, #60	; 0x3c
 80083ac:	223c      	movs	r2, #60	; 0x3c
 80083ae:	2114      	movs	r1, #20
 80083b0:	205a      	movs	r0, #90	; 0x5a
 80083b2:	f7fa f801 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 80083b6:	2232      	movs	r2, #50	; 0x32
 80083b8:	211e      	movs	r1, #30
 80083ba:	2064      	movs	r0, #100	; 0x64
 80083bc:	f7f9 fd2c 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80083c0:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80083c4:	f7f9 fc6a 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 80083c8:	233c      	movs	r3, #60	; 0x3c
 80083ca:	223c      	movs	r2, #60	; 0x3c
 80083cc:	2114      	movs	r1, #20
 80083ce:	20a0      	movs	r0, #160	; 0xa0
 80083d0:	f7f9 fff2 	bl	80023b8 <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 80083d4:	2233      	movs	r2, #51	; 0x33
 80083d6:	211e      	movs	r1, #30
 80083d8:	20aa      	movs	r0, #170	; 0xaa
 80083da:	f7f9 fd1d 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 80083de:	bf00      	nop
				}

				ZmienionoStanPoziomow = 0;
 80083e0:	4b9f      	ldr	r3, [pc, #636]	; (8008660 <main+0x720>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	701a      	strb	r2, [r3, #0]
 80083e6:	e23b      	b.n	8008860 <main+0x920>
			}

		}
		else if (StanGry == Gra)
 80083e8:	4b9e      	ldr	r3, [pc, #632]	; (8008664 <main+0x724>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	f040 8236 	bne.w	8008860 <main+0x920>
		{
			if (WybranyPoziom == 0 && RozpoczetoNowaGre == 1)
 80083f4:	4b9c      	ldr	r3, [pc, #624]	; (8008668 <main+0x728>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 8109 	bne.w	8008612 <main+0x6d2>
 8008400:	4b9a      	ldr	r3, [pc, #616]	; (800866c <main+0x72c>)
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b01      	cmp	r3, #1
 8008408:	f040 8103 	bne.w	8008612 <main+0x6d2>
			{
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 800840c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008410:	f7f9 fc76 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008414:	f04f 30ff 	mov.w	r0, #4294967295
 8008418:	f7f9 fc40 	bl	8001c9c <BSP_LCD_SetTextColor>

				for(uint32_t i = 1; i <= IloscPunktowSciezki1; i++)
 800841c:	2301      	movs	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e0b0      	b.n	8008584 <main+0x644>
				{
					if(PunktySciezki1[i].SasiedniePunkty[0] != 0)
 8008422:	4993      	ldr	r1, [pc, #588]	; (8008670 <main+0x730>)
 8008424:	69fa      	ldr	r2, [r7, #28]
 8008426:	4613      	mov	r3, r2
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4413      	add	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	440b      	add	r3, r1
 8008430:	3308      	adds	r3, #8
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d04b      	beq.n	80084d0 <main+0x590>
					{
						for(int j = -6; j < 7; j++)
 8008438:	f06f 0305 	mvn.w	r3, #5
 800843c:	61bb      	str	r3, [r7, #24]
 800843e:	e044      	b.n	80084ca <main+0x58a>
						{
							BSP_LCD_DrawLine(PunktySciezki1[i].X-6, PunktySciezki1[i].Y+j, PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].X+6, PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].Y+j);
 8008440:	498b      	ldr	r1, [pc, #556]	; (8008670 <main+0x730>)
 8008442:	69fa      	ldr	r2, [r7, #28]
 8008444:	4613      	mov	r3, r2
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	4413      	add	r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	440b      	add	r3, r1
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	3b06      	subs	r3, #6
 8008452:	b298      	uxth	r0, r3
 8008454:	4986      	ldr	r1, [pc, #536]	; (8008670 <main+0x730>)
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	4613      	mov	r3, r2
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	4413      	add	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	440b      	add	r3, r1
 8008462:	3302      	adds	r3, #2
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	b29b      	uxth	r3, r3
 800846a:	4413      	add	r3, r2
 800846c:	b29c      	uxth	r4, r3
 800846e:	4980      	ldr	r1, [pc, #512]	; (8008670 <main+0x730>)
 8008470:	69fa      	ldr	r2, [r7, #28]
 8008472:	4613      	mov	r3, r2
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	4413      	add	r3, r2
 8008478:	00db      	lsls	r3, r3, #3
 800847a:	440b      	add	r3, r1
 800847c:	3308      	adds	r3, #8
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	497b      	ldr	r1, [pc, #492]	; (8008670 <main+0x730>)
 8008482:	4613      	mov	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	4413      	add	r3, r2
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	440b      	add	r3, r1
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	3306      	adds	r3, #6
 8008490:	b29d      	uxth	r5, r3
 8008492:	4977      	ldr	r1, [pc, #476]	; (8008670 <main+0x730>)
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	4613      	mov	r3, r2
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4413      	add	r3, r2
 800849c:	00db      	lsls	r3, r3, #3
 800849e:	440b      	add	r3, r1
 80084a0:	3308      	adds	r3, #8
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4972      	ldr	r1, [pc, #456]	; (8008670 <main+0x730>)
 80084a6:	4613      	mov	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	4413      	add	r3, r2
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	440b      	add	r3, r1
 80084b0:	3302      	adds	r3, #2
 80084b2:	881a      	ldrh	r2, [r3, #0]
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	462a      	mov	r2, r5
 80084be:	4621      	mov	r1, r4
 80084c0:	f7f9 fd2c 	bl	8001f1c <BSP_LCD_DrawLine>
						for(int j = -6; j < 7; j++)
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	3301      	adds	r3, #1
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b06      	cmp	r3, #6
 80084ce:	ddb7      	ble.n	8008440 <main+0x500>
						}

					}

					if(PunktySciezki1[i].SasiedniePunkty[2] != 0)
 80084d0:	4967      	ldr	r1, [pc, #412]	; (8008670 <main+0x730>)
 80084d2:	69fa      	ldr	r2, [r7, #28]
 80084d4:	4613      	mov	r3, r2
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	4413      	add	r3, r2
 80084da:	00db      	lsls	r3, r3, #3
 80084dc:	440b      	add	r3, r1
 80084de:	3310      	adds	r3, #16
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d04b      	beq.n	800857e <main+0x63e>
					{
						for(int j = -6; j < 7; j++)
 80084e6:	f06f 0305 	mvn.w	r3, #5
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	e044      	b.n	8008578 <main+0x638>
						{
							BSP_LCD_DrawLine(PunktySciezki1[i].X+j, PunktySciezki1[i].Y-6, PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].X+j, PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].Y+6);
 80084ee:	4960      	ldr	r1, [pc, #384]	; (8008670 <main+0x730>)
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	4613      	mov	r3, r2
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4413      	add	r3, r2
 80084f8:	00db      	lsls	r3, r3, #3
 80084fa:	440b      	add	r3, r1
 80084fc:	881a      	ldrh	r2, [r3, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	b29b      	uxth	r3, r3
 8008502:	4413      	add	r3, r2
 8008504:	b298      	uxth	r0, r3
 8008506:	495a      	ldr	r1, [pc, #360]	; (8008670 <main+0x730>)
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	4613      	mov	r3, r2
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4413      	add	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	440b      	add	r3, r1
 8008514:	3302      	adds	r3, #2
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	3b06      	subs	r3, #6
 800851a:	b29c      	uxth	r4, r3
 800851c:	4954      	ldr	r1, [pc, #336]	; (8008670 <main+0x730>)
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	4613      	mov	r3, r2
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	4413      	add	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	440b      	add	r3, r1
 800852a:	3310      	adds	r3, #16
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4950      	ldr	r1, [pc, #320]	; (8008670 <main+0x730>)
 8008530:	4613      	mov	r3, r2
 8008532:	005b      	lsls	r3, r3, #1
 8008534:	4413      	add	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	440b      	add	r3, r1
 800853a:	881a      	ldrh	r2, [r3, #0]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	b29b      	uxth	r3, r3
 8008540:	4413      	add	r3, r2
 8008542:	b29d      	uxth	r5, r3
 8008544:	494a      	ldr	r1, [pc, #296]	; (8008670 <main+0x730>)
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	4613      	mov	r3, r2
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	4413      	add	r3, r2
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	440b      	add	r3, r1
 8008552:	3310      	adds	r3, #16
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	4946      	ldr	r1, [pc, #280]	; (8008670 <main+0x730>)
 8008558:	4613      	mov	r3, r2
 800855a:	005b      	lsls	r3, r3, #1
 800855c:	4413      	add	r3, r2
 800855e:	00db      	lsls	r3, r3, #3
 8008560:	440b      	add	r3, r1
 8008562:	3302      	adds	r3, #2
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	3306      	adds	r3, #6
 8008568:	b29b      	uxth	r3, r3
 800856a:	462a      	mov	r2, r5
 800856c:	4621      	mov	r1, r4
 800856e:	f7f9 fcd5 	bl	8001f1c <BSP_LCD_DrawLine>
						for(int j = -6; j < 7; j++)
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	3301      	adds	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	2b06      	cmp	r3, #6
 800857c:	ddb7      	ble.n	80084ee <main+0x5ae>
				for(uint32_t i = 1; i <= IloscPunktowSciezki1; i++)
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	3301      	adds	r3, #1
 8008582:	61fb      	str	r3, [r7, #28]
 8008584:	220b      	movs	r2, #11
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4293      	cmp	r3, r2
 800858a:	f67f af4a 	bls.w	8008422 <main+0x4e2>

					}
				}*/
				//BSP_LCD_DrawBitmap(0, 0, (uint8_t*) image_data_mapa1);

				PozycjaNaSciezce = 1;
 800858e:	4b39      	ldr	r3, [pc, #228]	; (8008674 <main+0x734>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008594:	4838      	ldr	r0, [pc, #224]	; (8008678 <main+0x738>)
 8008596:	f7f9 fb81 	bl	8001c9c <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(PunktySciezki1[PozycjaNaSciezce].X, PunktySciezki1[PozycjaNaSciezce].Y, 5);
 800859a:	4b36      	ldr	r3, [pc, #216]	; (8008674 <main+0x734>)
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	4934      	ldr	r1, [pc, #208]	; (8008670 <main+0x730>)
 80085a0:	4613      	mov	r3, r2
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4413      	add	r3, r2
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	440b      	add	r3, r1
 80085aa:	8818      	ldrh	r0, [r3, #0]
 80085ac:	4b31      	ldr	r3, [pc, #196]	; (8008674 <main+0x734>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	492f      	ldr	r1, [pc, #188]	; (8008670 <main+0x730>)
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	440b      	add	r3, r1
 80085bc:	3302      	adds	r3, #2
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	2205      	movs	r2, #5
 80085c2:	4619      	mov	r1, r3
 80085c4:	f7f9 ff52 	bl	800246c <BSP_LCD_FillCircle>

				X = PunktySciezki1[PozycjaNaSciezce].X;
 80085c8:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <main+0x734>)
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	4928      	ldr	r1, [pc, #160]	; (8008670 <main+0x730>)
 80085ce:	4613      	mov	r3, r2
 80085d0:	005b      	lsls	r3, r3, #1
 80085d2:	4413      	add	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	440b      	add	r3, r1
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	4b28      	ldr	r3, [pc, #160]	; (800867c <main+0x73c>)
 80085dc:	801a      	strh	r2, [r3, #0]
				Y = PunktySciezki1[PozycjaNaSciezce].Y;
 80085de:	4b25      	ldr	r3, [pc, #148]	; (8008674 <main+0x734>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4923      	ldr	r1, [pc, #140]	; (8008670 <main+0x730>)
 80085e4:	4613      	mov	r3, r2
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	4413      	add	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	440b      	add	r3, r1
 80085ee:	3302      	adds	r3, #2
 80085f0:	881a      	ldrh	r2, [r3, #0]
 80085f2:	4b23      	ldr	r3, [pc, #140]	; (8008680 <main+0x740>)
 80085f4:	801a      	strh	r2, [r3, #0]

				PoprzednieX = X;
 80085f6:	4b21      	ldr	r3, [pc, #132]	; (800867c <main+0x73c>)
 80085f8:	881b      	ldrh	r3, [r3, #0]
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	4b21      	ldr	r3, [pc, #132]	; (8008684 <main+0x744>)
 80085fe:	801a      	strh	r2, [r3, #0]
				PoprzednieY = Y;
 8008600:	4b1f      	ldr	r3, [pc, #124]	; (8008680 <main+0x740>)
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29a      	uxth	r2, r3
 8008606:	4b20      	ldr	r3, [pc, #128]	; (8008688 <main+0x748>)
 8008608:	801a      	strh	r2, [r3, #0]

				RozpoczetoNowaGre = 0;
 800860a:	4b18      	ldr	r3, [pc, #96]	; (800866c <main+0x72c>)
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
 8008610:	e126      	b.n	8008860 <main+0x920>

			}
			else if (WybranyPoziom == 1 && RozpoczetoNowaGre == 1)
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <main+0x728>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	2b01      	cmp	r3, #1
 800861a:	f040 8121 	bne.w	8008860 <main+0x920>
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <main+0x72c>)
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b01      	cmp	r3, #1
 8008626:	f040 811b 	bne.w	8008860 <main+0x920>
			{
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 800862a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800862e:	f7f9 fb67 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008632:	f04f 30ff 	mov.w	r0, #4294967295
 8008636:	f7f9 fb31 	bl	8001c9c <BSP_LCD_SetTextColor>

				for(uint32_t i = 1; i <= IloscPunktowSciezki2; i++)
 800863a:	2301      	movs	r3, #1
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e0c9      	b.n	80087d4 <main+0x894>
				{
					if(PunktySciezki2[i].SasiedniePunkty[0] != 0)
 8008640:	4912      	ldr	r1, [pc, #72]	; (800868c <main+0x74c>)
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	4613      	mov	r3, r2
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	4413      	add	r3, r2
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	440b      	add	r3, r1
 800864e:	3308      	adds	r3, #8
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d064      	beq.n	8008720 <main+0x7e0>
					{
						for(int j = -6; j < 7; j++)
 8008656:	f06f 0305 	mvn.w	r3, #5
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	e05d      	b.n	800871a <main+0x7da>
 800865e:	bf00      	nop
 8008660:	20000597 	.word	0x20000597
 8008664:	20000611 	.word	0x20000611
 8008668:	20000626 	.word	0x20000626
 800866c:	20000608 	.word	0x20000608
 8008670:	0807dda8 	.word	0x0807dda8
 8008674:	200005bc 	.word	0x200005bc
 8008678:	ffff0000 	.word	0xffff0000
 800867c:	20000634 	.word	0x20000634
 8008680:	200005b8 	.word	0x200005b8
 8008684:	20000628 	.word	0x20000628
 8008688:	20000594 	.word	0x20000594
 800868c:	0807dec8 	.word	0x0807dec8
						{
							BSP_LCD_DrawLine(PunktySciezki2[i].X-6, PunktySciezki2[i].Y+j, PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].X+6, PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].Y+j);
 8008690:	498d      	ldr	r1, [pc, #564]	; (80088c8 <main+0x988>)
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4613      	mov	r3, r2
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	4413      	add	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	440b      	add	r3, r1
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	3b06      	subs	r3, #6
 80086a2:	b298      	uxth	r0, r3
 80086a4:	4988      	ldr	r1, [pc, #544]	; (80088c8 <main+0x988>)
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4613      	mov	r3, r2
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	440b      	add	r3, r1
 80086b2:	3302      	adds	r3, #2
 80086b4:	881a      	ldrh	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	4413      	add	r3, r2
 80086bc:	b29c      	uxth	r4, r3
 80086be:	4982      	ldr	r1, [pc, #520]	; (80088c8 <main+0x988>)
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4613      	mov	r3, r2
 80086c4:	005b      	lsls	r3, r3, #1
 80086c6:	4413      	add	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	440b      	add	r3, r1
 80086cc:	3308      	adds	r3, #8
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	497d      	ldr	r1, [pc, #500]	; (80088c8 <main+0x988>)
 80086d2:	4613      	mov	r3, r2
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	00db      	lsls	r3, r3, #3
 80086da:	440b      	add	r3, r1
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	3306      	adds	r3, #6
 80086e0:	b29d      	uxth	r5, r3
 80086e2:	4979      	ldr	r1, [pc, #484]	; (80088c8 <main+0x988>)
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4613      	mov	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4413      	add	r3, r2
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	440b      	add	r3, r1
 80086f0:	3308      	adds	r3, #8
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	4974      	ldr	r1, [pc, #464]	; (80088c8 <main+0x988>)
 80086f6:	4613      	mov	r3, r2
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	4413      	add	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	440b      	add	r3, r1
 8008700:	3302      	adds	r3, #2
 8008702:	881a      	ldrh	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	b29b      	uxth	r3, r3
 8008708:	4413      	add	r3, r2
 800870a:	b29b      	uxth	r3, r3
 800870c:	462a      	mov	r2, r5
 800870e:	4621      	mov	r1, r4
 8008710:	f7f9 fc04 	bl	8001f1c <BSP_LCD_DrawLine>
						for(int j = -6; j < 7; j++)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b06      	cmp	r3, #6
 800871e:	ddb7      	ble.n	8008690 <main+0x750>
						}

					}

					if(PunktySciezki2[i].SasiedniePunkty[2] != 0)
 8008720:	4969      	ldr	r1, [pc, #420]	; (80088c8 <main+0x988>)
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4613      	mov	r3, r2
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	4413      	add	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	440b      	add	r3, r1
 800872e:	3310      	adds	r3, #16
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d04b      	beq.n	80087ce <main+0x88e>
					{
						for(int j = -6; j < 7; j++)
 8008736:	f06f 0305 	mvn.w	r3, #5
 800873a:	60bb      	str	r3, [r7, #8]
 800873c:	e044      	b.n	80087c8 <main+0x888>
						{
							BSP_LCD_DrawLine(PunktySciezki2[i].X+j, PunktySciezki2[i].Y-6, PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].X+j, PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].Y+6);
 800873e:	4962      	ldr	r1, [pc, #392]	; (80088c8 <main+0x988>)
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	4613      	mov	r3, r2
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	4413      	add	r3, r2
 8008748:	00db      	lsls	r3, r3, #3
 800874a:	440b      	add	r3, r1
 800874c:	881a      	ldrh	r2, [r3, #0]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	b29b      	uxth	r3, r3
 8008752:	4413      	add	r3, r2
 8008754:	b298      	uxth	r0, r3
 8008756:	495c      	ldr	r1, [pc, #368]	; (80088c8 <main+0x988>)
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4613      	mov	r3, r2
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4413      	add	r3, r2
 8008760:	00db      	lsls	r3, r3, #3
 8008762:	440b      	add	r3, r1
 8008764:	3302      	adds	r3, #2
 8008766:	881b      	ldrh	r3, [r3, #0]
 8008768:	3b06      	subs	r3, #6
 800876a:	b29c      	uxth	r4, r3
 800876c:	4956      	ldr	r1, [pc, #344]	; (80088c8 <main+0x988>)
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	4613      	mov	r3, r2
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	4413      	add	r3, r2
 8008776:	00db      	lsls	r3, r3, #3
 8008778:	440b      	add	r3, r1
 800877a:	3310      	adds	r3, #16
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4952      	ldr	r1, [pc, #328]	; (80088c8 <main+0x988>)
 8008780:	4613      	mov	r3, r2
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	4413      	add	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	440b      	add	r3, r1
 800878a:	881a      	ldrh	r2, [r3, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	b29b      	uxth	r3, r3
 8008790:	4413      	add	r3, r2
 8008792:	b29d      	uxth	r5, r3
 8008794:	494c      	ldr	r1, [pc, #304]	; (80088c8 <main+0x988>)
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4613      	mov	r3, r2
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	4413      	add	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	440b      	add	r3, r1
 80087a2:	3310      	adds	r3, #16
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4948      	ldr	r1, [pc, #288]	; (80088c8 <main+0x988>)
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	440b      	add	r3, r1
 80087b2:	3302      	adds	r3, #2
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	3306      	adds	r3, #6
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	462a      	mov	r2, r5
 80087bc:	4621      	mov	r1, r4
 80087be:	f7f9 fbad 	bl	8001f1c <BSP_LCD_DrawLine>
						for(int j = -6; j < 7; j++)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	3301      	adds	r3, #1
 80087c6:	60bb      	str	r3, [r7, #8]
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2b06      	cmp	r3, #6
 80087cc:	ddb7      	ble.n	800873e <main+0x7fe>
				for(uint32_t i = 1; i <= IloscPunktowSciezki2; i++)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	3301      	adds	r3, #1
 80087d2:	613b      	str	r3, [r7, #16]
 80087d4:	2238      	movs	r2, #56	; 0x38
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	4293      	cmp	r3, r2
 80087da:	f67f af31 	bls.w	8008640 <main+0x700>
						}
					}
				}

				PozycjaNaSciezce = 1;
 80087de:	4b3b      	ldr	r3, [pc, #236]	; (80088cc <main+0x98c>)
 80087e0:	2201      	movs	r2, #1
 80087e2:	601a      	str	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80087e4:	483a      	ldr	r0, [pc, #232]	; (80088d0 <main+0x990>)
 80087e6:	f7f9 fa59 	bl	8001c9c <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(PunktySciezki2[PozycjaNaSciezce].X, PunktySciezki2[PozycjaNaSciezce].Y, 5);
 80087ea:	4b38      	ldr	r3, [pc, #224]	; (80088cc <main+0x98c>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4936      	ldr	r1, [pc, #216]	; (80088c8 <main+0x988>)
 80087f0:	4613      	mov	r3, r2
 80087f2:	005b      	lsls	r3, r3, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	440b      	add	r3, r1
 80087fa:	8818      	ldrh	r0, [r3, #0]
 80087fc:	4b33      	ldr	r3, [pc, #204]	; (80088cc <main+0x98c>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	4931      	ldr	r1, [pc, #196]	; (80088c8 <main+0x988>)
 8008802:	4613      	mov	r3, r2
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	4413      	add	r3, r2
 8008808:	00db      	lsls	r3, r3, #3
 800880a:	440b      	add	r3, r1
 800880c:	3302      	adds	r3, #2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	2205      	movs	r2, #5
 8008812:	4619      	mov	r1, r3
 8008814:	f7f9 fe2a 	bl	800246c <BSP_LCD_FillCircle>

				X = PunktySciezki2[PozycjaNaSciezce].X;
 8008818:	4b2c      	ldr	r3, [pc, #176]	; (80088cc <main+0x98c>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	492a      	ldr	r1, [pc, #168]	; (80088c8 <main+0x988>)
 800881e:	4613      	mov	r3, r2
 8008820:	005b      	lsls	r3, r3, #1
 8008822:	4413      	add	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	440b      	add	r3, r1
 8008828:	881a      	ldrh	r2, [r3, #0]
 800882a:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <main+0x994>)
 800882c:	801a      	strh	r2, [r3, #0]
				Y = PunktySciezki2[PozycjaNaSciezce].Y;
 800882e:	4b27      	ldr	r3, [pc, #156]	; (80088cc <main+0x98c>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4925      	ldr	r1, [pc, #148]	; (80088c8 <main+0x988>)
 8008834:	4613      	mov	r3, r2
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	4413      	add	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	440b      	add	r3, r1
 800883e:	3302      	adds	r3, #2
 8008840:	881a      	ldrh	r2, [r3, #0]
 8008842:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <main+0x998>)
 8008844:	801a      	strh	r2, [r3, #0]

				PoprzednieX = X;
 8008846:	4b23      	ldr	r3, [pc, #140]	; (80088d4 <main+0x994>)
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29a      	uxth	r2, r3
 800884c:	4b23      	ldr	r3, [pc, #140]	; (80088dc <main+0x99c>)
 800884e:	801a      	strh	r2, [r3, #0]
				PoprzednieY = Y;
 8008850:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <main+0x998>)
 8008852:	881b      	ldrh	r3, [r3, #0]
 8008854:	b29a      	uxth	r2, r3
 8008856:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <main+0x9a0>)
 8008858:	801a      	strh	r2, [r3, #0]

				RozpoczetoNowaGre = 0;
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <main+0x9a4>)
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]

		}

		//Koniec petli gry****************************

		printf("Angle X: %li\n\r", AngleX);
 8008860:	4b21      	ldr	r3, [pc, #132]	; (80088e8 <main+0x9a8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	4821      	ldr	r0, [pc, #132]	; (80088ec <main+0x9ac>)
 8008868:	f002 f9c0 	bl	800abec <iprintf>
		printf("Angle Y: %li\n\r", AngleY);
 800886c:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <main+0x9b0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4619      	mov	r1, r3
 8008872:	4820      	ldr	r0, [pc, #128]	; (80088f4 <main+0x9b4>)
 8008874:	f002 f9ba 	bl	800abec <iprintf>
		printf("Angle Z: %li\n\r", AngleZ);
 8008878:	4b1f      	ldr	r3, [pc, #124]	; (80088f8 <main+0x9b8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4619      	mov	r1, r3
 800887e:	481f      	ldr	r0, [pc, #124]	; (80088fc <main+0x9bc>)
 8008880:	f002 f9b4 	bl	800abec <iprintf>
		printf("CzasX: %d\n\r", ResetTimeX);
 8008884:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <main+0x9c0>)
 8008886:	881b      	ldrh	r3, [r3, #0]
 8008888:	b29b      	uxth	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	481d      	ldr	r0, [pc, #116]	; (8008904 <main+0x9c4>)
 800888e:	f002 f9ad 	bl	800abec <iprintf>
		printf("CzasY: %d\n\r", ResetTimeY);
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <main+0x9c8>)
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29b      	uxth	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	481c      	ldr	r0, [pc, #112]	; (800890c <main+0x9cc>)
 800889c:	f002 f9a6 	bl	800abec <iprintf>
		printf("Predkosc X: %d\n\r", DataNow.OsX);
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <main+0x9d0>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b21b      	sxth	r3, r3
 80088a6:	4619      	mov	r1, r3
 80088a8:	481a      	ldr	r0, [pc, #104]	; (8008914 <main+0x9d4>)
 80088aa:	f002 f99f 	bl	800abec <iprintf>
		printf("Predkosc Y: %d\n\r", DataNow.OsY);
 80088ae:	4b18      	ldr	r3, [pc, #96]	; (8008910 <main+0x9d0>)
 80088b0:	885b      	ldrh	r3, [r3, #2]
 80088b2:	b21b      	sxth	r3, r3
 80088b4:	4619      	mov	r1, r3
 80088b6:	4818      	ldr	r0, [pc, #96]	; (8008918 <main+0x9d8>)
 80088b8:	f002 f998 	bl	800abec <iprintf>
		//********************************************

		//printf("OsX: %d\n\r", Data.OsX);
		//printf("OsY: %d\n\r", Data.OsY);
		//printf("OsZ: %d\n\r", Data.OsZ);
		HAL_Delay(200);
 80088bc:	20c8      	movs	r0, #200	; 0xc8
 80088be:	f7fa fac3 	bl	8002e48 <HAL_Delay>
		if (HAL_GetTick() - czasZmiany > 2000)
 80088c2:	f7ff bbd3 	b.w	800806c <main+0x12c>
 80088c6:	bf00      	nop
 80088c8:	0807dec8 	.word	0x0807dec8
 80088cc:	200005bc 	.word	0x200005bc
 80088d0:	ffff0000 	.word	0xffff0000
 80088d4:	20000634 	.word	0x20000634
 80088d8:	200005b8 	.word	0x200005b8
 80088dc:	20000628 	.word	0x20000628
 80088e0:	20000594 	.word	0x20000594
 80088e4:	20000608 	.word	0x20000608
 80088e8:	200005c0 	.word	0x200005c0
 80088ec:	0800ba18 	.word	0x0800ba18
 80088f0:	200005f8 	.word	0x200005f8
 80088f4:	0800ba28 	.word	0x0800ba28
 80088f8:	200005f0 	.word	0x200005f0
 80088fc:	0800ba38 	.word	0x0800ba38
 8008900:	200005ca 	.word	0x200005ca
 8008904:	0800ba48 	.word	0x0800ba48
 8008908:	20000624 	.word	0x20000624
 800890c:	0800ba54 	.word	0x0800ba54
 8008910:	200005c4 	.word	0x200005c4
 8008914:	0800ba60 	.word	0x0800ba60
 8008918:	0800ba74 	.word	0x0800ba74

0800891c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b0a0      	sub	sp, #128	; 0x80
 8008920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8008922:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008926:	2230      	movs	r2, #48	; 0x30
 8008928:	2100      	movs	r1, #0
 800892a:	4618      	mov	r0, r3
 800892c:	f002 f956 	bl	800abdc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8008930:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	605a      	str	r2, [r3, #4]
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 8008940:	f107 030c 	add.w	r3, r7, #12
 8008944:	2230      	movs	r2, #48	; 0x30
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f002 f947 	bl	800abdc <memset>
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800894e:	2300      	movs	r3, #0
 8008950:	60bb      	str	r3, [r7, #8]
 8008952:	4a35      	ldr	r2, [pc, #212]	; (8008a28 <SystemClock_Config+0x10c>)
 8008954:	4b34      	ldr	r3, [pc, #208]	; (8008a28 <SystemClock_Config+0x10c>)
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800895c:	6413      	str	r3, [r2, #64]	; 0x40
 800895e:	4b32      	ldr	r3, [pc, #200]	; (8008a28 <SystemClock_Config+0x10c>)
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008966:	60bb      	str	r3, [r7, #8]
 8008968:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800896a:	2300      	movs	r3, #0
 800896c:	607b      	str	r3, [r7, #4]
 800896e:	4a2f      	ldr	r2, [pc, #188]	; (8008a2c <SystemClock_Config+0x110>)
 8008970:	4b2e      	ldr	r3, [pc, #184]	; (8008a2c <SystemClock_Config+0x110>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	4b2c      	ldr	r3, [pc, #176]	; (8008a2c <SystemClock_Config+0x110>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008986:	2301      	movs	r3, #1
 8008988:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800898a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800898e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008990:	2302      	movs	r3, #2
 8008992:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008994:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008998:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800899a:	2304      	movs	r3, #4
 800899c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 180;
 800899e:	23b4      	movs	r3, #180	; 0xb4
 80089a0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089a2:	2302      	movs	r3, #2
 80089a4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80089a6:	2303      	movs	r3, #3
 80089a8:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fc f93a 	bl	8004c28 <HAL_RCC_OscConfig>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80089ba:	f001 fced 	bl	800a398 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80089be:	f7fc f8e3 	bl	8004b88 <HAL_PWREx_EnableOverDrive>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80089c8:	f001 fce6 	bl	800a398 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80089cc:	230f      	movs	r3, #15
 80089ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80089d0:	2302      	movs	r3, #2
 80089d2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80089d4:	2300      	movs	r3, #0
 80089d6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80089d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80089dc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80089de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80089e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80089e8:	2105      	movs	r1, #5
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fc fb5e 	bl	80050ac <HAL_RCC_ClockConfig>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <SystemClock_Config+0xde>
	{
		Error_Handler();
 80089f6:	f001 fccf 	bl	800a398 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80089fa:	2308      	movs	r3, #8
 80089fc:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80089fe:	23c0      	movs	r3, #192	; 0xc0
 8008a00:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8008a02:	2302      	movs	r3, #2
 8008a04:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8008a06:	2300      	movs	r3, #0
 8008a08:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a0a:	f107 030c 	add.w	r3, r7, #12
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fc fd6c 	bl	80054ec <HAL_RCCEx_PeriphCLKConfig>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d001      	beq.n	8008a1e <SystemClock_Config+0x102>
	{
		Error_Handler();
 8008a1a:	f001 fcbd 	bl	800a398 <Error_Handler>
	}
}
 8008a1e:	bf00      	nop
 8008a20:	3780      	adds	r7, #128	; 0x80
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	40023800 	.word	0x40023800
 8008a2c:	40007000 	.word	0x40007000

08008a30 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a30:	b5b0      	push	{r4, r5, r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM10) //Przerwanie pochodzi od timera 10
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a67      	ldr	r2, [pc, #412]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d101      	bne.n	8008a46 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		//Zamienic na if(StanGry == Gra) przy uruchomieniu menu
		if (StanGry == Gra)
 8008a42:	4b67      	ldr	r3, [pc, #412]	; (8008be0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
			 }
			 */
		}
	}

	if (htim->Instance == TIM11)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a66      	ldr	r2, [pc, #408]	; (8008be4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	f041 8472 	bne.w	800a336 <HAL_TIM_PeriodElapsedCallback+0x1906>
	{
		OurL3GD20_Read();
 8008a52:	f7ff f9eb 	bl	8007e2c <OurL3GD20_Read>

		//To mozna wsumie przy testowaniu wywalic za czesc testowa
		if ((DataNow.OsX >= 25 && DataNow.OsY <= 20)
 8008a56:	4b64      	ldr	r3, [pc, #400]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b21b      	sxth	r3, r3
 8008a5c:	2b18      	cmp	r3, #24
 8008a5e:	dd04      	ble.n	8008a6a <HAL_TIM_PeriodElapsedCallback+0x3a>
 8008a60:	4b61      	ldr	r3, [pc, #388]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a62:	885b      	ldrh	r3, [r3, #2]
 8008a64:	b21b      	sxth	r3, r3
 8008a66:	2b14      	cmp	r3, #20
 8008a68:	dd0b      	ble.n	8008a82 <HAL_TIM_PeriodElapsedCallback+0x52>
				|| (DataNow.OsX <= -25 && DataNow.OsY >= -20))
 8008a6a:	4b5f      	ldr	r3, [pc, #380]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b21b      	sxth	r3, r3
 8008a70:	f113 0f18 	cmn.w	r3, #24
 8008a74:	da30      	bge.n	8008ad8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8008a76:	4b5c      	ldr	r3, [pc, #368]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a78:	885b      	ldrh	r3, [r3, #2]
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	f113 0f14 	cmn.w	r3, #20
 8008a80:	db2a      	blt.n	8008ad8 <HAL_TIM_PeriodElapsedCallback+0xa8>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8008a82:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b21b      	sxth	r3, r3
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7f7 fd53 	bl	8000534 <__aeabi_i2d>
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460d      	mov	r5, r1
 8008a92:	4b56      	ldr	r3, [pc, #344]	; (8008bec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4b53      	ldr	r3, [pc, #332]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd46 	bl	8000534 <__aeabi_i2d>
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	4b50      	ldr	r3, [pc, #320]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008aae:	f7f7 fda7 	bl	8000600 <__aeabi_dmul>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f7 fbef 	bl	800029c <__adddf3>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7f7 ffad 	bl	8000a24 <__aeabi_d2iz>
 8008aca:	4602      	mov	r2, r0
			AngleX +=
 8008acc:	4b49      	ldr	r3, [pc, #292]	; (8008bf4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4a48      	ldr	r2, [pc, #288]	; (8008bf4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008ad4:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8008ad6:	e03f      	b.n	8008b58 <HAL_TIM_PeriodElapsedCallback+0x128>
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 8008ad8:	4b43      	ldr	r3, [pc, #268]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b21b      	sxth	r3, r3
 8008ade:	2b18      	cmp	r3, #24
 8008ae0:	dd04      	ble.n	8008aec <HAL_TIM_PeriodElapsedCallback+0xbc>
 8008ae2:	4b41      	ldr	r3, [pc, #260]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	b21b      	sxth	r3, r3
 8008ae8:	2b18      	cmp	r3, #24
 8008aea:	dc0b      	bgt.n	8008b04 <HAL_TIM_PeriodElapsedCallback+0xd4>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 8008aec:	4b3e      	ldr	r3, [pc, #248]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	b21b      	sxth	r3, r3
 8008af2:	f113 0f18 	cmn.w	r3, #24
 8008af6:	da2f      	bge.n	8008b58 <HAL_TIM_PeriodElapsedCallback+0x128>
 8008af8:	4b3b      	ldr	r3, [pc, #236]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	f113 0f18 	cmn.w	r3, #24
 8008b02:	da29      	bge.n	8008b58 <HAL_TIM_PeriodElapsedCallback+0x128>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8008b04:	4b38      	ldr	r3, [pc, #224]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b21b      	sxth	r3, r3
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7f7 fd12 	bl	8000534 <__aeabi_i2d>
 8008b10:	4604      	mov	r4, r0
 8008b12:	460d      	mov	r5, r1
 8008b14:	4b35      	ldr	r3, [pc, #212]	; (8008bec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b21b      	sxth	r3, r3
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	4b32      	ldr	r3, [pc, #200]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	b21b      	sxth	r3, r3
 8008b22:	1ad3      	subs	r3, r2, r3
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f7 fd05 	bl	8000534 <__aeabi_i2d>
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	4b30      	ldr	r3, [pc, #192]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008b30:	f7f7 fd66 	bl	8000600 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	f7f7 fbae 	bl	800029c <__adddf3>
 8008b40:	4603      	mov	r3, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4618      	mov	r0, r3
 8008b46:	4621      	mov	r1, r4
 8008b48:	f7f7 ff6c 	bl	8000a24 <__aeabi_d2iz>
 8008b4c:	4602      	mov	r2, r0
			AngleX +=
 8008b4e:	4b29      	ldr	r3, [pc, #164]	; (8008bf4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4413      	add	r3, r2
 8008b54:	4a27      	ldr	r2, [pc, #156]	; (8008bf4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008b56:	6013      	str	r3, [r2, #0]

		if ((DataNow.OsY >= 25 && DataNow.OsX <= 20)
 8008b58:	4b23      	ldr	r3, [pc, #140]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b5a:	885b      	ldrh	r3, [r3, #2]
 8008b5c:	b21b      	sxth	r3, r3
 8008b5e:	2b18      	cmp	r3, #24
 8008b60:	dd04      	ble.n	8008b6c <HAL_TIM_PeriodElapsedCallback+0x13c>
 8008b62:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b21b      	sxth	r3, r3
 8008b68:	2b14      	cmp	r3, #20
 8008b6a:	dd0b      	ble.n	8008b84 <HAL_TIM_PeriodElapsedCallback+0x154>
				|| (DataNow.OsY <= -25 && DataNow.OsX >= -20))
 8008b6c:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	b21b      	sxth	r3, r3
 8008b72:	f113 0f18 	cmn.w	r3, #24
 8008b76:	da41      	bge.n	8008bfc <HAL_TIM_PeriodElapsedCallback+0x1cc>
 8008b78:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	f113 0f14 	cmn.w	r3, #20
 8008b82:	db3b      	blt.n	8008bfc <HAL_TIM_PeriodElapsedCallback+0x1cc>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b86:	885b      	ldrh	r3, [r3, #2]
 8008b88:	b21b      	sxth	r3, r3
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7f7 fcd2 	bl	8000534 <__aeabi_i2d>
 8008b90:	4604      	mov	r4, r0
 8008b92:	460d      	mov	r5, r1
 8008b94:	4b15      	ldr	r3, [pc, #84]	; (8008bec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	b21b      	sxth	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4b12      	ldr	r3, [pc, #72]	; (8008be8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8008b9e:	885b      	ldrh	r3, [r3, #2]
 8008ba0:	b21b      	sxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f7 fcc5 	bl	8000534 <__aeabi_i2d>
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008bb0:	f7f7 fd26 	bl	8000600 <__aeabi_dmul>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	4629      	mov	r1, r5
 8008bbc:	f7f7 fb6e 	bl	800029c <__adddf3>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4621      	mov	r1, r4
 8008bc8:	f7f7 ff2c 	bl	8000a24 <__aeabi_d2iz>
 8008bcc:	4602      	mov	r2, r0
			AngleY +=
 8008bce:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008bd6:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8008bd8:	e050      	b.n	8008c7c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8008bda:	bf00      	nop
 8008bdc:	40014400 	.word	0x40014400
 8008be0:	20000611 	.word	0x20000611
 8008be4:	40014800 	.word	0x40014800
 8008be8:	200005c4 	.word	0x200005c4
 8008bec:	200004e8 	.word	0x200004e8
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	200005c0 	.word	0x200005c0
 8008bf8:	200005f8 	.word	0x200005f8
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 8008bfc:	4b96      	ldr	r3, [pc, #600]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	b21b      	sxth	r3, r3
 8008c02:	2b18      	cmp	r3, #24
 8008c04:	dd04      	ble.n	8008c10 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8008c06:	4b94      	ldr	r3, [pc, #592]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	2b18      	cmp	r3, #24
 8008c0e:	dc0b      	bgt.n	8008c28 <HAL_TIM_PeriodElapsedCallback+0x1f8>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 8008c10:	4b91      	ldr	r3, [pc, #580]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b21b      	sxth	r3, r3
 8008c16:	f113 0f18 	cmn.w	r3, #24
 8008c1a:	da2f      	bge.n	8008c7c <HAL_TIM_PeriodElapsedCallback+0x24c>
 8008c1c:	4b8e      	ldr	r3, [pc, #568]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	b21b      	sxth	r3, r3
 8008c22:	f113 0f18 	cmn.w	r3, #24
 8008c26:	da29      	bge.n	8008c7c <HAL_TIM_PeriodElapsedCallback+0x24c>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8008c28:	4b8b      	ldr	r3, [pc, #556]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c2a:	885b      	ldrh	r3, [r3, #2]
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f7 fc80 	bl	8000534 <__aeabi_i2d>
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	4b88      	ldr	r3, [pc, #544]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008c3a:	885b      	ldrh	r3, [r3, #2]
 8008c3c:	b21b      	sxth	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	4b85      	ldr	r3, [pc, #532]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c42:	885b      	ldrh	r3, [r3, #2]
 8008c44:	b21b      	sxth	r3, r3
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7f7 fc73 	bl	8000534 <__aeabi_i2d>
 8008c4e:	f04f 0200 	mov.w	r2, #0
 8008c52:	4b83      	ldr	r3, [pc, #524]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008c54:	f7f7 fcd4 	bl	8000600 <__aeabi_dmul>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	f7f7 fb1c 	bl	800029c <__adddf3>
 8008c64:	4603      	mov	r3, r0
 8008c66:	460c      	mov	r4, r1
 8008c68:	4618      	mov	r0, r3
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	f7f7 feda 	bl	8000a24 <__aeabi_d2iz>
 8008c70:	4602      	mov	r2, r0
			AngleY +=
 8008c72:	4b7c      	ldr	r3, [pc, #496]	; (8008e64 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4413      	add	r3, r2
 8008c78:	4a7a      	ldr	r2, [pc, #488]	; (8008e64 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8008c7a:	6013      	str	r3, [r2, #0]
		 LicznikPomocniczy = 0;
		 }
		 */
		//koniec
		//Liczenie calki za pomoca metody Romberga
		if (LicznikPomocniczyRomberg == 0)
 8008c7c:	4b7a      	ldr	r3, [pc, #488]	; (8008e68 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d14e      	bne.n	8008d24 <HAL_TIM_PeriodElapsedCallback+0x2f4>
		{
			DataTempRom[0] = DataOld;
 8008c86:	4b79      	ldr	r3, [pc, #484]	; (8008e6c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8008c88:	4a74      	ldr	r2, [pc, #464]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008c8a:	6811      	ldr	r1, [r2, #0]
 8008c8c:	6019      	str	r1, [r3, #0]
 8008c8e:	8892      	ldrh	r2, [r2, #4]
 8008c90:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] = (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008c92:	4b72      	ldr	r3, [pc, #456]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b21b      	sxth	r3, r3
 8008c98:	461a      	mov	r2, r3
 8008c9a:	4b6f      	ldr	r3, [pc, #444]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b21b      	sxth	r3, r3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7f7 fc46 	bl	8000534 <__aeabi_i2d>
 8008ca8:	f04f 0200 	mov.w	r2, #0
 8008cac:	4b6c      	ldr	r3, [pc, #432]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008cae:	f7f7 fca7 	bl	8000600 <__aeabi_dmul>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	4621      	mov	r1, r4
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	4b6c      	ldr	r3, [pc, #432]	; (8008e70 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8008cc0:	f7f7 fc9e 	bl	8000600 <__aeabi_dmul>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] = (long) (4
 8008cc8:	4618      	mov	r0, r3
 8008cca:	4621      	mov	r1, r4
 8008ccc:	f7f7 feaa 	bl	8000a24 <__aeabi_d2iz>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	4b68      	ldr	r3, [pc, #416]	; (8008e74 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8008cd4:	60da      	str	r2, [r3, #12]
			CalkaPosredniaRomY[3] = (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008cd6:	4b61      	ldr	r3, [pc, #388]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008cd8:	885b      	ldrh	r3, [r3, #2]
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	461a      	mov	r2, r3
 8008cde:	4b5e      	ldr	r3, [pc, #376]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	b21b      	sxth	r3, r3
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f7 fc24 	bl	8000534 <__aeabi_i2d>
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	4b5b      	ldr	r3, [pc, #364]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008cf2:	f7f7 fc85 	bl	8000600 <__aeabi_dmul>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	4b5b      	ldr	r3, [pc, #364]	; (8008e70 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8008d04:	f7f7 fc7c 	bl	8000600 <__aeabi_dmul>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] = (long) (4
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	4621      	mov	r1, r4
 8008d10:	f7f7 fe88 	bl	8000a24 <__aeabi_d2iz>
 8008d14:	4602      	mov	r2, r0
 8008d16:	4b58      	ldr	r3, [pc, #352]	; (8008e78 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8008d18:	60da      	str	r2, [r3, #12]

			LicznikPomocniczyRomberg = 1;
 8008d1a:	4b53      	ldr	r3, [pc, #332]	; (8008e68 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	701a      	strb	r2, [r3, #0]
 8008d20:	f000 bd72 	b.w	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>

		}
		else if (LicznikPomocniczyRomberg == 1)
 8008d24:	4b50      	ldr	r3, [pc, #320]	; (8008e68 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f040 80a8 	bne.w	8008e80 <HAL_TIM_PeriodElapsedCallback+0x450>
		{
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008d30:	4b4a      	ldr	r3, [pc, #296]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b21b      	sxth	r3, r3
 8008d36:	461a      	mov	r2, r3
 8008d38:	4b47      	ldr	r3, [pc, #284]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	b21b      	sxth	r3, r3
 8008d3e:	4413      	add	r3, r2
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7f7 fbf7 	bl	8000534 <__aeabi_i2d>
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	4b45      	ldr	r3, [pc, #276]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008d4c:	f7f7 fc58 	bl	8000600 <__aeabi_dmul>
 8008d50:	4603      	mov	r3, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	4618      	mov	r0, r3
 8008d56:	4621      	mov	r1, r4
 8008d58:	f04f 0200 	mov.w	r2, #0
 8008d5c:	4b44      	ldr	r3, [pc, #272]	; (8008e70 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8008d5e:	f7f7 fc4f 	bl	8000600 <__aeabi_dmul>
 8008d62:	4603      	mov	r3, r0
 8008d64:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008d66:	4618      	mov	r0, r3
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f7f7 fe5b 	bl	8000a24 <__aeabi_d2iz>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b40      	ldr	r3, [pc, #256]	; (8008e74 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	4413      	add	r3, r2
 8008d76:	4a3f      	ldr	r2, [pc, #252]	; (8008e74 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8008d78:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008d7a:	4b38      	ldr	r3, [pc, #224]	; (8008e5c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8008d7c:	885b      	ldrh	r3, [r3, #2]
 8008d7e:	b21b      	sxth	r3, r3
 8008d80:	461a      	mov	r2, r3
 8008d82:	4b35      	ldr	r3, [pc, #212]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008d84:	885b      	ldrh	r3, [r3, #2]
 8008d86:	b21b      	sxth	r3, r3
 8008d88:	4413      	add	r3, r2
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7f7 fbd2 	bl	8000534 <__aeabi_i2d>
 8008d90:	f04f 0200 	mov.w	r2, #0
 8008d94:	4b32      	ldr	r3, [pc, #200]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008d96:	f7f7 fc33 	bl	8000600 <__aeabi_dmul>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	460c      	mov	r4, r1
 8008d9e:	4618      	mov	r0, r3
 8008da0:	4621      	mov	r1, r4
 8008da2:	f04f 0200 	mov.w	r2, #0
 8008da6:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <HAL_TIM_PeriodElapsedCallback+0x440>)
 8008da8:	f7f7 fc2a 	bl	8000600 <__aeabi_dmul>
 8008dac:	4603      	mov	r3, r0
 8008dae:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008db0:	4618      	mov	r0, r3
 8008db2:	4621      	mov	r1, r4
 8008db4:	f7f7 fe36 	bl	8000a24 <__aeabi_d2iz>
 8008db8:	4602      	mov	r2, r0
 8008dba:	4b2f      	ldr	r3, [pc, #188]	; (8008e78 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	4a2d      	ldr	r2, [pc, #180]	; (8008e78 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8008dc2:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] = (long) (8
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 8008dc4:	4b29      	ldr	r3, [pc, #164]	; (8008e6c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b21b      	sxth	r3, r3
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b21b      	sxth	r3, r3
 8008dd2:	4413      	add	r3, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7f7 fbad 	bl	8000534 <__aeabi_i2d>
 8008dda:	f04f 0200 	mov.w	r2, #0
 8008dde:	4b20      	ldr	r3, [pc, #128]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008de0:	f7f7 fc0e 	bl	8000600 <__aeabi_dmul>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4618      	mov	r0, r3
 8008dea:	4621      	mov	r1, r4
 8008dec:	f04f 0200 	mov.w	r2, #0
 8008df0:	4b22      	ldr	r3, [pc, #136]	; (8008e7c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8008df2:	f7f7 fc05 	bl	8000600 <__aeabi_dmul>
 8008df6:	4603      	mov	r3, r0
 8008df8:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] = (long) (8
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	f7f7 fe11 	bl	8000a24 <__aeabi_d2iz>
 8008e02:	4602      	mov	r2, r0
 8008e04:	4b1b      	ldr	r3, [pc, #108]	; (8008e74 <HAL_TIM_PeriodElapsedCallback+0x444>)
 8008e06:	609a      	str	r2, [r3, #8]
			CalkaPosredniaRomY[2] = (long) (8
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 8008e08:	4b18      	ldr	r3, [pc, #96]	; (8008e6c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8008e0a:	885b      	ldrh	r3, [r3, #2]
 8008e0c:	b21b      	sxth	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8008e12:	885b      	ldrh	r3, [r3, #2]
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	4413      	add	r3, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7f7 fb8b 	bl	8000534 <__aeabi_i2d>
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	4b0f      	ldr	r3, [pc, #60]	; (8008e60 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8008e24:	f7f7 fbec 	bl	8000600 <__aeabi_dmul>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	4621      	mov	r1, r4
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8008e36:	f7f7 fbe3 	bl	8000600 <__aeabi_dmul>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] = (long) (8
 8008e3e:	4618      	mov	r0, r3
 8008e40:	4621      	mov	r1, r4
 8008e42:	f7f7 fdef 	bl	8000a24 <__aeabi_d2iz>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8008e4a:	609a      	str	r2, [r3, #8]

			LicznikPomocniczyRomberg = 2;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8008e4e:	2202      	movs	r2, #2
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	f000 bcd9 	b.w	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>
 8008e56:	bf00      	nop
 8008e58:	200005c4 	.word	0x200005c4
 8008e5c:	200004e8 	.word	0x200004e8
 8008e60:	3fe00000 	.word	0x3fe00000
 8008e64:	200005f8 	.word	0x200005f8
 8008e68:	2000057c 	.word	0x2000057c
 8008e6c:	200004f0 	.word	0x200004f0
 8008e70:	40100000 	.word	0x40100000
 8008e74:	200005dc 	.word	0x200005dc
 8008e78:	200005a8 	.word	0x200005a8
 8008e7c:	40200000 	.word	0x40200000

		}
		else if (LicznikPomocniczyRomberg == 2)
 8008e80:	4b9e      	ldr	r3, [pc, #632]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d155      	bne.n	8008f36 <HAL_TIM_PeriodElapsedCallback+0x506>
		{
			DataTempRom[2] = DataOld;
 8008e8a:	4b9d      	ldr	r3, [pc, #628]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8008e8c:	4a9d      	ldr	r2, [pc, #628]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8008e8e:	330c      	adds	r3, #12
 8008e90:	6811      	ldr	r1, [r2, #0]
 8008e92:	6019      	str	r1, [r3, #0]
 8008e94:	8892      	ldrh	r2, [r2, #4]
 8008e96:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008e98:	4b9a      	ldr	r3, [pc, #616]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	4b99      	ldr	r3, [pc, #612]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	b21b      	sxth	r3, r3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7f7 fb43 	bl	8000534 <__aeabi_i2d>
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	4b96      	ldr	r3, [pc, #600]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8008eb4:	f7f7 fba4 	bl	8000600 <__aeabi_dmul>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	f04f 0200 	mov.w	r2, #0
 8008ec4:	4b92      	ldr	r3, [pc, #584]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8008ec6:	f7f7 fb9b 	bl	8000600 <__aeabi_dmul>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	f7f7 fda7 	bl	8000a24 <__aeabi_d2iz>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	4b8e      	ldr	r3, [pc, #568]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	4a8d      	ldr	r2, [pc, #564]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8008ee0:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008ee2:	4b88      	ldr	r3, [pc, #544]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8008ee4:	885b      	ldrh	r3, [r3, #2]
 8008ee6:	b21b      	sxth	r3, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	4b87      	ldr	r3, [pc, #540]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8008eec:	885b      	ldrh	r3, [r3, #2]
 8008eee:	b21b      	sxth	r3, r3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f7 fb1e 	bl	8000534 <__aeabi_i2d>
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	4b83      	ldr	r3, [pc, #524]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8008efe:	f7f7 fb7f 	bl	8000600 <__aeabi_dmul>
 8008f02:	4603      	mov	r3, r0
 8008f04:	460c      	mov	r4, r1
 8008f06:	4618      	mov	r0, r3
 8008f08:	4621      	mov	r1, r4
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	4b80      	ldr	r3, [pc, #512]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8008f10:	f7f7 fb76 	bl	8000600 <__aeabi_dmul>
 8008f14:	4603      	mov	r3, r0
 8008f16:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f7f7 fd82 	bl	8000a24 <__aeabi_d2iz>
 8008f20:	4602      	mov	r2, r0
 8008f22:	4b7d      	ldr	r3, [pc, #500]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	4a7b      	ldr	r2, [pc, #492]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008f2a:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 3;
 8008f2c:	4b73      	ldr	r3, [pc, #460]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8008f2e:	2203      	movs	r2, #3
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	f000 bc69 	b.w	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>

		}
		else if (LicznikPomocniczyRomberg == 3)
 8008f36:	4b71      	ldr	r3, [pc, #452]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	f040 80f1 	bne.w	8009124 <HAL_TIM_PeriodElapsedCallback+0x6f4>
		{
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8008f42:	4b70      	ldr	r3, [pc, #448]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b21b      	sxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4b6f      	ldr	r3, [pc, #444]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b21b      	sxth	r3, r3
 8008f50:	4413      	add	r3, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7f7 faee 	bl	8000534 <__aeabi_i2d>
 8008f58:	f04f 0200 	mov.w	r2, #0
 8008f5c:	4b6b      	ldr	r3, [pc, #428]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8008f5e:	f7f7 fb4f 	bl	8000600 <__aeabi_dmul>
 8008f62:	4603      	mov	r3, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	4618      	mov	r0, r3
 8008f68:	4621      	mov	r1, r4
 8008f6a:	f04f 0200 	mov.w	r2, #0
 8008f6e:	4b68      	ldr	r3, [pc, #416]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8008f70:	f7f7 fb46 	bl	8000600 <__aeabi_dmul>
 8008f74:	4603      	mov	r3, r0
 8008f76:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8008f78:	4618      	mov	r0, r3
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	f7f7 fd52 	bl	8000a24 <__aeabi_d2iz>
 8008f80:	4602      	mov	r2, r0
 8008f82:	4b64      	ldr	r3, [pc, #400]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	4a62      	ldr	r2, [pc, #392]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8008f8a:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8008f8c:	4b5d      	ldr	r3, [pc, #372]	; (8009104 <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	461a      	mov	r2, r3
 8008f94:	4b5c      	ldr	r3, [pc, #368]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	b21b      	sxth	r3, r3
 8008f9a:	4413      	add	r3, r2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7f7 fac9 	bl	8000534 <__aeabi_i2d>
 8008fa2:	f04f 0200 	mov.w	r2, #0
 8008fa6:	4b59      	ldr	r3, [pc, #356]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8008fa8:	f7f7 fb2a 	bl	8000600 <__aeabi_dmul>
 8008fac:	4603      	mov	r3, r0
 8008fae:	460c      	mov	r4, r1
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	4b55      	ldr	r3, [pc, #340]	; (8009110 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8008fba:	f7f7 fb21 	bl	8000600 <__aeabi_dmul>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f7f7 fd2d 	bl	8000a24 <__aeabi_d2iz>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	4b52      	ldr	r3, [pc, #328]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	4a51      	ldr	r2, [pc, #324]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8008fd4:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[2].OsX + DataNow.OsX) * 0.5));
 8008fd6:	4b4a      	ldr	r3, [pc, #296]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	b21b      	sxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	4b4a      	ldr	r3, [pc, #296]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8008fe0:	881b      	ldrh	r3, [r3, #0]
 8008fe2:	b21b      	sxth	r3, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7f7 faa4 	bl	8000534 <__aeabi_i2d>
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	4b46      	ldr	r3, [pc, #280]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8008ff2:	f7f7 fb05 	bl	8000600 <__aeabi_dmul>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	4621      	mov	r1, r4
 8008ffe:	f04f 0200 	mov.w	r2, #0
 8009002:	4b46      	ldr	r3, [pc, #280]	; (800911c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009004:	f7f7 fafc 	bl	8000600 <__aeabi_dmul>
 8009008:	4603      	mov	r3, r0
 800900a:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 800900c:	4618      	mov	r0, r3
 800900e:	4621      	mov	r1, r4
 8009010:	f7f7 fd08 	bl	8000a24 <__aeabi_d2iz>
 8009014:	4602      	mov	r2, r0
 8009016:	4b3f      	ldr	r3, [pc, #252]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	4413      	add	r3, r2
 800901c:	4a3d      	ldr	r2, [pc, #244]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 800901e:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[2].OsY + DataNow.OsY) * 0.5));
 8009020:	4b37      	ldr	r3, [pc, #220]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8009022:	89db      	ldrh	r3, [r3, #14]
 8009024:	b21b      	sxth	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	4b37      	ldr	r3, [pc, #220]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 800902a:	885b      	ldrh	r3, [r3, #2]
 800902c:	b21b      	sxth	r3, r3
 800902e:	4413      	add	r3, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7f7 fa7f 	bl	8000534 <__aeabi_i2d>
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	4b34      	ldr	r3, [pc, #208]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 800903c:	f7f7 fae0 	bl	8000600 <__aeabi_dmul>
 8009040:	4603      	mov	r3, r0
 8009042:	460c      	mov	r4, r1
 8009044:	4618      	mov	r0, r3
 8009046:	4621      	mov	r1, r4
 8009048:	f04f 0200 	mov.w	r2, #0
 800904c:	4b33      	ldr	r3, [pc, #204]	; (800911c <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 800904e:	f7f7 fad7 	bl	8000600 <__aeabi_dmul>
 8009052:	4603      	mov	r3, r0
 8009054:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 8009056:	4618      	mov	r0, r3
 8009058:	4621      	mov	r1, r4
 800905a:	f7f7 fce3 	bl	8000a24 <__aeabi_d2iz>
 800905e:	4602      	mov	r2, r0
 8009060:	4b2d      	ldr	r3, [pc, #180]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	4413      	add	r3, r2
 8009066:	4a2c      	ldr	r2, [pc, #176]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009068:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] = (long) (16
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 800906a:	4b25      	ldr	r3, [pc, #148]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b21b      	sxth	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	4b25      	ldr	r3, [pc, #148]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8009074:	881b      	ldrh	r3, [r3, #0]
 8009076:	b21b      	sxth	r3, r3
 8009078:	4413      	add	r3, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f7f7 fa5a 	bl	8000534 <__aeabi_i2d>
 8009080:	f04f 0200 	mov.w	r2, #0
 8009084:	4b21      	ldr	r3, [pc, #132]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8009086:	f7f7 fabb 	bl	8000600 <__aeabi_dmul>
 800908a:	4603      	mov	r3, r0
 800908c:	460c      	mov	r4, r1
 800908e:	4618      	mov	r0, r3
 8009090:	4621      	mov	r1, r4
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	4b22      	ldr	r3, [pc, #136]	; (8009120 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009098:	f7f7 fab2 	bl	8000600 <__aeabi_dmul>
 800909c:	4603      	mov	r3, r0
 800909e:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] = (long) (16
 80090a0:	4618      	mov	r0, r3
 80090a2:	4621      	mov	r1, r4
 80090a4:	f7f7 fcbe 	bl	8000a24 <__aeabi_d2iz>
 80090a8:	4602      	mov	r2, r0
 80090aa:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 80090ac:	605a      	str	r2, [r3, #4]
			CalkaPosredniaRomY[1] = (long) (16
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 80090b0:	885b      	ldrh	r3, [r3, #2]
 80090b2:	b21b      	sxth	r3, r3
 80090b4:	461a      	mov	r2, r3
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 80090b8:	885b      	ldrh	r3, [r3, #2]
 80090ba:	b21b      	sxth	r3, r3
 80090bc:	4413      	add	r3, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f7f7 fa38 	bl	8000534 <__aeabi_i2d>
 80090c4:	f04f 0200 	mov.w	r2, #0
 80090c8:	4b10      	ldr	r3, [pc, #64]	; (800910c <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 80090ca:	f7f7 fa99 	bl	8000600 <__aeabi_dmul>
 80090ce:	4603      	mov	r3, r0
 80090d0:	460c      	mov	r4, r1
 80090d2:	4618      	mov	r0, r3
 80090d4:	4621      	mov	r1, r4
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80090dc:	f7f7 fa90 	bl	8000600 <__aeabi_dmul>
 80090e0:	4603      	mov	r3, r0
 80090e2:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] = (long) (16
 80090e4:	4618      	mov	r0, r3
 80090e6:	4621      	mov	r1, r4
 80090e8:	f7f7 fc9c 	bl	8000a24 <__aeabi_d2iz>
 80090ec:	4602      	mov	r2, r0
 80090ee:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 80090f0:	605a      	str	r2, [r3, #4]

			LicznikPomocniczyRomberg = 4;
 80090f2:	4b02      	ldr	r3, [pc, #8]	; (80090fc <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 80090f4:	2204      	movs	r2, #4
 80090f6:	701a      	strb	r2, [r3, #0]
 80090f8:	e386      	b.n	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>
 80090fa:	bf00      	nop
 80090fc:	2000057c 	.word	0x2000057c
 8009100:	200004f0 	.word	0x200004f0
 8009104:	200004e8 	.word	0x200004e8
 8009108:	200005c4 	.word	0x200005c4
 800910c:	3fe00000 	.word	0x3fe00000
 8009110:	40100000 	.word	0x40100000
 8009114:	200005dc 	.word	0x200005dc
 8009118:	200005a8 	.word	0x200005a8
 800911c:	40200000 	.word	0x40200000
 8009120:	40300000 	.word	0x40300000

		}
		else if (LicznikPomocniczyRomberg == 4)
 8009124:	4ba8      	ldr	r3, [pc, #672]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b04      	cmp	r3, #4
 800912c:	d154      	bne.n	80091d8 <HAL_TIM_PeriodElapsedCallback+0x7a8>
		{
			DataTempRom[1] = DataOld;
 800912e:	4ba7      	ldr	r3, [pc, #668]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009130:	4aa7      	ldr	r2, [pc, #668]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009132:	3306      	adds	r3, #6
 8009134:	6811      	ldr	r1, [r2, #0]
 8009136:	6019      	str	r1, [r3, #0]
 8009138:	8892      	ldrh	r2, [r2, #4]
 800913a:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 800913c:	4ba4      	ldr	r3, [pc, #656]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	b21b      	sxth	r3, r3
 8009142:	461a      	mov	r2, r3
 8009144:	4ba3      	ldr	r3, [pc, #652]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b21b      	sxth	r3, r3
 800914a:	4413      	add	r3, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f7f7 f9f1 	bl	8000534 <__aeabi_i2d>
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	4ba0      	ldr	r3, [pc, #640]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009158:	f7f7 fa52 	bl	8000600 <__aeabi_dmul>
 800915c:	4603      	mov	r3, r0
 800915e:	460c      	mov	r4, r1
 8009160:	4618      	mov	r0, r3
 8009162:	4621      	mov	r1, r4
 8009164:	f04f 0200 	mov.w	r2, #0
 8009168:	4b9c      	ldr	r3, [pc, #624]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800916a:	f7f7 fa49 	bl	8000600 <__aeabi_dmul>
 800916e:	4603      	mov	r3, r0
 8009170:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009172:	4618      	mov	r0, r3
 8009174:	4621      	mov	r1, r4
 8009176:	f7f7 fc55 	bl	8000a24 <__aeabi_d2iz>
 800917a:	4602      	mov	r2, r0
 800917c:	4b98      	ldr	r3, [pc, #608]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	4413      	add	r3, r2
 8009182:	4a97      	ldr	r2, [pc, #604]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8009184:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009186:	4b92      	ldr	r3, [pc, #584]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009188:	885b      	ldrh	r3, [r3, #2]
 800918a:	b21b      	sxth	r3, r3
 800918c:	461a      	mov	r2, r3
 800918e:	4b91      	ldr	r3, [pc, #580]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	b21b      	sxth	r3, r3
 8009194:	4413      	add	r3, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 f9cc 	bl	8000534 <__aeabi_i2d>
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	4b8d      	ldr	r3, [pc, #564]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 80091a2:	f7f7 fa2d 	bl	8000600 <__aeabi_dmul>
 80091a6:	4603      	mov	r3, r0
 80091a8:	460c      	mov	r4, r1
 80091aa:	4618      	mov	r0, r3
 80091ac:	4621      	mov	r1, r4
 80091ae:	f04f 0200 	mov.w	r2, #0
 80091b2:	4b8a      	ldr	r3, [pc, #552]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 80091b4:	f7f7 fa24 	bl	8000600 <__aeabi_dmul>
 80091b8:	4603      	mov	r3, r0
 80091ba:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 80091bc:	4618      	mov	r0, r3
 80091be:	4621      	mov	r1, r4
 80091c0:	f7f7 fc30 	bl	8000a24 <__aeabi_d2iz>
 80091c4:	4602      	mov	r2, r0
 80091c6:	4b87      	ldr	r3, [pc, #540]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	4413      	add	r3, r2
 80091cc:	4a85      	ldr	r2, [pc, #532]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80091ce:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 5;
 80091d0:	4b7d      	ldr	r3, [pc, #500]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80091d2:	2205      	movs	r2, #5
 80091d4:	701a      	strb	r2, [r3, #0]
 80091d6:	e317      	b.n	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>

		}
		else if (LicznikPomocniczyRomberg == 5)
 80091d8:	4b7b      	ldr	r3, [pc, #492]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b05      	cmp	r3, #5
 80091e0:	f040 8098 	bne.w	8009314 <HAL_TIM_PeriodElapsedCallback+0x8e4>
		{
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 80091e4:	4b7a      	ldr	r3, [pc, #488]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b21b      	sxth	r3, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	4b79      	ldr	r3, [pc, #484]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b21b      	sxth	r3, r3
 80091f2:	4413      	add	r3, r2
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 f99d 	bl	8000534 <__aeabi_i2d>
 80091fa:	f04f 0200 	mov.w	r2, #0
 80091fe:	4b76      	ldr	r3, [pc, #472]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009200:	f7f7 f9fe 	bl	8000600 <__aeabi_dmul>
 8009204:	4603      	mov	r3, r0
 8009206:	460c      	mov	r4, r1
 8009208:	4618      	mov	r0, r3
 800920a:	4621      	mov	r1, r4
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	4b72      	ldr	r3, [pc, #456]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8009212:	f7f7 f9f5 	bl	8000600 <__aeabi_dmul>
 8009216:	4603      	mov	r3, r0
 8009218:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 800921a:	4618      	mov	r0, r3
 800921c:	4621      	mov	r1, r4
 800921e:	f7f7 fc01 	bl	8000a24 <__aeabi_d2iz>
 8009222:	4602      	mov	r2, r0
 8009224:	4b6e      	ldr	r3, [pc, #440]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	4413      	add	r3, r2
 800922a:	4a6d      	ldr	r2, [pc, #436]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800922c:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 800922e:	4b68      	ldr	r3, [pc, #416]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009230:	885b      	ldrh	r3, [r3, #2]
 8009232:	b21b      	sxth	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	4b67      	ldr	r3, [pc, #412]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009238:	885b      	ldrh	r3, [r3, #2]
 800923a:	b21b      	sxth	r3, r3
 800923c:	4413      	add	r3, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7f7 f978 	bl	8000534 <__aeabi_i2d>
 8009244:	f04f 0200 	mov.w	r2, #0
 8009248:	4b63      	ldr	r3, [pc, #396]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800924a:	f7f7 f9d9 	bl	8000600 <__aeabi_dmul>
 800924e:	4603      	mov	r3, r0
 8009250:	460c      	mov	r4, r1
 8009252:	4618      	mov	r0, r3
 8009254:	4621      	mov	r1, r4
 8009256:	f04f 0200 	mov.w	r2, #0
 800925a:	4b60      	ldr	r3, [pc, #384]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800925c:	f7f7 f9d0 	bl	8000600 <__aeabi_dmul>
 8009260:	4603      	mov	r3, r0
 8009262:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009264:	4618      	mov	r0, r3
 8009266:	4621      	mov	r1, r4
 8009268:	f7f7 fbdc 	bl	8000a24 <__aeabi_d2iz>
 800926c:	4602      	mov	r2, r0
 800926e:	4b5d      	ldr	r3, [pc, #372]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	4413      	add	r3, r2
 8009274:	4a5b      	ldr	r2, [pc, #364]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8009276:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 8009278:	4b54      	ldr	r3, [pc, #336]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x99c>)
 800927a:	88db      	ldrh	r3, [r3, #6]
 800927c:	b21b      	sxth	r3, r3
 800927e:	461a      	mov	r2, r3
 8009280:	4b54      	ldr	r3, [pc, #336]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	b21b      	sxth	r3, r3
 8009286:	4413      	add	r3, r2
 8009288:	4618      	mov	r0, r3
 800928a:	f7f7 f953 	bl	8000534 <__aeabi_i2d>
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	4b51      	ldr	r3, [pc, #324]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009294:	f7f7 f9b4 	bl	8000600 <__aeabi_dmul>
 8009298:	4603      	mov	r3, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4618      	mov	r0, r3
 800929e:	4621      	mov	r1, r4
 80092a0:	f04f 0200 	mov.w	r2, #0
 80092a4:	4b50      	ldr	r3, [pc, #320]	; (80093e8 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80092a6:	f7f7 f9ab 	bl	8000600 <__aeabi_dmul>
 80092aa:	4603      	mov	r3, r0
 80092ac:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 80092ae:	4618      	mov	r0, r3
 80092b0:	4621      	mov	r1, r4
 80092b2:	f7f7 fbb7 	bl	8000a24 <__aeabi_d2iz>
 80092b6:	4602      	mov	r2, r0
 80092b8:	4b49      	ldr	r3, [pc, #292]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	4a48      	ldr	r2, [pc, #288]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 80092c0:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 80092c2:	4b42      	ldr	r3, [pc, #264]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x99c>)
 80092c4:	891b      	ldrh	r3, [r3, #8]
 80092c6:	b21b      	sxth	r3, r3
 80092c8:	461a      	mov	r2, r3
 80092ca:	4b42      	ldr	r3, [pc, #264]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 80092cc:	885b      	ldrh	r3, [r3, #2]
 80092ce:	b21b      	sxth	r3, r3
 80092d0:	4413      	add	r3, r2
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7f7 f92e 	bl	8000534 <__aeabi_i2d>
 80092d8:	f04f 0200 	mov.w	r2, #0
 80092dc:	4b3e      	ldr	r3, [pc, #248]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 80092de:	f7f7 f98f 	bl	8000600 <__aeabi_dmul>
 80092e2:	4603      	mov	r3, r0
 80092e4:	460c      	mov	r4, r1
 80092e6:	4618      	mov	r0, r3
 80092e8:	4621      	mov	r1, r4
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	4b3e      	ldr	r3, [pc, #248]	; (80093e8 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80092f0:	f7f7 f986 	bl	8000600 <__aeabi_dmul>
 80092f4:	4603      	mov	r3, r0
 80092f6:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 80092f8:	4618      	mov	r0, r3
 80092fa:	4621      	mov	r1, r4
 80092fc:	f7f7 fb92 	bl	8000a24 <__aeabi_d2iz>
 8009300:	4602      	mov	r2, r0
 8009302:	4b38      	ldr	r3, [pc, #224]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	4413      	add	r3, r2
 8009308:	4a36      	ldr	r2, [pc, #216]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 800930a:	6093      	str	r3, [r2, #8]

			LicznikPomocniczyRomberg = 6;
 800930c:	4b2e      	ldr	r3, [pc, #184]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 800930e:	2206      	movs	r2, #6
 8009310:	701a      	strb	r2, [r3, #0]
 8009312:	e279      	b.n	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>

		}
		else if (LicznikPomocniczyRomberg == 6)
 8009314:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b06      	cmp	r3, #6
 800931c:	d166      	bne.n	80093ec <HAL_TIM_PeriodElapsedCallback+0x9bc>
		{
			DataTempRom[3] = DataOld;
 800931e:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009320:	4a2b      	ldr	r2, [pc, #172]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009322:	3312      	adds	r3, #18
 8009324:	6811      	ldr	r1, [r2, #0]
 8009326:	6019      	str	r1, [r3, #0]
 8009328:	8892      	ldrh	r2, [r2, #4]
 800932a:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 800932c:	4b28      	ldr	r3, [pc, #160]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	b21b      	sxth	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	4b27      	ldr	r3, [pc, #156]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b21b      	sxth	r3, r3
 800933a:	4413      	add	r3, r2
 800933c:	4618      	mov	r0, r3
 800933e:	f7f7 f8f9 	bl	8000534 <__aeabi_i2d>
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	4b24      	ldr	r3, [pc, #144]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009348:	f7f7 f95a 	bl	8000600 <__aeabi_dmul>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	4618      	mov	r0, r3
 8009352:	4621      	mov	r1, r4
 8009354:	f04f 0200 	mov.w	r2, #0
 8009358:	4b20      	ldr	r3, [pc, #128]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 800935a:	f7f7 f951 	bl	8000600 <__aeabi_dmul>
 800935e:	4603      	mov	r3, r0
 8009360:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009362:	4618      	mov	r0, r3
 8009364:	4621      	mov	r1, r4
 8009366:	f7f7 fb5d 	bl	8000a24 <__aeabi_d2iz>
 800936a:	4602      	mov	r2, r0
 800936c:	4b1c      	ldr	r3, [pc, #112]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4413      	add	r3, r2
 8009372:	4a1b      	ldr	r2, [pc, #108]	; (80093e0 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8009374:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009376:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009378:	885b      	ldrh	r3, [r3, #2]
 800937a:	b21b      	sxth	r3, r3
 800937c:	461a      	mov	r2, r3
 800937e:	4b15      	ldr	r3, [pc, #84]	; (80093d4 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009380:	885b      	ldrh	r3, [r3, #2]
 8009382:	b21b      	sxth	r3, r3
 8009384:	4413      	add	r3, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f7f7 f8d4 	bl	8000534 <__aeabi_i2d>
 800938c:	f04f 0200 	mov.w	r2, #0
 8009390:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009392:	f7f7 f935 	bl	8000600 <__aeabi_dmul>
 8009396:	4603      	mov	r3, r0
 8009398:	460c      	mov	r4, r1
 800939a:	4618      	mov	r0, r3
 800939c:	4621      	mov	r1, r4
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	4b0e      	ldr	r3, [pc, #56]	; (80093dc <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 80093a4:	f7f7 f92c 	bl	8000600 <__aeabi_dmul>
 80093a8:	4603      	mov	r3, r0
 80093aa:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 80093ac:	4618      	mov	r0, r3
 80093ae:	4621      	mov	r1, r4
 80093b0:	f7f7 fb38 	bl	8000a24 <__aeabi_d2iz>
 80093b4:	4602      	mov	r2, r0
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 80093be:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 7;
 80093c0:	4b01      	ldr	r3, [pc, #4]	; (80093c8 <HAL_TIM_PeriodElapsedCallback+0x998>)
 80093c2:	2207      	movs	r2, #7
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e21f      	b.n	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>
 80093c8:	2000057c 	.word	0x2000057c
 80093cc:	200004f0 	.word	0x200004f0
 80093d0:	200004e8 	.word	0x200004e8
 80093d4:	200005c4 	.word	0x200005c4
 80093d8:	3fe00000 	.word	0x3fe00000
 80093dc:	40100000 	.word	0x40100000
 80093e0:	200005dc 	.word	0x200005dc
 80093e4:	200005a8 	.word	0x200005a8
 80093e8:	40200000 	.word	0x40200000

		}
		else if (LicznikPomocniczyRomberg == 7)
 80093ec:	4bb8      	ldr	r3, [pc, #736]	; (80096d0 <HAL_TIM_PeriodElapsedCallback+0xca0>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b07      	cmp	r3, #7
 80093f4:	f040 8208 	bne.w	8009808 <HAL_TIM_PeriodElapsedCallback+0xdd8>
		{
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 80093f8:	4bb6      	ldr	r3, [pc, #728]	; (80096d4 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b21b      	sxth	r3, r3
 80093fe:	461a      	mov	r2, r3
 8009400:	4bb5      	ldr	r3, [pc, #724]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b21b      	sxth	r3, r3
 8009406:	4413      	add	r3, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f7f7 f893 	bl	8000534 <__aeabi_i2d>
 800940e:	f04f 0200 	mov.w	r2, #0
 8009412:	4bb2      	ldr	r3, [pc, #712]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 8009414:	f7f7 f8f4 	bl	8000600 <__aeabi_dmul>
 8009418:	4603      	mov	r3, r0
 800941a:	460c      	mov	r4, r1
 800941c:	4618      	mov	r0, r3
 800941e:	4621      	mov	r1, r4
 8009420:	f04f 0200 	mov.w	r2, #0
 8009424:	4bae      	ldr	r3, [pc, #696]	; (80096e0 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009426:	f7f7 f8eb 	bl	8000600 <__aeabi_dmul>
 800942a:	4603      	mov	r3, r0
 800942c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 800942e:	4618      	mov	r0, r3
 8009430:	4621      	mov	r1, r4
 8009432:	f7f7 faf7 	bl	8000a24 <__aeabi_d2iz>
 8009436:	4602      	mov	r2, r0
 8009438:	4baa      	ldr	r3, [pc, #680]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4413      	add	r3, r2
 800943e:	4aa9      	ldr	r2, [pc, #676]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009440:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009442:	4ba4      	ldr	r3, [pc, #656]	; (80096d4 <HAL_TIM_PeriodElapsedCallback+0xca4>)
 8009444:	885b      	ldrh	r3, [r3, #2]
 8009446:	b21b      	sxth	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	4ba3      	ldr	r3, [pc, #652]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	b21b      	sxth	r3, r3
 8009450:	4413      	add	r3, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f7f7 f86e 	bl	8000534 <__aeabi_i2d>
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	4b9f      	ldr	r3, [pc, #636]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 800945e:	f7f7 f8cf 	bl	8000600 <__aeabi_dmul>
 8009462:	4603      	mov	r3, r0
 8009464:	460c      	mov	r4, r1
 8009466:	4618      	mov	r0, r3
 8009468:	4621      	mov	r1, r4
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	4b9c      	ldr	r3, [pc, #624]	; (80096e0 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8009470:	f7f7 f8c6 	bl	8000600 <__aeabi_dmul>
 8009474:	4603      	mov	r3, r0
 8009476:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009478:	4618      	mov	r0, r3
 800947a:	4621      	mov	r1, r4
 800947c:	f7f7 fad2 	bl	8000a24 <__aeabi_d2iz>
 8009480:	4602      	mov	r2, r0
 8009482:	4b99      	ldr	r3, [pc, #612]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	4413      	add	r3, r2
 8009488:	4a97      	ldr	r2, [pc, #604]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800948a:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[3].OsX + DataNow.OsX) * 0.5));
 800948c:	4b97      	ldr	r3, [pc, #604]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800948e:	8a5b      	ldrh	r3, [r3, #18]
 8009490:	b21b      	sxth	r3, r3
 8009492:	461a      	mov	r2, r3
 8009494:	4b90      	ldr	r3, [pc, #576]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b21b      	sxth	r3, r3
 800949a:	4413      	add	r3, r2
 800949c:	4618      	mov	r0, r3
 800949e:	f7f7 f849 	bl	8000534 <__aeabi_i2d>
 80094a2:	f04f 0200 	mov.w	r2, #0
 80094a6:	4b8d      	ldr	r3, [pc, #564]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 80094a8:	f7f7 f8aa 	bl	8000600 <__aeabi_dmul>
 80094ac:	4603      	mov	r3, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4618      	mov	r0, r3
 80094b2:	4621      	mov	r1, r4
 80094b4:	f04f 0200 	mov.w	r2, #0
 80094b8:	4b8d      	ldr	r3, [pc, #564]	; (80096f0 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 80094ba:	f7f7 f8a1 	bl	8000600 <__aeabi_dmul>
 80094be:	4603      	mov	r3, r0
 80094c0:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 80094c2:	4618      	mov	r0, r3
 80094c4:	4621      	mov	r1, r4
 80094c6:	f7f7 faad 	bl	8000a24 <__aeabi_d2iz>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b85      	ldr	r3, [pc, #532]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	4413      	add	r3, r2
 80094d2:	4a84      	ldr	r2, [pc, #528]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80094d4:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[3].OsY + DataNow.OsY) * 0.5));
 80094d6:	4b85      	ldr	r3, [pc, #532]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80094d8:	8a9b      	ldrh	r3, [r3, #20]
 80094da:	b21b      	sxth	r3, r3
 80094dc:	461a      	mov	r2, r3
 80094de:	4b7e      	ldr	r3, [pc, #504]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	b21b      	sxth	r3, r3
 80094e4:	4413      	add	r3, r2
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f7 f824 	bl	8000534 <__aeabi_i2d>
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	4b7a      	ldr	r3, [pc, #488]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 80094f2:	f7f7 f885 	bl	8000600 <__aeabi_dmul>
 80094f6:	4603      	mov	r3, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	4618      	mov	r0, r3
 80094fc:	4621      	mov	r1, r4
 80094fe:	f04f 0200 	mov.w	r2, #0
 8009502:	4b7b      	ldr	r3, [pc, #492]	; (80096f0 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8009504:	f7f7 f87c 	bl	8000600 <__aeabi_dmul>
 8009508:	4603      	mov	r3, r0
 800950a:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 800950c:	4618      	mov	r0, r3
 800950e:	4621      	mov	r1, r4
 8009510:	f7f7 fa88 	bl	8000a24 <__aeabi_d2iz>
 8009514:	4602      	mov	r2, r0
 8009516:	4b74      	ldr	r3, [pc, #464]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	4413      	add	r3, r2
 800951c:	4a72      	ldr	r2, [pc, #456]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800951e:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] += (long) (16
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 8009520:	4b72      	ldr	r3, [pc, #456]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 8009522:	88db      	ldrh	r3, [r3, #6]
 8009524:	b21b      	sxth	r3, r3
 8009526:	461a      	mov	r2, r3
 8009528:	4b6b      	ldr	r3, [pc, #428]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b21b      	sxth	r3, r3
 800952e:	4413      	add	r3, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7f6 ffff 	bl	8000534 <__aeabi_i2d>
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	4b68      	ldr	r3, [pc, #416]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 800953c:	f7f7 f860 	bl	8000600 <__aeabi_dmul>
 8009540:	4603      	mov	r3, r0
 8009542:	460c      	mov	r4, r1
 8009544:	4618      	mov	r0, r3
 8009546:	4621      	mov	r1, r4
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	4b69      	ldr	r3, [pc, #420]	; (80096f4 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800954e:	f7f7 f857 	bl	8000600 <__aeabi_dmul>
 8009552:	4603      	mov	r3, r0
 8009554:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] += (long) (16
 8009556:	4618      	mov	r0, r3
 8009558:	4621      	mov	r1, r4
 800955a:	f7f7 fa63 	bl	8000a24 <__aeabi_d2iz>
 800955e:	4602      	mov	r2, r0
 8009560:	4b60      	ldr	r3, [pc, #384]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	4413      	add	r3, r2
 8009566:	4a5f      	ldr	r2, [pc, #380]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009568:	6053      	str	r3, [r2, #4]
			CalkaPosredniaRomY[1] += (long) (16
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 800956a:	4b60      	ldr	r3, [pc, #384]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800956c:	891b      	ldrh	r3, [r3, #8]
 800956e:	b21b      	sxth	r3, r3
 8009570:	461a      	mov	r2, r3
 8009572:	4b59      	ldr	r3, [pc, #356]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b21b      	sxth	r3, r3
 8009578:	4413      	add	r3, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7f6 ffda 	bl	8000534 <__aeabi_i2d>
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	4b55      	ldr	r3, [pc, #340]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 8009586:	f7f7 f83b 	bl	8000600 <__aeabi_dmul>
 800958a:	4603      	mov	r3, r0
 800958c:	460c      	mov	r4, r1
 800958e:	4618      	mov	r0, r3
 8009590:	4621      	mov	r1, r4
 8009592:	f04f 0200 	mov.w	r2, #0
 8009596:	4b57      	ldr	r3, [pc, #348]	; (80096f4 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 8009598:	f7f7 f832 	bl	8000600 <__aeabi_dmul>
 800959c:	4603      	mov	r3, r0
 800959e:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] += (long) (16
 80095a0:	4618      	mov	r0, r3
 80095a2:	4621      	mov	r1, r4
 80095a4:	f7f7 fa3e 	bl	8000a24 <__aeabi_d2iz>
 80095a8:	4602      	mov	r2, r0
 80095aa:	4b4f      	ldr	r3, [pc, #316]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4413      	add	r3, r2
 80095b0:	4a4d      	ldr	r2, [pc, #308]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80095b2:	6053      	str	r3, [r2, #4]

			CalkaPosredniaRomX[0] = (long) (32
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 80095b4:	4b4d      	ldr	r3, [pc, #308]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b21b      	sxth	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	4b46      	ldr	r3, [pc, #280]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	b21b      	sxth	r3, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7f6 ffb5 	bl	8000534 <__aeabi_i2d>
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	4b43      	ldr	r3, [pc, #268]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 80095d0:	f7f7 f816 	bl	8000600 <__aeabi_dmul>
 80095d4:	4603      	mov	r3, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	4618      	mov	r0, r3
 80095da:	4621      	mov	r1, r4
 80095dc:	f04f 0200 	mov.w	r2, #0
 80095e0:	4b45      	ldr	r3, [pc, #276]	; (80096f8 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 80095e2:	f7f7 f80d 	bl	8000600 <__aeabi_dmul>
 80095e6:	4603      	mov	r3, r0
 80095e8:	460c      	mov	r4, r1
			CalkaPosredniaRomX[0] = (long) (32
 80095ea:	4618      	mov	r0, r3
 80095ec:	4621      	mov	r1, r4
 80095ee:	f7f7 fa19 	bl	8000a24 <__aeabi_d2iz>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4b3b      	ldr	r3, [pc, #236]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80095f6:	601a      	str	r2, [r3, #0]
			CalkaPosredniaRomY[0] = (long) (32
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 80095f8:	4b3c      	ldr	r3, [pc, #240]	; (80096ec <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80095fa:	885b      	ldrh	r3, [r3, #2]
 80095fc:	b21b      	sxth	r3, r3
 80095fe:	461a      	mov	r2, r3
 8009600:	4b35      	ldr	r3, [pc, #212]	; (80096d8 <HAL_TIM_PeriodElapsedCallback+0xca8>)
 8009602:	885b      	ldrh	r3, [r3, #2]
 8009604:	b21b      	sxth	r3, r3
 8009606:	4413      	add	r3, r2
 8009608:	4618      	mov	r0, r3
 800960a:	f7f6 ff93 	bl	8000534 <__aeabi_i2d>
 800960e:	f04f 0200 	mov.w	r2, #0
 8009612:	4b32      	ldr	r3, [pc, #200]	; (80096dc <HAL_TIM_PeriodElapsedCallback+0xcac>)
 8009614:	f7f6 fff4 	bl	8000600 <__aeabi_dmul>
 8009618:	4603      	mov	r3, r0
 800961a:	460c      	mov	r4, r1
 800961c:	4618      	mov	r0, r3
 800961e:	4621      	mov	r1, r4
 8009620:	f04f 0200 	mov.w	r2, #0
 8009624:	4b34      	ldr	r3, [pc, #208]	; (80096f8 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 8009626:	f7f6 ffeb 	bl	8000600 <__aeabi_dmul>
 800962a:	4603      	mov	r3, r0
 800962c:	460c      	mov	r4, r1
			CalkaPosredniaRomY[0] = (long) (32
 800962e:	4618      	mov	r0, r3
 8009630:	4621      	mov	r1, r4
 8009632:	f7f7 f9f7 	bl	8000a24 <__aeabi_d2iz>
 8009636:	4602      	mov	r2, r0
 8009638:	4b2b      	ldr	r3, [pc, #172]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800963a:	601a      	str	r2, [r3, #0]

			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 800963c:	4b29      	ldr	r3, [pc, #164]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800963e:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomX[1] - CalkaPosredniaRomX[0]) / 3));
 8009640:	4b28      	ldr	r3, [pc, #160]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009642:	6859      	ldr	r1, [r3, #4]
 8009644:	4b27      	ldr	r3, [pc, #156]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	1acb      	subs	r3, r1, r3
 800964a:	492c      	ldr	r1, [pc, #176]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0xccc>)
 800964c:	fb81 0103 	smull	r0, r1, r1, r3
 8009650:	17db      	asrs	r3, r3, #31
 8009652:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 8009654:	4413      	add	r3, r2
 8009656:	4a2a      	ldr	r2, [pc, #168]	; (8009700 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8009658:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 800965a:	4b22      	ldr	r3, [pc, #136]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800965c:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomX[2] - CalkaPosredniaRomX[1]) / 3));
 800965e:	4b21      	ldr	r3, [pc, #132]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009660:	6899      	ldr	r1, [r3, #8]
 8009662:	4b20      	ldr	r3, [pc, #128]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	1acb      	subs	r3, r1, r3
 8009668:	4924      	ldr	r1, [pc, #144]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0xccc>)
 800966a:	fb81 0103 	smull	r0, r1, r1, r3
 800966e:	17db      	asrs	r3, r3, #31
 8009670:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 8009672:	4413      	add	r3, r2
 8009674:	4a22      	ldr	r2, [pc, #136]	; (8009700 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8009676:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800967a:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomX[3] - CalkaPosredniaRomX[2]) / 3));
 800967c:	4b19      	ldr	r3, [pc, #100]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800967e:	68d9      	ldr	r1, [r3, #12]
 8009680:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	1acb      	subs	r3, r1, r3
 8009686:	491d      	ldr	r1, [pc, #116]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0xccc>)
 8009688:	fb81 0103 	smull	r0, r1, r1, r3
 800968c:	17db      	asrs	r3, r3, #31
 800968e:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 8009690:	4413      	add	r3, r2
 8009692:	4a1b      	ldr	r2, [pc, #108]	; (8009700 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8009694:	6093      	str	r3, [r2, #8]

			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 8009696:	4b14      	ldr	r3, [pc, #80]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8009698:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomY[1] - CalkaPosredniaRomY[0]) / 3));
 800969a:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800969c:	6859      	ldr	r1, [r3, #4]
 800969e:	4b12      	ldr	r3, [pc, #72]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	1acb      	subs	r3, r1, r3
 80096a4:	4915      	ldr	r1, [pc, #84]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0xccc>)
 80096a6:	fb81 0103 	smull	r0, r1, r1, r3
 80096aa:	17db      	asrs	r3, r3, #31
 80096ac:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 80096ae:	4413      	add	r3, r2
 80096b0:	4a14      	ldr	r2, [pc, #80]	; (8009704 <HAL_TIM_PeriodElapsedCallback+0xcd4>)
 80096b2:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 80096b4:	4b0c      	ldr	r3, [pc, #48]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80096b6:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomY[2] - CalkaPosredniaRomY[1]) / 3));
 80096b8:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80096ba:	6899      	ldr	r1, [r3, #8]
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	1acb      	subs	r3, r1, r3
 80096c2:	490e      	ldr	r1, [pc, #56]	; (80096fc <HAL_TIM_PeriodElapsedCallback+0xccc>)
 80096c4:	fb81 0103 	smull	r0, r1, r1, r3
 80096c8:	17db      	asrs	r3, r3, #31
 80096ca:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 80096cc:	4413      	add	r3, r2
 80096ce:	e01b      	b.n	8009708 <HAL_TIM_PeriodElapsedCallback+0xcd8>
 80096d0:	2000057c 	.word	0x2000057c
 80096d4:	200004e8 	.word	0x200004e8
 80096d8:	200005c4 	.word	0x200005c4
 80096dc:	3fe00000 	.word	0x3fe00000
 80096e0:	40100000 	.word	0x40100000
 80096e4:	200005dc 	.word	0x200005dc
 80096e8:	200005a8 	.word	0x200005a8
 80096ec:	200004f0 	.word	0x200004f0
 80096f0:	40200000 	.word	0x40200000
 80096f4:	40300000 	.word	0x40300000
 80096f8:	40400000 	.word	0x40400000
 80096fc:	55555556 	.word	0x55555556
 8009700:	20000598 	.word	0x20000598
 8009704:	20000580 	.word	0x20000580
 8009708:	4a8c      	ldr	r2, [pc, #560]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 800970a:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 800970c:	4b8c      	ldr	r3, [pc, #560]	; (8009940 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 800970e:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomY[3] - CalkaPosredniaRomY[2]) / 3));
 8009710:	4b8b      	ldr	r3, [pc, #556]	; (8009940 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 8009712:	68d9      	ldr	r1, [r3, #12]
 8009714:	4b8a      	ldr	r3, [pc, #552]	; (8009940 <HAL_TIM_PeriodElapsedCallback+0xf10>)
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	1acb      	subs	r3, r1, r3
 800971a:	498a      	ldr	r1, [pc, #552]	; (8009944 <HAL_TIM_PeriodElapsedCallback+0xf14>)
 800971c:	fb81 0103 	smull	r0, r1, r1, r3
 8009720:	17db      	asrs	r3, r3, #31
 8009722:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 8009724:	4413      	add	r3, r2
 8009726:	4a85      	ldr	r2, [pc, #532]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009728:	6093      	str	r3, [r2, #8]

			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 800972a:	4b87      	ldr	r3, [pc, #540]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 800972c:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomX[1] - CalkaPomocniczaRomX[0]) / 15));
 800972e:	4b86      	ldr	r3, [pc, #536]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 8009730:	6859      	ldr	r1, [r3, #4]
 8009732:	4b85      	ldr	r3, [pc, #532]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	1acb      	subs	r3, r1, r3
 8009738:	4984      	ldr	r1, [pc, #528]	; (800994c <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 800973a:	fb81 0103 	smull	r0, r1, r1, r3
 800973e:	4419      	add	r1, r3
 8009740:	10c9      	asrs	r1, r1, #3
 8009742:	17db      	asrs	r3, r3, #31
 8009744:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 8009746:	4413      	add	r3, r2
 8009748:	4a81      	ldr	r2, [pc, #516]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 800974a:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 800974c:	4b7e      	ldr	r3, [pc, #504]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 800974e:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomX[2] - CalkaPomocniczaRomX[1]) / 15));
 8009750:	4b7d      	ldr	r3, [pc, #500]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 8009752:	6899      	ldr	r1, [r3, #8]
 8009754:	4b7c      	ldr	r3, [pc, #496]	; (8009948 <HAL_TIM_PeriodElapsedCallback+0xf18>)
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	1acb      	subs	r3, r1, r3
 800975a:	497c      	ldr	r1, [pc, #496]	; (800994c <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 800975c:	fb81 0103 	smull	r0, r1, r1, r3
 8009760:	4419      	add	r1, r3
 8009762:	10c9      	asrs	r1, r1, #3
 8009764:	17db      	asrs	r3, r3, #31
 8009766:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 8009768:	4413      	add	r3, r2
 800976a:	4a79      	ldr	r2, [pc, #484]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 800976c:	6053      	str	r3, [r2, #4]

			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 800976e:	4b73      	ldr	r3, [pc, #460]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009770:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomY[1] - CalkaPomocniczaRomY[0]) / 15));
 8009772:	4b72      	ldr	r3, [pc, #456]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009774:	6859      	ldr	r1, [r3, #4]
 8009776:	4b71      	ldr	r3, [pc, #452]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	1acb      	subs	r3, r1, r3
 800977c:	4973      	ldr	r1, [pc, #460]	; (800994c <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 800977e:	fb81 0103 	smull	r0, r1, r1, r3
 8009782:	4419      	add	r1, r3
 8009784:	10c9      	asrs	r1, r1, #3
 8009786:	17db      	asrs	r3, r3, #31
 8009788:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 800978a:	4413      	add	r3, r2
 800978c:	4a71      	ldr	r2, [pc, #452]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 800978e:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 8009790:	4b6a      	ldr	r3, [pc, #424]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009792:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomY[2] - CalkaPomocniczaRomY[1]) / 15));
 8009794:	4b69      	ldr	r3, [pc, #420]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 8009796:	6899      	ldr	r1, [r3, #8]
 8009798:	4b68      	ldr	r3, [pc, #416]	; (800993c <HAL_TIM_PeriodElapsedCallback+0xf0c>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	1acb      	subs	r3, r1, r3
 800979e:	496b      	ldr	r1, [pc, #428]	; (800994c <HAL_TIM_PeriodElapsedCallback+0xf1c>)
 80097a0:	fb81 0103 	smull	r0, r1, r1, r3
 80097a4:	4419      	add	r1, r3
 80097a6:	10c9      	asrs	r1, r1, #3
 80097a8:	17db      	asrs	r3, r3, #31
 80097aa:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 80097ac:	4413      	add	r3, r2
 80097ae:	4a69      	ldr	r2, [pc, #420]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80097b0:	6053      	str	r3, [r2, #4]

			CalkaRombX +=
					(long) (CalkaPomocnicza2RomX[1]
 80097b2:	4b67      	ldr	r3, [pc, #412]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 80097b4:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomX[1]
 80097b6:	4b66      	ldr	r3, [pc, #408]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 80097b8:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomX[0]) / 63));
 80097ba:	4b65      	ldr	r3, [pc, #404]	; (8009950 <HAL_TIM_PeriodElapsedCallback+0xf20>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	1acb      	subs	r3, r1, r3
 80097c0:	4965      	ldr	r1, [pc, #404]	; (8009958 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 80097c2:	fb81 0103 	smull	r0, r1, r1, r3
 80097c6:	4419      	add	r1, r3
 80097c8:	1149      	asrs	r1, r1, #5
 80097ca:	17db      	asrs	r3, r3, #31
 80097cc:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomX[1]
 80097ce:	441a      	add	r2, r3
			CalkaRombX +=
 80097d0:	4b62      	ldr	r3, [pc, #392]	; (800995c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	4a61      	ldr	r2, [pc, #388]	; (800995c <HAL_TIM_PeriodElapsedCallback+0xf2c>)
 80097d8:	6013      	str	r3, [r2, #0]
			CalkaRombY +=
					(long) (CalkaPomocnicza2RomY[1]
 80097da:	4b5e      	ldr	r3, [pc, #376]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80097dc:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomY[1]
 80097de:	4b5d      	ldr	r3, [pc, #372]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80097e0:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomY[0]) / 63));
 80097e2:	4b5c      	ldr	r3, [pc, #368]	; (8009954 <HAL_TIM_PeriodElapsedCallback+0xf24>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	1acb      	subs	r3, r1, r3
 80097e8:	495b      	ldr	r1, [pc, #364]	; (8009958 <HAL_TIM_PeriodElapsedCallback+0xf28>)
 80097ea:	fb81 0103 	smull	r0, r1, r1, r3
 80097ee:	4419      	add	r1, r3
 80097f0:	1149      	asrs	r1, r1, #5
 80097f2:	17db      	asrs	r3, r3, #31
 80097f4:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomY[1]
 80097f6:	441a      	add	r2, r3
			CalkaRombY +=
 80097f8:	4b59      	ldr	r3, [pc, #356]	; (8009960 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4413      	add	r3, r2
 80097fe:	4a58      	ldr	r2, [pc, #352]	; (8009960 <HAL_TIM_PeriodElapsedCallback+0xf30>)
 8009800:	6013      	str	r3, [r2, #0]

			LicznikPomocniczyRomberg = 0;
 8009802:	4b58      	ldr	r3, [pc, #352]	; (8009964 <HAL_TIM_PeriodElapsedCallback+0xf34>)
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
		}
		//koniec

//*************KONIEC TESTOWEJ CZESCI*****************************************************************************************

		DataOld = DataNow;
 8009808:	4b57      	ldr	r3, [pc, #348]	; (8009968 <HAL_TIM_PeriodElapsedCallback+0xf38>)
 800980a:	4a58      	ldr	r2, [pc, #352]	; (800996c <HAL_TIM_PeriodElapsedCallback+0xf3c>)
 800980c:	6811      	ldr	r1, [r2, #0]
 800980e:	6019      	str	r1, [r3, #0]
 8009810:	8892      	ldrh	r2, [r2, #4]
 8009812:	809a      	strh	r2, [r3, #4]
// movement of the ball
		if (AngleY > 8000) //bylo 10000
 8009814:	4b56      	ldr	r3, [pc, #344]	; (8009970 <HAL_TIM_PeriodElapsedCallback+0xf40>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800981c:	f340 8144 	ble.w	8009aa8 <HAL_TIM_PeriodElapsedCallback+0x1078>
		{
			fMovedX = 1;
 8009820:	4b54      	ldr	r3, [pc, #336]	; (8009974 <HAL_TIM_PeriodElapsedCallback+0xf44>)
 8009822:	2201      	movs	r2, #1
 8009824:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009826:	4b54      	ldr	r3, [pc, #336]	; (8009978 <HAL_TIM_PeriodElapsedCallback+0xf48>)
 8009828:	2201      	movs	r2, #1
 800982a:	701a      	strb	r2, [r3, #0]

			/*if (X < 215)
				X += 1;*/


			if(WybranyPoziom == 0)
 800982c:	4b53      	ldr	r3, [pc, #332]	; (800997c <HAL_TIM_PeriodElapsedCallback+0xf4c>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	f040 80b0 	bne.w	8009998 <HAL_TIM_PeriodElapsedCallback+0xf68>
			{
				if(PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0] != 0 && X < PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].X
 8009838:	4b51      	ldr	r3, [pc, #324]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	4951      	ldr	r1, [pc, #324]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	440b      	add	r3, r1
 8009848:	3308      	adds	r3, #8
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 825a 	beq.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 8009852:	4b4b      	ldr	r3, [pc, #300]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8009854:	681a      	ldr	r2, [r3, #0]
 8009856:	494b      	ldr	r1, [pc, #300]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009858:	4613      	mov	r3, r2
 800985a:	005b      	lsls	r3, r3, #1
 800985c:	4413      	add	r3, r2
 800985e:	00db      	lsls	r3, r3, #3
 8009860:	440b      	add	r3, r1
 8009862:	3308      	adds	r3, #8
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	4947      	ldr	r1, [pc, #284]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009868:	4613      	mov	r3, r2
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	4413      	add	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	440b      	add	r3, r1
 8009872:	881a      	ldrh	r2, [r3, #0]
 8009874:	4b44      	ldr	r3, [pc, #272]	; (8009988 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29b      	uxth	r3, r3
 800987a:	429a      	cmp	r2, r3
 800987c:	f240 8243 	bls.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
					&& Y == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].Y)
 8009880:	4b3f      	ldr	r3, [pc, #252]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	493f      	ldr	r1, [pc, #252]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009886:	4613      	mov	r3, r2
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	4413      	add	r3, r2
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	440b      	add	r3, r1
 8009890:	3308      	adds	r3, #8
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	493b      	ldr	r1, [pc, #236]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009896:	4613      	mov	r3, r2
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	4413      	add	r3, r2
 800989c:	00db      	lsls	r3, r3, #3
 800989e:	440b      	add	r3, r1
 80098a0:	3302      	adds	r3, #2
 80098a2:	881a      	ldrh	r2, [r3, #0]
 80098a4:	4b39      	ldr	r3, [pc, #228]	; (800998c <HAL_TIM_PeriodElapsedCallback+0xf5c>)
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	429a      	cmp	r2, r3
 80098ac:	f040 822b 	bne.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
				{
					if(OpoznienieDodatniX > SPOWOLNIENIE_KULKI)
 80098b0:	4b37      	ldr	r3, [pc, #220]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d938      	bls.n	800992c <HAL_TIM_PeriodElapsedCallback+0xefc>
					{
						PoprzednieX = X;
 80098ba:	4b33      	ldr	r3, [pc, #204]	; (8009988 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	4b34      	ldr	r3, [pc, #208]	; (8009994 <HAL_TIM_PeriodElapsedCallback+0xf64>)
 80098c2:	801a      	strh	r2, [r3, #0]
						X+=1;
 80098c4:	4b30      	ldr	r3, [pc, #192]	; (8009988 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3301      	adds	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	4b2e      	ldr	r3, [pc, #184]	; (8009988 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80098d0:	801a      	strh	r2, [r3, #0]
						if(X == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].X)
 80098d2:	4b2b      	ldr	r3, [pc, #172]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	492b      	ldr	r1, [pc, #172]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 80098d8:	4613      	mov	r3, r2
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	4413      	add	r3, r2
 80098de:	00db      	lsls	r3, r3, #3
 80098e0:	440b      	add	r3, r1
 80098e2:	3308      	adds	r3, #8
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	4927      	ldr	r1, [pc, #156]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 80098e8:	4613      	mov	r3, r2
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	4413      	add	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	440b      	add	r3, r1
 80098f2:	881a      	ldrh	r2, [r3, #0]
 80098f4:	4b24      	ldr	r3, [pc, #144]	; (8009988 <HAL_TIM_PeriodElapsedCallback+0xf58>)
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d113      	bne.n	8009926 <HAL_TIM_PeriodElapsedCallback+0xef6>
						{
							PozycjaNaSciezce = PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].NumerPunktu;
 80098fe:	4b20      	ldr	r3, [pc, #128]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	4920      	ldr	r1, [pc, #128]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009904:	4613      	mov	r3, r2
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	4413      	add	r3, r2
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	440b      	add	r3, r1
 800990e:	3308      	adds	r3, #8
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	491c      	ldr	r1, [pc, #112]	; (8009984 <HAL_TIM_PeriodElapsedCallback+0xf54>)
 8009914:	4613      	mov	r3, r2
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	4413      	add	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	440b      	add	r3, r1
 800991e:	3304      	adds	r3, #4
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a17      	ldr	r2, [pc, #92]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0xf50>)
 8009924:	6013      	str	r3, [r2, #0]
						}

						OpoznienieDodatniX = 0;
 8009926:	4b1a      	ldr	r3, [pc, #104]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8009928:	2200      	movs	r2, #0
 800992a:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniX += 1;
 800992c:	4b18      	ldr	r3, [pc, #96]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	b2db      	uxtb	r3, r3
 8009932:	3301      	adds	r3, #1
 8009934:	b2da      	uxtb	r2, r3
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xf60>)
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e1e4      	b.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 800993c:	20000580 	.word	0x20000580
 8009940:	200005a8 	.word	0x200005a8
 8009944:	55555556 	.word	0x55555556
 8009948:	20000598 	.word	0x20000598
 800994c:	88888889 	.word	0x88888889
 8009950:	2000062c 	.word	0x2000062c
 8009954:	20000508 	.word	0x20000508
 8009958:	82082083 	.word	0x82082083
 800995c:	20000578 	.word	0x20000578
 8009960:	2000060c 	.word	0x2000060c
 8009964:	2000057c 	.word	0x2000057c
 8009968:	200004e8 	.word	0x200004e8
 800996c:	200005c4 	.word	0x200005c4
 8009970:	200005f8 	.word	0x200005f8
 8009974:	200005d4 	.word	0x200005d4
 8009978:	20000610 	.word	0x20000610
 800997c:	20000626 	.word	0x20000626
 8009980:	200005bc 	.word	0x200005bc
 8009984:	0807dda8 	.word	0x0807dda8
 8009988:	20000634 	.word	0x20000634
 800998c:	200005b8 	.word	0x200005b8
 8009990:	2000056c 	.word	0x2000056c
 8009994:	20000628 	.word	0x20000628
				}

			}else if(WybranyPoziom == 1)
 8009998:	4b8d      	ldr	r3, [pc, #564]	; (8009bd0 <HAL_TIM_PeriodElapsedCallback+0x11a0>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b01      	cmp	r3, #1
 80099a0:	f040 81b1 	bne.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
			{
				if(PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0] != 0 && X < PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].X
 80099a4:	4b8b      	ldr	r3, [pc, #556]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	498b      	ldr	r1, [pc, #556]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	440b      	add	r3, r1
 80099b4:	3308      	adds	r3, #8
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 81a4 	beq.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 80099be:	4b85      	ldr	r3, [pc, #532]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4985      	ldr	r1, [pc, #532]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 80099c4:	4613      	mov	r3, r2
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	4413      	add	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	440b      	add	r3, r1
 80099ce:	3308      	adds	r3, #8
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	4981      	ldr	r1, [pc, #516]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 80099d4:	4613      	mov	r3, r2
 80099d6:	005b      	lsls	r3, r3, #1
 80099d8:	4413      	add	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	440b      	add	r3, r1
 80099de:	881a      	ldrh	r2, [r3, #0]
 80099e0:	4b7e      	ldr	r3, [pc, #504]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	429a      	cmp	r2, r3
 80099e8:	f240 818d 	bls.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
					&& Y == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].Y)
 80099ec:	4b79      	ldr	r3, [pc, #484]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4979      	ldr	r1, [pc, #484]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 80099f2:	4613      	mov	r3, r2
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	4413      	add	r3, r2
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	440b      	add	r3, r1
 80099fc:	3308      	adds	r3, #8
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	4975      	ldr	r1, [pc, #468]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8009a02:	4613      	mov	r3, r2
 8009a04:	005b      	lsls	r3, r3, #1
 8009a06:	4413      	add	r3, r2
 8009a08:	00db      	lsls	r3, r3, #3
 8009a0a:	440b      	add	r3, r1
 8009a0c:	3302      	adds	r3, #2
 8009a0e:	881a      	ldrh	r2, [r3, #0]
 8009a10:	4b73      	ldr	r3, [pc, #460]	; (8009be0 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	429a      	cmp	r2, r3
 8009a18:	f040 8175 	bne.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
				{
					if(OpoznienieDodatniX > SPOWOLNIENIE_KULKI)
 8009a1c:	4b71      	ldr	r3, [pc, #452]	; (8009be4 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d938      	bls.n	8009a98 <HAL_TIM_PeriodElapsedCallback+0x1068>
					{
						PoprzednieX = X;
 8009a26:	4b6d      	ldr	r3, [pc, #436]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	4b6e      	ldr	r3, [pc, #440]	; (8009be8 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 8009a2e:	801a      	strh	r2, [r3, #0]
						X+=1;
 8009a30:	4b6a      	ldr	r3, [pc, #424]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3301      	adds	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	4b68      	ldr	r3, [pc, #416]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009a3c:	801a      	strh	r2, [r3, #0]
						if(X == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].X)
 8009a3e:	4b65      	ldr	r3, [pc, #404]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4965      	ldr	r1, [pc, #404]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	440b      	add	r3, r1
 8009a4e:	3308      	adds	r3, #8
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4961      	ldr	r1, [pc, #388]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8009a54:	4613      	mov	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	440b      	add	r3, r1
 8009a5e:	881a      	ldrh	r2, [r3, #0]
 8009a60:	4b5e      	ldr	r3, [pc, #376]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d113      	bne.n	8009a92 <HAL_TIM_PeriodElapsedCallback+0x1062>
						{
							PozycjaNaSciezce = PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].NumerPunktu;
 8009a6a:	4b5a      	ldr	r3, [pc, #360]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	495a      	ldr	r1, [pc, #360]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8009a70:	4613      	mov	r3, r2
 8009a72:	005b      	lsls	r3, r3, #1
 8009a74:	4413      	add	r3, r2
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	440b      	add	r3, r1
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	4956      	ldr	r1, [pc, #344]	; (8009bd8 <HAL_TIM_PeriodElapsedCallback+0x11a8>)
 8009a80:	4613      	mov	r3, r2
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	4413      	add	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	440b      	add	r3, r1
 8009a8a:	3304      	adds	r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a51      	ldr	r2, [pc, #324]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009a90:	6013      	str	r3, [r2, #0]
						}

						OpoznienieDodatniX = 0;
 8009a92:	4b54      	ldr	r3, [pc, #336]	; (8009be4 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8009a94:	2200      	movs	r2, #0
 8009a96:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniX += 1;
 8009a98:	4b52      	ldr	r3, [pc, #328]	; (8009be4 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2da      	uxtb	r2, r3
 8009aa2:	4b50      	ldr	r3, [pc, #320]	; (8009be4 <HAL_TIM_PeriodElapsedCallback+0x11b4>)
 8009aa4:	701a      	strb	r2, [r3, #0]
 8009aa6:	e12e      	b.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
				}
			}

		}
		else if (AngleY < -8000) //bylo -10000
 8009aa8:	4b50      	ldr	r3, [pc, #320]	; (8009bec <HAL_TIM_PeriodElapsedCallback+0x11bc>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 8009ab0:	f280 8129 	bge.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
		{
			fMovedX = 1;
 8009ab4:	4b4e      	ldr	r3, [pc, #312]	; (8009bf0 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009aba:	4b4e      	ldr	r3, [pc, #312]	; (8009bf4 <HAL_TIM_PeriodElapsedCallback+0x11c4>)
 8009abc:	2201      	movs	r2, #1
 8009abe:	701a      	strb	r2, [r3, #0]

			/*if (X > 25)
				X -= 1;*/

			if(WybranyPoziom == 0)
 8009ac0:	4b43      	ldr	r3, [pc, #268]	; (8009bd0 <HAL_TIM_PeriodElapsedCallback+0x11a0>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f040 809a 	bne.w	8009c00 <HAL_TIM_PeriodElapsedCallback+0x11d0>
			{
				if(PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1] != 0 && X > PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].X
 8009acc:	4b41      	ldr	r3, [pc, #260]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	4949      	ldr	r1, [pc, #292]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	4413      	add	r3, r2
 8009ad8:	00db      	lsls	r3, r3, #3
 8009ada:	440b      	add	r3, r1
 8009adc:	330c      	adds	r3, #12
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f000 8110 	beq.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 8009ae6:	4b3b      	ldr	r3, [pc, #236]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009ae8:	681a      	ldr	r2, [r3, #0]
 8009aea:	4943      	ldr	r1, [pc, #268]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009aec:	4613      	mov	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	4413      	add	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	440b      	add	r3, r1
 8009af6:	330c      	adds	r3, #12
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	493f      	ldr	r1, [pc, #252]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009afc:	4613      	mov	r3, r2
 8009afe:	005b      	lsls	r3, r3, #1
 8009b00:	4413      	add	r3, r2
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	440b      	add	r3, r1
 8009b06:	881a      	ldrh	r2, [r3, #0]
 8009b08:	4b34      	ldr	r3, [pc, #208]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009b0a:	881b      	ldrh	r3, [r3, #0]
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	f080 80f9 	bcs.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
					&& Y == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].Y)
 8009b14:	4b2f      	ldr	r3, [pc, #188]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4937      	ldr	r1, [pc, #220]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	005b      	lsls	r3, r3, #1
 8009b1e:	4413      	add	r3, r2
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	440b      	add	r3, r1
 8009b24:	330c      	adds	r3, #12
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	4933      	ldr	r1, [pc, #204]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	4413      	add	r3, r2
 8009b30:	00db      	lsls	r3, r3, #3
 8009b32:	440b      	add	r3, r1
 8009b34:	3302      	adds	r3, #2
 8009b36:	881a      	ldrh	r2, [r3, #0]
 8009b38:	4b29      	ldr	r3, [pc, #164]	; (8009be0 <HAL_TIM_PeriodElapsedCallback+0x11b0>)
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	f040 80e1 	bne.w	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
				{
					if(OpoznienieUjemnyX > SPOWOLNIENIE_KULKI)
 8009b44:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b05      	cmp	r3, #5
 8009b4c:	d938      	bls.n	8009bc0 <HAL_TIM_PeriodElapsedCallback+0x1190>
					{
						PoprzednieX = X;
 8009b4e:	4b23      	ldr	r3, [pc, #140]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	b29a      	uxth	r2, r3
 8009b54:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <HAL_TIM_PeriodElapsedCallback+0x11b8>)
 8009b56:	801a      	strh	r2, [r3, #0]
						X-=1;
 8009b58:	4b20      	ldr	r3, [pc, #128]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009b64:	801a      	strh	r2, [r3, #0]
						if(X == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].X)
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	4923      	ldr	r1, [pc, #140]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	4413      	add	r3, r2
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	440b      	add	r3, r1
 8009b76:	330c      	adds	r3, #12
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	491f      	ldr	r1, [pc, #124]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	440b      	add	r3, r1
 8009b86:	881a      	ldrh	r2, [r3, #0]
 8009b88:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <HAL_TIM_PeriodElapsedCallback+0x11ac>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d113      	bne.n	8009bba <HAL_TIM_PeriodElapsedCallback+0x118a>
						{
							PozycjaNaSciezce = PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].NumerPunktu;
 8009b92:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	4918      	ldr	r1, [pc, #96]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009b98:	4613      	mov	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4413      	add	r3, r2
 8009b9e:	00db      	lsls	r3, r3, #3
 8009ba0:	440b      	add	r3, r1
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4914      	ldr	r1, [pc, #80]	; (8009bf8 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8009ba8:	4613      	mov	r3, r2
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4413      	add	r3, r2
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	440b      	add	r3, r1
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a07      	ldr	r2, [pc, #28]	; (8009bd4 <HAL_TIM_PeriodElapsedCallback+0x11a4>)
 8009bb8:	6013      	str	r3, [r2, #0]
						}

						OpoznienieUjemnyX = 0;
 8009bba:	4b10      	ldr	r3, [pc, #64]	; (8009bfc <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyX += 1;
 8009bc0:	4b0e      	ldr	r3, [pc, #56]	; (8009bfc <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	4b0c      	ldr	r3, [pc, #48]	; (8009bfc <HAL_TIM_PeriodElapsedCallback+0x11cc>)
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e09a      	b.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 8009bd0:	20000626 	.word	0x20000626
 8009bd4:	200005bc 	.word	0x200005bc
 8009bd8:	0807dec8 	.word	0x0807dec8
 8009bdc:	20000634 	.word	0x20000634
 8009be0:	200005b8 	.word	0x200005b8
 8009be4:	2000056c 	.word	0x2000056c
 8009be8:	20000628 	.word	0x20000628
 8009bec:	200005f8 	.word	0x200005f8
 8009bf0:	200005d4 	.word	0x200005d4
 8009bf4:	20000610 	.word	0x20000610
 8009bf8:	0807dda8 	.word	0x0807dda8
 8009bfc:	20000596 	.word	0x20000596
				}

			}else if(WybranyPoziom == 1)
 8009c00:	4b8b      	ldr	r3, [pc, #556]	; (8009e30 <HAL_TIM_PeriodElapsedCallback+0x1400>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d17d      	bne.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
			{
				if(PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1] != 0 && X > PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].X
 8009c0a:	4b8a      	ldr	r3, [pc, #552]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	498a      	ldr	r1, [pc, #552]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009c10:	4613      	mov	r3, r2
 8009c12:	005b      	lsls	r3, r3, #1
 8009c14:	4413      	add	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	440b      	add	r3, r1
 8009c1a:	330c      	adds	r3, #12
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d071      	beq.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
 8009c22:	4b84      	ldr	r3, [pc, #528]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	4984      	ldr	r1, [pc, #528]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009c28:	4613      	mov	r3, r2
 8009c2a:	005b      	lsls	r3, r3, #1
 8009c2c:	4413      	add	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	440b      	add	r3, r1
 8009c32:	330c      	adds	r3, #12
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	4980      	ldr	r1, [pc, #512]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009c38:	4613      	mov	r3, r2
 8009c3a:	005b      	lsls	r3, r3, #1
 8009c3c:	4413      	add	r3, r2
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	440b      	add	r3, r1
 8009c42:	881a      	ldrh	r2, [r3, #0]
 8009c44:	4b7d      	ldr	r3, [pc, #500]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d25b      	bcs.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
					&& Y == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].Y)
 8009c4e:	4b79      	ldr	r3, [pc, #484]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	4979      	ldr	r1, [pc, #484]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009c54:	4613      	mov	r3, r2
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	4413      	add	r3, r2
 8009c5a:	00db      	lsls	r3, r3, #3
 8009c5c:	440b      	add	r3, r1
 8009c5e:	330c      	adds	r3, #12
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	4975      	ldr	r1, [pc, #468]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009c64:	4613      	mov	r3, r2
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	4413      	add	r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	440b      	add	r3, r1
 8009c6e:	3302      	adds	r3, #2
 8009c70:	881a      	ldrh	r2, [r3, #0]
 8009c72:	4b73      	ldr	r3, [pc, #460]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009c74:	881b      	ldrh	r3, [r3, #0]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d144      	bne.n	8009d06 <HAL_TIM_PeriodElapsedCallback+0x12d6>
				{
					if(OpoznienieUjemnyX > SPOWOLNIENIE_KULKI)
 8009c7c:	4b71      	ldr	r3, [pc, #452]	; (8009e44 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b05      	cmp	r3, #5
 8009c84:	d938      	bls.n	8009cf8 <HAL_TIM_PeriodElapsedCallback+0x12c8>
					{
						PoprzednieX = X;
 8009c86:	4b6d      	ldr	r3, [pc, #436]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29a      	uxth	r2, r3
 8009c8c:	4b6e      	ldr	r3, [pc, #440]	; (8009e48 <HAL_TIM_PeriodElapsedCallback+0x1418>)
 8009c8e:	801a      	strh	r2, [r3, #0]
						X-=1;
 8009c90:	4b6a      	ldr	r3, [pc, #424]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	4b68      	ldr	r3, [pc, #416]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009c9c:	801a      	strh	r2, [r3, #0]
						if(X == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].X)
 8009c9e:	4b65      	ldr	r3, [pc, #404]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4965      	ldr	r1, [pc, #404]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	005b      	lsls	r3, r3, #1
 8009ca8:	4413      	add	r3, r2
 8009caa:	00db      	lsls	r3, r3, #3
 8009cac:	440b      	add	r3, r1
 8009cae:	330c      	adds	r3, #12
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4961      	ldr	r1, [pc, #388]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	005b      	lsls	r3, r3, #1
 8009cb8:	4413      	add	r3, r2
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	440b      	add	r3, r1
 8009cbe:	881a      	ldrh	r2, [r3, #0]
 8009cc0:	4b5e      	ldr	r3, [pc, #376]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d113      	bne.n	8009cf2 <HAL_TIM_PeriodElapsedCallback+0x12c2>
						{
							PozycjaNaSciezce = PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].NumerPunktu;
 8009cca:	4b5a      	ldr	r3, [pc, #360]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	495a      	ldr	r1, [pc, #360]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	005b      	lsls	r3, r3, #1
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	330c      	adds	r3, #12
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4956      	ldr	r1, [pc, #344]	; (8009e38 <HAL_TIM_PeriodElapsedCallback+0x1408>)
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	4413      	add	r3, r2
 8009ce6:	00db      	lsls	r3, r3, #3
 8009ce8:	440b      	add	r3, r1
 8009cea:	3304      	adds	r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a51      	ldr	r2, [pc, #324]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009cf0:	6013      	str	r3, [r2, #0]
						}

						OpoznienieUjemnyX = 0;
 8009cf2:	4b54      	ldr	r3, [pc, #336]	; (8009e44 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyX += 1;
 8009cf8:	4b52      	ldr	r3, [pc, #328]	; (8009e44 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	3301      	adds	r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	4b50      	ldr	r3, [pc, #320]	; (8009e44 <HAL_TIM_PeriodElapsedCallback+0x1414>)
 8009d04:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (AngleX > 8000) //bylo 10000
 8009d06:	4b51      	ldr	r3, [pc, #324]	; (8009e4c <HAL_TIM_PeriodElapsedCallback+0x141c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8009d0e:	f340 8132 	ble.w	8009f76 <HAL_TIM_PeriodElapsedCallback+0x1546>
		{
			fMovedX = 1;
 8009d12:	4b4f      	ldr	r3, [pc, #316]	; (8009e50 <HAL_TIM_PeriodElapsedCallback+0x1420>)
 8009d14:	2201      	movs	r2, #1
 8009d16:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009d18:	4b4e      	ldr	r3, [pc, #312]	; (8009e54 <HAL_TIM_PeriodElapsedCallback+0x1424>)
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	701a      	strb	r2, [r3, #0]

			/*if (Y < 295)
				Y += 1;*/

			if(WybranyPoziom == 0)
 8009d1e:	4b44      	ldr	r3, [pc, #272]	; (8009e30 <HAL_TIM_PeriodElapsedCallback+0x1400>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f040 809d 	bne.w	8009e64 <HAL_TIM_PeriodElapsedCallback+0x1434>
			{
				if(PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2] != 0 && Y < PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].Y
 8009d2a:	4b42      	ldr	r3, [pc, #264]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	494a      	ldr	r1, [pc, #296]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009d30:	4613      	mov	r3, r2
 8009d32:	005b      	lsls	r3, r3, #1
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	3310      	adds	r3, #16
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 824a 	beq.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 8009d44:	4b3b      	ldr	r3, [pc, #236]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	4943      	ldr	r1, [pc, #268]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	005b      	lsls	r3, r3, #1
 8009d4e:	4413      	add	r3, r2
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	440b      	add	r3, r1
 8009d54:	3310      	adds	r3, #16
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	493f      	ldr	r1, [pc, #252]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	4413      	add	r3, r2
 8009d60:	00db      	lsls	r3, r3, #3
 8009d62:	440b      	add	r3, r1
 8009d64:	3302      	adds	r3, #2
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	4b35      	ldr	r3, [pc, #212]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009d6a:	881b      	ldrh	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	f240 8232 	bls.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
					&& X == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].X)
 8009d74:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4937      	ldr	r1, [pc, #220]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	005b      	lsls	r3, r3, #1
 8009d7e:	4413      	add	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	440b      	add	r3, r1
 8009d84:	3310      	adds	r3, #16
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	4933      	ldr	r1, [pc, #204]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	005b      	lsls	r3, r3, #1
 8009d8e:	4413      	add	r3, r2
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	440b      	add	r3, r1
 8009d94:	881a      	ldrh	r2, [r3, #0]
 8009d96:	4b29      	ldr	r3, [pc, #164]	; (8009e3c <HAL_TIM_PeriodElapsedCallback+0x140c>)
 8009d98:	881b      	ldrh	r3, [r3, #0]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	f040 821b 	bne.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
				{
					if(OpoznienieDodatniY > SPOWOLNIENIE_KULKI)
 8009da2:	4b2e      	ldr	r3, [pc, #184]	; (8009e5c <HAL_TIM_PeriodElapsedCallback+0x142c>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b05      	cmp	r3, #5
 8009daa:	d939      	bls.n	8009e20 <HAL_TIM_PeriodElapsedCallback+0x13f0>
					{
						PoprzednieY = Y;
 8009dac:	4b24      	ldr	r3, [pc, #144]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	4b2b      	ldr	r3, [pc, #172]	; (8009e60 <HAL_TIM_PeriodElapsedCallback+0x1430>)
 8009db4:	801a      	strh	r2, [r3, #0]
						Y+=1;
 8009db6:	4b22      	ldr	r3, [pc, #136]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	4b1f      	ldr	r3, [pc, #124]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009dc2:	801a      	strh	r2, [r3, #0]
						if(Y == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].Y)
 8009dc4:	4b1b      	ldr	r3, [pc, #108]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	4923      	ldr	r1, [pc, #140]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009dca:	4613      	mov	r3, r2
 8009dcc:	005b      	lsls	r3, r3, #1
 8009dce:	4413      	add	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	440b      	add	r3, r1
 8009dd4:	3310      	adds	r3, #16
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	491f      	ldr	r1, [pc, #124]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009dda:	4613      	mov	r3, r2
 8009ddc:	005b      	lsls	r3, r3, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	00db      	lsls	r3, r3, #3
 8009de2:	440b      	add	r3, r1
 8009de4:	3302      	adds	r3, #2
 8009de6:	881a      	ldrh	r2, [r3, #0]
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <HAL_TIM_PeriodElapsedCallback+0x1410>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d113      	bne.n	8009e1a <HAL_TIM_PeriodElapsedCallback+0x13ea>
						{
							PozycjaNaSciezce = PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].NumerPunktu;
 8009df2:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	4918      	ldr	r1, [pc, #96]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009df8:	4613      	mov	r3, r2
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	4413      	add	r3, r2
 8009dfe:	00db      	lsls	r3, r3, #3
 8009e00:	440b      	add	r3, r1
 8009e02:	3310      	adds	r3, #16
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	4914      	ldr	r1, [pc, #80]	; (8009e58 <HAL_TIM_PeriodElapsedCallback+0x1428>)
 8009e08:	4613      	mov	r3, r2
 8009e0a:	005b      	lsls	r3, r3, #1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	440b      	add	r3, r1
 8009e12:	3304      	adds	r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a07      	ldr	r2, [pc, #28]	; (8009e34 <HAL_TIM_PeriodElapsedCallback+0x1404>)
 8009e18:	6013      	str	r3, [r2, #0]
						}

						OpoznienieDodatniY = 0;
 8009e1a:	4b10      	ldr	r3, [pc, #64]	; (8009e5c <HAL_TIM_PeriodElapsedCallback+0x142c>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniY += 1;
 8009e20:	4b0e      	ldr	r3, [pc, #56]	; (8009e5c <HAL_TIM_PeriodElapsedCallback+0x142c>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	3301      	adds	r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <HAL_TIM_PeriodElapsedCallback+0x142c>)
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	e1d3      	b.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 8009e30:	20000626 	.word	0x20000626
 8009e34:	200005bc 	.word	0x200005bc
 8009e38:	0807dec8 	.word	0x0807dec8
 8009e3c:	20000634 	.word	0x20000634
 8009e40:	200005b8 	.word	0x200005b8
 8009e44:	20000596 	.word	0x20000596
 8009e48:	20000628 	.word	0x20000628
 8009e4c:	200005c0 	.word	0x200005c0
 8009e50:	200005d4 	.word	0x200005d4
 8009e54:	20000610 	.word	0x20000610
 8009e58:	0807dda8 	.word	0x0807dda8
 8009e5c:	200005a4 	.word	0x200005a4
 8009e60:	20000594 	.word	0x20000594

				}

			}else if(WybranyPoziom == 1)
 8009e64:	4b8e      	ldr	r3, [pc, #568]	; (800a0a0 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	f040 81b4 	bne.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
			{
				if(PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2] != 0 && Y < PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].Y
 8009e70:	4b8c      	ldr	r3, [pc, #560]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	498c      	ldr	r1, [pc, #560]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009e76:	4613      	mov	r3, r2
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	00db      	lsls	r3, r3, #3
 8009e7e:	440b      	add	r3, r1
 8009e80:	3310      	adds	r3, #16
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 81a7 	beq.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 8009e8a:	4b86      	ldr	r3, [pc, #536]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4986      	ldr	r1, [pc, #536]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009e90:	4613      	mov	r3, r2
 8009e92:	005b      	lsls	r3, r3, #1
 8009e94:	4413      	add	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	440b      	add	r3, r1
 8009e9a:	3310      	adds	r3, #16
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4982      	ldr	r1, [pc, #520]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	440b      	add	r3, r1
 8009eaa:	3302      	adds	r3, #2
 8009eac:	881a      	ldrh	r2, [r3, #0]
 8009eae:	4b7f      	ldr	r3, [pc, #508]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	f240 818f 	bls.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
					&& X == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].X)
 8009eba:	4b7a      	ldr	r3, [pc, #488]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	497a      	ldr	r1, [pc, #488]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	005b      	lsls	r3, r3, #1
 8009ec4:	4413      	add	r3, r2
 8009ec6:	00db      	lsls	r3, r3, #3
 8009ec8:	440b      	add	r3, r1
 8009eca:	3310      	adds	r3, #16
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4976      	ldr	r1, [pc, #472]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	005b      	lsls	r3, r3, #1
 8009ed4:	4413      	add	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	440b      	add	r3, r1
 8009eda:	881a      	ldrh	r2, [r3, #0]
 8009edc:	4b74      	ldr	r3, [pc, #464]	; (800a0b0 <HAL_TIM_PeriodElapsedCallback+0x1680>)
 8009ede:	881b      	ldrh	r3, [r3, #0]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	f040 8178 	bne.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
				{
					if(OpoznienieDodatniY > SPOWOLNIENIE_KULKI)
 8009ee8:	4b72      	ldr	r3, [pc, #456]	; (800a0b4 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d939      	bls.n	8009f66 <HAL_TIM_PeriodElapsedCallback+0x1536>
					{
						PoprzednieY = Y;
 8009ef2:	4b6e      	ldr	r3, [pc, #440]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	4b6f      	ldr	r3, [pc, #444]	; (800a0b8 <HAL_TIM_PeriodElapsedCallback+0x1688>)
 8009efa:	801a      	strh	r2, [r3, #0]
						Y+=1;
 8009efc:	4b6b      	ldr	r3, [pc, #428]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	3301      	adds	r3, #1
 8009f04:	b29a      	uxth	r2, r3
 8009f06:	4b69      	ldr	r3, [pc, #420]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009f08:	801a      	strh	r2, [r3, #0]
						if(Y == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].Y)
 8009f0a:	4b66      	ldr	r3, [pc, #408]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	4966      	ldr	r1, [pc, #408]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009f10:	4613      	mov	r3, r2
 8009f12:	005b      	lsls	r3, r3, #1
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3310      	adds	r3, #16
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4962      	ldr	r1, [pc, #392]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009f20:	4613      	mov	r3, r2
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	440b      	add	r3, r1
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	881a      	ldrh	r2, [r3, #0]
 8009f2e:	4b5f      	ldr	r3, [pc, #380]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d113      	bne.n	8009f60 <HAL_TIM_PeriodElapsedCallback+0x1530>
						{
							PozycjaNaSciezce = PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].NumerPunktu;
 8009f38:	4b5a      	ldr	r3, [pc, #360]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	495a      	ldr	r1, [pc, #360]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009f3e:	4613      	mov	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4413      	add	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	440b      	add	r3, r1
 8009f48:	3310      	adds	r3, #16
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4956      	ldr	r1, [pc, #344]	; (800a0a8 <HAL_TIM_PeriodElapsedCallback+0x1678>)
 8009f4e:	4613      	mov	r3, r2
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	00db      	lsls	r3, r3, #3
 8009f56:	440b      	add	r3, r1
 8009f58:	3304      	adds	r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a51      	ldr	r2, [pc, #324]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009f5e:	6013      	str	r3, [r2, #0]
						}

						OpoznienieDodatniY = 0;
 8009f60:	4b54      	ldr	r3, [pc, #336]	; (800a0b4 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniY += 1;
 8009f66:	4b53      	ldr	r3, [pc, #332]	; (800a0b4 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	4b50      	ldr	r3, [pc, #320]	; (800a0b4 <HAL_TIM_PeriodElapsedCallback+0x1684>)
 8009f72:	701a      	strb	r2, [r3, #0]
 8009f74:	e130      	b.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
				}
			}

		}
		else if (AngleX < -8000) //bylo -10000
 8009f76:	4b51      	ldr	r3, [pc, #324]	; (800a0bc <HAL_TIM_PeriodElapsedCallback+0x168c>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 8009f7e:	f280 812b 	bge.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
		{
			fMovedX = 1;
 8009f82:	4b4f      	ldr	r3, [pc, #316]	; (800a0c0 <HAL_TIM_PeriodElapsedCallback+0x1690>)
 8009f84:	2201      	movs	r2, #1
 8009f86:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 8009f88:	4b4e      	ldr	r3, [pc, #312]	; (800a0c4 <HAL_TIM_PeriodElapsedCallback+0x1694>)
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	701a      	strb	r2, [r3, #0]

			/*if (Y > 25)
				Y -= 1;*/

			if(WybranyPoziom == 0)
 8009f8e:	4b44      	ldr	r3, [pc, #272]	; (800a0a0 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f040 809b 	bne.w	800a0d0 <HAL_TIM_PeriodElapsedCallback+0x16a0>
			{
				if(PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3] != 0 && Y > PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].Y
 8009f9a:	4b42      	ldr	r3, [pc, #264]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	494a      	ldr	r1, [pc, #296]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	005b      	lsls	r3, r3, #1
 8009fa4:	4413      	add	r3, r2
 8009fa6:	00db      	lsls	r3, r3, #3
 8009fa8:	440b      	add	r3, r1
 8009faa:	3314      	adds	r3, #20
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 8112 	beq.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 8009fb4:	4b3b      	ldr	r3, [pc, #236]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4943      	ldr	r1, [pc, #268]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8009fba:	4613      	mov	r3, r2
 8009fbc:	005b      	lsls	r3, r3, #1
 8009fbe:	4413      	add	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3314      	adds	r3, #20
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	493f      	ldr	r1, [pc, #252]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8009fca:	4613      	mov	r3, r2
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	4413      	add	r3, r2
 8009fd0:	00db      	lsls	r3, r3, #3
 8009fd2:	440b      	add	r3, r1
 8009fd4:	3302      	adds	r3, #2
 8009fd6:	881a      	ldrh	r2, [r3, #0]
 8009fd8:	4b34      	ldr	r3, [pc, #208]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	f080 80fa 	bcs.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
						&& X == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].X)
 8009fe4:	4b2f      	ldr	r3, [pc, #188]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	4937      	ldr	r1, [pc, #220]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8009fea:	4613      	mov	r3, r2
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	4413      	add	r3, r2
 8009ff0:	00db      	lsls	r3, r3, #3
 8009ff2:	440b      	add	r3, r1
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	4933      	ldr	r1, [pc, #204]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	4413      	add	r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	440b      	add	r3, r1
 800a004:	881a      	ldrh	r2, [r3, #0]
 800a006:	4b2a      	ldr	r3, [pc, #168]	; (800a0b0 <HAL_TIM_PeriodElapsedCallback+0x1680>)
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	429a      	cmp	r2, r3
 800a00e:	f040 80e3 	bne.w	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
				{
					if(OpoznienieUjemnyY > SPOWOLNIENIE_KULKI)
 800a012:	4b2e      	ldr	r3, [pc, #184]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0x169c>)
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	b2db      	uxtb	r3, r3
 800a018:	2b05      	cmp	r3, #5
 800a01a:	d939      	bls.n	800a090 <HAL_TIM_PeriodElapsedCallback+0x1660>
					{
						PoprzednieY = Y;
 800a01c:	4b23      	ldr	r3, [pc, #140]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29a      	uxth	r2, r3
 800a022:	4b25      	ldr	r3, [pc, #148]	; (800a0b8 <HAL_TIM_PeriodElapsedCallback+0x1688>)
 800a024:	801a      	strh	r2, [r3, #0]
						Y-=1;
 800a026:	4b21      	ldr	r3, [pc, #132]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	4b1e      	ldr	r3, [pc, #120]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 800a032:	801a      	strh	r2, [r3, #0]
						if(Y == PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].Y)
 800a034:	4b1b      	ldr	r3, [pc, #108]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 800a036:	681a      	ldr	r2, [r3, #0]
 800a038:	4923      	ldr	r1, [pc, #140]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800a03a:	4613      	mov	r3, r2
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4413      	add	r3, r2
 800a040:	00db      	lsls	r3, r3, #3
 800a042:	440b      	add	r3, r1
 800a044:	3314      	adds	r3, #20
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	491f      	ldr	r1, [pc, #124]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800a04a:	4613      	mov	r3, r2
 800a04c:	005b      	lsls	r3, r3, #1
 800a04e:	4413      	add	r3, r2
 800a050:	00db      	lsls	r3, r3, #3
 800a052:	440b      	add	r3, r1
 800a054:	3302      	adds	r3, #2
 800a056:	881a      	ldrh	r2, [r3, #0]
 800a058:	4b14      	ldr	r3, [pc, #80]	; (800a0ac <HAL_TIM_PeriodElapsedCallback+0x167c>)
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	429a      	cmp	r2, r3
 800a060:	d113      	bne.n	800a08a <HAL_TIM_PeriodElapsedCallback+0x165a>
						{
							PozycjaNaSciezce = PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].NumerPunktu;
 800a062:	4b10      	ldr	r3, [pc, #64]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	4918      	ldr	r1, [pc, #96]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800a068:	4613      	mov	r3, r2
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	4413      	add	r3, r2
 800a06e:	00db      	lsls	r3, r3, #3
 800a070:	440b      	add	r3, r1
 800a072:	3314      	adds	r3, #20
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	4914      	ldr	r1, [pc, #80]	; (800a0c8 <HAL_TIM_PeriodElapsedCallback+0x1698>)
 800a078:	4613      	mov	r3, r2
 800a07a:	005b      	lsls	r3, r3, #1
 800a07c:	4413      	add	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	440b      	add	r3, r1
 800a082:	3304      	adds	r3, #4
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a07      	ldr	r2, [pc, #28]	; (800a0a4 <HAL_TIM_PeriodElapsedCallback+0x1674>)
 800a088:	6013      	str	r3, [r2, #0]
						}

						OpoznienieUjemnyY = 0;
 800a08a:	4b10      	ldr	r3, [pc, #64]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0x169c>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyY += 1;
 800a090:	4b0e      	ldr	r3, [pc, #56]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0x169c>)
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	3301      	adds	r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <HAL_TIM_PeriodElapsedCallback+0x169c>)
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e09b      	b.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 800a0a0:	20000626 	.word	0x20000626
 800a0a4:	200005bc 	.word	0x200005bc
 800a0a8:	0807dec8 	.word	0x0807dec8
 800a0ac:	200005b8 	.word	0x200005b8
 800a0b0:	20000634 	.word	0x20000634
 800a0b4:	200005a4 	.word	0x200005a4
 800a0b8:	20000594 	.word	0x20000594
 800a0bc:	200005c0 	.word	0x200005c0
 800a0c0:	200005d4 	.word	0x200005d4
 800a0c4:	20000610 	.word	0x20000610
 800a0c8:	0807dda8 	.word	0x0807dda8
 800a0cc:	200005f4 	.word	0x200005f4
				}

			}else if(WybranyPoziom == 1)
 800a0d0:	4b9e      	ldr	r3, [pc, #632]	; (800a34c <HAL_TIM_PeriodElapsedCallback+0x191c>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d17e      	bne.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
			{
				if(PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3] != 0 && Y > PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].Y
 800a0da:	4b9d      	ldr	r3, [pc, #628]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	499d      	ldr	r1, [pc, #628]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	005b      	lsls	r3, r3, #1
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	3314      	adds	r3, #20
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d072      	beq.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
 800a0f2:	4b97      	ldr	r3, [pc, #604]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4997      	ldr	r1, [pc, #604]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	005b      	lsls	r3, r3, #1
 800a0fc:	4413      	add	r3, r2
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	440b      	add	r3, r1
 800a102:	3314      	adds	r3, #20
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	4993      	ldr	r1, [pc, #588]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a108:	4613      	mov	r3, r2
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	3302      	adds	r3, #2
 800a114:	881a      	ldrh	r2, [r3, #0]
 800a116:	4b90      	ldr	r3, [pc, #576]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a118:	881b      	ldrh	r3, [r3, #0]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d25b      	bcs.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
						&& X == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].X)
 800a120:	4b8b      	ldr	r3, [pc, #556]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	498b      	ldr	r1, [pc, #556]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a126:	4613      	mov	r3, r2
 800a128:	005b      	lsls	r3, r3, #1
 800a12a:	4413      	add	r3, r2
 800a12c:	00db      	lsls	r3, r3, #3
 800a12e:	440b      	add	r3, r1
 800a130:	3314      	adds	r3, #20
 800a132:	681a      	ldr	r2, [r3, #0]
 800a134:	4987      	ldr	r1, [pc, #540]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a136:	4613      	mov	r3, r2
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	4413      	add	r3, r2
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	440b      	add	r3, r1
 800a140:	881a      	ldrh	r2, [r3, #0]
 800a142:	4b86      	ldr	r3, [pc, #536]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x192c>)
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	b29b      	uxth	r3, r3
 800a148:	429a      	cmp	r2, r3
 800a14a:	d145      	bne.n	800a1d8 <HAL_TIM_PeriodElapsedCallback+0x17a8>
				{
					if(OpoznienieUjemnyY > SPOWOLNIENIE_KULKI)
 800a14c:	4b84      	ldr	r3, [pc, #528]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b05      	cmp	r3, #5
 800a154:	d939      	bls.n	800a1ca <HAL_TIM_PeriodElapsedCallback+0x179a>
					{
						PoprzednieY = Y;
 800a156:	4b80      	ldr	r3, [pc, #512]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	4b81      	ldr	r3, [pc, #516]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x1934>)
 800a15e:	801a      	strh	r2, [r3, #0]
						Y-=1;
 800a160:	4b7d      	ldr	r3, [pc, #500]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	3b01      	subs	r3, #1
 800a168:	b29a      	uxth	r2, r3
 800a16a:	4b7b      	ldr	r3, [pc, #492]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a16c:	801a      	strh	r2, [r3, #0]
						if(Y == PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].Y)
 800a16e:	4b78      	ldr	r3, [pc, #480]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4978      	ldr	r1, [pc, #480]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a174:	4613      	mov	r3, r2
 800a176:	005b      	lsls	r3, r3, #1
 800a178:	4413      	add	r3, r2
 800a17a:	00db      	lsls	r3, r3, #3
 800a17c:	440b      	add	r3, r1
 800a17e:	3314      	adds	r3, #20
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4974      	ldr	r1, [pc, #464]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a184:	4613      	mov	r3, r2
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	4413      	add	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	440b      	add	r3, r1
 800a18e:	3302      	adds	r3, #2
 800a190:	881a      	ldrh	r2, [r3, #0]
 800a192:	4b71      	ldr	r3, [pc, #452]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	429a      	cmp	r2, r3
 800a19a:	d113      	bne.n	800a1c4 <HAL_TIM_PeriodElapsedCallback+0x1794>
						{
							PozycjaNaSciezce = PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].NumerPunktu;
 800a19c:	4b6c      	ldr	r3, [pc, #432]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	496c      	ldr	r1, [pc, #432]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	005b      	lsls	r3, r3, #1
 800a1a6:	4413      	add	r3, r2
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	440b      	add	r3, r1
 800a1ac:	3314      	adds	r3, #20
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4968      	ldr	r1, [pc, #416]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x1924>)
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4413      	add	r3, r2
 800a1b8:	00db      	lsls	r3, r3, #3
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3304      	adds	r3, #4
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a63      	ldr	r2, [pc, #396]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x1920>)
 800a1c2:	6013      	str	r3, [r2, #0]
						}

						OpoznienieUjemnyY = 0;
 800a1c4:	4b66      	ldr	r3, [pc, #408]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyY += 1;
 800a1ca:	4b65      	ldr	r3, [pc, #404]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	4b62      	ldr	r3, [pc, #392]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x1930>)
 800a1d6:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		if (fMovedY == 1 && (AngleY <= 8000 && AngleY >= -8000) //bylo 10000
 800a1d8:	4b63      	ldr	r3, [pc, #396]	; (800a368 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d109      	bne.n	800a1f6 <HAL_TIM_PeriodElapsedCallback+0x17c6>
 800a1e2:	4b62      	ldr	r3, [pc, #392]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a1ea:	dc04      	bgt.n	800a1f6 <HAL_TIM_PeriodElapsedCallback+0x17c6>
 800a1ec:	4b5f      	ldr	r3, [pc, #380]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 800a1f4:	da0a      	bge.n	800a20c <HAL_TIM_PeriodElapsedCallback+0x17dc>
				|| (AngleY > 20000 || AngleY < -20000))
 800a1f6:	4b5d      	ldr	r3, [pc, #372]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a1fe:	4293      	cmp	r3, r2
 800a200:	dc04      	bgt.n	800a20c <HAL_TIM_PeriodElapsedCallback+0x17dc>
 800a202:	4b5a      	ldr	r3, [pc, #360]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a5a      	ldr	r2, [pc, #360]	; (800a370 <HAL_TIM_PeriodElapsedCallback+0x1940>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	da07      	bge.n	800a21c <HAL_TIM_PeriodElapsedCallback+0x17ec>
		{
			ResetTimeY += 1;
 800a20c:	4b59      	ldr	r3, [pc, #356]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	3301      	adds	r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	4b57      	ldr	r3, [pc, #348]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 800a218:	801a      	strh	r2, [r3, #0]
 800a21a:	e011      	b.n	800a240 <HAL_TIM_PeriodElapsedCallback+0x1810>

		}
		else if (fMovedY == 1 && (AngleY > 8000 || AngleY < -8000)) //bylo 10000
 800a21c:	4b52      	ldr	r3, [pc, #328]	; (800a368 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	2b01      	cmp	r3, #1
 800a224:	d10c      	bne.n	800a240 <HAL_TIM_PeriodElapsedCallback+0x1810>
 800a226:	4b51      	ldr	r3, [pc, #324]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a22e:	dc04      	bgt.n	800a23a <HAL_TIM_PeriodElapsedCallback+0x180a>
 800a230:	4b4e      	ldr	r3, [pc, #312]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 800a238:	da02      	bge.n	800a240 <HAL_TIM_PeriodElapsedCallback+0x1810>
		{
			ResetTimeY = 0;
 800a23a:	4b4e      	ldr	r3, [pc, #312]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	801a      	strh	r2, [r3, #0]
		}

		if (fMovedX == 1 && (AngleX <= 8000 && AngleX >= -8000) //bylo 10000
 800a240:	4b4d      	ldr	r3, [pc, #308]	; (800a378 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b01      	cmp	r3, #1
 800a248:	d109      	bne.n	800a25e <HAL_TIM_PeriodElapsedCallback+0x182e>
 800a24a:	4b4c      	ldr	r3, [pc, #304]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a252:	dc04      	bgt.n	800a25e <HAL_TIM_PeriodElapsedCallback+0x182e>
 800a254:	4b49      	ldr	r3, [pc, #292]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 800a25c:	da0a      	bge.n	800a274 <HAL_TIM_PeriodElapsedCallback+0x1844>
				|| (AngleX > 20000 || AngleX < -20000))
 800a25e:	4b47      	ldr	r3, [pc, #284]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a266:	4293      	cmp	r3, r2
 800a268:	dc04      	bgt.n	800a274 <HAL_TIM_PeriodElapsedCallback+0x1844>
 800a26a:	4b44      	ldr	r3, [pc, #272]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a40      	ldr	r2, [pc, #256]	; (800a370 <HAL_TIM_PeriodElapsedCallback+0x1940>)
 800a270:	4293      	cmp	r3, r2
 800a272:	da07      	bge.n	800a284 <HAL_TIM_PeriodElapsedCallback+0x1854>
		{
			ResetTimeX += 1;
 800a274:	4b42      	ldr	r3, [pc, #264]	; (800a380 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800a276:	881b      	ldrh	r3, [r3, #0]
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3301      	adds	r3, #1
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	4b40      	ldr	r3, [pc, #256]	; (800a380 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800a280:	801a      	strh	r2, [r3, #0]
 800a282:	e011      	b.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x1878>

		}
		else if (fMovedX == 1 && (AngleX > 8000 || AngleX < -8000)) //bylo 10000
 800a284:	4b3c      	ldr	r3, [pc, #240]	; (800a378 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d10c      	bne.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x1878>
 800a28e:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800a296:	dc04      	bgt.n	800a2a2 <HAL_TIM_PeriodElapsedCallback+0x1872>
 800a298:	4b38      	ldr	r3, [pc, #224]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f513 5ffa 	cmn.w	r3, #8000	; 0x1f40
 800a2a0:	da02      	bge.n	800a2a8 <HAL_TIM_PeriodElapsedCallback+0x1878>
		{
			ResetTimeX = 0;
 800a2a2:	4b37      	ldr	r3, [pc, #220]	; (800a380 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	801a      	strh	r2, [r3, #0]
		}

		if (ResetTimeX >= 1000)
 800a2a8:	4b35      	ldr	r3, [pc, #212]	; (800a380 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2b2:	d308      	bcc.n	800a2c6 <HAL_TIM_PeriodElapsedCallback+0x1896>
		{
			AngleX = 0;
 800a2b4:	4b31      	ldr	r3, [pc, #196]	; (800a37c <HAL_TIM_PeriodElapsedCallback+0x194c>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]

			ResetTimeX = 0;
 800a2ba:	4b31      	ldr	r3, [pc, #196]	; (800a380 <HAL_TIM_PeriodElapsedCallback+0x1950>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	801a      	strh	r2, [r3, #0]
			fMovedX = 0;
 800a2c0:	4b2d      	ldr	r3, [pc, #180]	; (800a378 <HAL_TIM_PeriodElapsedCallback+0x1948>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	701a      	strb	r2, [r3, #0]
		}

		if (ResetTimeY >= 1000)
 800a2c6:	4b2b      	ldr	r3, [pc, #172]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 800a2c8:	881b      	ldrh	r3, [r3, #0]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2d0:	d308      	bcc.n	800a2e4 <HAL_TIM_PeriodElapsedCallback+0x18b4>
		{
			AngleY = 0;
 800a2d2:	4b26      	ldr	r3, [pc, #152]	; (800a36c <HAL_TIM_PeriodElapsedCallback+0x193c>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	601a      	str	r2, [r3, #0]

			ResetTimeY = 0;
 800a2d8:	4b26      	ldr	r3, [pc, #152]	; (800a374 <HAL_TIM_PeriodElapsedCallback+0x1944>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	801a      	strh	r2, [r3, #0]
			fMovedY = 0;
 800a2de:	4b22      	ldr	r3, [pc, #136]	; (800a368 <HAL_TIM_PeriodElapsedCallback+0x1938>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	701a      	strb	r2, [r3, #0]
		}

		if (StanGry == Gra && RozpoczetoNowaGre == 0)
 800a2e4:	4b27      	ldr	r3, [pc, #156]	; (800a384 <HAL_TIM_PeriodElapsedCallback+0x1954>)
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d123      	bne.n	800a336 <HAL_TIM_PeriodElapsedCallback+0x1906>
 800a2ee:	4b26      	ldr	r3, [pc, #152]	; (800a388 <HAL_TIM_PeriodElapsedCallback+0x1958>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d11e      	bne.n	800a336 <HAL_TIM_PeriodElapsedCallback+0x1906>
		{
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	f7f7 fcce 	bl	8001c9c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(PoprzednieX - 6, PoprzednieY - 6, 13, 13);
 800a300:	4b22      	ldr	r3, [pc, #136]	; (800a38c <HAL_TIM_PeriodElapsedCallback+0x195c>)
 800a302:	881b      	ldrh	r3, [r3, #0]
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b06      	subs	r3, #6
 800a308:	b298      	uxth	r0, r3
 800a30a:	4b16      	ldr	r3, [pc, #88]	; (800a364 <HAL_TIM_PeriodElapsedCallback+0x1934>)
 800a30c:	881b      	ldrh	r3, [r3, #0]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	3b06      	subs	r3, #6
 800a312:	b299      	uxth	r1, r3
 800a314:	230d      	movs	r3, #13
 800a316:	220d      	movs	r2, #13
 800a318:	f7f8 f84e 	bl	80023b8 <BSP_LCD_FillRect>

			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a31c:	481c      	ldr	r0, [pc, #112]	; (800a390 <HAL_TIM_PeriodElapsedCallback+0x1960>)
 800a31e:	f7f7 fcbd 	bl	8001c9c <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(X, Y, 5);
 800a322:	4b0e      	ldr	r3, [pc, #56]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x192c>)
 800a324:	881b      	ldrh	r3, [r3, #0]
 800a326:	b298      	uxth	r0, r3
 800a328:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x1928>)
 800a32a:	881b      	ldrh	r3, [r3, #0]
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	2205      	movs	r2, #5
 800a330:	4619      	mov	r1, r3
 800a332:	f7f8 f89b 	bl	800246c <BSP_LCD_FillCircle>
		}
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a16      	ldr	r2, [pc, #88]	; (800a394 <HAL_TIM_PeriodElapsedCallback+0x1964>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d101      	bne.n	800a344 <HAL_TIM_PeriodElapsedCallback+0x1914>
	{
		HAL_IncTick();
 800a340:	f7f8 fd62 	bl	8002e08 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bdb0      	pop	{r4, r5, r7, pc}
 800a34c:	20000626 	.word	0x20000626
 800a350:	200005bc 	.word	0x200005bc
 800a354:	0807dec8 	.word	0x0807dec8
 800a358:	200005b8 	.word	0x200005b8
 800a35c:	20000634 	.word	0x20000634
 800a360:	200005f4 	.word	0x200005f4
 800a364:	20000594 	.word	0x20000594
 800a368:	20000610 	.word	0x20000610
 800a36c:	200005f8 	.word	0x200005f8
 800a370:	ffffb1e0 	.word	0xffffb1e0
 800a374:	20000624 	.word	0x20000624
 800a378:	200005d4 	.word	0x200005d4
 800a37c:	200005c0 	.word	0x200005c0
 800a380:	200005ca 	.word	0x200005ca
 800a384:	20000611 	.word	0x20000611
 800a388:	20000608 	.word	0x20000608
 800a38c:	20000628 	.word	0x20000628
 800a390:	ffff0000 	.word	0xffff0000
 800a394:	40001000 	.word	0x40001000

0800a398 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800a39c:	bf00      	nop
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800a3ac:	4b17      	ldr	r3, [pc, #92]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3ae:	4a18      	ldr	r2, [pc, #96]	; (800a410 <MX_SPI5_Init+0x68>)
 800a3b0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a3b2:	4b16      	ldr	r3, [pc, #88]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a3b8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a3ba:	4b14      	ldr	r3, [pc, #80]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a3c0:	4b12      	ldr	r3, [pc, #72]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a3c6:	4b11      	ldr	r3, [pc, #68]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a3d2:	4b0e      	ldr	r3, [pc, #56]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3d8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a3da:	4b0c      	ldr	r3, [pc, #48]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3dc:	2218      	movs	r2, #24
 800a3de:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a3e6:	4b09      	ldr	r3, [pc, #36]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3ec:	4b07      	ldr	r3, [pc, #28]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3f4:	220a      	movs	r2, #10
 800a3f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a3f8:	4804      	ldr	r0, [pc, #16]	; (800a40c <MX_SPI5_Init+0x64>)
 800a3fa:	f7fb fa9a 	bl	8005932 <HAL_SPI_Init>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a404:	f7ff ffc8 	bl	800a398 <Error_Handler>
  }

}
 800a408:	bf00      	nop
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	20000514 	.word	0x20000514
 800a410:	40015000 	.word	0x40015000

0800a414 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b08a      	sub	sp, #40	; 0x28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	2200      	movs	r2, #0
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	605a      	str	r2, [r3, #4]
 800a426:	609a      	str	r2, [r3, #8]
 800a428:	60da      	str	r2, [r3, #12]
 800a42a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a19      	ldr	r2, [pc, #100]	; (800a498 <HAL_SPI_MspInit+0x84>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d12c      	bne.n	800a490 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a436:	2300      	movs	r3, #0
 800a438:	613b      	str	r3, [r7, #16]
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a43c:	4b17      	ldr	r3, [pc, #92]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a444:	6453      	str	r3, [r2, #68]	; 0x44
 800a446:	4b15      	ldr	r3, [pc, #84]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a44a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a44e:	613b      	str	r3, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	4a11      	ldr	r2, [pc, #68]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a458:	4b10      	ldr	r3, [pc, #64]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45c:	f043 0320 	orr.w	r3, r3, #32
 800a460:	6313      	str	r3, [r2, #48]	; 0x30
 800a462:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <HAL_SPI_MspInit+0x88>)
 800a464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a466:	f003 0320 	and.w	r3, r3, #32
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800a46e:	f44f 7360 	mov.w	r3, #896	; 0x380
 800a472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a474:	2302      	movs	r3, #2
 800a476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a478:	2300      	movs	r3, #0
 800a47a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a47c:	2300      	movs	r3, #0
 800a47e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800a480:	2305      	movs	r3, #5
 800a482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a484:	f107 0314 	add.w	r3, r7, #20
 800a488:	4619      	mov	r1, r3
 800a48a:	4805      	ldr	r0, [pc, #20]	; (800a4a0 <HAL_SPI_MspInit+0x8c>)
 800a48c:	f7f9 fb54 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a490:	bf00      	nop
 800a492:	3728      	adds	r7, #40	; 0x28
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	40015000 	.word	0x40015000
 800a49c:	40023800 	.word	0x40023800
 800a4a0:	40021400 	.word	0x40021400

0800a4a4 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <HAL_SPI_MspDeInit+0x30>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d10a      	bne.n	800a4cc <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800a4b6:	4a08      	ldr	r2, [pc, #32]	; (800a4d8 <HAL_SPI_MspDeInit+0x34>)
 800a4b8:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <HAL_SPI_MspDeInit+0x34>)
 800a4ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a4c0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800a4c2:	f44f 7160 	mov.w	r1, #896	; 0x380
 800a4c6:	4805      	ldr	r0, [pc, #20]	; (800a4dc <HAL_SPI_MspDeInit+0x38>)
 800a4c8:	f7f9 fce0 	bl	8003e8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 800a4cc:	bf00      	nop
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	40015000 	.word	0x40015000
 800a4d8:	40023800 	.word	0x40023800
 800a4dc:	40021400 	.word	0x40021400

0800a4e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	4a10      	ldr	r2, [pc, #64]	; (800a52c <HAL_MspInit+0x4c>)
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <HAL_MspInit+0x4c>)
 800a4ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a4f4:	6453      	str	r3, [r2, #68]	; 0x44
 800a4f6:	4b0d      	ldr	r3, [pc, #52]	; (800a52c <HAL_MspInit+0x4c>)
 800a4f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4fe:	607b      	str	r3, [r7, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a502:	2300      	movs	r3, #0
 800a504:	603b      	str	r3, [r7, #0]
 800a506:	4a09      	ldr	r2, [pc, #36]	; (800a52c <HAL_MspInit+0x4c>)
 800a508:	4b08      	ldr	r3, [pc, #32]	; (800a52c <HAL_MspInit+0x4c>)
 800a50a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a510:	6413      	str	r3, [r2, #64]	; 0x40
 800a512:	4b06      	ldr	r3, [pc, #24]	; (800a52c <HAL_MspInit+0x4c>)
 800a514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40023800 	.word	0x40023800

0800a530 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08c      	sub	sp, #48	; 0x30
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800a540:	2200      	movs	r2, #0
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	2036      	movs	r0, #54	; 0x36
 800a546:	f7f8 fd57 	bl	8002ff8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800a54a:	2036      	movs	r0, #54	; 0x36
 800a54c:	f7f8 fd70 	bl	8003030 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a550:	2300      	movs	r3, #0
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	4a1f      	ldr	r2, [pc, #124]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a556:	4b1f      	ldr	r3, [pc, #124]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	f043 0310 	orr.w	r3, r3, #16
 800a55e:	6413      	str	r3, [r2, #64]	; 0x40
 800a560:	4b1c      	ldr	r3, [pc, #112]	; (800a5d4 <HAL_InitTick+0xa4>)
 800a562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a564:	f003 0310 	and.w	r3, r3, #16
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a56c:	f107 0210 	add.w	r2, r7, #16
 800a570:	f107 0314 	add.w	r3, r7, #20
 800a574:	4611      	mov	r1, r2
 800a576:	4618      	mov	r0, r3
 800a578:	f7fa ff86 	bl	8005488 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a57c:	f7fa ff5c 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 800a580:	4603      	mov	r3, r0
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a588:	4a13      	ldr	r2, [pc, #76]	; (800a5d8 <HAL_InitTick+0xa8>)
 800a58a:	fba2 2303 	umull	r2, r3, r2, r3
 800a58e:	0c9b      	lsrs	r3, r3, #18
 800a590:	3b01      	subs	r3, #1
 800a592:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a594:	4b11      	ldr	r3, [pc, #68]	; (800a5dc <HAL_InitTick+0xac>)
 800a596:	4a12      	ldr	r2, [pc, #72]	; (800a5e0 <HAL_InitTick+0xb0>)
 800a598:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800a59a:	4b10      	ldr	r3, [pc, #64]	; (800a5dc <HAL_InitTick+0xac>)
 800a59c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a5a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a5a2:	4a0e      	ldr	r2, [pc, #56]	; (800a5dc <HAL_InitTick+0xac>)
 800a5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a5a8:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <HAL_InitTick+0xac>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a5ae:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <HAL_InitTick+0xac>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800a5b4:	4809      	ldr	r0, [pc, #36]	; (800a5dc <HAL_InitTick+0xac>)
 800a5b6:	f7fb feea 	bl	800638e <HAL_TIM_Base_Init>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800a5c0:	4806      	ldr	r0, [pc, #24]	; (800a5dc <HAL_InitTick+0xac>)
 800a5c2:	f7fb ff0f 	bl	80063e4 <HAL_TIM_Base_Start_IT>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	e000      	b.n	800a5cc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3730      	adds	r7, #48	; 0x30
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	40023800 	.word	0x40023800
 800a5d8:	431bde83 	.word	0x431bde83
 800a5dc:	20000638 	.word	0x20000638
 800a5e0:	40001000 	.word	0x40001000

0800a5e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5f6:	e7fe      	b.n	800a5f6 <HardFault_Handler+0x4>

0800a5f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5fc:	e7fe      	b.n	800a5fc <MemManage_Handler+0x4>

0800a5fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5fe:	b480      	push	{r7}
 800a600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a602:	e7fe      	b.n	800a602 <BusFault_Handler+0x4>

0800a604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a604:	b480      	push	{r7}
 800a606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a608:	e7fe      	b.n	800a608 <UsageFault_Handler+0x4>

0800a60a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a60a:	b480      	push	{r7}
 800a60c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a60e:	bf00      	nop
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a61c:	bf00      	nop
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a626:	b480      	push	{r7}
 800a628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a62a:	bf00      	nop
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a638:	4803      	ldr	r0, [pc, #12]	; (800a648 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800a63a:	f7fb fef7 	bl	800642c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800a63e:	4803      	ldr	r0, [pc, #12]	; (800a64c <TIM1_UP_TIM10_IRQHandler+0x18>)
 800a640:	f7fb fef4 	bl	800642c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a644:	bf00      	nop
 800a646:	bd80      	pop	{r7, pc}
 800a648:	200006f8 	.word	0x200006f8
 800a64c:	20000678 	.word	0x20000678

0800a650 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a654:	4803      	ldr	r0, [pc, #12]	; (800a664 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800a656:	f7fb fee9 	bl	800642c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800a65a:	4803      	ldr	r0, [pc, #12]	; (800a668 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800a65c:	f7fb fee6 	bl	800642c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800a660:	bf00      	nop
 800a662:	bd80      	pop	{r7, pc}
 800a664:	200006f8 	.word	0x200006f8
 800a668:	200006b8 	.word	0x200006b8

0800a66c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a670:	4802      	ldr	r0, [pc, #8]	; (800a67c <TIM6_DAC_IRQHandler+0x10>)
 800a672:	f7fb fedb 	bl	800642c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a676:	bf00      	nop
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20000638 	.word	0x20000638

0800a680 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800a684:	4802      	ldr	r0, [pc, #8]	; (800a690 <LTDC_IRQHandler+0x10>)
 800a686:	f7f9 ffb3 	bl	80045f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800a68a:	bf00      	nop
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000440 	.word	0x20000440

0800a694 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800a698:	4802      	ldr	r0, [pc, #8]	; (800a6a4 <DMA2D_IRQHandler+0x10>)
 800a69a:	f7f9 f810 	bl	80036be <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800a69e:	bf00      	nop
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000378 	.word	0x20000378

0800a6a8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a6a8:	b590      	push	{r4, r7, lr}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	60f8      	str	r0, [r7, #12]
 800a6b0:	60b9      	str	r1, [r7, #8]
 800a6b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	617b      	str	r3, [r7, #20]
 800a6b8:	e00a      	b.n	800a6d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a6ba:	68bc      	ldr	r4, [r7, #8]
 800a6bc:	1c63      	adds	r3, r4, #1
 800a6be:	60bb      	str	r3, [r7, #8]
 800a6c0:	f3af 8000 	nop.w
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	617b      	str	r3, [r7, #20]
 800a6d0:	697a      	ldr	r2, [r7, #20]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	dbf0      	blt.n	800a6ba <_read+0x12>
	}

return len;
 800a6d8:	687b      	ldr	r3, [r7, #4]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	371c      	adds	r7, #28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd90      	pop	{r4, r7, pc}

0800a6e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b086      	sub	sp, #24
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	e009      	b.n	800a708 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	60ba      	str	r2, [r7, #8]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fd fc11 	bl	8007f24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	3301      	adds	r3, #1
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	dbf1      	blt.n	800a6f4 <_write+0x12>
	}
	return len;
 800a710:	687b      	ldr	r3, [r7, #4]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <_sbrk>:

caddr_t _sbrk(int incr)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a724:	4b11      	ldr	r3, [pc, #68]	; (800a76c <_sbrk+0x50>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <_sbrk+0x16>
		heap_end = &end;
 800a72c:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <_sbrk+0x50>)
 800a72e:	4a10      	ldr	r2, [pc, #64]	; (800a770 <_sbrk+0x54>)
 800a730:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a732:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <_sbrk+0x50>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a738:	4b0c      	ldr	r3, [pc, #48]	; (800a76c <_sbrk+0x50>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4413      	add	r3, r2
 800a740:	466a      	mov	r2, sp
 800a742:	4293      	cmp	r3, r2
 800a744:	d907      	bls.n	800a756 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a746:	f000 fa1f 	bl	800ab88 <__errno>
 800a74a:	4602      	mov	r2, r0
 800a74c:	230c      	movs	r3, #12
 800a74e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a750:	f04f 33ff 	mov.w	r3, #4294967295
 800a754:	e006      	b.n	800a764 <_sbrk+0x48>
	}

	heap_end += incr;
 800a756:	4b05      	ldr	r3, [pc, #20]	; (800a76c <_sbrk+0x50>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4413      	add	r3, r2
 800a75e:	4a03      	ldr	r2, [pc, #12]	; (800a76c <_sbrk+0x50>)
 800a760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a762:	68fb      	ldr	r3, [r7, #12]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	200002b4 	.word	0x200002b4
 800a770:	2000077c 	.word	0x2000077c

0800a774 <_close>:

int _close(int file)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
	return -1;
 800a77c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a79c:	605a      	str	r2, [r3, #4]
	return 0;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <_isatty>:

int _isatty(int file)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	return 1;
 800a7b4:	2301      	movs	r3, #1
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	b085      	sub	sp, #20
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	607a      	str	r2, [r7, #4]
	return 0;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a7e0:	4a16      	ldr	r2, [pc, #88]	; (800a83c <SystemInit+0x60>)
 800a7e2:	4b16      	ldr	r3, [pc, #88]	; (800a83c <SystemInit+0x60>)
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a7ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a7f0:	4a13      	ldr	r2, [pc, #76]	; (800a840 <SystemInit+0x64>)
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <SystemInit+0x64>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a7fc:	4b10      	ldr	r3, [pc, #64]	; (800a840 <SystemInit+0x64>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a802:	4a0f      	ldr	r2, [pc, #60]	; (800a840 <SystemInit+0x64>)
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <SystemInit+0x64>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800a80c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a810:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a812:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <SystemInit+0x64>)
 800a814:	4a0b      	ldr	r2, [pc, #44]	; (800a844 <SystemInit+0x68>)
 800a816:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a818:	4a09      	ldr	r2, [pc, #36]	; (800a840 <SystemInit+0x64>)
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <SystemInit+0x64>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a824:	4b06      	ldr	r3, [pc, #24]	; (800a840 <SystemInit+0x64>)
 800a826:	2200      	movs	r2, #0
 800a828:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a82a:	4b04      	ldr	r3, [pc, #16]	; (800a83c <SystemInit+0x60>)
 800a82c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a830:	609a      	str	r2, [r3, #8]
#endif
}
 800a832:	bf00      	nop
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	e000ed00 	.word	0xe000ed00
 800a840:	40023800 	.word	0x40023800
 800a844:	24003010 	.word	0x24003010

0800a848 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a84e:	f107 0308 	add.w	r3, r7, #8
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	605a      	str	r2, [r3, #4]
 800a858:	609a      	str	r2, [r3, #8]
 800a85a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a85c:	463b      	mov	r3, r7
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a866:	4a1f      	ldr	r2, [pc, #124]	; (800a8e4 <MX_TIM1_Init+0x9c>)
 800a868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a86a:	4b1d      	ldr	r3, [pc, #116]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a870:	4b1b      	ldr	r3, [pc, #108]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a872:	2200      	movs	r2, #0
 800a874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800a876:	4b1a      	ldr	r3, [pc, #104]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a878:	2200      	movs	r2, #0
 800a87a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a87c:	4b18      	ldr	r3, [pc, #96]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a87e:	2200      	movs	r2, #0
 800a880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a882:	4b17      	ldr	r3, [pc, #92]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a884:	2200      	movs	r2, #0
 800a886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a888:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a88e:	4814      	ldr	r0, [pc, #80]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a890:	f7fb fd7d 	bl	800638e <HAL_TIM_Base_Init>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800a89a:	f7ff fd7d 	bl	800a398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a89e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a8a4:	f107 0308 	add.w	r3, r7, #8
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	480d      	ldr	r0, [pc, #52]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a8ac:	f7fb fec6 	bl	800663c <HAL_TIM_ConfigClockSource>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800a8b6:	f7ff fd6f 	bl	800a398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a8c2:	463b      	mov	r3, r7
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4806      	ldr	r0, [pc, #24]	; (800a8e0 <MX_TIM1_Init+0x98>)
 800a8c8:	f7fc f8d2 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800a8d2:	f7ff fd61 	bl	800a398 <Error_Handler>
  }

}
 800a8d6:	bf00      	nop
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	200006f8 	.word	0x200006f8
 800a8e4:	40010000 	.word	0x40010000

0800a8e8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <MX_TIM10_Init+0x40>)
 800a8ee:	4a0f      	ldr	r2, [pc, #60]	; (800a92c <MX_TIM10_Init+0x44>)
 800a8f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	; (800a928 <MX_TIM10_Init+0x40>)
 800a8f4:	f242 720f 	movw	r2, #9999	; 0x270f
 800a8f8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8fa:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <MX_TIM10_Init+0x40>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288;
 800a900:	4b09      	ldr	r3, [pc, #36]	; (800a928 <MX_TIM10_Init+0x40>)
 800a902:	f44f 7290 	mov.w	r2, #288	; 0x120
 800a906:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a908:	4b07      	ldr	r3, [pc, #28]	; (800a928 <MX_TIM10_Init+0x40>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a90e:	4b06      	ldr	r3, [pc, #24]	; (800a928 <MX_TIM10_Init+0x40>)
 800a910:	2200      	movs	r2, #0
 800a912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a914:	4804      	ldr	r0, [pc, #16]	; (800a928 <MX_TIM10_Init+0x40>)
 800a916:	f7fb fd3a 	bl	800638e <HAL_TIM_Base_Init>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800a920:	f7ff fd3a 	bl	800a398 <Error_Handler>
  }

}
 800a924:	bf00      	nop
 800a926:	bd80      	pop	{r7, pc}
 800a928:	20000678 	.word	0x20000678
 800a92c:	40014400 	.word	0x40014400

0800a930 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 800a934:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <MX_TIM11_Init+0x40>)
 800a936:	4a0f      	ldr	r2, [pc, #60]	; (800a974 <MX_TIM11_Init+0x44>)
 800a938:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9999;
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <MX_TIM11_Init+0x40>)
 800a93c:	f242 720f 	movw	r2, #9999	; 0x270f
 800a940:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a942:	4b0b      	ldr	r3, [pc, #44]	; (800a970 <MX_TIM11_Init+0x40>)
 800a944:	2200      	movs	r2, #0
 800a946:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 71;
 800a948:	4b09      	ldr	r3, [pc, #36]	; (800a970 <MX_TIM11_Init+0x40>)
 800a94a:	2247      	movs	r2, #71	; 0x47
 800a94c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a94e:	4b08      	ldr	r3, [pc, #32]	; (800a970 <MX_TIM11_Init+0x40>)
 800a950:	2200      	movs	r2, #0
 800a952:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a954:	4b06      	ldr	r3, [pc, #24]	; (800a970 <MX_TIM11_Init+0x40>)
 800a956:	2200      	movs	r2, #0
 800a958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a95a:	4805      	ldr	r0, [pc, #20]	; (800a970 <MX_TIM11_Init+0x40>)
 800a95c:	f7fb fd17 	bl	800638e <HAL_TIM_Base_Init>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d001      	beq.n	800a96a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800a966:	f7ff fd17 	bl	800a398 <Error_Handler>
  }

}
 800a96a:	bf00      	nop
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	200006b8 	.word	0x200006b8
 800a974:	40014800 	.word	0x40014800

0800a978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b086      	sub	sp, #24
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a2e      	ldr	r2, [pc, #184]	; (800aa40 <HAL_TIM_Base_MspInit+0xc8>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d11e      	bne.n	800a9c8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a98a:	2300      	movs	r3, #0
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	4a2d      	ldr	r2, [pc, #180]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a990:	4b2c      	ldr	r3, [pc, #176]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a994:	f043 0301 	orr.w	r3, r3, #1
 800a998:	6453      	str	r3, [r2, #68]	; 0x44
 800a99a:	4b2a      	ldr	r3, [pc, #168]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	617b      	str	r3, [r7, #20]
 800a9a4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	2019      	movs	r0, #25
 800a9ac:	f7f8 fb24 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a9b0:	2019      	movs	r0, #25
 800a9b2:	f7f8 fb3d 	bl	8003030 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	201a      	movs	r0, #26
 800a9bc:	f7f8 fb1c 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800a9c0:	201a      	movs	r0, #26
 800a9c2:	f7f8 fb35 	bl	8003030 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800a9c6:	e036      	b.n	800aa36 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a1e      	ldr	r2, [pc, #120]	; (800aa48 <HAL_TIM_Base_MspInit+0xd0>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d116      	bne.n	800aa00 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	613b      	str	r3, [r7, #16]
 800a9d6:	4a1b      	ldr	r2, [pc, #108]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a9d8:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9e0:	6453      	str	r3, [r2, #68]	; 0x44
 800a9e2:	4b18      	ldr	r3, [pc, #96]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800a9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ea:	613b      	str	r3, [r7, #16]
 800a9ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2019      	movs	r0, #25
 800a9f4:	f7f8 fb00 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a9f8:	2019      	movs	r0, #25
 800a9fa:	f7f8 fb19 	bl	8003030 <HAL_NVIC_EnableIRQ>
}
 800a9fe:	e01a      	b.n	800aa36 <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a11      	ldr	r2, [pc, #68]	; (800aa4c <HAL_TIM_Base_MspInit+0xd4>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d115      	bne.n	800aa36 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	60fb      	str	r3, [r7, #12]
 800aa0e:	4a0d      	ldr	r2, [pc, #52]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800aa12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa18:	6453      	str	r3, [r2, #68]	; 0x44
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <HAL_TIM_Base_MspInit+0xcc>)
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800aa26:	2200      	movs	r2, #0
 800aa28:	2100      	movs	r1, #0
 800aa2a:	201a      	movs	r0, #26
 800aa2c:	f7f8 fae4 	bl	8002ff8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800aa30:	201a      	movs	r0, #26
 800aa32:	f7f8 fafd 	bl	8003030 <HAL_NVIC_EnableIRQ>
}
 800aa36:	bf00      	nop
 800aa38:	3718      	adds	r7, #24
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	40010000 	.word	0x40010000
 800aa44:	40023800 	.word	0x40023800
 800aa48:	40014400 	.word	0x40014400
 800aa4c:	40014800 	.word	0x40014800

0800aa50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800aa54:	4b11      	ldr	r3, [pc, #68]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa56:	4a12      	ldr	r2, [pc, #72]	; (800aaa0 <MX_USART1_UART_Init+0x50>)
 800aa58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aa5a:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa62:	4b0e      	ldr	r3, [pc, #56]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aa68:	4b0c      	ldr	r3, [pc, #48]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa76:	220c      	movs	r2, #12
 800aa78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aa86:	4805      	ldr	r0, [pc, #20]	; (800aa9c <MX_USART1_UART_Init+0x4c>)
 800aa88:	f7fc f84b 	bl	8006b22 <HAL_UART_Init>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800aa92:	f7ff fc81 	bl	800a398 <Error_Handler>
  }

}
 800aa96:	bf00      	nop
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20000738 	.word	0x20000738
 800aaa0:	40011000 	.word	0x40011000

0800aaa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b08a      	sub	sp, #40	; 0x28
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aaac:	f107 0314 	add.w	r3, r7, #20
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	605a      	str	r2, [r3, #4]
 800aab6:	609a      	str	r2, [r3, #8]
 800aab8:	60da      	str	r2, [r3, #12]
 800aaba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a19      	ldr	r2, [pc, #100]	; (800ab28 <HAL_UART_MspInit+0x84>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d12c      	bne.n	800ab20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800aac6:	2300      	movs	r3, #0
 800aac8:	613b      	str	r3, [r7, #16]
 800aaca:	4a18      	ldr	r2, [pc, #96]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aacc:	4b17      	ldr	r3, [pc, #92]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad0:	f043 0310 	orr.w	r3, r3, #16
 800aad4:	6453      	str	r3, [r2, #68]	; 0x44
 800aad6:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aada:	f003 0310 	and.w	r3, r3, #16
 800aade:	613b      	str	r3, [r7, #16]
 800aae0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
 800aae6:	4a11      	ldr	r2, [pc, #68]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aae8:	4b10      	ldr	r3, [pc, #64]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	f043 0301 	orr.w	r3, r3, #1
 800aaf0:	6313      	str	r3, [r2, #48]	; 0x30
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	; (800ab2c <HAL_UART_MspInit+0x88>)
 800aaf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800aafe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ab02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab04:	2302      	movs	r3, #2
 800ab06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab0c:	2303      	movs	r3, #3
 800ab0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab10:	2307      	movs	r3, #7
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab14:	f107 0314 	add.w	r3, r7, #20
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4805      	ldr	r0, [pc, #20]	; (800ab30 <HAL_UART_MspInit+0x8c>)
 800ab1c:	f7f9 f80c 	bl	8003b38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800ab20:	bf00      	nop
 800ab22:	3728      	adds	r7, #40	; 0x28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	40011000 	.word	0x40011000
 800ab2c:	40023800 	.word	0x40023800
 800ab30:	40020000 	.word	0x40020000

0800ab34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800ab34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ab6c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ab38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ab3a:	e003      	b.n	800ab44 <LoopCopyDataInit>

0800ab3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ab3c:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ab3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ab40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ab42:	3104      	adds	r1, #4

0800ab44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ab44:	480b      	ldr	r0, [pc, #44]	; (800ab74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ab46:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ab48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ab4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ab4c:	d3f6      	bcc.n	800ab3c <CopyDataInit>
  ldr  r2, =_sbss
 800ab4e:	4a0b      	ldr	r2, [pc, #44]	; (800ab7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ab50:	e002      	b.n	800ab58 <LoopFillZerobss>

0800ab52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ab52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ab54:	f842 3b04 	str.w	r3, [r2], #4

0800ab58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ab5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ab5c:	d3f9      	bcc.n	800ab52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ab5e:	f7ff fe3d 	bl	800a7dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab62:	f000 f817 	bl	800ab94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ab66:	f7fd f9eb 	bl	8007f40 <main>
  bx  lr    
 800ab6a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800ab6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800ab70:	0807e4e0 	.word	0x0807e4e0
  ldr  r0, =_sdata
 800ab74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ab78:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 800ab7c:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 800ab80:	2000077c 	.word	0x2000077c

0800ab84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ab84:	e7fe      	b.n	800ab84 <ADC_IRQHandler>
	...

0800ab88 <__errno>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	; (800ab90 <__errno+0x8>)
 800ab8a:	6818      	ldr	r0, [r3, #0]
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000080 	.word	0x20000080

0800ab94 <__libc_init_array>:
 800ab94:	b570      	push	{r4, r5, r6, lr}
 800ab96:	4e0d      	ldr	r6, [pc, #52]	; (800abcc <__libc_init_array+0x38>)
 800ab98:	4c0d      	ldr	r4, [pc, #52]	; (800abd0 <__libc_init_array+0x3c>)
 800ab9a:	1ba4      	subs	r4, r4, r6
 800ab9c:	10a4      	asrs	r4, r4, #2
 800ab9e:	2500      	movs	r5, #0
 800aba0:	42a5      	cmp	r5, r4
 800aba2:	d109      	bne.n	800abb8 <__libc_init_array+0x24>
 800aba4:	4e0b      	ldr	r6, [pc, #44]	; (800abd4 <__libc_init_array+0x40>)
 800aba6:	4c0c      	ldr	r4, [pc, #48]	; (800abd8 <__libc_init_array+0x44>)
 800aba8:	f000 ff18 	bl	800b9dc <_init>
 800abac:	1ba4      	subs	r4, r4, r6
 800abae:	10a4      	asrs	r4, r4, #2
 800abb0:	2500      	movs	r5, #0
 800abb2:	42a5      	cmp	r5, r4
 800abb4:	d105      	bne.n	800abc2 <__libc_init_array+0x2e>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}
 800abb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abbc:	4798      	blx	r3
 800abbe:	3501      	adds	r5, #1
 800abc0:	e7ee      	b.n	800aba0 <__libc_init_array+0xc>
 800abc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abc6:	4798      	blx	r3
 800abc8:	3501      	adds	r5, #1
 800abca:	e7f2      	b.n	800abb2 <__libc_init_array+0x1e>
 800abcc:	0807e4d8 	.word	0x0807e4d8
 800abd0:	0807e4d8 	.word	0x0807e4d8
 800abd4:	0807e4d8 	.word	0x0807e4d8
 800abd8:	0807e4dc 	.word	0x0807e4dc

0800abdc <memset>:
 800abdc:	4402      	add	r2, r0
 800abde:	4603      	mov	r3, r0
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d100      	bne.n	800abe6 <memset+0xa>
 800abe4:	4770      	bx	lr
 800abe6:	f803 1b01 	strb.w	r1, [r3], #1
 800abea:	e7f9      	b.n	800abe0 <memset+0x4>

0800abec <iprintf>:
 800abec:	b40f      	push	{r0, r1, r2, r3}
 800abee:	4b0a      	ldr	r3, [pc, #40]	; (800ac18 <iprintf+0x2c>)
 800abf0:	b513      	push	{r0, r1, r4, lr}
 800abf2:	681c      	ldr	r4, [r3, #0]
 800abf4:	b124      	cbz	r4, 800ac00 <iprintf+0x14>
 800abf6:	69a3      	ldr	r3, [r4, #24]
 800abf8:	b913      	cbnz	r3, 800ac00 <iprintf+0x14>
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 f84e 	bl	800ac9c <__sinit>
 800ac00:	ab05      	add	r3, sp, #20
 800ac02:	9a04      	ldr	r2, [sp, #16]
 800ac04:	68a1      	ldr	r1, [r4, #8]
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 f959 	bl	800aec0 <_vfiprintf_r>
 800ac0e:	b002      	add	sp, #8
 800ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac14:	b004      	add	sp, #16
 800ac16:	4770      	bx	lr
 800ac18:	20000080 	.word	0x20000080

0800ac1c <_cleanup_r>:
 800ac1c:	4901      	ldr	r1, [pc, #4]	; (800ac24 <_cleanup_r+0x8>)
 800ac1e:	f000 b8a9 	b.w	800ad74 <_fwalk_reent>
 800ac22:	bf00      	nop
 800ac24:	0800b795 	.word	0x0800b795

0800ac28 <std.isra.0>:
 800ac28:	2300      	movs	r3, #0
 800ac2a:	b510      	push	{r4, lr}
 800ac2c:	4604      	mov	r4, r0
 800ac2e:	6003      	str	r3, [r0, #0]
 800ac30:	6043      	str	r3, [r0, #4]
 800ac32:	6083      	str	r3, [r0, #8]
 800ac34:	8181      	strh	r1, [r0, #12]
 800ac36:	6643      	str	r3, [r0, #100]	; 0x64
 800ac38:	81c2      	strh	r2, [r0, #14]
 800ac3a:	6103      	str	r3, [r0, #16]
 800ac3c:	6143      	str	r3, [r0, #20]
 800ac3e:	6183      	str	r3, [r0, #24]
 800ac40:	4619      	mov	r1, r3
 800ac42:	2208      	movs	r2, #8
 800ac44:	305c      	adds	r0, #92	; 0x5c
 800ac46:	f7ff ffc9 	bl	800abdc <memset>
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <std.isra.0+0x38>)
 800ac4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac4e:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <std.isra.0+0x3c>)
 800ac50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac52:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <std.isra.0+0x40>)
 800ac54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac56:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <std.isra.0+0x44>)
 800ac58:	6224      	str	r4, [r4, #32]
 800ac5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac5c:	bd10      	pop	{r4, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800b439 	.word	0x0800b439
 800ac64:	0800b45b 	.word	0x0800b45b
 800ac68:	0800b493 	.word	0x0800b493
 800ac6c:	0800b4b7 	.word	0x0800b4b7

0800ac70 <__sfmoreglue>:
 800ac70:	b570      	push	{r4, r5, r6, lr}
 800ac72:	1e4a      	subs	r2, r1, #1
 800ac74:	2568      	movs	r5, #104	; 0x68
 800ac76:	4355      	muls	r5, r2
 800ac78:	460e      	mov	r6, r1
 800ac7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac7e:	f000 f897 	bl	800adb0 <_malloc_r>
 800ac82:	4604      	mov	r4, r0
 800ac84:	b140      	cbz	r0, 800ac98 <__sfmoreglue+0x28>
 800ac86:	2100      	movs	r1, #0
 800ac88:	e880 0042 	stmia.w	r0, {r1, r6}
 800ac8c:	300c      	adds	r0, #12
 800ac8e:	60a0      	str	r0, [r4, #8]
 800ac90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac94:	f7ff ffa2 	bl	800abdc <memset>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	bd70      	pop	{r4, r5, r6, pc}

0800ac9c <__sinit>:
 800ac9c:	6983      	ldr	r3, [r0, #24]
 800ac9e:	b510      	push	{r4, lr}
 800aca0:	4604      	mov	r4, r0
 800aca2:	bb33      	cbnz	r3, 800acf2 <__sinit+0x56>
 800aca4:	6483      	str	r3, [r0, #72]	; 0x48
 800aca6:	64c3      	str	r3, [r0, #76]	; 0x4c
 800aca8:	6503      	str	r3, [r0, #80]	; 0x50
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <__sinit+0x58>)
 800acac:	4a12      	ldr	r2, [pc, #72]	; (800acf8 <__sinit+0x5c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	6282      	str	r2, [r0, #40]	; 0x28
 800acb2:	4298      	cmp	r0, r3
 800acb4:	bf04      	itt	eq
 800acb6:	2301      	moveq	r3, #1
 800acb8:	6183      	streq	r3, [r0, #24]
 800acba:	f000 f81f 	bl	800acfc <__sfp>
 800acbe:	6060      	str	r0, [r4, #4]
 800acc0:	4620      	mov	r0, r4
 800acc2:	f000 f81b 	bl	800acfc <__sfp>
 800acc6:	60a0      	str	r0, [r4, #8]
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 f817 	bl	800acfc <__sfp>
 800acce:	2200      	movs	r2, #0
 800acd0:	60e0      	str	r0, [r4, #12]
 800acd2:	2104      	movs	r1, #4
 800acd4:	6860      	ldr	r0, [r4, #4]
 800acd6:	f7ff ffa7 	bl	800ac28 <std.isra.0>
 800acda:	2201      	movs	r2, #1
 800acdc:	2109      	movs	r1, #9
 800acde:	68a0      	ldr	r0, [r4, #8]
 800ace0:	f7ff ffa2 	bl	800ac28 <std.isra.0>
 800ace4:	2202      	movs	r2, #2
 800ace6:	2112      	movs	r1, #18
 800ace8:	68e0      	ldr	r0, [r4, #12]
 800acea:	f7ff ff9d 	bl	800ac28 <std.isra.0>
 800acee:	2301      	movs	r3, #1
 800acf0:	61a3      	str	r3, [r4, #24]
 800acf2:	bd10      	pop	{r4, pc}
 800acf4:	0807e438 	.word	0x0807e438
 800acf8:	0800ac1d 	.word	0x0800ac1d

0800acfc <__sfp>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	4b1c      	ldr	r3, [pc, #112]	; (800ad70 <__sfp+0x74>)
 800ad00:	681e      	ldr	r6, [r3, #0]
 800ad02:	69b3      	ldr	r3, [r6, #24]
 800ad04:	4607      	mov	r7, r0
 800ad06:	b913      	cbnz	r3, 800ad0e <__sfp+0x12>
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7ff ffc7 	bl	800ac9c <__sinit>
 800ad0e:	3648      	adds	r6, #72	; 0x48
 800ad10:	68b4      	ldr	r4, [r6, #8]
 800ad12:	6873      	ldr	r3, [r6, #4]
 800ad14:	3b01      	subs	r3, #1
 800ad16:	d503      	bpl.n	800ad20 <__sfp+0x24>
 800ad18:	6833      	ldr	r3, [r6, #0]
 800ad1a:	b133      	cbz	r3, 800ad2a <__sfp+0x2e>
 800ad1c:	6836      	ldr	r6, [r6, #0]
 800ad1e:	e7f7      	b.n	800ad10 <__sfp+0x14>
 800ad20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad24:	b16d      	cbz	r5, 800ad42 <__sfp+0x46>
 800ad26:	3468      	adds	r4, #104	; 0x68
 800ad28:	e7f4      	b.n	800ad14 <__sfp+0x18>
 800ad2a:	2104      	movs	r1, #4
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	f7ff ff9f 	bl	800ac70 <__sfmoreglue>
 800ad32:	6030      	str	r0, [r6, #0]
 800ad34:	2800      	cmp	r0, #0
 800ad36:	d1f1      	bne.n	800ad1c <__sfp+0x20>
 800ad38:	230c      	movs	r3, #12
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad46:	81e3      	strh	r3, [r4, #14]
 800ad48:	2301      	movs	r3, #1
 800ad4a:	81a3      	strh	r3, [r4, #12]
 800ad4c:	6665      	str	r5, [r4, #100]	; 0x64
 800ad4e:	6025      	str	r5, [r4, #0]
 800ad50:	60a5      	str	r5, [r4, #8]
 800ad52:	6065      	str	r5, [r4, #4]
 800ad54:	6125      	str	r5, [r4, #16]
 800ad56:	6165      	str	r5, [r4, #20]
 800ad58:	61a5      	str	r5, [r4, #24]
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad62:	f7ff ff3b 	bl	800abdc <memset>
 800ad66:	6365      	str	r5, [r4, #52]	; 0x34
 800ad68:	63a5      	str	r5, [r4, #56]	; 0x38
 800ad6a:	64a5      	str	r5, [r4, #72]	; 0x48
 800ad6c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ad6e:	e7e6      	b.n	800ad3e <__sfp+0x42>
 800ad70:	0807e438 	.word	0x0807e438

0800ad74 <_fwalk_reent>:
 800ad74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4689      	mov	r9, r1
 800ad7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad80:	2600      	movs	r6, #0
 800ad82:	b914      	cbnz	r4, 800ad8a <_fwalk_reent+0x16>
 800ad84:	4630      	mov	r0, r6
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	68a5      	ldr	r5, [r4, #8]
 800ad8c:	6867      	ldr	r7, [r4, #4]
 800ad8e:	3f01      	subs	r7, #1
 800ad90:	d501      	bpl.n	800ad96 <_fwalk_reent+0x22>
 800ad92:	6824      	ldr	r4, [r4, #0]
 800ad94:	e7f5      	b.n	800ad82 <_fwalk_reent+0xe>
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d907      	bls.n	800adac <_fwalk_reent+0x38>
 800ad9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ada0:	3301      	adds	r3, #1
 800ada2:	d003      	beq.n	800adac <_fwalk_reent+0x38>
 800ada4:	4629      	mov	r1, r5
 800ada6:	4640      	mov	r0, r8
 800ada8:	47c8      	blx	r9
 800adaa:	4306      	orrs	r6, r0
 800adac:	3568      	adds	r5, #104	; 0x68
 800adae:	e7ee      	b.n	800ad8e <_fwalk_reent+0x1a>

0800adb0 <_malloc_r>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	1ccd      	adds	r5, r1, #3
 800adb4:	f025 0503 	bic.w	r5, r5, #3
 800adb8:	3508      	adds	r5, #8
 800adba:	2d0c      	cmp	r5, #12
 800adbc:	bf38      	it	cc
 800adbe:	250c      	movcc	r5, #12
 800adc0:	2d00      	cmp	r5, #0
 800adc2:	4606      	mov	r6, r0
 800adc4:	db01      	blt.n	800adca <_malloc_r+0x1a>
 800adc6:	42a9      	cmp	r1, r5
 800adc8:	d903      	bls.n	800add2 <_malloc_r+0x22>
 800adca:	230c      	movs	r3, #12
 800adcc:	6033      	str	r3, [r6, #0]
 800adce:	2000      	movs	r0, #0
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	f000 fd7f 	bl	800b8d4 <__malloc_lock>
 800add6:	4a23      	ldr	r2, [pc, #140]	; (800ae64 <_malloc_r+0xb4>)
 800add8:	6814      	ldr	r4, [r2, #0]
 800adda:	4621      	mov	r1, r4
 800addc:	b991      	cbnz	r1, 800ae04 <_malloc_r+0x54>
 800adde:	4c22      	ldr	r4, [pc, #136]	; (800ae68 <_malloc_r+0xb8>)
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	b91b      	cbnz	r3, 800adec <_malloc_r+0x3c>
 800ade4:	4630      	mov	r0, r6
 800ade6:	f000 fb17 	bl	800b418 <_sbrk_r>
 800adea:	6020      	str	r0, [r4, #0]
 800adec:	4629      	mov	r1, r5
 800adee:	4630      	mov	r0, r6
 800adf0:	f000 fb12 	bl	800b418 <_sbrk_r>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d126      	bne.n	800ae46 <_malloc_r+0x96>
 800adf8:	230c      	movs	r3, #12
 800adfa:	6033      	str	r3, [r6, #0]
 800adfc:	4630      	mov	r0, r6
 800adfe:	f000 fd6a 	bl	800b8d6 <__malloc_unlock>
 800ae02:	e7e4      	b.n	800adce <_malloc_r+0x1e>
 800ae04:	680b      	ldr	r3, [r1, #0]
 800ae06:	1b5b      	subs	r3, r3, r5
 800ae08:	d41a      	bmi.n	800ae40 <_malloc_r+0x90>
 800ae0a:	2b0b      	cmp	r3, #11
 800ae0c:	d90f      	bls.n	800ae2e <_malloc_r+0x7e>
 800ae0e:	600b      	str	r3, [r1, #0]
 800ae10:	50cd      	str	r5, [r1, r3]
 800ae12:	18cc      	adds	r4, r1, r3
 800ae14:	4630      	mov	r0, r6
 800ae16:	f000 fd5e 	bl	800b8d6 <__malloc_unlock>
 800ae1a:	f104 000b 	add.w	r0, r4, #11
 800ae1e:	1d23      	adds	r3, r4, #4
 800ae20:	f020 0007 	bic.w	r0, r0, #7
 800ae24:	1ac3      	subs	r3, r0, r3
 800ae26:	d01b      	beq.n	800ae60 <_malloc_r+0xb0>
 800ae28:	425a      	negs	r2, r3
 800ae2a:	50e2      	str	r2, [r4, r3]
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}
 800ae2e:	428c      	cmp	r4, r1
 800ae30:	bf0d      	iteet	eq
 800ae32:	6863      	ldreq	r3, [r4, #4]
 800ae34:	684b      	ldrne	r3, [r1, #4]
 800ae36:	6063      	strne	r3, [r4, #4]
 800ae38:	6013      	streq	r3, [r2, #0]
 800ae3a:	bf18      	it	ne
 800ae3c:	460c      	movne	r4, r1
 800ae3e:	e7e9      	b.n	800ae14 <_malloc_r+0x64>
 800ae40:	460c      	mov	r4, r1
 800ae42:	6849      	ldr	r1, [r1, #4]
 800ae44:	e7ca      	b.n	800addc <_malloc_r+0x2c>
 800ae46:	1cc4      	adds	r4, r0, #3
 800ae48:	f024 0403 	bic.w	r4, r4, #3
 800ae4c:	42a0      	cmp	r0, r4
 800ae4e:	d005      	beq.n	800ae5c <_malloc_r+0xac>
 800ae50:	1a21      	subs	r1, r4, r0
 800ae52:	4630      	mov	r0, r6
 800ae54:	f000 fae0 	bl	800b418 <_sbrk_r>
 800ae58:	3001      	adds	r0, #1
 800ae5a:	d0cd      	beq.n	800adf8 <_malloc_r+0x48>
 800ae5c:	6025      	str	r5, [r4, #0]
 800ae5e:	e7d9      	b.n	800ae14 <_malloc_r+0x64>
 800ae60:	bd70      	pop	{r4, r5, r6, pc}
 800ae62:	bf00      	nop
 800ae64:	200002b8 	.word	0x200002b8
 800ae68:	200002bc 	.word	0x200002bc

0800ae6c <__sfputc_r>:
 800ae6c:	6893      	ldr	r3, [r2, #8]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	b410      	push	{r4}
 800ae74:	6093      	str	r3, [r2, #8]
 800ae76:	da09      	bge.n	800ae8c <__sfputc_r+0x20>
 800ae78:	6994      	ldr	r4, [r2, #24]
 800ae7a:	42a3      	cmp	r3, r4
 800ae7c:	db02      	blt.n	800ae84 <__sfputc_r+0x18>
 800ae7e:	b2cb      	uxtb	r3, r1
 800ae80:	2b0a      	cmp	r3, #10
 800ae82:	d103      	bne.n	800ae8c <__sfputc_r+0x20>
 800ae84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae88:	f000 bb1a 	b.w	800b4c0 <__swbuf_r>
 800ae8c:	6813      	ldr	r3, [r2, #0]
 800ae8e:	1c58      	adds	r0, r3, #1
 800ae90:	6010      	str	r0, [r2, #0]
 800ae92:	7019      	strb	r1, [r3, #0]
 800ae94:	b2c8      	uxtb	r0, r1
 800ae96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <__sfputs_r>:
 800ae9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	4614      	mov	r4, r2
 800aea4:	18d5      	adds	r5, r2, r3
 800aea6:	42ac      	cmp	r4, r5
 800aea8:	d101      	bne.n	800aeae <__sfputs_r+0x12>
 800aeaa:	2000      	movs	r0, #0
 800aeac:	e007      	b.n	800aebe <__sfputs_r+0x22>
 800aeae:	463a      	mov	r2, r7
 800aeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb4:	4630      	mov	r0, r6
 800aeb6:	f7ff ffd9 	bl	800ae6c <__sfputc_r>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	d1f3      	bne.n	800aea6 <__sfputs_r+0xa>
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aec0 <_vfiprintf_r>:
 800aec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	b09d      	sub	sp, #116	; 0x74
 800aec6:	460c      	mov	r4, r1
 800aec8:	4617      	mov	r7, r2
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	4606      	mov	r6, r0
 800aece:	b118      	cbz	r0, 800aed8 <_vfiprintf_r+0x18>
 800aed0:	6983      	ldr	r3, [r0, #24]
 800aed2:	b90b      	cbnz	r3, 800aed8 <_vfiprintf_r+0x18>
 800aed4:	f7ff fee2 	bl	800ac9c <__sinit>
 800aed8:	4b7c      	ldr	r3, [pc, #496]	; (800b0cc <_vfiprintf_r+0x20c>)
 800aeda:	429c      	cmp	r4, r3
 800aedc:	d157      	bne.n	800af8e <_vfiprintf_r+0xce>
 800aede:	6874      	ldr	r4, [r6, #4]
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	0718      	lsls	r0, r3, #28
 800aee4:	d55d      	bpl.n	800afa2 <_vfiprintf_r+0xe2>
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d05a      	beq.n	800afa2 <_vfiprintf_r+0xe2>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef6:	2330      	movs	r3, #48	; 0x30
 800aef8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aefc:	f04f 0b01 	mov.w	fp, #1
 800af00:	46b8      	mov	r8, r7
 800af02:	4645      	mov	r5, r8
 800af04:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d155      	bne.n	800afb8 <_vfiprintf_r+0xf8>
 800af0c:	ebb8 0a07 	subs.w	sl, r8, r7
 800af10:	d00b      	beq.n	800af2a <_vfiprintf_r+0x6a>
 800af12:	4653      	mov	r3, sl
 800af14:	463a      	mov	r2, r7
 800af16:	4621      	mov	r1, r4
 800af18:	4630      	mov	r0, r6
 800af1a:	f7ff ffbf 	bl	800ae9c <__sfputs_r>
 800af1e:	3001      	adds	r0, #1
 800af20:	f000 80c4 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	4453      	add	r3, sl
 800af28:	9309      	str	r3, [sp, #36]	; 0x24
 800af2a:	f898 3000 	ldrb.w	r3, [r8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 80bc 	beq.w	800b0ac <_vfiprintf_r+0x1ec>
 800af34:	2300      	movs	r3, #0
 800af36:	f04f 32ff 	mov.w	r2, #4294967295
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	9307      	str	r3, [sp, #28]
 800af3e:	9205      	str	r2, [sp, #20]
 800af40:	9306      	str	r3, [sp, #24]
 800af42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af46:	931a      	str	r3, [sp, #104]	; 0x68
 800af48:	2205      	movs	r2, #5
 800af4a:	7829      	ldrb	r1, [r5, #0]
 800af4c:	4860      	ldr	r0, [pc, #384]	; (800b0d0 <_vfiprintf_r+0x210>)
 800af4e:	f7f5 f94f 	bl	80001f0 <memchr>
 800af52:	f105 0801 	add.w	r8, r5, #1
 800af56:	9b04      	ldr	r3, [sp, #16]
 800af58:	2800      	cmp	r0, #0
 800af5a:	d131      	bne.n	800afc0 <_vfiprintf_r+0x100>
 800af5c:	06d9      	lsls	r1, r3, #27
 800af5e:	bf44      	itt	mi
 800af60:	2220      	movmi	r2, #32
 800af62:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af66:	071a      	lsls	r2, r3, #28
 800af68:	bf44      	itt	mi
 800af6a:	222b      	movmi	r2, #43	; 0x2b
 800af6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af70:	782a      	ldrb	r2, [r5, #0]
 800af72:	2a2a      	cmp	r2, #42	; 0x2a
 800af74:	d02c      	beq.n	800afd0 <_vfiprintf_r+0x110>
 800af76:	9a07      	ldr	r2, [sp, #28]
 800af78:	2100      	movs	r1, #0
 800af7a:	200a      	movs	r0, #10
 800af7c:	46a8      	mov	r8, r5
 800af7e:	3501      	adds	r5, #1
 800af80:	f898 3000 	ldrb.w	r3, [r8]
 800af84:	3b30      	subs	r3, #48	; 0x30
 800af86:	2b09      	cmp	r3, #9
 800af88:	d96d      	bls.n	800b066 <_vfiprintf_r+0x1a6>
 800af8a:	b371      	cbz	r1, 800afea <_vfiprintf_r+0x12a>
 800af8c:	e026      	b.n	800afdc <_vfiprintf_r+0x11c>
 800af8e:	4b51      	ldr	r3, [pc, #324]	; (800b0d4 <_vfiprintf_r+0x214>)
 800af90:	429c      	cmp	r4, r3
 800af92:	d101      	bne.n	800af98 <_vfiprintf_r+0xd8>
 800af94:	68b4      	ldr	r4, [r6, #8]
 800af96:	e7a3      	b.n	800aee0 <_vfiprintf_r+0x20>
 800af98:	4b4f      	ldr	r3, [pc, #316]	; (800b0d8 <_vfiprintf_r+0x218>)
 800af9a:	429c      	cmp	r4, r3
 800af9c:	bf08      	it	eq
 800af9e:	68f4      	ldreq	r4, [r6, #12]
 800afa0:	e79e      	b.n	800aee0 <_vfiprintf_r+0x20>
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	f000 faef 	bl	800b588 <__swsetup_r>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d09e      	beq.n	800aeec <_vfiprintf_r+0x2c>
 800afae:	f04f 30ff 	mov.w	r0, #4294967295
 800afb2:	b01d      	add	sp, #116	; 0x74
 800afb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb8:	2b25      	cmp	r3, #37	; 0x25
 800afba:	d0a7      	beq.n	800af0c <_vfiprintf_r+0x4c>
 800afbc:	46a8      	mov	r8, r5
 800afbe:	e7a0      	b.n	800af02 <_vfiprintf_r+0x42>
 800afc0:	4a43      	ldr	r2, [pc, #268]	; (800b0d0 <_vfiprintf_r+0x210>)
 800afc2:	1a80      	subs	r0, r0, r2
 800afc4:	fa0b f000 	lsl.w	r0, fp, r0
 800afc8:	4318      	orrs	r0, r3
 800afca:	9004      	str	r0, [sp, #16]
 800afcc:	4645      	mov	r5, r8
 800afce:	e7bb      	b.n	800af48 <_vfiprintf_r+0x88>
 800afd0:	9a03      	ldr	r2, [sp, #12]
 800afd2:	1d11      	adds	r1, r2, #4
 800afd4:	6812      	ldr	r2, [r2, #0]
 800afd6:	9103      	str	r1, [sp, #12]
 800afd8:	2a00      	cmp	r2, #0
 800afda:	db01      	blt.n	800afe0 <_vfiprintf_r+0x120>
 800afdc:	9207      	str	r2, [sp, #28]
 800afde:	e004      	b.n	800afea <_vfiprintf_r+0x12a>
 800afe0:	4252      	negs	r2, r2
 800afe2:	f043 0302 	orr.w	r3, r3, #2
 800afe6:	9207      	str	r2, [sp, #28]
 800afe8:	9304      	str	r3, [sp, #16]
 800afea:	f898 3000 	ldrb.w	r3, [r8]
 800afee:	2b2e      	cmp	r3, #46	; 0x2e
 800aff0:	d110      	bne.n	800b014 <_vfiprintf_r+0x154>
 800aff2:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aff6:	2b2a      	cmp	r3, #42	; 0x2a
 800aff8:	f108 0101 	add.w	r1, r8, #1
 800affc:	d137      	bne.n	800b06e <_vfiprintf_r+0x1ae>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	1d1a      	adds	r2, r3, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	9203      	str	r2, [sp, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	bfb8      	it	lt
 800b00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b00e:	f108 0802 	add.w	r8, r8, #2
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	4d31      	ldr	r5, [pc, #196]	; (800b0dc <_vfiprintf_r+0x21c>)
 800b016:	f898 1000 	ldrb.w	r1, [r8]
 800b01a:	2203      	movs	r2, #3
 800b01c:	4628      	mov	r0, r5
 800b01e:	f7f5 f8e7 	bl	80001f0 <memchr>
 800b022:	b140      	cbz	r0, 800b036 <_vfiprintf_r+0x176>
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	1b40      	subs	r0, r0, r5
 800b028:	fa03 f000 	lsl.w	r0, r3, r0
 800b02c:	9b04      	ldr	r3, [sp, #16]
 800b02e:	4303      	orrs	r3, r0
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	f108 0801 	add.w	r8, r8, #1
 800b036:	f898 1000 	ldrb.w	r1, [r8]
 800b03a:	4829      	ldr	r0, [pc, #164]	; (800b0e0 <_vfiprintf_r+0x220>)
 800b03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b040:	2206      	movs	r2, #6
 800b042:	f108 0701 	add.w	r7, r8, #1
 800b046:	f7f5 f8d3 	bl	80001f0 <memchr>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d034      	beq.n	800b0b8 <_vfiprintf_r+0x1f8>
 800b04e:	4b25      	ldr	r3, [pc, #148]	; (800b0e4 <_vfiprintf_r+0x224>)
 800b050:	bb03      	cbnz	r3, 800b094 <_vfiprintf_r+0x1d4>
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	3307      	adds	r3, #7
 800b056:	f023 0307 	bic.w	r3, r3, #7
 800b05a:	3308      	adds	r3, #8
 800b05c:	9303      	str	r3, [sp, #12]
 800b05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b060:	444b      	add	r3, r9
 800b062:	9309      	str	r3, [sp, #36]	; 0x24
 800b064:	e74c      	b.n	800af00 <_vfiprintf_r+0x40>
 800b066:	fb00 3202 	mla	r2, r0, r2, r3
 800b06a:	2101      	movs	r1, #1
 800b06c:	e786      	b.n	800af7c <_vfiprintf_r+0xbc>
 800b06e:	2300      	movs	r3, #0
 800b070:	9305      	str	r3, [sp, #20]
 800b072:	4618      	mov	r0, r3
 800b074:	250a      	movs	r5, #10
 800b076:	4688      	mov	r8, r1
 800b078:	3101      	adds	r1, #1
 800b07a:	f898 2000 	ldrb.w	r2, [r8]
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	2a09      	cmp	r2, #9
 800b082:	d903      	bls.n	800b08c <_vfiprintf_r+0x1cc>
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0c5      	beq.n	800b014 <_vfiprintf_r+0x154>
 800b088:	9005      	str	r0, [sp, #20]
 800b08a:	e7c3      	b.n	800b014 <_vfiprintf_r+0x154>
 800b08c:	fb05 2000 	mla	r0, r5, r0, r2
 800b090:	2301      	movs	r3, #1
 800b092:	e7f0      	b.n	800b076 <_vfiprintf_r+0x1b6>
 800b094:	ab03      	add	r3, sp, #12
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	4622      	mov	r2, r4
 800b09a:	4b13      	ldr	r3, [pc, #76]	; (800b0e8 <_vfiprintf_r+0x228>)
 800b09c:	a904      	add	r1, sp, #16
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f3af 8000 	nop.w
 800b0a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	d1d8      	bne.n	800b05e <_vfiprintf_r+0x19e>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	065b      	lsls	r3, r3, #25
 800b0b0:	f53f af7d 	bmi.w	800afae <_vfiprintf_r+0xee>
 800b0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b6:	e77c      	b.n	800afb2 <_vfiprintf_r+0xf2>
 800b0b8:	ab03      	add	r3, sp, #12
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	4622      	mov	r2, r4
 800b0be:	4b0a      	ldr	r3, [pc, #40]	; (800b0e8 <_vfiprintf_r+0x228>)
 800b0c0:	a904      	add	r1, sp, #16
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 f888 	bl	800b1d8 <_printf_i>
 800b0c8:	e7ec      	b.n	800b0a4 <_vfiprintf_r+0x1e4>
 800b0ca:	bf00      	nop
 800b0cc:	0807e45c 	.word	0x0807e45c
 800b0d0:	0807e49c 	.word	0x0807e49c
 800b0d4:	0807e47c 	.word	0x0807e47c
 800b0d8:	0807e43c 	.word	0x0807e43c
 800b0dc:	0807e4a2 	.word	0x0807e4a2
 800b0e0:	0807e4a6 	.word	0x0807e4a6
 800b0e4:	00000000 	.word	0x00000000
 800b0e8:	0800ae9d 	.word	0x0800ae9d

0800b0ec <_printf_common>:
 800b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	4691      	mov	r9, r2
 800b0f2:	461f      	mov	r7, r3
 800b0f4:	688a      	ldr	r2, [r1, #8]
 800b0f6:	690b      	ldr	r3, [r1, #16]
 800b0f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	bfb8      	it	lt
 800b100:	4613      	movlt	r3, r2
 800b102:	f8c9 3000 	str.w	r3, [r9]
 800b106:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b10a:	4606      	mov	r6, r0
 800b10c:	460c      	mov	r4, r1
 800b10e:	b112      	cbz	r2, 800b116 <_printf_common+0x2a>
 800b110:	3301      	adds	r3, #1
 800b112:	f8c9 3000 	str.w	r3, [r9]
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	0699      	lsls	r1, r3, #26
 800b11a:	bf42      	ittt	mi
 800b11c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b120:	3302      	addmi	r3, #2
 800b122:	f8c9 3000 	strmi.w	r3, [r9]
 800b126:	6825      	ldr	r5, [r4, #0]
 800b128:	f015 0506 	ands.w	r5, r5, #6
 800b12c:	d107      	bne.n	800b13e <_printf_common+0x52>
 800b12e:	f104 0a19 	add.w	sl, r4, #25
 800b132:	68e3      	ldr	r3, [r4, #12]
 800b134:	f8d9 2000 	ldr.w	r2, [r9]
 800b138:	1a9b      	subs	r3, r3, r2
 800b13a:	429d      	cmp	r5, r3
 800b13c:	db29      	blt.n	800b192 <_printf_common+0xa6>
 800b13e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b142:	6822      	ldr	r2, [r4, #0]
 800b144:	3300      	adds	r3, #0
 800b146:	bf18      	it	ne
 800b148:	2301      	movne	r3, #1
 800b14a:	0692      	lsls	r2, r2, #26
 800b14c:	d42e      	bmi.n	800b1ac <_printf_common+0xc0>
 800b14e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b152:	4639      	mov	r1, r7
 800b154:	4630      	mov	r0, r6
 800b156:	47c0      	blx	r8
 800b158:	3001      	adds	r0, #1
 800b15a:	d021      	beq.n	800b1a0 <_printf_common+0xb4>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	68e5      	ldr	r5, [r4, #12]
 800b160:	f8d9 2000 	ldr.w	r2, [r9]
 800b164:	f003 0306 	and.w	r3, r3, #6
 800b168:	2b04      	cmp	r3, #4
 800b16a:	bf08      	it	eq
 800b16c:	1aad      	subeq	r5, r5, r2
 800b16e:	68a3      	ldr	r3, [r4, #8]
 800b170:	6922      	ldr	r2, [r4, #16]
 800b172:	bf0c      	ite	eq
 800b174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b178:	2500      	movne	r5, #0
 800b17a:	4293      	cmp	r3, r2
 800b17c:	bfc4      	itt	gt
 800b17e:	1a9b      	subgt	r3, r3, r2
 800b180:	18ed      	addgt	r5, r5, r3
 800b182:	f04f 0900 	mov.w	r9, #0
 800b186:	341a      	adds	r4, #26
 800b188:	454d      	cmp	r5, r9
 800b18a:	d11b      	bne.n	800b1c4 <_printf_common+0xd8>
 800b18c:	2000      	movs	r0, #0
 800b18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b192:	2301      	movs	r3, #1
 800b194:	4652      	mov	r2, sl
 800b196:	4639      	mov	r1, r7
 800b198:	4630      	mov	r0, r6
 800b19a:	47c0      	blx	r8
 800b19c:	3001      	adds	r0, #1
 800b19e:	d103      	bne.n	800b1a8 <_printf_common+0xbc>
 800b1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a8:	3501      	adds	r5, #1
 800b1aa:	e7c2      	b.n	800b132 <_printf_common+0x46>
 800b1ac:	18e1      	adds	r1, r4, r3
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	2030      	movs	r0, #48	; 0x30
 800b1b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b1b6:	4422      	add	r2, r4
 800b1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b1bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b1c0:	3302      	adds	r3, #2
 800b1c2:	e7c4      	b.n	800b14e <_printf_common+0x62>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	4630      	mov	r0, r6
 800b1cc:	47c0      	blx	r8
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d0e6      	beq.n	800b1a0 <_printf_common+0xb4>
 800b1d2:	f109 0901 	add.w	r9, r9, #1
 800b1d6:	e7d7      	b.n	800b188 <_printf_common+0x9c>

0800b1d8 <_printf_i>:
 800b1d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	4617      	mov	r7, r2
 800b1de:	7e0a      	ldrb	r2, [r1, #24]
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	2a6e      	cmp	r2, #110	; 0x6e
 800b1e4:	4698      	mov	r8, r3
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460c      	mov	r4, r1
 800b1ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b1f0:	f000 80bc 	beq.w	800b36c <_printf_i+0x194>
 800b1f4:	d81a      	bhi.n	800b22c <_printf_i+0x54>
 800b1f6:	2a63      	cmp	r2, #99	; 0x63
 800b1f8:	d02e      	beq.n	800b258 <_printf_i+0x80>
 800b1fa:	d80a      	bhi.n	800b212 <_printf_i+0x3a>
 800b1fc:	2a00      	cmp	r2, #0
 800b1fe:	f000 80c8 	beq.w	800b392 <_printf_i+0x1ba>
 800b202:	2a58      	cmp	r2, #88	; 0x58
 800b204:	f000 808a 	beq.w	800b31c <_printf_i+0x144>
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b210:	e02a      	b.n	800b268 <_printf_i+0x90>
 800b212:	2a64      	cmp	r2, #100	; 0x64
 800b214:	d001      	beq.n	800b21a <_printf_i+0x42>
 800b216:	2a69      	cmp	r2, #105	; 0x69
 800b218:	d1f6      	bne.n	800b208 <_printf_i+0x30>
 800b21a:	6821      	ldr	r1, [r4, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b222:	d023      	beq.n	800b26c <_printf_i+0x94>
 800b224:	1d11      	adds	r1, r2, #4
 800b226:	6019      	str	r1, [r3, #0]
 800b228:	6813      	ldr	r3, [r2, #0]
 800b22a:	e027      	b.n	800b27c <_printf_i+0xa4>
 800b22c:	2a73      	cmp	r2, #115	; 0x73
 800b22e:	f000 80b4 	beq.w	800b39a <_printf_i+0x1c2>
 800b232:	d808      	bhi.n	800b246 <_printf_i+0x6e>
 800b234:	2a6f      	cmp	r2, #111	; 0x6f
 800b236:	d02a      	beq.n	800b28e <_printf_i+0xb6>
 800b238:	2a70      	cmp	r2, #112	; 0x70
 800b23a:	d1e5      	bne.n	800b208 <_printf_i+0x30>
 800b23c:	680a      	ldr	r2, [r1, #0]
 800b23e:	f042 0220 	orr.w	r2, r2, #32
 800b242:	600a      	str	r2, [r1, #0]
 800b244:	e003      	b.n	800b24e <_printf_i+0x76>
 800b246:	2a75      	cmp	r2, #117	; 0x75
 800b248:	d021      	beq.n	800b28e <_printf_i+0xb6>
 800b24a:	2a78      	cmp	r2, #120	; 0x78
 800b24c:	d1dc      	bne.n	800b208 <_printf_i+0x30>
 800b24e:	2278      	movs	r2, #120	; 0x78
 800b250:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b254:	496e      	ldr	r1, [pc, #440]	; (800b410 <_printf_i+0x238>)
 800b256:	e064      	b.n	800b322 <_printf_i+0x14a>
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b25e:	1d11      	adds	r1, r2, #4
 800b260:	6019      	str	r1, [r3, #0]
 800b262:	6813      	ldr	r3, [r2, #0]
 800b264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b268:	2301      	movs	r3, #1
 800b26a:	e0a3      	b.n	800b3b4 <_printf_i+0x1dc>
 800b26c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b270:	f102 0104 	add.w	r1, r2, #4
 800b274:	6019      	str	r1, [r3, #0]
 800b276:	d0d7      	beq.n	800b228 <_printf_i+0x50>
 800b278:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	da03      	bge.n	800b288 <_printf_i+0xb0>
 800b280:	222d      	movs	r2, #45	; 0x2d
 800b282:	425b      	negs	r3, r3
 800b284:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b288:	4962      	ldr	r1, [pc, #392]	; (800b414 <_printf_i+0x23c>)
 800b28a:	220a      	movs	r2, #10
 800b28c:	e017      	b.n	800b2be <_printf_i+0xe6>
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	6819      	ldr	r1, [r3, #0]
 800b292:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b296:	d003      	beq.n	800b2a0 <_printf_i+0xc8>
 800b298:	1d08      	adds	r0, r1, #4
 800b29a:	6018      	str	r0, [r3, #0]
 800b29c:	680b      	ldr	r3, [r1, #0]
 800b29e:	e006      	b.n	800b2ae <_printf_i+0xd6>
 800b2a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b2a4:	f101 0004 	add.w	r0, r1, #4
 800b2a8:	6018      	str	r0, [r3, #0]
 800b2aa:	d0f7      	beq.n	800b29c <_printf_i+0xc4>
 800b2ac:	880b      	ldrh	r3, [r1, #0]
 800b2ae:	4959      	ldr	r1, [pc, #356]	; (800b414 <_printf_i+0x23c>)
 800b2b0:	2a6f      	cmp	r2, #111	; 0x6f
 800b2b2:	bf14      	ite	ne
 800b2b4:	220a      	movne	r2, #10
 800b2b6:	2208      	moveq	r2, #8
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b2be:	6865      	ldr	r5, [r4, #4]
 800b2c0:	60a5      	str	r5, [r4, #8]
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	f2c0 809c 	blt.w	800b400 <_printf_i+0x228>
 800b2c8:	6820      	ldr	r0, [r4, #0]
 800b2ca:	f020 0004 	bic.w	r0, r0, #4
 800b2ce:	6020      	str	r0, [r4, #0]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d13f      	bne.n	800b354 <_printf_i+0x17c>
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	f040 8095 	bne.w	800b404 <_printf_i+0x22c>
 800b2da:	4675      	mov	r5, lr
 800b2dc:	2a08      	cmp	r2, #8
 800b2de:	d10b      	bne.n	800b2f8 <_printf_i+0x120>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	07da      	lsls	r2, r3, #31
 800b2e4:	d508      	bpl.n	800b2f8 <_printf_i+0x120>
 800b2e6:	6923      	ldr	r3, [r4, #16]
 800b2e8:	6862      	ldr	r2, [r4, #4]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	bfde      	ittt	le
 800b2ee:	2330      	movle	r3, #48	; 0x30
 800b2f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2f8:	ebae 0305 	sub.w	r3, lr, r5
 800b2fc:	6123      	str	r3, [r4, #16]
 800b2fe:	f8cd 8000 	str.w	r8, [sp]
 800b302:	463b      	mov	r3, r7
 800b304:	aa03      	add	r2, sp, #12
 800b306:	4621      	mov	r1, r4
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff feef 	bl	800b0ec <_printf_common>
 800b30e:	3001      	adds	r0, #1
 800b310:	d155      	bne.n	800b3be <_printf_i+0x1e6>
 800b312:	f04f 30ff 	mov.w	r0, #4294967295
 800b316:	b005      	add	sp, #20
 800b318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b31c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b320:	493c      	ldr	r1, [pc, #240]	; (800b414 <_printf_i+0x23c>)
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b32a:	f100 0504 	add.w	r5, r0, #4
 800b32e:	601d      	str	r5, [r3, #0]
 800b330:	d001      	beq.n	800b336 <_printf_i+0x15e>
 800b332:	6803      	ldr	r3, [r0, #0]
 800b334:	e002      	b.n	800b33c <_printf_i+0x164>
 800b336:	0655      	lsls	r5, r2, #25
 800b338:	d5fb      	bpl.n	800b332 <_printf_i+0x15a>
 800b33a:	8803      	ldrh	r3, [r0, #0]
 800b33c:	07d0      	lsls	r0, r2, #31
 800b33e:	bf44      	itt	mi
 800b340:	f042 0220 	orrmi.w	r2, r2, #32
 800b344:	6022      	strmi	r2, [r4, #0]
 800b346:	b91b      	cbnz	r3, 800b350 <_printf_i+0x178>
 800b348:	6822      	ldr	r2, [r4, #0]
 800b34a:	f022 0220 	bic.w	r2, r2, #32
 800b34e:	6022      	str	r2, [r4, #0]
 800b350:	2210      	movs	r2, #16
 800b352:	e7b1      	b.n	800b2b8 <_printf_i+0xe0>
 800b354:	4675      	mov	r5, lr
 800b356:	fbb3 f0f2 	udiv	r0, r3, r2
 800b35a:	fb02 3310 	mls	r3, r2, r0, r3
 800b35e:	5ccb      	ldrb	r3, [r1, r3]
 800b360:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b364:	4603      	mov	r3, r0
 800b366:	2800      	cmp	r0, #0
 800b368:	d1f5      	bne.n	800b356 <_printf_i+0x17e>
 800b36a:	e7b7      	b.n	800b2dc <_printf_i+0x104>
 800b36c:	6808      	ldr	r0, [r1, #0]
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	6949      	ldr	r1, [r1, #20]
 800b372:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b376:	d004      	beq.n	800b382 <_printf_i+0x1aa>
 800b378:	1d10      	adds	r0, r2, #4
 800b37a:	6018      	str	r0, [r3, #0]
 800b37c:	6813      	ldr	r3, [r2, #0]
 800b37e:	6019      	str	r1, [r3, #0]
 800b380:	e007      	b.n	800b392 <_printf_i+0x1ba>
 800b382:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b386:	f102 0004 	add.w	r0, r2, #4
 800b38a:	6018      	str	r0, [r3, #0]
 800b38c:	6813      	ldr	r3, [r2, #0]
 800b38e:	d0f6      	beq.n	800b37e <_printf_i+0x1a6>
 800b390:	8019      	strh	r1, [r3, #0]
 800b392:	2300      	movs	r3, #0
 800b394:	6123      	str	r3, [r4, #16]
 800b396:	4675      	mov	r5, lr
 800b398:	e7b1      	b.n	800b2fe <_printf_i+0x126>
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	1d11      	adds	r1, r2, #4
 800b39e:	6019      	str	r1, [r3, #0]
 800b3a0:	6815      	ldr	r5, [r2, #0]
 800b3a2:	6862      	ldr	r2, [r4, #4]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	f7f4 ff22 	bl	80001f0 <memchr>
 800b3ac:	b108      	cbz	r0, 800b3b2 <_printf_i+0x1da>
 800b3ae:	1b40      	subs	r0, r0, r5
 800b3b0:	6060      	str	r0, [r4, #4]
 800b3b2:	6863      	ldr	r3, [r4, #4]
 800b3b4:	6123      	str	r3, [r4, #16]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3bc:	e79f      	b.n	800b2fe <_printf_i+0x126>
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	462a      	mov	r2, r5
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	47c0      	blx	r8
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d0a2      	beq.n	800b312 <_printf_i+0x13a>
 800b3cc:	6823      	ldr	r3, [r4, #0]
 800b3ce:	079b      	lsls	r3, r3, #30
 800b3d0:	d507      	bpl.n	800b3e2 <_printf_i+0x20a>
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	f104 0919 	add.w	r9, r4, #25
 800b3d8:	68e3      	ldr	r3, [r4, #12]
 800b3da:	9a03      	ldr	r2, [sp, #12]
 800b3dc:	1a9b      	subs	r3, r3, r2
 800b3de:	429d      	cmp	r5, r3
 800b3e0:	db05      	blt.n	800b3ee <_printf_i+0x216>
 800b3e2:	68e0      	ldr	r0, [r4, #12]
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	4298      	cmp	r0, r3
 800b3e8:	bfb8      	it	lt
 800b3ea:	4618      	movlt	r0, r3
 800b3ec:	e793      	b.n	800b316 <_printf_i+0x13e>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	464a      	mov	r2, r9
 800b3f2:	4639      	mov	r1, r7
 800b3f4:	4630      	mov	r0, r6
 800b3f6:	47c0      	blx	r8
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	d08a      	beq.n	800b312 <_printf_i+0x13a>
 800b3fc:	3501      	adds	r5, #1
 800b3fe:	e7eb      	b.n	800b3d8 <_printf_i+0x200>
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1a7      	bne.n	800b354 <_printf_i+0x17c>
 800b404:	780b      	ldrb	r3, [r1, #0]
 800b406:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b40a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b40e:	e765      	b.n	800b2dc <_printf_i+0x104>
 800b410:	0807e4be 	.word	0x0807e4be
 800b414:	0807e4ad 	.word	0x0807e4ad

0800b418 <_sbrk_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4c06      	ldr	r4, [pc, #24]	; (800b434 <_sbrk_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4605      	mov	r5, r0
 800b420:	4608      	mov	r0, r1
 800b422:	6023      	str	r3, [r4, #0]
 800b424:	f7ff f97a 	bl	800a71c <_sbrk>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_sbrk_r+0x1a>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_sbrk_r+0x1a>
 800b430:	602b      	str	r3, [r5, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	20000778 	.word	0x20000778

0800b438 <__sread>:
 800b438:	b510      	push	{r4, lr}
 800b43a:	460c      	mov	r4, r1
 800b43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b440:	f000 fa98 	bl	800b974 <_read_r>
 800b444:	2800      	cmp	r0, #0
 800b446:	bfab      	itete	ge
 800b448:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b44a:	89a3      	ldrhlt	r3, [r4, #12]
 800b44c:	181b      	addge	r3, r3, r0
 800b44e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b452:	bfac      	ite	ge
 800b454:	6563      	strge	r3, [r4, #84]	; 0x54
 800b456:	81a3      	strhlt	r3, [r4, #12]
 800b458:	bd10      	pop	{r4, pc}

0800b45a <__swrite>:
 800b45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b45e:	461f      	mov	r7, r3
 800b460:	898b      	ldrh	r3, [r1, #12]
 800b462:	05db      	lsls	r3, r3, #23
 800b464:	4605      	mov	r5, r0
 800b466:	460c      	mov	r4, r1
 800b468:	4616      	mov	r6, r2
 800b46a:	d505      	bpl.n	800b478 <__swrite+0x1e>
 800b46c:	2302      	movs	r3, #2
 800b46e:	2200      	movs	r2, #0
 800b470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b474:	f000 f9b8 	bl	800b7e8 <_lseek_r>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b47e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b482:	81a3      	strh	r3, [r4, #12]
 800b484:	4632      	mov	r2, r6
 800b486:	463b      	mov	r3, r7
 800b488:	4628      	mov	r0, r5
 800b48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	f000 b869 	b.w	800b564 <_write_r>

0800b492 <__sseek>:
 800b492:	b510      	push	{r4, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49a:	f000 f9a5 	bl	800b7e8 <_lseek_r>
 800b49e:	1c43      	adds	r3, r0, #1
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	bf15      	itete	ne
 800b4a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4ae:	81a3      	strheq	r3, [r4, #12]
 800b4b0:	bf18      	it	ne
 800b4b2:	81a3      	strhne	r3, [r4, #12]
 800b4b4:	bd10      	pop	{r4, pc}

0800b4b6 <__sclose>:
 800b4b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ba:	f000 b8d3 	b.w	800b664 <_close_r>
	...

0800b4c0 <__swbuf_r>:
 800b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c2:	460e      	mov	r6, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	4605      	mov	r5, r0
 800b4c8:	b118      	cbz	r0, 800b4d2 <__swbuf_r+0x12>
 800b4ca:	6983      	ldr	r3, [r0, #24]
 800b4cc:	b90b      	cbnz	r3, 800b4d2 <__swbuf_r+0x12>
 800b4ce:	f7ff fbe5 	bl	800ac9c <__sinit>
 800b4d2:	4b21      	ldr	r3, [pc, #132]	; (800b558 <__swbuf_r+0x98>)
 800b4d4:	429c      	cmp	r4, r3
 800b4d6:	d12a      	bne.n	800b52e <__swbuf_r+0x6e>
 800b4d8:	686c      	ldr	r4, [r5, #4]
 800b4da:	69a3      	ldr	r3, [r4, #24]
 800b4dc:	60a3      	str	r3, [r4, #8]
 800b4de:	89a3      	ldrh	r3, [r4, #12]
 800b4e0:	071a      	lsls	r2, r3, #28
 800b4e2:	d52e      	bpl.n	800b542 <__swbuf_r+0x82>
 800b4e4:	6923      	ldr	r3, [r4, #16]
 800b4e6:	b363      	cbz	r3, 800b542 <__swbuf_r+0x82>
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	6820      	ldr	r0, [r4, #0]
 800b4ec:	1ac0      	subs	r0, r0, r3
 800b4ee:	6963      	ldr	r3, [r4, #20]
 800b4f0:	b2f6      	uxtb	r6, r6
 800b4f2:	4298      	cmp	r0, r3
 800b4f4:	4637      	mov	r7, r6
 800b4f6:	db04      	blt.n	800b502 <__swbuf_r+0x42>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f94a 	bl	800b794 <_fflush_r>
 800b500:	bb28      	cbnz	r0, 800b54e <__swbuf_r+0x8e>
 800b502:	68a3      	ldr	r3, [r4, #8]
 800b504:	3b01      	subs	r3, #1
 800b506:	60a3      	str	r3, [r4, #8]
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	1c5a      	adds	r2, r3, #1
 800b50c:	6022      	str	r2, [r4, #0]
 800b50e:	701e      	strb	r6, [r3, #0]
 800b510:	6963      	ldr	r3, [r4, #20]
 800b512:	3001      	adds	r0, #1
 800b514:	4298      	cmp	r0, r3
 800b516:	d004      	beq.n	800b522 <__swbuf_r+0x62>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	07db      	lsls	r3, r3, #31
 800b51c:	d519      	bpl.n	800b552 <__swbuf_r+0x92>
 800b51e:	2e0a      	cmp	r6, #10
 800b520:	d117      	bne.n	800b552 <__swbuf_r+0x92>
 800b522:	4621      	mov	r1, r4
 800b524:	4628      	mov	r0, r5
 800b526:	f000 f935 	bl	800b794 <_fflush_r>
 800b52a:	b190      	cbz	r0, 800b552 <__swbuf_r+0x92>
 800b52c:	e00f      	b.n	800b54e <__swbuf_r+0x8e>
 800b52e:	4b0b      	ldr	r3, [pc, #44]	; (800b55c <__swbuf_r+0x9c>)
 800b530:	429c      	cmp	r4, r3
 800b532:	d101      	bne.n	800b538 <__swbuf_r+0x78>
 800b534:	68ac      	ldr	r4, [r5, #8]
 800b536:	e7d0      	b.n	800b4da <__swbuf_r+0x1a>
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <__swbuf_r+0xa0>)
 800b53a:	429c      	cmp	r4, r3
 800b53c:	bf08      	it	eq
 800b53e:	68ec      	ldreq	r4, [r5, #12]
 800b540:	e7cb      	b.n	800b4da <__swbuf_r+0x1a>
 800b542:	4621      	mov	r1, r4
 800b544:	4628      	mov	r0, r5
 800b546:	f000 f81f 	bl	800b588 <__swsetup_r>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d0cc      	beq.n	800b4e8 <__swbuf_r+0x28>
 800b54e:	f04f 37ff 	mov.w	r7, #4294967295
 800b552:	4638      	mov	r0, r7
 800b554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b556:	bf00      	nop
 800b558:	0807e45c 	.word	0x0807e45c
 800b55c:	0807e47c 	.word	0x0807e47c
 800b560:	0807e43c 	.word	0x0807e43c

0800b564 <_write_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4c07      	ldr	r4, [pc, #28]	; (800b584 <_write_r+0x20>)
 800b568:	4605      	mov	r5, r0
 800b56a:	4608      	mov	r0, r1
 800b56c:	4611      	mov	r1, r2
 800b56e:	2200      	movs	r2, #0
 800b570:	6022      	str	r2, [r4, #0]
 800b572:	461a      	mov	r2, r3
 800b574:	f7ff f8b5 	bl	800a6e2 <_write>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_write_r+0x1e>
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_write_r+0x1e>
 800b580:	602b      	str	r3, [r5, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	20000778 	.word	0x20000778

0800b588 <__swsetup_r>:
 800b588:	4b32      	ldr	r3, [pc, #200]	; (800b654 <__swsetup_r+0xcc>)
 800b58a:	b570      	push	{r4, r5, r6, lr}
 800b58c:	681d      	ldr	r5, [r3, #0]
 800b58e:	4606      	mov	r6, r0
 800b590:	460c      	mov	r4, r1
 800b592:	b125      	cbz	r5, 800b59e <__swsetup_r+0x16>
 800b594:	69ab      	ldr	r3, [r5, #24]
 800b596:	b913      	cbnz	r3, 800b59e <__swsetup_r+0x16>
 800b598:	4628      	mov	r0, r5
 800b59a:	f7ff fb7f 	bl	800ac9c <__sinit>
 800b59e:	4b2e      	ldr	r3, [pc, #184]	; (800b658 <__swsetup_r+0xd0>)
 800b5a0:	429c      	cmp	r4, r3
 800b5a2:	d10f      	bne.n	800b5c4 <__swsetup_r+0x3c>
 800b5a4:	686c      	ldr	r4, [r5, #4]
 800b5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	0715      	lsls	r5, r2, #28
 800b5ae:	d42c      	bmi.n	800b60a <__swsetup_r+0x82>
 800b5b0:	06d0      	lsls	r0, r2, #27
 800b5b2:	d411      	bmi.n	800b5d8 <__swsetup_r+0x50>
 800b5b4:	2209      	movs	r2, #9
 800b5b6:	6032      	str	r2, [r6, #0]
 800b5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5bc:	81a3      	strh	r3, [r4, #12]
 800b5be:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c2:	bd70      	pop	{r4, r5, r6, pc}
 800b5c4:	4b25      	ldr	r3, [pc, #148]	; (800b65c <__swsetup_r+0xd4>)
 800b5c6:	429c      	cmp	r4, r3
 800b5c8:	d101      	bne.n	800b5ce <__swsetup_r+0x46>
 800b5ca:	68ac      	ldr	r4, [r5, #8]
 800b5cc:	e7eb      	b.n	800b5a6 <__swsetup_r+0x1e>
 800b5ce:	4b24      	ldr	r3, [pc, #144]	; (800b660 <__swsetup_r+0xd8>)
 800b5d0:	429c      	cmp	r4, r3
 800b5d2:	bf08      	it	eq
 800b5d4:	68ec      	ldreq	r4, [r5, #12]
 800b5d6:	e7e6      	b.n	800b5a6 <__swsetup_r+0x1e>
 800b5d8:	0751      	lsls	r1, r2, #29
 800b5da:	d512      	bpl.n	800b602 <__swsetup_r+0x7a>
 800b5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5de:	b141      	cbz	r1, 800b5f2 <__swsetup_r+0x6a>
 800b5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5e4:	4299      	cmp	r1, r3
 800b5e6:	d002      	beq.n	800b5ee <__swsetup_r+0x66>
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f000 f975 	bl	800b8d8 <_free_r>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6363      	str	r3, [r4, #52]	; 0x34
 800b5f2:	89a3      	ldrh	r3, [r4, #12]
 800b5f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5f8:	81a3      	strh	r3, [r4, #12]
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	6063      	str	r3, [r4, #4]
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	6023      	str	r3, [r4, #0]
 800b602:	89a3      	ldrh	r3, [r4, #12]
 800b604:	f043 0308 	orr.w	r3, r3, #8
 800b608:	81a3      	strh	r3, [r4, #12]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	b94b      	cbnz	r3, 800b622 <__swsetup_r+0x9a>
 800b60e:	89a3      	ldrh	r3, [r4, #12]
 800b610:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b618:	d003      	beq.n	800b622 <__swsetup_r+0x9a>
 800b61a:	4621      	mov	r1, r4
 800b61c:	4630      	mov	r0, r6
 800b61e:	f000 f919 	bl	800b854 <__smakebuf_r>
 800b622:	89a2      	ldrh	r2, [r4, #12]
 800b624:	f012 0301 	ands.w	r3, r2, #1
 800b628:	d00c      	beq.n	800b644 <__swsetup_r+0xbc>
 800b62a:	2300      	movs	r3, #0
 800b62c:	60a3      	str	r3, [r4, #8]
 800b62e:	6963      	ldr	r3, [r4, #20]
 800b630:	425b      	negs	r3, r3
 800b632:	61a3      	str	r3, [r4, #24]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	b953      	cbnz	r3, 800b64e <__swsetup_r+0xc6>
 800b638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b63c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b640:	d1ba      	bne.n	800b5b8 <__swsetup_r+0x30>
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	0792      	lsls	r2, r2, #30
 800b646:	bf58      	it	pl
 800b648:	6963      	ldrpl	r3, [r4, #20]
 800b64a:	60a3      	str	r3, [r4, #8]
 800b64c:	e7f2      	b.n	800b634 <__swsetup_r+0xac>
 800b64e:	2000      	movs	r0, #0
 800b650:	e7f7      	b.n	800b642 <__swsetup_r+0xba>
 800b652:	bf00      	nop
 800b654:	20000080 	.word	0x20000080
 800b658:	0807e45c 	.word	0x0807e45c
 800b65c:	0807e47c 	.word	0x0807e47c
 800b660:	0807e43c 	.word	0x0807e43c

0800b664 <_close_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4c06      	ldr	r4, [pc, #24]	; (800b680 <_close_r+0x1c>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4605      	mov	r5, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	6023      	str	r3, [r4, #0]
 800b670:	f7ff f880 	bl	800a774 <_close>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_close_r+0x1a>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_close_r+0x1a>
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20000778 	.word	0x20000778

0800b684 <__sflush_r>:
 800b684:	898a      	ldrh	r2, [r1, #12]
 800b686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68a:	4605      	mov	r5, r0
 800b68c:	0710      	lsls	r0, r2, #28
 800b68e:	460c      	mov	r4, r1
 800b690:	d45a      	bmi.n	800b748 <__sflush_r+0xc4>
 800b692:	684b      	ldr	r3, [r1, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	dc05      	bgt.n	800b6a4 <__sflush_r+0x20>
 800b698:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	dc02      	bgt.n	800b6a4 <__sflush_r+0x20>
 800b69e:	2000      	movs	r0, #0
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6a6:	2e00      	cmp	r6, #0
 800b6a8:	d0f9      	beq.n	800b69e <__sflush_r+0x1a>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6b0:	682f      	ldr	r7, [r5, #0]
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	d033      	beq.n	800b71e <__sflush_r+0x9a>
 800b6b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	075a      	lsls	r2, r3, #29
 800b6bc:	d505      	bpl.n	800b6ca <__sflush_r+0x46>
 800b6be:	6863      	ldr	r3, [r4, #4]
 800b6c0:	1ac0      	subs	r0, r0, r3
 800b6c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6c4:	b10b      	cbz	r3, 800b6ca <__sflush_r+0x46>
 800b6c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6c8:	1ac0      	subs	r0, r0, r3
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6d0:	6a21      	ldr	r1, [r4, #32]
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	47b0      	blx	r6
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	d106      	bne.n	800b6ea <__sflush_r+0x66>
 800b6dc:	6829      	ldr	r1, [r5, #0]
 800b6de:	291d      	cmp	r1, #29
 800b6e0:	d84b      	bhi.n	800b77a <__sflush_r+0xf6>
 800b6e2:	4a2b      	ldr	r2, [pc, #172]	; (800b790 <__sflush_r+0x10c>)
 800b6e4:	40ca      	lsrs	r2, r1
 800b6e6:	07d6      	lsls	r6, r2, #31
 800b6e8:	d547      	bpl.n	800b77a <__sflush_r+0xf6>
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	6062      	str	r2, [r4, #4]
 800b6ee:	04d9      	lsls	r1, r3, #19
 800b6f0:	6922      	ldr	r2, [r4, #16]
 800b6f2:	6022      	str	r2, [r4, #0]
 800b6f4:	d504      	bpl.n	800b700 <__sflush_r+0x7c>
 800b6f6:	1c42      	adds	r2, r0, #1
 800b6f8:	d101      	bne.n	800b6fe <__sflush_r+0x7a>
 800b6fa:	682b      	ldr	r3, [r5, #0]
 800b6fc:	b903      	cbnz	r3, 800b700 <__sflush_r+0x7c>
 800b6fe:	6560      	str	r0, [r4, #84]	; 0x54
 800b700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b702:	602f      	str	r7, [r5, #0]
 800b704:	2900      	cmp	r1, #0
 800b706:	d0ca      	beq.n	800b69e <__sflush_r+0x1a>
 800b708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d002      	beq.n	800b716 <__sflush_r+0x92>
 800b710:	4628      	mov	r0, r5
 800b712:	f000 f8e1 	bl	800b8d8 <_free_r>
 800b716:	2000      	movs	r0, #0
 800b718:	6360      	str	r0, [r4, #52]	; 0x34
 800b71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	2301      	movs	r3, #1
 800b722:	4628      	mov	r0, r5
 800b724:	47b0      	blx	r6
 800b726:	1c41      	adds	r1, r0, #1
 800b728:	d1c6      	bne.n	800b6b8 <__sflush_r+0x34>
 800b72a:	682b      	ldr	r3, [r5, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d0c3      	beq.n	800b6b8 <__sflush_r+0x34>
 800b730:	2b1d      	cmp	r3, #29
 800b732:	d001      	beq.n	800b738 <__sflush_r+0xb4>
 800b734:	2b16      	cmp	r3, #22
 800b736:	d101      	bne.n	800b73c <__sflush_r+0xb8>
 800b738:	602f      	str	r7, [r5, #0]
 800b73a:	e7b0      	b.n	800b69e <__sflush_r+0x1a>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b748:	690f      	ldr	r7, [r1, #16]
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d0a7      	beq.n	800b69e <__sflush_r+0x1a>
 800b74e:	0793      	lsls	r3, r2, #30
 800b750:	680e      	ldr	r6, [r1, #0]
 800b752:	bf08      	it	eq
 800b754:	694b      	ldreq	r3, [r1, #20]
 800b756:	600f      	str	r7, [r1, #0]
 800b758:	bf18      	it	ne
 800b75a:	2300      	movne	r3, #0
 800b75c:	eba6 0807 	sub.w	r8, r6, r7
 800b760:	608b      	str	r3, [r1, #8]
 800b762:	f1b8 0f00 	cmp.w	r8, #0
 800b766:	dd9a      	ble.n	800b69e <__sflush_r+0x1a>
 800b768:	4643      	mov	r3, r8
 800b76a:	463a      	mov	r2, r7
 800b76c:	6a21      	ldr	r1, [r4, #32]
 800b76e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b770:	4628      	mov	r0, r5
 800b772:	47b0      	blx	r6
 800b774:	2800      	cmp	r0, #0
 800b776:	dc07      	bgt.n	800b788 <__sflush_r+0x104>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b788:	4407      	add	r7, r0
 800b78a:	eba8 0800 	sub.w	r8, r8, r0
 800b78e:	e7e8      	b.n	800b762 <__sflush_r+0xde>
 800b790:	20400001 	.word	0x20400001

0800b794 <_fflush_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	690b      	ldr	r3, [r1, #16]
 800b798:	4605      	mov	r5, r0
 800b79a:	460c      	mov	r4, r1
 800b79c:	b1db      	cbz	r3, 800b7d6 <_fflush_r+0x42>
 800b79e:	b118      	cbz	r0, 800b7a8 <_fflush_r+0x14>
 800b7a0:	6983      	ldr	r3, [r0, #24]
 800b7a2:	b90b      	cbnz	r3, 800b7a8 <_fflush_r+0x14>
 800b7a4:	f7ff fa7a 	bl	800ac9c <__sinit>
 800b7a8:	4b0c      	ldr	r3, [pc, #48]	; (800b7dc <_fflush_r+0x48>)
 800b7aa:	429c      	cmp	r4, r3
 800b7ac:	d109      	bne.n	800b7c2 <_fflush_r+0x2e>
 800b7ae:	686c      	ldr	r4, [r5, #4]
 800b7b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b4:	b17b      	cbz	r3, 800b7d6 <_fflush_r+0x42>
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7be:	f7ff bf61 	b.w	800b684 <__sflush_r>
 800b7c2:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <_fflush_r+0x4c>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	d101      	bne.n	800b7cc <_fflush_r+0x38>
 800b7c8:	68ac      	ldr	r4, [r5, #8]
 800b7ca:	e7f1      	b.n	800b7b0 <_fflush_r+0x1c>
 800b7cc:	4b05      	ldr	r3, [pc, #20]	; (800b7e4 <_fflush_r+0x50>)
 800b7ce:	429c      	cmp	r4, r3
 800b7d0:	bf08      	it	eq
 800b7d2:	68ec      	ldreq	r4, [r5, #12]
 800b7d4:	e7ec      	b.n	800b7b0 <_fflush_r+0x1c>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	bd38      	pop	{r3, r4, r5, pc}
 800b7da:	bf00      	nop
 800b7dc:	0807e45c 	.word	0x0807e45c
 800b7e0:	0807e47c 	.word	0x0807e47c
 800b7e4:	0807e43c 	.word	0x0807e43c

0800b7e8 <_lseek_r>:
 800b7e8:	b538      	push	{r3, r4, r5, lr}
 800b7ea:	4c07      	ldr	r4, [pc, #28]	; (800b808 <_lseek_r+0x20>)
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	6022      	str	r2, [r4, #0]
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f7fe ffe3 	bl	800a7c2 <_lseek>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d102      	bne.n	800b806 <_lseek_r+0x1e>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	b103      	cbz	r3, 800b806 <_lseek_r+0x1e>
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	bd38      	pop	{r3, r4, r5, pc}
 800b808:	20000778 	.word	0x20000778

0800b80c <__swhatbuf_r>:
 800b80c:	b570      	push	{r4, r5, r6, lr}
 800b80e:	460e      	mov	r6, r1
 800b810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b814:	2900      	cmp	r1, #0
 800b816:	b090      	sub	sp, #64	; 0x40
 800b818:	4614      	mov	r4, r2
 800b81a:	461d      	mov	r5, r3
 800b81c:	da07      	bge.n	800b82e <__swhatbuf_r+0x22>
 800b81e:	2300      	movs	r3, #0
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	89b3      	ldrh	r3, [r6, #12]
 800b824:	061a      	lsls	r2, r3, #24
 800b826:	d410      	bmi.n	800b84a <__swhatbuf_r+0x3e>
 800b828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b82c:	e00e      	b.n	800b84c <__swhatbuf_r+0x40>
 800b82e:	aa01      	add	r2, sp, #4
 800b830:	f000 f8b2 	bl	800b998 <_fstat_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	dbf2      	blt.n	800b81e <__swhatbuf_r+0x12>
 800b838:	9a02      	ldr	r2, [sp, #8]
 800b83a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b83e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b842:	425a      	negs	r2, r3
 800b844:	415a      	adcs	r2, r3
 800b846:	602a      	str	r2, [r5, #0]
 800b848:	e7ee      	b.n	800b828 <__swhatbuf_r+0x1c>
 800b84a:	2340      	movs	r3, #64	; 0x40
 800b84c:	2000      	movs	r0, #0
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	b010      	add	sp, #64	; 0x40
 800b852:	bd70      	pop	{r4, r5, r6, pc}

0800b854 <__smakebuf_r>:
 800b854:	898b      	ldrh	r3, [r1, #12]
 800b856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b858:	079d      	lsls	r5, r3, #30
 800b85a:	4606      	mov	r6, r0
 800b85c:	460c      	mov	r4, r1
 800b85e:	d507      	bpl.n	800b870 <__smakebuf_r+0x1c>
 800b860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	6123      	str	r3, [r4, #16]
 800b868:	2301      	movs	r3, #1
 800b86a:	6163      	str	r3, [r4, #20]
 800b86c:	b002      	add	sp, #8
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	ab01      	add	r3, sp, #4
 800b872:	466a      	mov	r2, sp
 800b874:	f7ff ffca 	bl	800b80c <__swhatbuf_r>
 800b878:	9900      	ldr	r1, [sp, #0]
 800b87a:	4605      	mov	r5, r0
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff fa97 	bl	800adb0 <_malloc_r>
 800b882:	b948      	cbnz	r0, 800b898 <__smakebuf_r+0x44>
 800b884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b888:	059a      	lsls	r2, r3, #22
 800b88a:	d4ef      	bmi.n	800b86c <__smakebuf_r+0x18>
 800b88c:	f023 0303 	bic.w	r3, r3, #3
 800b890:	f043 0302 	orr.w	r3, r3, #2
 800b894:	81a3      	strh	r3, [r4, #12]
 800b896:	e7e3      	b.n	800b860 <__smakebuf_r+0xc>
 800b898:	4b0d      	ldr	r3, [pc, #52]	; (800b8d0 <__smakebuf_r+0x7c>)
 800b89a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	6020      	str	r0, [r4, #0]
 800b8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a4:	81a3      	strh	r3, [r4, #12]
 800b8a6:	9b00      	ldr	r3, [sp, #0]
 800b8a8:	6163      	str	r3, [r4, #20]
 800b8aa:	9b01      	ldr	r3, [sp, #4]
 800b8ac:	6120      	str	r0, [r4, #16]
 800b8ae:	b15b      	cbz	r3, 800b8c8 <__smakebuf_r+0x74>
 800b8b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	f000 f881 	bl	800b9bc <_isatty_r>
 800b8ba:	b128      	cbz	r0, 800b8c8 <__smakebuf_r+0x74>
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	f043 0301 	orr.w	r3, r3, #1
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	431d      	orrs	r5, r3
 800b8cc:	81a5      	strh	r5, [r4, #12]
 800b8ce:	e7cd      	b.n	800b86c <__smakebuf_r+0x18>
 800b8d0:	0800ac1d 	.word	0x0800ac1d

0800b8d4 <__malloc_lock>:
 800b8d4:	4770      	bx	lr

0800b8d6 <__malloc_unlock>:
 800b8d6:	4770      	bx	lr

0800b8d8 <_free_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4605      	mov	r5, r0
 800b8dc:	2900      	cmp	r1, #0
 800b8de:	d045      	beq.n	800b96c <_free_r+0x94>
 800b8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8e4:	1f0c      	subs	r4, r1, #4
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	bfb8      	it	lt
 800b8ea:	18e4      	addlt	r4, r4, r3
 800b8ec:	f7ff fff2 	bl	800b8d4 <__malloc_lock>
 800b8f0:	4a1f      	ldr	r2, [pc, #124]	; (800b970 <_free_r+0x98>)
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	b933      	cbnz	r3, 800b906 <_free_r+0x2e>
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	6014      	str	r4, [r2, #0]
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b902:	f7ff bfe8 	b.w	800b8d6 <__malloc_unlock>
 800b906:	42a3      	cmp	r3, r4
 800b908:	d90c      	bls.n	800b924 <_free_r+0x4c>
 800b90a:	6821      	ldr	r1, [r4, #0]
 800b90c:	1862      	adds	r2, r4, r1
 800b90e:	4293      	cmp	r3, r2
 800b910:	bf04      	itt	eq
 800b912:	681a      	ldreq	r2, [r3, #0]
 800b914:	685b      	ldreq	r3, [r3, #4]
 800b916:	6063      	str	r3, [r4, #4]
 800b918:	bf04      	itt	eq
 800b91a:	1852      	addeq	r2, r2, r1
 800b91c:	6022      	streq	r2, [r4, #0]
 800b91e:	6004      	str	r4, [r0, #0]
 800b920:	e7ec      	b.n	800b8fc <_free_r+0x24>
 800b922:	4613      	mov	r3, r2
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	b10a      	cbz	r2, 800b92c <_free_r+0x54>
 800b928:	42a2      	cmp	r2, r4
 800b92a:	d9fa      	bls.n	800b922 <_free_r+0x4a>
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	1858      	adds	r0, r3, r1
 800b930:	42a0      	cmp	r0, r4
 800b932:	d10b      	bne.n	800b94c <_free_r+0x74>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	4401      	add	r1, r0
 800b938:	1858      	adds	r0, r3, r1
 800b93a:	4282      	cmp	r2, r0
 800b93c:	6019      	str	r1, [r3, #0]
 800b93e:	d1dd      	bne.n	800b8fc <_free_r+0x24>
 800b940:	6810      	ldr	r0, [r2, #0]
 800b942:	6852      	ldr	r2, [r2, #4]
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	4401      	add	r1, r0
 800b948:	6019      	str	r1, [r3, #0]
 800b94a:	e7d7      	b.n	800b8fc <_free_r+0x24>
 800b94c:	d902      	bls.n	800b954 <_free_r+0x7c>
 800b94e:	230c      	movs	r3, #12
 800b950:	602b      	str	r3, [r5, #0]
 800b952:	e7d3      	b.n	800b8fc <_free_r+0x24>
 800b954:	6820      	ldr	r0, [r4, #0]
 800b956:	1821      	adds	r1, r4, r0
 800b958:	428a      	cmp	r2, r1
 800b95a:	bf04      	itt	eq
 800b95c:	6811      	ldreq	r1, [r2, #0]
 800b95e:	6852      	ldreq	r2, [r2, #4]
 800b960:	6062      	str	r2, [r4, #4]
 800b962:	bf04      	itt	eq
 800b964:	1809      	addeq	r1, r1, r0
 800b966:	6021      	streq	r1, [r4, #0]
 800b968:	605c      	str	r4, [r3, #4]
 800b96a:	e7c7      	b.n	800b8fc <_free_r+0x24>
 800b96c:	bd38      	pop	{r3, r4, r5, pc}
 800b96e:	bf00      	nop
 800b970:	200002b8 	.word	0x200002b8

0800b974 <_read_r>:
 800b974:	b538      	push	{r3, r4, r5, lr}
 800b976:	4c07      	ldr	r4, [pc, #28]	; (800b994 <_read_r+0x20>)
 800b978:	4605      	mov	r5, r0
 800b97a:	4608      	mov	r0, r1
 800b97c:	4611      	mov	r1, r2
 800b97e:	2200      	movs	r2, #0
 800b980:	6022      	str	r2, [r4, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	f7fe fe90 	bl	800a6a8 <_read>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_read_r+0x1e>
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_read_r+0x1e>
 800b990:	602b      	str	r3, [r5, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20000778 	.word	0x20000778

0800b998 <_fstat_r>:
 800b998:	b538      	push	{r3, r4, r5, lr}
 800b99a:	4c07      	ldr	r4, [pc, #28]	; (800b9b8 <_fstat_r+0x20>)
 800b99c:	2300      	movs	r3, #0
 800b99e:	4605      	mov	r5, r0
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	4611      	mov	r1, r2
 800b9a4:	6023      	str	r3, [r4, #0]
 800b9a6:	f7fe fef1 	bl	800a78c <_fstat>
 800b9aa:	1c43      	adds	r3, r0, #1
 800b9ac:	d102      	bne.n	800b9b4 <_fstat_r+0x1c>
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	b103      	cbz	r3, 800b9b4 <_fstat_r+0x1c>
 800b9b2:	602b      	str	r3, [r5, #0]
 800b9b4:	bd38      	pop	{r3, r4, r5, pc}
 800b9b6:	bf00      	nop
 800b9b8:	20000778 	.word	0x20000778

0800b9bc <_isatty_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4c06      	ldr	r4, [pc, #24]	; (800b9d8 <_isatty_r+0x1c>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	6023      	str	r3, [r4, #0]
 800b9c8:	f7fe fef0 	bl	800a7ac <_isatty>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_isatty_r+0x1a>
 800b9d0:	6823      	ldr	r3, [r4, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_isatty_r+0x1a>
 800b9d4:	602b      	str	r3, [r5, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	20000778 	.word	0x20000778

0800b9dc <_init>:
 800b9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9de:	bf00      	nop
 800b9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e2:	bc08      	pop	{r3}
 800b9e4:	469e      	mov	lr, r3
 800b9e6:	4770      	bx	lr

0800b9e8 <_fini>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr
