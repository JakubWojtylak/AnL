
AnL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00073194  0800cd58  0800cd58  0001cd58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0807feec  0807feec  0008feec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0807fef4  0807fef4  0008fef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0807fef8  0807fef8  0008fef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000000  0807fefc  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000900e4  2**0
                  CONTENTS
  8 .bss          000006bc  200000e4  200000e4  000900e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200007a0  200007a0  000900e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000900e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00027824  00000000  00000000  00090114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004fe7  00000000  00000000  000b7938  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001d18  00000000  00000000  000bc920  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001a98  00000000  00000000  000be638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000deb9  00000000  00000000  000c00d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008404  00000000  00000000  000cdf89  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000d638d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007f50  00000000  00000000  000d640c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cd40 	.word	0x0800cd40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	0800cd40 	.word	0x0800cd40

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__aeabi_d2iz>:
 8000a24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d215      	bcs.n	8000a5a <__aeabi_d2iz+0x36>
 8000a2e:	d511      	bpl.n	8000a54 <__aeabi_d2iz+0x30>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d912      	bls.n	8000a60 <__aeabi_d2iz+0x3c>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	bf18      	it	ne
 8000a50:	4240      	negne	r0, r0
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_d2iz+0x48>
 8000a60:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a64:	bf08      	it	eq
 8000a66:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a88:	f000 b97a 	b.w	8000d80 <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	468c      	mov	ip, r1
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	9e08      	ldr	r6, [sp, #32]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d151      	bne.n	8000b58 <__udivmoddi4+0xb4>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4617      	mov	r7, r2
 8000ab8:	d96d      	bls.n	8000b96 <__udivmoddi4+0xf2>
 8000aba:	fab2 fe82 	clz	lr, r2
 8000abe:	f1be 0f00 	cmp.w	lr, #0
 8000ac2:	d00b      	beq.n	8000adc <__udivmoddi4+0x38>
 8000ac4:	f1ce 0c20 	rsb	ip, lr, #32
 8000ac8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000acc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000ad0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ad4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ad8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000adc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ae0:	0c25      	lsrs	r5, r4, #16
 8000ae2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ae6:	fa1f f987 	uxth.w	r9, r7
 8000aea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000aee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000af2:	fb08 f309 	mul.w	r3, r8, r9
 8000af6:	42ab      	cmp	r3, r5
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x6c>
 8000afa:	19ed      	adds	r5, r5, r7
 8000afc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000b00:	f080 8123 	bcs.w	8000d4a <__udivmoddi4+0x2a6>
 8000b04:	42ab      	cmp	r3, r5
 8000b06:	f240 8120 	bls.w	8000d4a <__udivmoddi4+0x2a6>
 8000b0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000b0e:	443d      	add	r5, r7
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000b18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000b1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b20:	fb00 f909 	mul.w	r9, r0, r9
 8000b24:	45a1      	cmp	r9, r4
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x98>
 8000b28:	19e4      	adds	r4, r4, r7
 8000b2a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 810a 	bcs.w	8000d46 <__udivmoddi4+0x2a2>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f240 8107 	bls.w	8000d46 <__udivmoddi4+0x2a2>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	443c      	add	r4, r7
 8000b3c:	eba4 0409 	sub.w	r4, r4, r9
 8000b40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b44:	2100      	movs	r1, #0
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	d061      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b4e:	2300      	movs	r3, #0
 8000b50:	6034      	str	r4, [r6, #0]
 8000b52:	6073      	str	r3, [r6, #4]
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	428b      	cmp	r3, r1
 8000b5a:	d907      	bls.n	8000b6c <__udivmoddi4+0xc8>
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d054      	beq.n	8000c0a <__udivmoddi4+0x166>
 8000b60:	2100      	movs	r1, #0
 8000b62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b66:	4608      	mov	r0, r1
 8000b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6c:	fab3 f183 	clz	r1, r3
 8000b70:	2900      	cmp	r1, #0
 8000b72:	f040 808e 	bne.w	8000c92 <__udivmoddi4+0x1ee>
 8000b76:	42ab      	cmp	r3, r5
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xdc>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80fa 	bhi.w	8000d74 <__udivmoddi4+0x2d0>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb65 0503 	sbc.w	r5, r5, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	46ac      	mov	ip, r5
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d03f      	beq.n	8000c0e <__udivmoddi4+0x16a>
 8000b8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	b912      	cbnz	r2, 8000b9e <__udivmoddi4+0xfa>
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b9e:	fab7 fe87 	clz	lr, r7
 8000ba2:	f1be 0f00 	cmp.w	lr, #0
 8000ba6:	d134      	bne.n	8000c12 <__udivmoddi4+0x16e>
 8000ba8:	1beb      	subs	r3, r5, r7
 8000baa:	0c3a      	lsrs	r2, r7, #16
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000bb6:	0c25      	lsrs	r5, r4, #16
 8000bb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000bbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bc0:	fb0c f308 	mul.w	r3, ip, r8
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d907      	bls.n	8000bd8 <__udivmoddi4+0x134>
 8000bc8:	19ed      	adds	r5, r5, r7
 8000bca:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x132>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	f200 80d1 	bhi.w	8000d78 <__udivmoddi4+0x2d4>
 8000bd6:	4680      	mov	r8, r0
 8000bd8:	1aed      	subs	r5, r5, r3
 8000bda:	b2a3      	uxth	r3, r4
 8000bdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000be0:	fb02 5510 	mls	r5, r2, r0, r5
 8000be4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000be8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bec:	45a4      	cmp	ip, r4
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x15c>
 8000bf0:	19e4      	adds	r4, r4, r7
 8000bf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x15a>
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	f200 80b8 	bhi.w	8000d6e <__udivmoddi4+0x2ca>
 8000bfe:	4618      	mov	r0, r3
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c08:	e79d      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000c0a:	4631      	mov	r1, r6
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	f1ce 0420 	rsb	r4, lr, #32
 8000c16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000c1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000c22:	0c3a      	lsrs	r2, r7, #16
 8000c24:	fa25 f404 	lsr.w	r4, r5, r4
 8000c28:	ea48 0803 	orr.w	r8, r8, r3
 8000c2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c34:	fb02 4411 	mls	r4, r2, r1, r4
 8000c38:	fa1f fc87 	uxth.w	ip, r7
 8000c3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c40:	fb01 f30c 	mul.w	r3, r1, ip
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x1bc>
 8000c4c:	19ed      	adds	r5, r5, r7
 8000c4e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000c52:	f080 808a 	bcs.w	8000d6a <__udivmoddi4+0x2c6>
 8000c56:	42ab      	cmp	r3, r5
 8000c58:	f240 8087 	bls.w	8000d6a <__udivmoddi4+0x2c6>
 8000c5c:	3902      	subs	r1, #2
 8000c5e:	443d      	add	r5, r7
 8000c60:	1aeb      	subs	r3, r5, r3
 8000c62:	fa1f f588 	uxth.w	r5, r8
 8000c66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c72:	fb00 f30c 	mul.w	r3, r0, ip
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x1e6>
 8000c7a:	19ed      	adds	r5, r5, r7
 8000c7c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c80:	d26f      	bcs.n	8000d62 <__udivmoddi4+0x2be>
 8000c82:	42ab      	cmp	r3, r5
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0x2be>
 8000c86:	3802      	subs	r0, #2
 8000c88:	443d      	add	r5, r7
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	e78f      	b.n	8000bb2 <__udivmoddi4+0x10e>
 8000c92:	f1c1 0720 	rsb	r7, r1, #32
 8000c96:	fa22 f807 	lsr.w	r8, r2, r7
 8000c9a:	408b      	lsls	r3, r1
 8000c9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000ca0:	ea48 0303 	orr.w	r3, r8, r3
 8000ca4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ca8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000cac:	40fd      	lsrs	r5, r7
 8000cae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000cb2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000cb6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000cba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000cbe:	fa1f f883 	uxth.w	r8, r3
 8000cc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000cc6:	fb09 f408 	mul.w	r4, r9, r8
 8000cca:	42ac      	cmp	r4, r5
 8000ccc:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x244>
 8000cd6:	18ed      	adds	r5, r5, r3
 8000cd8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cdc:	d243      	bcs.n	8000d66 <__udivmoddi4+0x2c2>
 8000cde:	42ac      	cmp	r4, r5
 8000ce0:	d941      	bls.n	8000d66 <__udivmoddi4+0x2c2>
 8000ce2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ce6:	441d      	add	r5, r3
 8000ce8:	1b2d      	subs	r5, r5, r4
 8000cea:	fa1f fe8e 	uxth.w	lr, lr
 8000cee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cf2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cf6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cfa:	fb00 f808 	mul.w	r8, r0, r8
 8000cfe:	45a0      	cmp	r8, r4
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x26e>
 8000d02:	18e4      	adds	r4, r4, r3
 8000d04:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d08:	d229      	bcs.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0a:	45a0      	cmp	r8, r4
 8000d0c:	d927      	bls.n	8000d5e <__udivmoddi4+0x2ba>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	441c      	add	r4, r3
 8000d12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d16:	eba4 0408 	sub.w	r4, r4, r8
 8000d1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d1e:	454c      	cmp	r4, r9
 8000d20:	46c6      	mov	lr, r8
 8000d22:	464d      	mov	r5, r9
 8000d24:	d315      	bcc.n	8000d52 <__udivmoddi4+0x2ae>
 8000d26:	d012      	beq.n	8000d4e <__udivmoddi4+0x2aa>
 8000d28:	b156      	cbz	r6, 8000d40 <__udivmoddi4+0x29c>
 8000d2a:	ebba 030e 	subs.w	r3, sl, lr
 8000d2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000d32:	fa04 f707 	lsl.w	r7, r4, r7
 8000d36:	40cb      	lsrs	r3, r1
 8000d38:	431f      	orrs	r7, r3
 8000d3a:	40cc      	lsrs	r4, r1
 8000d3c:	6037      	str	r7, [r6, #0]
 8000d3e:	6074      	str	r4, [r6, #4]
 8000d40:	2100      	movs	r1, #0
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	4618      	mov	r0, r3
 8000d48:	e6f8      	b.n	8000b3c <__udivmoddi4+0x98>
 8000d4a:	4690      	mov	r8, r2
 8000d4c:	e6e0      	b.n	8000b10 <__udivmoddi4+0x6c>
 8000d4e:	45c2      	cmp	sl, r8
 8000d50:	d2ea      	bcs.n	8000d28 <__udivmoddi4+0x284>
 8000d52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d56:	eb69 0503 	sbc.w	r5, r9, r3
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7e4      	b.n	8000d28 <__udivmoddi4+0x284>
 8000d5e:	4628      	mov	r0, r5
 8000d60:	e7d7      	b.n	8000d12 <__udivmoddi4+0x26e>
 8000d62:	4640      	mov	r0, r8
 8000d64:	e791      	b.n	8000c8a <__udivmoddi4+0x1e6>
 8000d66:	4681      	mov	r9, r0
 8000d68:	e7be      	b.n	8000ce8 <__udivmoddi4+0x244>
 8000d6a:	4601      	mov	r1, r0
 8000d6c:	e778      	b.n	8000c60 <__udivmoddi4+0x1bc>
 8000d6e:	3802      	subs	r0, #2
 8000d70:	443c      	add	r4, r7
 8000d72:	e745      	b.n	8000c00 <__udivmoddi4+0x15c>
 8000d74:	4608      	mov	r0, r1
 8000d76:	e708      	b.n	8000b8a <__udivmoddi4+0xe6>
 8000d78:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7c:	443d      	add	r5, r7
 8000d7e:	e72b      	b.n	8000bd8 <__udivmoddi4+0x134>

08000d80 <__aeabi_idiv0>:
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop

08000d84 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000d88:	f000 fc76 	bl	8001678 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000d8c:	20ca      	movs	r0, #202	; 0xca
 8000d8e:	f000 f95d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000d92:	20c3      	movs	r0, #195	; 0xc3
 8000d94:	f000 f967 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000d98:	2008      	movs	r0, #8
 8000d9a:	f000 f964 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000d9e:	2050      	movs	r0, #80	; 0x50
 8000da0:	f000 f961 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000da4:	20cf      	movs	r0, #207	; 0xcf
 8000da6:	f000 f951 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f95b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000db0:	20c1      	movs	r0, #193	; 0xc1
 8000db2:	f000 f958 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000db6:	2030      	movs	r0, #48	; 0x30
 8000db8:	f000 f955 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000dbc:	20ed      	movs	r0, #237	; 0xed
 8000dbe:	f000 f945 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f000 f94f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 f949 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000dd4:	2081      	movs	r0, #129	; 0x81
 8000dd6:	f000 f946 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000dda:	20e8      	movs	r0, #232	; 0xe8
 8000ddc:	f000 f936 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000de0:	2085      	movs	r0, #133	; 0x85
 8000de2:	f000 f940 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f93d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000dec:	2078      	movs	r0, #120	; 0x78
 8000dee:	f000 f93a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000df2:	20cb      	movs	r0, #203	; 0xcb
 8000df4:	f000 f92a 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000df8:	2039      	movs	r0, #57	; 0x39
 8000dfa:	f000 f934 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000dfe:	202c      	movs	r0, #44	; 0x2c
 8000e00:	f000 f931 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f92e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000e0a:	2034      	movs	r0, #52	; 0x34
 8000e0c:	f000 f92b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f000 f928 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000e16:	20f7      	movs	r0, #247	; 0xf7
 8000e18:	f000 f918 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000e1c:	2020      	movs	r0, #32
 8000e1e:	f000 f922 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000e22:	20ea      	movs	r0, #234	; 0xea
 8000e24:	f000 f912 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 f91c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f919 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000e34:	20b1      	movs	r0, #177	; 0xb1
 8000e36:	f000 f909 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f913 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000e40:	201b      	movs	r0, #27
 8000e42:	f000 f910 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000e46:	20b6      	movs	r0, #182	; 0xb6
 8000e48:	f000 f900 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000e4c:	200a      	movs	r0, #10
 8000e4e:	f000 f90a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000e52:	20a2      	movs	r0, #162	; 0xa2
 8000e54:	f000 f907 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000e58:	20c0      	movs	r0, #192	; 0xc0
 8000e5a:	f000 f8f7 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e5e:	2010      	movs	r0, #16
 8000e60:	f000 f901 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000e64:	20c1      	movs	r0, #193	; 0xc1
 8000e66:	f000 f8f1 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000e6a:	2010      	movs	r0, #16
 8000e6c:	f000 f8fb 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000e70:	20c5      	movs	r0, #197	; 0xc5
 8000e72:	f000 f8eb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000e76:	2045      	movs	r0, #69	; 0x45
 8000e78:	f000 f8f5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000e7c:	2015      	movs	r0, #21
 8000e7e:	f000 f8f2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000e82:	20c7      	movs	r0, #199	; 0xc7
 8000e84:	f000 f8e2 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000e88:	2090      	movs	r0, #144	; 0x90
 8000e8a:	f000 f8ec 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000e8e:	2036      	movs	r0, #54	; 0x36
 8000e90:	f000 f8dc 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000e94:	20c8      	movs	r0, #200	; 0xc8
 8000e96:	f000 f8e6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000e9a:	20f2      	movs	r0, #242	; 0xf2
 8000e9c:	f000 f8d6 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 f8e0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000ea6:	20b0      	movs	r0, #176	; 0xb0
 8000ea8:	f000 f8d0 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000eac:	20c2      	movs	r0, #194	; 0xc2
 8000eae:	f000 f8da 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000eb2:	20b6      	movs	r0, #182	; 0xb6
 8000eb4:	f000 f8ca 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000eb8:	200a      	movs	r0, #10
 8000eba:	f000 f8d4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000ebe:	20a7      	movs	r0, #167	; 0xa7
 8000ec0:	f000 f8d1 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000ec4:	2027      	movs	r0, #39	; 0x27
 8000ec6:	f000 f8ce 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000eca:	2004      	movs	r0, #4
 8000ecc:	f000 f8cb 	bl	8001066 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000ed0:	202a      	movs	r0, #42	; 0x2a
 8000ed2:	f000 f8bb 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f8c5 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f8c2 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f8bf 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ee8:	20ef      	movs	r0, #239	; 0xef
 8000eea:	f000 f8bc 	bl	8001066 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000eee:	202b      	movs	r0, #43	; 0x2b
 8000ef0:	f000 f8ac 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f8b6 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f000 f8b3 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f000 f8b0 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f8ad 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000f0c:	20f6      	movs	r0, #246	; 0xf6
 8000f0e:	f000 f89d 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 f8a7 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f8a4 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f000 f8a1 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000f24:	202c      	movs	r0, #44	; 0x2c
 8000f26:	f000 f891 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8000f2a:	20c8      	movs	r0, #200	; 0xc8
 8000f2c:	f000 fc92 	bl	8001854 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000f30:	2026      	movs	r0, #38	; 0x26
 8000f32:	f000 f88b 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000f36:	2001      	movs	r0, #1
 8000f38:	f000 f895 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000f3c:	20e0      	movs	r0, #224	; 0xe0
 8000f3e:	f000 f885 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f88f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000f48:	2029      	movs	r0, #41	; 0x29
 8000f4a:	f000 f88c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000f4e:	2024      	movs	r0, #36	; 0x24
 8000f50:	f000 f889 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000f54:	200c      	movs	r0, #12
 8000f56:	f000 f886 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f000 f883 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f60:	2009      	movs	r0, #9
 8000f62:	f000 f880 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000f66:	204e      	movs	r0, #78	; 0x4e
 8000f68:	f000 f87d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000f6c:	2078      	movs	r0, #120	; 0x78
 8000f6e:	f000 f87a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000f72:	203c      	movs	r0, #60	; 0x3c
 8000f74:	f000 f877 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000f78:	2009      	movs	r0, #9
 8000f7a:	f000 f874 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000f7e:	2013      	movs	r0, #19
 8000f80:	f000 f871 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f000 f86e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000f8a:	2017      	movs	r0, #23
 8000f8c:	f000 f86b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000f90:	2011      	movs	r0, #17
 8000f92:	f000 f868 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f000 f865 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000f9c:	20e1      	movs	r0, #225	; 0xe1
 8000f9e:	f000 f855 	bl	800104c <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f000 f85f 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000fa8:	2016      	movs	r0, #22
 8000faa:	f000 f85c 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000fae:	201b      	movs	r0, #27
 8000fb0:	f000 f859 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000fb4:	2004      	movs	r0, #4
 8000fb6:	f000 f856 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000fba:	2011      	movs	r0, #17
 8000fbc:	f000 f853 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000fc0:	2007      	movs	r0, #7
 8000fc2:	f000 f850 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000fc6:	2031      	movs	r0, #49	; 0x31
 8000fc8:	f000 f84d 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000fcc:	2033      	movs	r0, #51	; 0x33
 8000fce:	f000 f84a 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000fd2:	2042      	movs	r0, #66	; 0x42
 8000fd4:	f000 f847 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f000 f844 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000fde:	200c      	movs	r0, #12
 8000fe0:	f000 f841 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 f83e 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000fea:	2028      	movs	r0, #40	; 0x28
 8000fec:	f000 f83b 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000ff0:	202f      	movs	r0, #47	; 0x2f
 8000ff2:	f000 f838 	bl	8001066 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f835 	bl	8001066 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000ffc:	2011      	movs	r0, #17
 8000ffe:	f000 f825 	bl	800104c <ili9341_WriteReg>
  LCD_Delay(200);
 8001002:	20c8      	movs	r0, #200	; 0xc8
 8001004:	f000 fc26 	bl	8001854 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001008:	2029      	movs	r0, #41	; 0x29
 800100a:	f000 f81f 	bl	800104c <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800100e:	202c      	movs	r0, #44	; 0x2c
 8001010:	f000 f81c 	bl	800104c <ili9341_WriteReg>
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800101c:	f000 fb2c 	bl	8001678 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001020:	2103      	movs	r1, #3
 8001022:	20d3      	movs	r0, #211	; 0xd3
 8001024:	f000 f82c 	bl	8001080 <ili9341_ReadData>
 8001028:	4603      	mov	r3, r0
 800102a:	b29b      	uxth	r3, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	bd80      	pop	{r7, pc}

08001030 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001034:	2029      	movs	r0, #41	; 0x29
 8001036:	f000 f809 	bl	800104c <ili9341_WriteReg>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f000 f802 	bl	800104c <ili9341_WriteReg>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fba7 	bl	80017ac <LCD_IO_WriteReg>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001070:	88fb      	ldrh	r3, [r7, #6]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 fb78 	bl	8001768 <LCD_IO_WriteData>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	460a      	mov	r2, r1
 800108a:	80fb      	strh	r3, [r7, #6]
 800108c:	4613      	mov	r3, r2
 800108e:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001090:	797a      	ldrb	r2, [r7, #5]
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fbaa 	bl	80017f0 <LCD_IO_ReadData>
 800109c:	4603      	mov	r3, r0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80010aa:	23f0      	movs	r3, #240	; 0xf0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80010ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80010d6:	f000 fbc9 	bl	800186c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80010e0:	f107 030f 	add.w	r3, r7, #15
 80010e4:	2201      	movs	r2, #1
 80010e6:	2120      	movs	r1, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fc0b 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80010f8:	f107 030f 	add.w	r3, r7, #15
 80010fc:	2201      	movs	r2, #1
 80010fe:	2123      	movs	r1, #35	; 0x23
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fbff 	bl	8001904 <GYRO_IO_Write>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001122:	f000 fba3 	bl	800186c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	2201      	movs	r2, #1
 800112a:	210f      	movs	r1, #15
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fc1b 	bl	8001968 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001132:	79fb      	ldrb	r3, [r7, #7]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	2201      	movs	r2, #1
 8001146:	2124      	movs	r1, #36	; 0x24
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fc0d 	bl	8001968 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001154:	b2db      	uxtb	r3, r3
 8001156:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001158:	1dfb      	adds	r3, r7, #7
 800115a:	2201      	movs	r2, #1
 800115c:	2124      	movs	r1, #36	; 0x24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fbd0 	bl	8001904 <GYRO_IO_Write>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001180:	f107 030f 	add.w	r3, r7, #15
 8001184:	2201      	movs	r2, #1
 8001186:	2120      	movs	r1, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fbbb 	bl	8001904 <GYRO_IO_Write>
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	2300      	movs	r3, #0
 80011a6:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011a8:	f107 030f 	add.w	r3, r7, #15
 80011ac:	2201      	movs	r2, #1
 80011ae:	2130      	movs	r1, #48	; 0x30
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fbd9 	bl	8001968 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80011b6:	f107 030e 	add.w	r3, r7, #14
 80011ba:	2201      	movs	r2, #1
 80011bc:	2122      	movs	r1, #34	; 0x22
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fbd2 	bl	8001968 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	121b      	asrs	r3, r3, #8
 80011d4:	b25a      	sxtb	r2, r3
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f023 0320 	bic.w	r3, r3, #32
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	2201      	movs	r2, #1
 80011fe:	2130      	movs	r1, #48	; 0x30
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fb7f 	bl	8001904 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001206:	f107 030e 	add.w	r3, r7, #14
 800120a:	2201      	movs	r2, #1
 800120c:	2122      	movs	r1, #34	; 0x22
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fb78 	bl	8001904 <GYRO_IO_Write>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001226:	f107 030f 	add.w	r3, r7, #15
 800122a:	2201      	movs	r2, #1
 800122c:	2122      	movs	r1, #34	; 0x22
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fb9a 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10a      	bne.n	8001250 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800123a:	7bfb      	ldrb	r3, [r7, #15]
 800123c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001240:	b2db      	uxtb	r3, r3
 8001242:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124a:	b2db      	uxtb	r3, r3
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e00c      	b.n	800126a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d109      	bne.n	800126a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f023 0308 	bic.w	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	b2db      	uxtb	r3, r3
 8001268:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800126a:	f107 030f 	add.w	r3, r7, #15
 800126e:	2201      	movs	r2, #1
 8001270:	2122      	movs	r1, #34	; 0x22
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fb46 	bl	8001904 <GYRO_IO_Write>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800128a:	f107 030f 	add.w	r3, r7, #15
 800128e:	2201      	movs	r2, #1
 8001290:	2122      	movs	r1, #34	; 0x22
 8001292:	4618      	mov	r0, r3
 8001294:	f000 fb68 	bl	8001968 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e009      	b.n	80012c2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d106      	bne.n	80012c2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	f023 0308 	bic.w	r3, r3, #8
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80012c2:	f107 030f 	add.w	r3, r7, #15
 80012c6:	2201      	movs	r2, #1
 80012c8:	2122      	movs	r1, #34	; 0x22
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fb1a 	bl	8001904 <GYRO_IO_Write>
}
 80012d0:	bf00      	nop
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80012e2:	f107 030f 	add.w	r3, r7, #15
 80012e6:	2201      	movs	r2, #1
 80012e8:	2121      	movs	r1, #33	; 0x21
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fb3c 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4313      	orrs	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	2201      	movs	r2, #1
 800130a:	2121      	movs	r1, #33	; 0x21
 800130c:	4618      	mov	r0, r3
 800130e:	f000 faf9 	bl	8001904 <GYRO_IO_Write>
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001324:	f107 030f 	add.w	r3, r7, #15
 8001328:	2201      	movs	r2, #1
 800132a:	2124      	movs	r1, #36	; 0x24
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fb1b 	bl	8001968 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f023 0310 	bic.w	r3, r3, #16
 8001338:	b2db      	uxtb	r3, r3
 800133a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800133c:	7bfa      	ldrb	r2, [r7, #15]
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4313      	orrs	r3, r2
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001346:	f107 030f 	add.w	r3, r7, #15
 800134a:	2201      	movs	r2, #1
 800134c:	2124      	movs	r1, #36	; 0x24
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fad8 	bl	8001904 <GYRO_IO_Write>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001386:	f107 030f 	add.w	r3, r7, #15
 800138a:	2201      	movs	r2, #1
 800138c:	2123      	movs	r1, #35	; 0x23
 800138e:	4618      	mov	r0, r3
 8001390:	f000 faea 	bl	8001968 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2206      	movs	r2, #6
 800139a:	2128      	movs	r1, #40	; 0x28
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fae3 	bl	8001968 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d126      	bne.n	80013fa <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	e01f      	b.n	80013f2 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	3301      	adds	r3, #1
 80013b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80013bc:	4413      	add	r3, r2
 80013be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013d0:	440b      	add	r3, r1
 80013d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4413      	add	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b21a      	sxth	r2, r3
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80013e6:	440b      	add	r3, r1
 80013e8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80013ec:	6a3b      	ldr	r3, [r7, #32]
 80013ee:	3301      	adds	r3, #1
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	dddc      	ble.n	80013b2 <L3GD20_ReadXYZAngRate+0x56>
 80013f8:	e025      	b.n	8001446 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
 80013fe:	e01f      	b.n	8001440 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001408:	4413      	add	r3, r2
 800140a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800140e:	b29b      	uxth	r3, r3
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b29a      	uxth	r2, r3
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	3301      	adds	r3, #1
 800141a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800141e:	440b      	add	r3, r1
 8001420:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001434:	440b      	add	r3, r1
 8001436:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	3301      	adds	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	2b02      	cmp	r3, #2
 8001444:	dddc      	ble.n	8001400 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800144c:	2b10      	cmp	r3, #16
 800144e:	d006      	beq.n	800145e <L3GD20_ReadXYZAngRate+0x102>
 8001450:	2b20      	cmp	r3, #32
 8001452:	d007      	beq.n	8001464 <L3GD20_ReadXYZAngRate+0x108>
 8001454:	2b00      	cmp	r3, #0
 8001456:	d108      	bne.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <L3GD20_ReadXYZAngRate+0x154>)
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800145c:	e005      	b.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <L3GD20_ReadXYZAngRate+0x158>)
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001462:	e002      	b.n	800146a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <L3GD20_ReadXYZAngRate+0x15c>)
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001468:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	e017      	b.n	80014a0 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	441a      	add	r2, r3
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001480:	440b      	add	r3, r1
 8001482:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001486:	ee07 3a90 	vmov	s15, r3
 800148a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001496:	edc2 7a00 	vstr	s15, [r2]
  for(i=0; i<3; i++)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	3301      	adds	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	dde4      	ble.n	8001470 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3728      	adds	r7, #40	; 0x28
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	410c0000 	.word	0x410c0000
 80014b4:	418c0000 	.word	0x418c0000
 80014b8:	428c0000 	.word	0x428c0000

080014bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80014c0:	4819      	ldr	r0, [pc, #100]	; (8001528 <SPIx_Init+0x6c>)
 80014c2:	f004 ff53 	bl	800636c <HAL_SPI_GetState>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d12b      	bne.n	8001524 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <SPIx_Init+0x6c>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <SPIx_Init+0x70>)
 80014d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <SPIx_Init+0x6c>)
 80014d4:	2218      	movs	r2, #24
 80014d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <SPIx_Init+0x6c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <SPIx_Init+0x6c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <SPIx_Init+0x6c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <SPIx_Init+0x6c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <SPIx_Init+0x6c>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <SPIx_Init+0x6c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <SPIx_Init+0x6c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <SPIx_Init+0x6c>)
 8001504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001508:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <SPIx_Init+0x6c>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <SPIx_Init+0x6c>)
 8001512:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001516:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <SPIx_Init+0x6c>)
 800151a:	f000 f873 	bl	8001604 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <SPIx_Init+0x6c>)
 8001520:	f004 fac1 	bl	8005aa6 <HAL_SPI_Init>
  } 
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000100 	.word	0x20000100
 800152c:	40015000 	.word	0x40015000

08001530 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29a      	uxth	r2, r3
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <SPIx_Read+0x38>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f107 0108 	add.w	r1, r7, #8
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <SPIx_Read+0x3c>)
 800154c:	f004 fc68 	bl	8005e20 <HAL_SPI_Receive>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800155a:	f000 f847 	bl	80015ec <SPIx_Error>
  }
  
  return readvalue;
 800155e:	68bb      	ldr	r3, [r7, #8]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000074 	.word	0x20000074
 800156c:	20000100 	.word	0x20000100

08001570 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <SPIx_Write+0x34>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	1db9      	adds	r1, r7, #6
 8001584:	2201      	movs	r2, #1
 8001586:	4808      	ldr	r0, [pc, #32]	; (80015a8 <SPIx_Write+0x38>)
 8001588:	f004 fb18 	bl	8005bbc <HAL_SPI_Transmit>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001596:	f000 f829 	bl	80015ec <SPIx_Error>
  }
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000074 	.word	0x20000074
 80015a8:	20000100 	.word	0x20000100

080015ac <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <SPIx_WriteRead+0x38>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f107 020f 	add.w	r2, r7, #15
 80015c2:	1df9      	adds	r1, r7, #7
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2301      	movs	r3, #1
 80015c8:	4807      	ldr	r0, [pc, #28]	; (80015e8 <SPIx_WriteRead+0x3c>)
 80015ca:	f004 fd2f 	bl	800602c <HAL_SPI_TransmitReceive>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80015d4:	f000 f80a 	bl	80015ec <SPIx_Error>
  }
  
  return receivedbyte;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000074 	.word	0x20000074
 80015e8:	20000100 	.word	0x20000100

080015ec <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80015f0:	4803      	ldr	r0, [pc, #12]	; (8001600 <SPIx_Error+0x14>)
 80015f2:	f004 fabb 	bl	8005b6c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80015f6:	f7ff ff61 	bl	80014bc <SPIx_Init>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000100 	.word	0x20000100

08001604 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <SPIx_MspInit+0x6c>)
 8001612:	4b17      	ldr	r3, [pc, #92]	; (8001670 <SPIx_MspInit+0x6c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800161a:	6453      	str	r3, [r2, #68]	; 0x44
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <SPIx_MspInit+0x6c>)
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <SPIx_MspInit+0x6c>)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <SPIx_MspInit+0x6c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6313      	str	r3, [r2, #48]	; 0x30
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <SPIx_MspInit+0x6c>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001644:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800164e:	2302      	movs	r3, #2
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001652:	2301      	movs	r3, #1
 8001654:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001656:	2305      	movs	r3, #5
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4804      	ldr	r0, [pc, #16]	; (8001674 <SPIx_MspInit+0x70>)
 8001662:	f002 fb23 	bl	8003cac <HAL_GPIO_Init>
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40021400 	.word	0x40021400

08001678 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800167e:	4b36      	ldr	r3, [pc, #216]	; (8001758 <LCD_IO_Init+0xe0>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d164      	bne.n	8001750 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <LCD_IO_Init+0xe0>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800168c:	2300      	movs	r3, #0
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <LCD_IO_Init+0xe4>)
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <LCD_IO_Init+0xe4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <LCD_IO_Init+0xe4>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80016a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016b6:	2302      	movs	r3, #2
 80016b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	4619      	mov	r1, r3
 80016c0:	4827      	ldr	r0, [pc, #156]	; (8001760 <LCD_IO_Init+0xe8>)
 80016c2:	f002 faf3 	bl	8003cac <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <LCD_IO_Init+0xe4>)
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <LCD_IO_Init+0xe4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <LCD_IO_Init+0xe4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80016f0:	2302      	movs	r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <LCD_IO_Init+0xe8>)
 80016fc:	f002 fad6 	bl	8003cac <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	4a15      	ldr	r2, [pc, #84]	; (800175c <LCD_IO_Init+0xe4>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <LCD_IO_Init+0xe4>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <LCD_IO_Init+0xe4>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	603b      	str	r3, [r7, #0]
 800171a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800171c:	2304      	movs	r3, #4
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001728:	2302      	movs	r3, #2
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <LCD_IO_Init+0xec>)
 8001734:	f002 faba 	bl	8003cac <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001738:	2200      	movs	r2, #0
 800173a:	2104      	movs	r1, #4
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <LCD_IO_Init+0xec>)
 800173e:	f002 fd83 	bl	8004248 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001742:	2201      	movs	r2, #1
 8001744:	2104      	movs	r1, #4
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <LCD_IO_Init+0xec>)
 8001748:	f002 fd7e 	bl	8004248 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800174c:	f7ff feb6 	bl	80014bc <SPIx_Init>
  }
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000158 	.word	0x20000158
 800175c:	40023800 	.word	0x40023800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40020800 	.word	0x40020800

08001768 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001772:	2201      	movs	r2, #1
 8001774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <LCD_IO_WriteData+0x3c>)
 800177a:	f002 fd65 	bl	8004248 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800177e:	2200      	movs	r2, #0
 8001780:	2104      	movs	r1, #4
 8001782:	4809      	ldr	r0, [pc, #36]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001784:	f002 fd60 	bl	8004248 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef0 	bl	8001570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001790:	2201      	movs	r2, #1
 8001792:	2104      	movs	r1, #4
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <LCD_IO_WriteData+0x40>)
 8001796:	f002 fd57 	bl	8004248 <HAL_GPIO_WritePin>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40020800 	.word	0x40020800

080017ac <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480a      	ldr	r0, [pc, #40]	; (80017e8 <LCD_IO_WriteReg+0x3c>)
 80017be:	f002 fd43 	bl	8004248 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80017c2:	2200      	movs	r2, #0
 80017c4:	2104      	movs	r1, #4
 80017c6:	4809      	ldr	r0, [pc, #36]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017c8:	f002 fd3e 	bl	8004248 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecd 	bl	8001570 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80017d6:	2201      	movs	r2, #1
 80017d8:	2104      	movs	r1, #4
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <LCD_IO_WriteReg+0x40>)
 80017dc:	f002 fd34 	bl	8004248 <HAL_GPIO_WritePin>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020c00 	.word	0x40020c00
 80017ec:	40020800 	.word	0x40020800

080017f0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	80fb      	strh	r3, [r7, #6]
 80017fc:	4613      	mov	r3, r2
 80017fe:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001804:	2200      	movs	r2, #0
 8001806:	2104      	movs	r1, #4
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <LCD_IO_ReadData+0x5c>)
 800180a:	f002 fd1d 	bl	8004248 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001816:	f002 fd17 	bl	8004248 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fea7 	bl	8001570 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001822:	797b      	ldrb	r3, [r7, #5]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe83 	bl	8001530 <SPIx_Read>
 800182a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001832:	4807      	ldr	r0, [pc, #28]	; (8001850 <LCD_IO_ReadData+0x60>)
 8001834:	f002 fd08 	bl	8004248 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001838:	2201      	movs	r2, #1
 800183a:	2104      	movs	r1, #4
 800183c:	4803      	ldr	r0, [pc, #12]	; (800184c <LCD_IO_ReadData+0x5c>)
 800183e:	f002 fd03 	bl	8004248 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40020800 	.word	0x40020800
 8001850:	40020c00 	.word	0x40020c00

08001854 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f001 fbad 	bl	8002fbc <HAL_Delay>
  //wait_ms(Delay);
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	4a20      	ldr	r2, [pc, #128]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <GYRO_IO_Init+0x8c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <GYRO_IO_Init+0x8c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800188e:	2302      	movs	r3, #2
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800189a:	2301      	movs	r3, #1
 800189c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <GYRO_IO_Init+0x90>)
 80018a6:	f002 fa01 	bl	8003cac <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80018aa:	2201      	movs	r2, #1
 80018ac:	2102      	movs	r1, #2
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <GYRO_IO_Init+0x90>)
 80018b0:	f002 fcca 	bl	8004248 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <GYRO_IO_Init+0x8c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80018d0:	2306      	movs	r3, #6
 80018d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	; (8001900 <GYRO_IO_Init+0x94>)
 80018e8:	f002 f9e0 	bl	8003cac <HAL_GPIO_Init>

  SPIx_Init();
 80018ec:	f7ff fde6 	bl	80014bc <SPIx_Init>
}
 80018f0:	bf00      	nop
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020800 	.word	0x40020800
 8001900:	40020000 	.word	0x40020000

08001904 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	4613      	mov	r3, r2
 8001912:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d903      	bls.n	8001922 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001922:	2200      	movs	r2, #0
 8001924:	2102      	movs	r1, #2
 8001926:	480f      	ldr	r0, [pc, #60]	; (8001964 <GYRO_IO_Write+0x60>)
 8001928:	f002 fc8e 	bl	8004248 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800192c:	78fb      	ldrb	r3, [r7, #3]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fe3c 	bl	80015ac <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001934:	e00a      	b.n	800194c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe36 	bl	80015ac <SPIx_WriteRead>
    NumByteToWrite--;
 8001940:	883b      	ldrh	r3, [r7, #0]
 8001942:	3b01      	subs	r3, #1
 8001944:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3301      	adds	r3, #1
 800194a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f1      	bne.n	8001936 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001952:	2201      	movs	r2, #1
 8001954:	2102      	movs	r1, #2
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <GYRO_IO_Write+0x60>)
 8001958:	f002 fc76 	bl	8004248 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020800 	.word	0x40020800

08001968 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
 8001974:	4613      	mov	r3, r2
 8001976:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001978:	883b      	ldrh	r3, [r7, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d904      	bls.n	8001988 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800197e:	78fb      	ldrb	r3, [r7, #3]
 8001980:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001984:	70fb      	strb	r3, [r7, #3]
 8001986:	e003      	b.n	8001990 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800198e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001990:	2200      	movs	r2, #0
 8001992:	2102      	movs	r1, #2
 8001994:	4810      	ldr	r0, [pc, #64]	; (80019d8 <GYRO_IO_Read+0x70>)
 8001996:	f002 fc57 	bl	8004248 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe05 	bl	80015ac <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80019a2:	e00c      	b.n	80019be <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fe01 	bl	80015ac <SPIx_WriteRead>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80019b2:	883b      	ldrh	r3, [r7, #0]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3301      	adds	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80019be:	883b      	ldrh	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1ef      	bne.n	80019a4 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80019c4:	2201      	movs	r2, #1
 80019c6:	2102      	movs	r1, #2
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <GYRO_IO_Read+0x70>)
 80019ca:	f002 fc3d 	bl	8004248 <HAL_GPIO_WritePin>
}  
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40020800 	.word	0x40020800

080019dc <BSP_GYRO_Init>:
/**
  * @brief  Set Gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80019e6:	2300      	movs	r3, #0
 80019e8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure={0,0};
 80019ea:	2300      	movs	r3, #0
 80019ec:	703b      	strb	r3, [r7, #0]
 80019ee:	2300      	movs	r3, #0
 80019f0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	4798      	blx	r3
 80019f8:	4603      	mov	r3, r0
 80019fa:	2bd4      	cmp	r3, #212	; 0xd4
 80019fc:	d005      	beq.n	8001a0a <BSP_GYRO_Init+0x2e>
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	2bd5      	cmp	r3, #213	; 0xd5
 8001a08:	d146      	bne.n	8001a98 <BSP_GYRO_Init+0xbc>
  {	
    /* Initialize the Gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001a0a:	4b28      	ldr	r3, [pc, #160]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <BSP_GYRO_Init+0xcc>)
 8001a0e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Gyroscope structure */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001a10:	2308      	movs	r3, #8
 8001a12:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001a1c:	2330      	movs	r3, #48	; 0x30
 8001a1e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001a20:	2300      	movs	r3, #0
 8001a22:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001a24:	2300      	movs	r3, #0
 8001a26:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_250;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a2c:	793a      	ldrb	r2, [r7, #4]
 8001a2e:	797b      	ldrb	r3, [r7, #5]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001a34:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b2da      	uxtb	r2, r3
                       L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001a42:	7a3a      	ldrb	r2, [r7, #8]
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b2da      	uxtb	r2, r3
                         L3GD20_InitStructure.Full_Scale) << 8);
 8001a4a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	89bb      	ldrh	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure the Gyroscope main parameters */	 
    GyroscopeDrv->Init(ctrl);
 8001a5c:	4b13      	ldr	r3, [pc, #76]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	89ba      	ldrh	r2, [r7, #12]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3

    L3GD20_FilterStructure.HighPassFilter_Mode_Selection = L3GD20_HPM_NORMAL_MODE_RES;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001a70:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));
 8001a72:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	81bb      	strh	r3, [r7, #12]

    /* Configure the Gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	89ba      	ldrh	r2, [r7, #12]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4610      	mov	r0, r2
 8001a86:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <BSP_GYRO_Init+0xd0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	2010      	movs	r0, #16
 8001a90:	4798      	blx	r3

    ret = GYRO_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e001      	b.n	8001a9c <BSP_GYRO_Init+0xc0>
  }
  else
  {
    ret = GYRO_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000038 	.word	0x20000038
 8001aac:	2000015c 	.word	0x2000015c

08001ab0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ab6:	4a2e      	ldr	r2, [pc, #184]	; (8001b70 <BSP_LCD_Init+0xc0>)
 8001ab8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001abc:	2209      	movs	r2, #9
 8001abe:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001ac0:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ac8:	221d      	movs	r2, #29
 8001aca:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ace:	2203      	movs	r2, #3
 8001ad0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ad4:	f240 120d 	movw	r2, #269	; 0x10d
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001adc:	f240 1243 	movw	r2, #323	; 0x143
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001ae4:	f240 1217 	movw	r2, #279	; 0x117
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001aec:	f240 1247 	movw	r2, #327	; 0x147
 8001af0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8001af2:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b12:	22c0      	movs	r2, #192	; 0xc0
 8001b14:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b18:	2204      	movs	r2, #4
 8001b1a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <BSP_LCD_Init+0xc4>)
 8001b26:	f003 fd9b 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8001b42:	f000 fdfd 	bl	8002740 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8001b46:	4809      	ldr	r0, [pc, #36]	; (8001b6c <BSP_LCD_Init+0xbc>)
 8001b48:	f002 fd3c 	bl	80045c4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <BSP_LCD_Init+0xc8>)
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <BSP_LCD_Init+0xcc>)
 8001b50:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <BSP_LCD_Init+0xc8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001b5a:	f001 f823 	bl	8002ba4 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001b5e:	4808      	ldr	r0, [pc, #32]	; (8001b80 <BSP_LCD_Init+0xd0>)
 8001b60:	f000 f8b4 	bl	8001ccc <BSP_LCD_SetFont>

  return LCD_OK;
 8001b64:	2300      	movs	r3, #0
}  
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200002c0 	.word	0x200002c0
 8001b70:	40016800 	.word	0x40016800
 8001b74:	200001a0 	.word	0x200001a0
 8001b78:	20000368 	.word	0x20000368
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	2000006c 	.word	0x2000006c

08001b84 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <BSP_LCD_GetXSize+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4798      	blx	r3
 8001b90:	4603      	mov	r3, r0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000368 	.word	0x20000368

08001b9c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <BSP_LCD_GetYSize+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	4798      	blx	r3
 8001ba8:	4603      	mov	r3, r0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000368 	.word	0x20000368

08001bb4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b090      	sub	sp, #64	; 0x40
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001bc4:	f7ff ffde 	bl	8001b84 <BSP_LCD_GetXSize>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001bd0:	f7ff ffe4 	bl	8001b9c <BSP_LCD_GetYSize>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001be0:	23ff      	movs	r3, #255	; 0xff
 8001be2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001c00:	2307      	movs	r3, #7
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001c04:	f7ff ffbe 	bl	8001b84 <BSP_LCD_GetXSize>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001c0c:	f7ff ffc6 	bl	8001b9c <BSP_LCD_GetYSize>
 8001c10:	4603      	mov	r3, r0
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4814      	ldr	r0, [pc, #80]	; (8001c70 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c1e:	f002 fe63 	bl	80048e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	4913      	ldr	r1, [pc, #76]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3304      	adds	r3, #4
 8001c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c36:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	490e      	ldr	r1, [pc, #56]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	3308      	adds	r3, #8
 8001c48:	4a0b      	ldr	r2, [pc, #44]	; (8001c78 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001c4a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	4909      	ldr	r1, [pc, #36]	; (8001c74 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001c50:	4613      	mov	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001c60:	4803      	ldr	r0, [pc, #12]	; (8001c70 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001c62:	f002 fe7f 	bl	8004964 <HAL_LTDC_EnableDither>
}
 8001c66:	bf00      	nop
 8001c68:	3740      	adds	r7, #64	; 0x40
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002c0 	.word	0x200002c0
 8001c74:	200001d4 	.word	0x200001d4
 8001c78:	2000006c 	.word	0x2000006c

08001c7c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <BSP_LCD_SelectLayer+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200001d0 	.word	0x200001d0

08001c9c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <BSP_LCD_SetTextColor+0x28>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <BSP_LCD_SetTextColor+0x2c>)
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	200001d0 	.word	0x200001d0
 8001cc8:	200001d4 	.word	0x200001d4

08001ccc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <BSP_LCD_SetFont+0x2c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4908      	ldr	r1, [pc, #32]	; (8001cfc <BSP_LCD_SetFont+0x30>)
 8001cda:	4613      	mov	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	200001d0 	.word	0x200001d0
 8001cfc:	200001d4 	.word	0x200001d4

08001d00 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <BSP_LCD_Clear+0x48>)
 8001d0a:	681c      	ldr	r4, [r3, #0]
 8001d0c:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <BSP_LCD_Clear+0x48>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <BSP_LCD_Clear+0x4c>)
 8001d12:	2134      	movs	r1, #52	; 0x34
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	335c      	adds	r3, #92	; 0x5c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461d      	mov	r5, r3
 8001d20:	f7ff ff30 	bl	8001b84 <BSP_LCD_GetXSize>
 8001d24:	4606      	mov	r6, r0
 8001d26:	f7ff ff39 	bl	8001b9c <BSP_LCD_GetYSize>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2300      	movs	r3, #0
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	4632      	mov	r2, r6
 8001d38:	4629      	mov	r1, r5
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f000 feb6 	bl	8002aac <FillBuffer>
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	200001d0 	.word	0x200001d0
 8001d4c:	200002c0 	.word	0x200002c0

08001d50 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001d50:	b590      	push	{r4, r7, lr}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	492d      	ldr	r1, [pc, #180]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	4827      	ldr	r0, [pc, #156]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4403      	add	r3, r0
 8001d80:	3304      	adds	r3, #4
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4403      	add	r3, r0
 8001d90:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	491f      	ldr	r1, [pc, #124]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3308      	adds	r3, #8
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	88da      	ldrh	r2, [r3, #6]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	fb12 f303 	smulbb	r3, r2, r3
 8001db0:	b29c      	uxth	r4, r3
 8001db2:	f7ff fee7 	bl	8001b84 <BSP_LCD_GetXSize>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b298      	uxth	r0, r3
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4915      	ldr	r1, [pc, #84]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3308      	adds	r3, #8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	88db      	ldrh	r3, [r3, #6]
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 fba9 	bl	800252c <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	490d      	ldr	r1, [pc, #52]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8001dee:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <BSP_LCD_ClearStringLine+0xc0>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <BSP_LCD_ClearStringLine+0xc4>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff4b 	bl	8001c9c <BSP_LCD_SetTextColor>
}
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd90      	pop	{r4, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200001d0 	.word	0x200001d0
 8001e14:	200001d4 	.word	0x200001d4

08001e18 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	460b      	mov	r3, r1
 8001e24:	80bb      	strh	r3, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	491b      	ldr	r1, [pc, #108]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3308      	adds	r3, #8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4c14      	ldr	r4, [pc, #80]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4423      	add	r3, r4
 8001e56:	3308      	adds	r3, #8
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e5c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <BSP_LCD_DisplayChar+0x80>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4c0d      	ldr	r4, [pc, #52]	; (8001e9c <BSP_LCD_DisplayChar+0x84>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4423      	add	r3, r4
 8001e70:	3308      	adds	r3, #8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	3307      	adds	r3, #7
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da00      	bge.n	8001e7e <BSP_LCD_DisplayChar+0x66>
 8001e7c:	3307      	adds	r3, #7
 8001e7e:	10db      	asrs	r3, r3, #3
 8001e80:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001e84:	18ca      	adds	r2, r1, r3
 8001e86:	88b9      	ldrh	r1, [r7, #4]
 8001e88:	88fb      	ldrh	r3, [r7, #6]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fd54 	bl	8002938 <DrawChar>
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}
 8001e98:	200001d0 	.word	0x200001d0
 8001e9c:	200001d4 	.word	0x200001d4

08001ea0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	81fb      	strh	r3, [r7, #14]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	81bb      	strh	r3, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	83fb      	strh	r3, [r7, #30]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8001eca:	e002      	b.n	8001ed2 <BSP_LCD_DisplayStringAt+0x32>
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f6      	bne.n	8001ecc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001ede:	f7ff fe51 	bl	8001b84 <BSP_LCD_GetXSize>
 8001ee2:	4b4a      	ldr	r3, [pc, #296]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	494a      	ldr	r1, [pc, #296]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	3308      	adds	r3, #8
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001efc:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d01c      	beq.n	8001f3e <BSP_LCD_DisplayStringAt+0x9e>
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d017      	beq.n	8001f38 <BSP_LCD_DisplayStringAt+0x98>
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d12e      	bne.n	8001f6a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	1ad1      	subs	r1, r2, r3
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	483e      	ldr	r0, [pc, #248]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4403      	add	r3, r0
 8001f22:	3308      	adds	r3, #8
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	fb03 f301 	mul.w	r3, r3, r1
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	4413      	add	r3, r2
 8001f34:	83fb      	strh	r3, [r7, #30]
      break;
 8001f36:	e01b      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8001f38:	89fb      	ldrh	r3, [r7, #14]
 8001f3a:	83fb      	strh	r3, [r7, #30]
      break;
 8001f3c:	e018      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	b299      	uxth	r1, r3
 8001f46:	4b31      	ldr	r3, [pc, #196]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4831      	ldr	r0, [pc, #196]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4403      	add	r3, r0
 8001f56:	3308      	adds	r3, #8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	fb11 f303 	smulbb	r3, r1, r3
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	4413      	add	r3, r2
 8001f66:	83fb      	strh	r3, [r7, #30]
      break;
 8001f68:	e002      	b.n	8001f70 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8001f6a:	89fb      	ldrh	r3, [r7, #14]
 8001f6c:	83fb      	strh	r3, [r7, #30]
      break;
 8001f6e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001f70:	e01a      	b.n	8001fa8 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	89b9      	ldrh	r1, [r7, #12]
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff4c 	bl	8001e18 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4922      	ldr	r1, [pc, #136]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3308      	adds	r3, #8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	889a      	ldrh	r2, [r3, #4]
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	4413      	add	r3, r2
 8001f9a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
    i++;
 8001fa2:	8bbb      	ldrh	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2dc      	uxtb	r4, r3
 8001fb6:	f7ff fde5 	bl	8001b84 <BSP_LCD_GetXSize>
 8001fba:	4605      	mov	r5, r0
 8001fbc:	8bb9      	ldrh	r1, [r7, #28]
 8001fbe:	4b13      	ldr	r3, [pc, #76]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4813      	ldr	r0, [pc, #76]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4403      	add	r3, r0
 8001fce:	3308      	adds	r3, #8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	889b      	ldrh	r3, [r3, #4]
 8001fd4:	fb03 f301 	mul.w	r3, r3, r1
 8001fd8:	1aeb      	subs	r3, r5, r3
 8001fda:	b299      	uxth	r1, r3
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <BSP_LCD_DisplayStringAt+0x16c>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	480b      	ldr	r0, [pc, #44]	; (8002010 <BSP_LCD_DisplayStringAt+0x170>)
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	3308      	adds	r3, #8
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	4299      	cmp	r1, r3
 8001ff4:	bf2c      	ite	cs
 8001ff6:	2301      	movcs	r3, #1
 8001ff8:	2300      	movcc	r3, #0
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4023      	ands	r3, r4
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1b6      	bne.n	8001f72 <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bdb0      	pop	{r4, r5, r7, pc}
 800200c:	200001d0 	.word	0x200001d0
 8002010:	200001d4 	.word	0x200001d4

08002014 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002014:	b5b0      	push	{r4, r5, r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af02      	add	r7, sp, #8
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
 800201e:	460b      	mov	r3, r1
 8002020:	80bb      	strh	r3, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <BSP_LCD_DrawHLine+0x70>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <BSP_LCD_DrawHLine+0x74>)
 8002030:	2134      	movs	r1, #52	; 0x34
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	335c      	adds	r3, #92	; 0x5c
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	f7ff fda2 	bl	8001b84 <BSP_LCD_GetXSize>
 8002040:	4602      	mov	r2, r0
 8002042:	88bb      	ldrh	r3, [r7, #4]
 8002044:	fb03 f202 	mul.w	r2, r3, r2
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4423      	add	r3, r4
 8002050:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <BSP_LCD_DrawHLine+0x70>)
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	68fc      	ldr	r4, [r7, #12]
 8002058:	887d      	ldrh	r5, [r7, #2]
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <BSP_LCD_DrawHLine+0x70>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	490b      	ldr	r1, [pc, #44]	; (800208c <BSP_LCD_DrawHLine+0x78>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2300      	movs	r3, #0
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	462a      	mov	r2, r5
 8002076:	4621      	mov	r1, r4
 8002078:	f000 fd18 	bl	8002aac <FillBuffer>
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bdb0      	pop	{r4, r5, r7, pc}
 8002084:	200001d0 	.word	0x200001d0
 8002088:	200002c0 	.word	0x200002c0
 800208c:	200001d4 	.word	0x200001d4

08002090 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b08b      	sub	sp, #44	; 0x2c
 8002094:	af00      	add	r7, sp, #0
 8002096:	4604      	mov	r4, r0
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4623      	mov	r3, r4
 80020a0:	80fb      	strh	r3, [r7, #6]
 80020a2:	4603      	mov	r3, r0
 80020a4:	80bb      	strh	r3, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	807b      	strh	r3, [r7, #2]
 80020aa:	4613      	mov	r3, r2
 80020ac:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80020ae:	2300      	movs	r3, #0
 80020b0:	823b      	strh	r3, [r7, #16]
 80020b2:	2300      	movs	r3, #0
 80020b4:	81fb      	strh	r3, [r7, #14]
 80020b6:	2300      	movs	r3, #0
 80020b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80020ba:	2300      	movs	r3, #0
 80020bc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80020be:	2300      	movs	r3, #0
 80020c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80020c2:	2300      	movs	r3, #0
 80020c4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80020c6:	2300      	movs	r3, #0
 80020c8:	83fb      	strh	r3, [r7, #30]
 80020ca:	2300      	movs	r3, #0
 80020cc:	83bb      	strh	r3, [r7, #28]
 80020ce:	2300      	movs	r3, #0
 80020d0:	837b      	strh	r3, [r7, #26]
 80020d2:	2300      	movs	r3, #0
 80020d4:	833b      	strh	r3, [r7, #24]
 80020d6:	2300      	movs	r3, #0
 80020d8:	82fb      	strh	r3, [r7, #22]
 80020da:	2300      	movs	r3, #0
 80020dc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bfb8      	it	lt
 80020ec:	425b      	neglt	r3, r3
 80020ee:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80020f0:	883a      	ldrh	r2, [r7, #0]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bfb8      	it	lt
 80020fa:	425b      	neglt	r3, r3
 80020fc:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	429a      	cmp	r2, r3
 800210c:	d304      	bcc.n	8002118 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002112:	2301      	movs	r3, #1
 8002114:	843b      	strh	r3, [r7, #32]
 8002116:	e005      	b.n	8002124 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800211e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002122:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002124:	883a      	ldrh	r2, [r7, #0]
 8002126:	88bb      	ldrh	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d304      	bcc.n	8002136 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	83bb      	strh	r3, [r7, #28]
 8002134:	e005      	b.n	8002142 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002136:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800213a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002140:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002142:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002146:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800214a:	429a      	cmp	r2, r3
 800214c:	db10      	blt.n	8002170 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800214e:	2300      	movs	r3, #0
 8002150:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002152:	2300      	movs	r3, #0
 8002154:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002156:	8a3b      	ldrh	r3, [r7, #16]
 8002158:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800215a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800215e:	0fda      	lsrs	r2, r3, #31
 8002160:	4413      	add	r3, r2
 8002162:	105b      	asrs	r3, r3, #1
 8002164:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800216a:	8a3b      	ldrh	r3, [r7, #16]
 800216c:	82bb      	strh	r3, [r7, #20]
 800216e:	e00f      	b.n	8002190 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002170:	2300      	movs	r3, #0
 8002172:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002174:	2300      	movs	r3, #0
 8002176:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800217c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002180:	0fda      	lsrs	r2, r3, #31
 8002182:	4413      	add	r3, r2
 8002184:	105b      	asrs	r3, r3, #1
 8002186:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002188:	8a3b      	ldrh	r3, [r7, #16]
 800218a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002190:	2300      	movs	r3, #0
 8002192:	827b      	strh	r3, [r7, #18]
 8002194:	e038      	b.n	8002208 <BSP_LCD_DrawLine+0x178>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002196:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002198:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <BSP_LCD_DrawLine+0x18c>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4920      	ldr	r1, [pc, #128]	; (8002220 <BSP_LCD_DrawLine+0x190>)
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	f000 fb9c 	bl	80028ec <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 80021b4:	8b3a      	ldrh	r2, [r7, #24]
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	4413      	add	r3, r2
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 80021be:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80021c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	db0e      	blt.n	80021e8 <BSP_LCD_DrawLine+0x158>
    {
      num -= den;                             /* Calculate the new numerator value */
 80021ca:	8b3a      	ldrh	r2, [r7, #24]
 80021cc:	8b7b      	ldrh	r3, [r7, #26]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80021d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80021d8:	4413      	add	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80021de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021e0:	8bfb      	ldrh	r3, [r7, #30]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80021e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80021ea:	8c3b      	ldrh	r3, [r7, #32]
 80021ec:	4413      	add	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80021f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80021fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	827b      	strh	r3, [r7, #18]
 8002208:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800220c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	ddc0      	ble.n	8002196 <BSP_LCD_DrawLine+0x106>
  }
}
 8002214:	bf00      	nop
 8002216:	372c      	adds	r7, #44	; 0x2c
 8002218:	46bd      	mov	sp, r7
 800221a:	bd90      	pop	{r4, r7, pc}
 800221c:	200001d0 	.word	0x200001d0
 8002220:	200001d4 	.word	0x200001d4

08002224 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	460b      	mov	r3, r1
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	f1c3 0303 	rsb	r3, r3, #3
 800223e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002248:	e0cf      	b.n	80023ea <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	b29a      	uxth	r2, r3
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	4413      	add	r3, r2
 8002252:	b298      	uxth	r0, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	b29b      	uxth	r3, r3
 8002258:	88ba      	ldrh	r2, [r7, #4]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29c      	uxth	r4, r3
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4967      	ldr	r1, [pc, #412]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 8002264:	4613      	mov	r3, r2
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4621      	mov	r1, r4
 8002274:	f000 fb3a 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	b29b      	uxth	r3, r3
 800227c:	88fa      	ldrh	r2, [r7, #6]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	b298      	uxth	r0, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	b29b      	uxth	r3, r3
 8002286:	88ba      	ldrh	r2, [r7, #4]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	b29c      	uxth	r4, r3
 800228c:	4b5b      	ldr	r3, [pc, #364]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	495b      	ldr	r1, [pc, #364]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	4621      	mov	r1, r4
 80022a2:	f000 fb23 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4413      	add	r3, r2
 80022ae:	b298      	uxth	r0, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	88ba      	ldrh	r2, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	b29c      	uxth	r4, r3
 80022ba:	4b50      	ldr	r3, [pc, #320]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4950      	ldr	r1, [pc, #320]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4621      	mov	r1, r4
 80022d0:	f000 fb0c 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	88fa      	ldrh	r2, [r7, #6]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	b298      	uxth	r0, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	88ba      	ldrh	r2, [r7, #4]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	b29c      	uxth	r4, r3
 80022e8:	4b44      	ldr	r3, [pc, #272]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4944      	ldr	r1, [pc, #272]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	461a      	mov	r2, r3
 80022fc:	4621      	mov	r1, r4
 80022fe:	f000 faf5 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	b29a      	uxth	r2, r3
 8002306:	88fb      	ldrh	r3, [r7, #6]
 8002308:	4413      	add	r3, r2
 800230a:	b298      	uxth	r0, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	b29a      	uxth	r2, r3
 8002310:	88bb      	ldrh	r3, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	b29c      	uxth	r4, r3
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4939      	ldr	r1, [pc, #228]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f000 fade 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	b29b      	uxth	r3, r3
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	b298      	uxth	r0, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	b29a      	uxth	r2, r3
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	b29c      	uxth	r4, r3
 8002344:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	492d      	ldr	r1, [pc, #180]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	4621      	mov	r1, r4
 800235a:	f000 fac7 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	b29a      	uxth	r2, r3
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	4413      	add	r3, r2
 8002366:	b298      	uxth	r0, r3
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	b29a      	uxth	r2, r3
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	4413      	add	r3, r2
 8002370:	b29c      	uxth	r4, r3
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4922      	ldr	r1, [pc, #136]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4621      	mov	r1, r4
 8002388:	f000 fab0 	bl	80028ec <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	b29b      	uxth	r3, r3
 8002390:	88fa      	ldrh	r2, [r7, #6]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b298      	uxth	r0, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	b29a      	uxth	r2, r3
 800239a:	88bb      	ldrh	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	b29c      	uxth	r4, r3
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <BSP_LCD_DrawCircle+0x1d8>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <BSP_LCD_DrawCircle+0x1dc>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	461a      	mov	r2, r3
 80023b4:	4621      	mov	r1, r4
 80023b6:	f000 fa99 	bl	80028ec <BSP_LCD_DrawPixel>

    if (d < 0)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da06      	bge.n	80023ce <BSP_LCD_DrawCircle+0x1aa>
    { 
      d += (curx << 2) + 6;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	4413      	add	r3, r2
 80023c8:	3306      	adds	r3, #6
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	009a      	lsls	r2, r3, #2
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4413      	add	r3, r2
 80023da:	330a      	adds	r3, #10
 80023dc:	617b      	str	r3, [r7, #20]
      cury--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3301      	adds	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	f67f af2b 	bls.w	800224a <BSP_LCD_DrawCircle+0x26>
  } 
}
 80023f4:	bf00      	nop
 80023f6:	371c      	adds	r7, #28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd90      	pop	{r4, r7, pc}
 80023fc:	200001d0 	.word	0x200001d0
 8002400:	200001d4 	.word	0x200001d4

08002404 <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = *(__IO uint16_t *) (pBmp + 10);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	330a      	adds	r3, #10
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
  index |= (*(__IO uint16_t *) (pBmp + 12)) << 16;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	330c      	adds	r3, #12
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	041b      	lsls	r3, r3, #16
 8002438:	461a      	mov	r2, r3
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	4313      	orrs	r3, r2
 800243e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = *(uint16_t *) (pBmp + 18);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3312      	adds	r3, #18
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	61bb      	str	r3, [r7, #24]
  width |= (*(uint16_t *) (pBmp + 20)) << 16;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3314      	adds	r3, #20
 800244c:	881b      	ldrh	r3, [r3, #0]
 800244e:	041b      	lsls	r3, r3, #16
 8002450:	461a      	mov	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = *(uint16_t *) (pBmp + 22);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3316      	adds	r3, #22
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]
  height |= (*(uint16_t *) (pBmp + 24)) << 16; 
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3318      	adds	r3, #24
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	041b      	lsls	r3, r3, #16
 8002468:	461a      	mov	r2, r3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
 
  /* Read bit/pixel */
  bitpixel = *(uint16_t *) (pBmp + 28);   
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	331c      	adds	r3, #28
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8002478:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <BSP_LCD_DrawBitmap+0x120>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <BSP_LCD_DrawBitmap+0x124>)
 800247e:	2134      	movs	r1, #52	; 0x34
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	4413      	add	r3, r2
 8002486:	335c      	adds	r3, #92	; 0x5c
 8002488:	681c      	ldr	r4, [r3, #0]
 800248a:	f7ff fb7b 	bl	8001b84 <BSP_LCD_GetXSize>
 800248e:	4602      	mov	r2, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4423      	add	r3, r4
 800249e:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	3b20      	subs	r3, #32
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d802      	bhi.n	80024ae <BSP_LCD_DrawBitmap+0xaa>
  {
    inputcolormode = CM_ARGB8888;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	e008      	b.n	80024c0 <BSP_LCD_DrawBitmap+0xbc>
  }
  else if ((bitpixel/8) == 2)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3b10      	subs	r3, #16
 80024b2:	2b07      	cmp	r3, #7
 80024b4:	d802      	bhi.n	80024bc <BSP_LCD_DrawBitmap+0xb8>
  {
    inputcolormode = CM_RGB565;
 80024b6:	2302      	movs	r3, #2
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e001      	b.n	80024c0 <BSP_LCD_DrawBitmap+0xbc>
  }
  else
  {
    inputcolormode = CM_RGB888;
 80024bc:	2301      	movs	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	08d2      	lsrs	r2, r2, #3
 80024ce:	fb02 f203 	mul.w	r2, r2, r3
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	4413      	add	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80024dc:	2300      	movs	r3, #0
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	e018      	b.n	8002514 <BSP_LCD_DrawBitmap+0x110>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 80024e2:	6a39      	ldr	r1, [r7, #32]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fb17 	bl	8002b1c <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 80024ee:	f7ff fb49 	bl	8001b84 <BSP_LCD_GetXSize>
 80024f2:	4603      	mov	r3, r0
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	6a3a      	ldr	r2, [r7, #32]
 80024f8:	4413      	add	r3, r2
 80024fa:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	08db      	lsrs	r3, r3, #3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	425b      	negs	r3, r3
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	3301      	adds	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
 8002514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	d3e2      	bcc.n	80024e2 <BSP_LCD_DrawBitmap+0xde>
  }
}
 800251c:	bf00      	nop
 800251e:	372c      	adds	r7, #44	; 0x2c
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	200001d0 	.word	0x200001d0
 8002528:	200002c0 	.word	0x200002c0

0800252c <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800252c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af02      	add	r7, sp, #8
 8002534:	4604      	mov	r4, r0
 8002536:	4608      	mov	r0, r1
 8002538:	4611      	mov	r1, r2
 800253a:	461a      	mov	r2, r3
 800253c:	4623      	mov	r3, r4
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	4603      	mov	r3, r0
 8002542:	80bb      	strh	r3, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <BSP_LCD_FillRect+0xa8>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4920      	ldr	r1, [pc, #128]	; (80025d8 <BSP_LCD_FillRect+0xac>)
 8002556:	4613      	mov	r3, r2
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb9a 	bl	8001c9c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002568:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <BSP_LCD_FillRect+0xa8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1b      	ldr	r2, [pc, #108]	; (80025dc <BSP_LCD_FillRect+0xb0>)
 800256e:	2134      	movs	r1, #52	; 0x34
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	681c      	ldr	r4, [r3, #0]
 800257a:	f7ff fb03 	bl	8001b84 <BSP_LCD_GetXSize>
 800257e:	4602      	mov	r2, r0
 8002580:	88bb      	ldrh	r3, [r7, #4]
 8002582:	fb03 f202 	mul.w	r2, r3, r2
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4423      	add	r3, r4
 800258e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <BSP_LCD_FillRect+0xa8>)
 8002592:	681c      	ldr	r4, [r3, #0]
 8002594:	68fd      	ldr	r5, [r7, #12]
 8002596:	887e      	ldrh	r6, [r7, #2]
 8002598:	f8b7 8000 	ldrh.w	r8, [r7]
 800259c:	f7ff faf2 	bl	8001b84 <BSP_LCD_GetXSize>
 80025a0:	4602      	mov	r2, r0
 80025a2:	887b      	ldrh	r3, [r7, #2]
 80025a4:	1ad1      	subs	r1, r2, r3
 80025a6:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <BSP_LCD_FillRect+0xa8>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	480b      	ldr	r0, [pc, #44]	; (80025d8 <BSP_LCD_FillRect+0xac>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	9100      	str	r1, [sp, #0]
 80025bc:	4643      	mov	r3, r8
 80025be:	4632      	mov	r2, r6
 80025c0:	4629      	mov	r1, r5
 80025c2:	4620      	mov	r0, r4
 80025c4:	f000 fa72 	bl	8002aac <FillBuffer>
}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025d2:	bf00      	nop
 80025d4:	200001d0 	.word	0x200001d0
 80025d8:	200001d4 	.word	0x200001d4
 80025dc:	200002c0 	.word	0x200002c0

080025e0 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
 80025ea:	460b      	mov	r3, r1
 80025ec:	80bb      	strh	r3, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80025f2:	887b      	ldrh	r3, [r7, #2]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	f1c3 0303 	rsb	r3, r3, #3
 80025fa:	617b      	str	r3, [r7, #20]

  curx = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002604:	4b44      	ldr	r3, [pc, #272]	; (8002718 <BSP_LCD_FillCircle+0x138>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4944      	ldr	r1, [pc, #272]	; (800271c <BSP_LCD_FillCircle+0x13c>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fb40 	bl	8001c9c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 800261c:	e061      	b.n	80026e2 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d021      	beq.n	8002668 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	b29b      	uxth	r3, r3
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	b298      	uxth	r0, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	b29a      	uxth	r2, r3
 8002632:	88bb      	ldrh	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	b299      	uxth	r1, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	b29b      	uxth	r3, r3
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	b29b      	uxth	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff fce7 	bl	8002014 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	b29b      	uxth	r3, r3
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b298      	uxth	r0, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	b29b      	uxth	r3, r3
 8002654:	88ba      	ldrh	r2, [r7, #4]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	b299      	uxth	r1, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	b29b      	uxth	r3, r3
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	b29b      	uxth	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	f7ff fcd6 	bl	8002014 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d021      	beq.n	80026b2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	b29b      	uxth	r3, r3
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	b298      	uxth	r0, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	b29b      	uxth	r3, r3
 800267c:	88ba      	ldrh	r2, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	b299      	uxth	r1, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	b29b      	uxth	r3, r3
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	f7ff fcc2 	bl	8002014 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	b29b      	uxth	r3, r3
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	b298      	uxth	r0, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	b29a      	uxth	r2, r3
 800269e:	88bb      	ldrh	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	b299      	uxth	r1, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	f7ff fcb1 	bl	8002014 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	da06      	bge.n	80026c6 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	009a      	lsls	r2, r3, #2
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4413      	add	r3, r2
 80026c0:	3306      	adds	r3, #6
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e00a      	b.n	80026dc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	009a      	lsls	r2, r3, #2
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	4413      	add	r3, r2
 80026d2:	330a      	adds	r3, #10
 80026d4:	617b      	str	r3, [r7, #20]
      cury--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3b01      	subs	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	3301      	adds	r3, #1
 80026e0:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d999      	bls.n	800261e <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <BSP_LCD_FillCircle+0x138>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	490b      	ldr	r1, [pc, #44]	; (800271c <BSP_LCD_FillCircle+0x13c>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff facd 	bl	8001c9c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	88b9      	ldrh	r1, [r7, #4]
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fd8b 	bl	8002224 <BSP_LCD_DrawCircle>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200001d0 	.word	0x200001d0
 800271c:	200001d4 	.word	0x200001d4

08002720 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <BSP_LCD_DisplayOn+0x1c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800272e:	4b03      	ldr	r3, [pc, #12]	; (800273c <BSP_LCD_DisplayOn+0x1c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4798      	blx	r3
  }
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000368 	.word	0x20000368

08002740 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08e      	sub	sp, #56	; 0x38
 8002744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
 800274a:	4a61      	ldr	r2, [pc, #388]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 800274c:	4b60      	ldr	r3, [pc, #384]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b5e      	ldr	r3, [pc, #376]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	4a5a      	ldr	r2, [pc, #360]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b57      	ldr	r3, [pc, #348]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	4a53      	ldr	r2, [pc, #332]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002784:	4b52      	ldr	r3, [pc, #328]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	; 0x30
 800278e:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	4a4c      	ldr	r2, [pc, #304]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027a0:	4b4b      	ldr	r3, [pc, #300]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	4a45      	ldr	r2, [pc, #276]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	4a3e      	ldr	r2, [pc, #248]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027d8:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027f4:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f043 0320 	orr.w	r3, r3, #32
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <BSP_LCD_MspInit+0x190>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002826:	f641 0358 	movw	r3, #6232	; 0x1858
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002834:	2302      	movs	r3, #2
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002838:	230e      	movs	r3, #14
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4824      	ldr	r0, [pc, #144]	; (80028d4 <BSP_LCD_MspInit+0x194>)
 8002844:	f001 fa32 	bl	8003cac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002848:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	4619      	mov	r1, r3
 8002854:	4820      	ldr	r0, [pc, #128]	; (80028d8 <BSP_LCD_MspInit+0x198>)
 8002856:	f001 fa29 	bl	8003cac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800285a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002864:	4619      	mov	r1, r3
 8002866:	481d      	ldr	r0, [pc, #116]	; (80028dc <BSP_LCD_MspInit+0x19c>)
 8002868:	f001 fa20 	bl	8003cac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800286c:	2348      	movs	r3, #72	; 0x48
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002874:	4619      	mov	r1, r3
 8002876:	481a      	ldr	r0, [pc, #104]	; (80028e0 <BSP_LCD_MspInit+0x1a0>)
 8002878:	f001 fa18 	bl	8003cac <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800287c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002886:	4619      	mov	r1, r3
 8002888:	4816      	ldr	r0, [pc, #88]	; (80028e4 <BSP_LCD_MspInit+0x1a4>)
 800288a:	f001 fa0f 	bl	8003cac <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800288e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	4619      	mov	r1, r3
 800289a:	4813      	ldr	r0, [pc, #76]	; (80028e8 <BSP_LCD_MspInit+0x1a8>)
 800289c:	f001 fa06 	bl	8003cac <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80028a0:	2303      	movs	r3, #3
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80028a4:	2309      	movs	r3, #9
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80028a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ac:	4619      	mov	r1, r3
 80028ae:	480a      	ldr	r0, [pc, #40]	; (80028d8 <BSP_LCD_MspInit+0x198>)
 80028b0:	f001 f9fc 	bl	8003cac <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80028b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80028ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028be:	4619      	mov	r1, r3
 80028c0:	4809      	ldr	r0, [pc, #36]	; (80028e8 <BSP_LCD_MspInit+0x1a8>)
 80028c2:	f001 f9f3 	bl	8003cac <HAL_GPIO_Init>
}
 80028c6:	bf00      	nop
 80028c8:	3738      	adds	r7, #56	; 0x38
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020000 	.word	0x40020000
 80028d8:	40020400 	.word	0x40020400
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020c00 	.word	0x40020c00
 80028e4:	40021400 	.word	0x40021400
 80028e8:	40021800 	.word	0x40021800

080028ec <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80028ec:	b5b0      	push	{r4, r5, r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	603a      	str	r2, [r7, #0]
 80028f6:	80fb      	strh	r3, [r7, #6]
 80028f8:	460b      	mov	r3, r1
 80028fa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <BSP_LCD_DrawPixel+0x44>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <BSP_LCD_DrawPixel+0x48>)
 8002902:	2134      	movs	r1, #52	; 0x34
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	335c      	adds	r3, #92	; 0x5c
 800290c:	681c      	ldr	r4, [r3, #0]
 800290e:	88bd      	ldrh	r5, [r7, #4]
 8002910:	f7ff f938 	bl	8001b84 <BSP_LCD_GetXSize>
 8002914:	4603      	mov	r3, r0
 8002916:	fb03 f205 	mul.w	r2, r3, r5
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4423      	add	r3, r4
 8002922:	461a      	mov	r2, r3
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	200001d0 	.word	0x200001d0
 8002934:	200002c0 	.word	0x200002c0

08002938 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	603a      	str	r2, [r7, #0]
 8002942:	80fb      	strh	r3, [r7, #6]
 8002944:	460b      	mov	r3, r1
 8002946:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <DrawChar+0x16c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4953      	ldr	r1, [pc, #332]	; (8002aa8 <DrawChar+0x170>)
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3308      	adds	r3, #8
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	88db      	ldrh	r3, [r3, #6]
 800296a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <DrawChar+0x16c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <DrawChar+0x170>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3308      	adds	r3, #8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	889b      	ldrh	r3, [r3, #4]
 8002982:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002984:	8a3b      	ldrh	r3, [r7, #16]
 8002986:	3307      	adds	r3, #7
 8002988:	2b00      	cmp	r3, #0
 800298a:	da00      	bge.n	800298e <DrawChar+0x56>
 800298c:	3307      	adds	r3, #7
 800298e:	10db      	asrs	r3, r3, #3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8a3b      	ldrh	r3, [r7, #16]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e076      	b.n	8002a92 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80029a4:	8a3b      	ldrh	r3, [r7, #16]
 80029a6:	3307      	adds	r3, #7
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	da00      	bge.n	80029ae <DrawChar+0x76>
 80029ac:	3307      	adds	r3, #7
 80029ae:	10db      	asrs	r3, r3, #3
 80029b0:	461a      	mov	r2, r3
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fb03 f302 	mul.w	r3, r3, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80029be:	8a3b      	ldrh	r3, [r7, #16]
 80029c0:	3307      	adds	r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da00      	bge.n	80029c8 <DrawChar+0x90>
 80029c6:	3307      	adds	r3, #7
 80029c8:	10db      	asrs	r3, r3, #3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d002      	beq.n	80029d4 <DrawChar+0x9c>
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d004      	beq.n	80029dc <DrawChar+0xa4>
 80029d2:	e00c      	b.n	80029ee <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	617b      	str	r3, [r7, #20]
      break;
 80029da:	e016      	b.n	8002a0a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	3201      	adds	r2, #1
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
      break;
 80029ec:	e00d      	b.n	8002a0a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	041a      	lsls	r2, r3, #16
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	4313      	orrs	r3, r2
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	3202      	adds	r2, #2
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	617b      	str	r3, [r7, #20]
      break;
 8002a08:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e036      	b.n	8002a7e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002a10:	8a3a      	ldrh	r2, [r7, #16]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	1ad2      	subs	r2, r2, r3
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d012      	beq.n	8002a52 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	4413      	add	r3, r2
 8002a34:	b298      	uxth	r0, r3
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <DrawChar+0x16c>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	491b      	ldr	r1, [pc, #108]	; (8002aa8 <DrawChar+0x170>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	88bb      	ldrh	r3, [r7, #4]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7ff ff4e 	bl	80028ec <BSP_LCD_DrawPixel>
 8002a50:	e012      	b.n	8002a78 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b298      	uxth	r0, r3
 8002a5c:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <DrawChar+0x16c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4911      	ldr	r1, [pc, #68]	; (8002aa8 <DrawChar+0x170>)
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7ff ff3a 	bl	80028ec <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	8a3a      	ldrh	r2, [r7, #16]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d8c4      	bhi.n	8002a10 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002a86:	88bb      	ldrh	r3, [r7, #4]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	8a7a      	ldrh	r2, [r7, #18]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d884      	bhi.n	80029a4 <DrawChar+0x6c>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200001d0 	.word	0x200001d0
 8002aa8:	200001d4 	.word	0x200001d4

08002aac <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002aba:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <FillBuffer+0x68>)
 8002abc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ac0:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002ac2:	4b14      	ldr	r3, [pc, #80]	; (8002b14 <FillBuffer+0x68>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002ac8:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <FillBuffer+0x68>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <FillBuffer+0x68>)
 8002ad0:	4a11      	ldr	r2, [pc, #68]	; (8002b18 <FillBuffer+0x6c>)
 8002ad2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002ad4:	480f      	ldr	r0, [pc, #60]	; (8002b14 <FillBuffer+0x68>)
 8002ad6:	f000 fd4f 	bl	8003578 <HAL_DMA2D_Init>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d115      	bne.n	8002b0c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002ae0:	68f9      	ldr	r1, [r7, #12]
 8002ae2:	480c      	ldr	r0, [pc, #48]	; (8002b14 <FillBuffer+0x68>)
 8002ae4:	f000 ffb6 	bl	8003a54 <HAL_DMA2D_ConfigLayer>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69f9      	ldr	r1, [r7, #28]
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <FillBuffer+0x68>)
 8002afa:	f000 fd86 	bl	800360a <HAL_DMA2D_Start>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d103      	bne.n	8002b0c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002b04:	210a      	movs	r1, #10
 8002b06:	4803      	ldr	r0, [pc, #12]	; (8002b14 <FillBuffer+0x68>)
 8002b08:	f000 fdaa 	bl	8003660 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000160 	.word	0x20000160
 8002b18:	4002b000 	.word	0x4002b000

08002b1c <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b30:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b46:	22ff      	movs	r2, #255	; 0xff
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <ConvertLineToARGB8888+0x84>)
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002b5c:	480f      	ldr	r0, [pc, #60]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b5e:	f000 fd0b 	bl	8003578 <HAL_DMA2D_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d115      	bne.n	8002b94 <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8002b68:	2101      	movs	r1, #1
 8002b6a:	480c      	ldr	r0, [pc, #48]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b6c:	f000 ff72 	bl	8003a54 <HAL_DMA2D_ConfigLayer>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10e      	bne.n	8002b94 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002b76:	68f9      	ldr	r1, [r7, #12]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4806      	ldr	r0, [pc, #24]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b82:	f000 fd42 	bl	800360a <HAL_DMA2D_Start>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	4803      	ldr	r0, [pc, #12]	; (8002b9c <ConvertLineToARGB8888+0x80>)
 8002b90:	f000 fd66 	bl	8003660 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000160 	.word	0x20000160
 8002ba0:	4002b000 	.word	0x4002b000

08002ba4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002baa:	4a2a      	ldr	r2, [pc, #168]	; (8002c54 <BSP_SDRAM_Init+0xb0>)
 8002bac:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002bae:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bb6:	2207      	movs	r2, #7
 8002bb8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002bba:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002bc0:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bc8:	2202      	movs	r2, #2
 8002bca:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002bcc:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002bd2:	4b21      	ldr	r3, [pc, #132]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002be6:	2204      	movs	r2, #4
 8002be8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002bec:	2210      	movs	r2, #16
 8002bee:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bf0:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002bf8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002bfc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c0a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c18:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c1e:	f000 f87f 	bl	8002d20 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002c22:	490d      	ldr	r1, [pc, #52]	; (8002c58 <BSP_SDRAM_Init+0xb4>)
 8002c24:	480a      	ldr	r0, [pc, #40]	; (8002c50 <BSP_SDRAM_Init+0xac>)
 8002c26:	f002 febf 	bl	80059a8 <HAL_SDRAM_Init>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <BSP_SDRAM_Init+0xb8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	e002      	b.n	8002c3e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c38:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <BSP_SDRAM_Init+0xb8>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c3e:	f240 506a 	movw	r0, #1386	; 0x56a
 8002c42:	f000 f80d 	bl	8002c60 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <BSP_SDRAM_Init+0xb8>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200001ec 	.word	0x200001ec
 8002c54:	a0000140 	.word	0xa0000140
 8002c58:	20000220 	.word	0x20000220
 8002c5c:	20000078 	.word	0x20000078

08002c60 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c72:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c74:	2208      	movs	r2, #8
 8002c76:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002c78:	4b27      	ldr	r3, [pc, #156]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c88:	4923      	ldr	r1, [pc, #140]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8a:	4824      	ldr	r0, [pc, #144]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c8c:	f002 fec0 	bl	8005a10 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c90:	2001      	movs	r0, #1
 8002c92:	f000 f993 	bl	8002fbc <HAL_Delay>
  //wait_ms(1);
  
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002c96:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb2:	4919      	ldr	r1, [pc, #100]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb4:	4819      	ldr	r0, [pc, #100]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cb6:	f002 feab 	bl	8005a10 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc8:	2204      	movs	r2, #4
 8002cca:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd6:	4910      	ldr	r1, [pc, #64]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cd8:	4810      	ldr	r0, [pc, #64]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cda:	f002 fe99 	bl	8005a10 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002cde:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002ce2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ce6:	2204      	movs	r2, #4
 8002ce8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cec:	2208      	movs	r2, #8
 8002cee:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002cf0:	4b09      	ldr	r3, [pc, #36]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cfa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d00:	4905      	ldr	r1, [pc, #20]	; (8002d18 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d02:	4806      	ldr	r0, [pc, #24]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d04:	f002 fe84 	bl	8005a10 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4804      	ldr	r0, [pc, #16]	; (8002d1c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d0c:	f002 feab 	bl	8005a66 <HAL_SDRAM_ProgramRefreshRate>
}
 8002d10:	bf00      	nop
 8002d12:	3710      	adds	r7, #16
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000023c 	.word	0x2000023c
 8002d1c:	200001ec 	.word	0x200001ec

08002d20 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b090      	sub	sp, #64	; 0x40
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 80ec 	beq.w	8002f0a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d36:	4a77      	ldr	r2, [pc, #476]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d38:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6393      	str	r3, [r2, #56]	; 0x38
 8002d42:	4b74      	ldr	r3, [pc, #464]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	4a70      	ldr	r2, [pc, #448]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d54:	4b6f      	ldr	r3, [pc, #444]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	623b      	str	r3, [r7, #32]
 8002d6e:	4a69      	ldr	r2, [pc, #420]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d70:	4b68      	ldr	r3, [pc, #416]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	4a62      	ldr	r2, [pc, #392]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d8c:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	f043 0304 	orr.w	r3, r3, #4
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	4a5b      	ldr	r2, [pc, #364]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002da8:	4b5a      	ldr	r3, [pc, #360]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b58      	ldr	r3, [pc, #352]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	4a54      	ldr	r2, [pc, #336]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f043 0310 	orr.w	r3, r3, #16
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b51      	ldr	r3, [pc, #324]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	4a4d      	ldr	r2, [pc, #308]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f043 0320 	orr.w	r3, r3, #32
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b4a      	ldr	r3, [pc, #296]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4a46      	ldr	r2, [pc, #280]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dfc:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e04:	6313      	str	r3, [r2, #48]	; 0x30
 8002e06:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <BSP_SDRAM_MspInit+0x1f4>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e16:	2302      	movs	r3, #2
 8002e18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002e1e:	230c      	movs	r3, #12
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002e22:	2360      	movs	r3, #96	; 0x60
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	483a      	ldr	r0, [pc, #232]	; (8002f18 <BSP_SDRAM_MspInit+0x1f8>)
 8002e2e:	f000 ff3d 	bl	8003cac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002e32:	2301      	movs	r3, #1
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4837      	ldr	r0, [pc, #220]	; (8002f1c <BSP_SDRAM_MspInit+0x1fc>)
 8002e3e:	f000 ff35 	bl	8003cac <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002e42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4834      	ldr	r0, [pc, #208]	; (8002f20 <BSP_SDRAM_MspInit+0x200>)
 8002e50:	f000 ff2c 	bl	8003cac <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002e54:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4830      	ldr	r0, [pc, #192]	; (8002f24 <BSP_SDRAM_MspInit+0x204>)
 8002e62:	f000 ff23 	bl	8003cac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002e66:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e70:	4619      	mov	r1, r3
 8002e72:	482d      	ldr	r0, [pc, #180]	; (8002f28 <BSP_SDRAM_MspInit+0x208>)
 8002e74:	f000 ff1a 	bl	8003cac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002e78:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e82:	4619      	mov	r1, r3
 8002e84:	4829      	ldr	r0, [pc, #164]	; (8002f2c <BSP_SDRAM_MspInit+0x20c>)
 8002e86:	f000 ff11 	bl	8003cac <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea4:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea6:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eac:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002eb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eb4:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec2:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ecc:	2203      	movs	r2, #3
 8002ece:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002ed0:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002ed6:	4b16      	ldr	r3, [pc, #88]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002edc:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <BSP_SDRAM_MspInit+0x214>)
 8002ee0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8002eee:	4810      	ldr	r0, [pc, #64]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ef0:	f000 fa34 	bl	800335c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <BSP_SDRAM_MspInit+0x210>)
 8002ef6:	f000 f983 	bl	8003200 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	210f      	movs	r1, #15
 8002efe:	2038      	movs	r0, #56	; 0x38
 8002f00:	f000 f934 	bl	800316c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002f04:	2038      	movs	r0, #56	; 0x38
 8002f06:	f000 f94d 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002f0a:	bf00      	nop
 8002f0c:	3740      	adds	r7, #64	; 0x40
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020c00 	.word	0x40020c00
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40021400 	.word	0x40021400
 8002f2c:	40021800 	.word	0x40021800
 8002f30:	2000024c 	.word	0x2000024c
 8002f34:	40026410 	.word	0x40026410

08002f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f3c:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_Init+0x40>)
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_Init+0x40>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <HAL_Init+0x40>)
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_Init+0x40>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f54:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_Init+0x40>)
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_Init+0x40>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f000 f8f8 	bl	8003156 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f008 fc94 	bl	800b894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6c:	f008 fc6a 	bl	800b844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023c00 	.word	0x40023c00

08002f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_IncTick+0x20>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	461a      	mov	r2, r3
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <HAL_IncTick+0x24>)
 8002f8e:	6013      	str	r3, [r2, #0]
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	20000079 	.word	0x20000079
 8002fa0:	2000036c 	.word	0x2000036c

08002fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_GetTick+0x14>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	2000036c 	.word	0x2000036c

08002fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc4:	f7ff ffee 	bl	8002fa4 <HAL_GetTick>
 8002fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d005      	beq.n	8002fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_Delay+0x40>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fe2:	bf00      	nop
 8002fe4:	f7ff ffde 	bl	8002fa4 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	1ad2      	subs	r2, r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d3f7      	bcc.n	8002fe4 <HAL_Delay+0x28>
  {
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000079 	.word	0x20000079

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	; (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	4909      	ldr	r1, [pc, #36]	; (800309c <__NVIC_EnableIRQ+0x38>)
 8003078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	79fa      	ldrb	r2, [r7, #7]
 8003080:	f002 021f 	and.w	r2, r2, #31
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	490d      	ldr	r1, [pc, #52]	; (80030ec <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	4909      	ldr	r1, [pc, #36]	; (80030f0 <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	2201      	movs	r2, #1
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	401a      	ands	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313a:	2101      	movs	r1, #1
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	1e59      	subs	r1, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	; 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff4e 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317e:	f7ff ff63 	bl	8003048 <__NVIC_GetPriorityGrouping>
 8003182:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	6978      	ldr	r0, [r7, #20]
 800318a:	f7ff ffb3 	bl	80030f4 <NVIC_EncodePriority>
 800318e:	4602      	mov	r2, r0
 8003190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff82 	bl	80030a0 <__NVIC_SetPriority>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff56 	bl	8003064 <__NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e011      	b.n	80031f6 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	795b      	ldrb	r3, [r3, #5]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f004 fa10 	bl	8007608 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff feca 	bl	8002fa4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e099      	b.n	8003350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800323c:	e00f      	b.n	800325e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800323e:	f7ff feb1 	bl	8002fa4 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b05      	cmp	r3, #5
 800324a:	d908      	bls.n	800325e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2203      	movs	r2, #3
 8003256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e078      	b.n	8003350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e8      	bne.n	800323e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_DMA_Init+0x158>)
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800328a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d107      	bne.n	80032c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4313      	orrs	r3, r2
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0307 	bic.w	r3, r3, #7
 80032de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d117      	bne.n	8003322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f8bd 	bl	8003484 <DMA_CheckFifoParam>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2240      	movs	r2, #64	; 0x40
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800331e:	2301      	movs	r3, #1
 8003320:	e016      	b.n	8003350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f874 	bl	8003418 <DMA_CalcBaseAndBitshift>
 8003330:	4603      	mov	r3, r0
 8003332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	223f      	movs	r2, #63	; 0x3f
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	f010803f 	.word	0xf010803f

0800335c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e050      	b.n	8003410 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d101      	bne.n	800337e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
 800337c:	e048      	b.n	8003410 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2221      	movs	r2, #33	; 0x21
 80033bc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f82a 	bl	8003418 <DMA_CalcBaseAndBitshift>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f0:	223f      	movs	r2, #63	; 0x3f
 80033f2:	409a      	lsls	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	3b10      	subs	r3, #16
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <DMA_CalcBaseAndBitshift+0x64>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003432:	4a13      	ldr	r2, [pc, #76]	; (8003480 <DMA_CalcBaseAndBitshift+0x68>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d909      	bls.n	800345a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800344e:	f023 0303 	bic.w	r3, r3, #3
 8003452:	1d1a      	adds	r2, r3, #4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	659a      	str	r2, [r3, #88]	; 0x58
 8003458:	e007      	b.n	800346a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003462:	f023 0303 	bic.w	r3, r3, #3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800346e:	4618      	mov	r0, r3
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	aaaaaaab 	.word	0xaaaaaaab
 8003480:	0800e83c 	.word	0x0800e83c

08003484 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d11f      	bne.n	80034de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d855      	bhi.n	8003550 <DMA_CheckFifoParam+0xcc>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <DMA_CheckFifoParam+0x28>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034cf 	.word	0x080034cf
 80034b4:	080034bd 	.word	0x080034bd
 80034b8:	08003551 	.word	0x08003551
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d045      	beq.n	8003554 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034cc:	e042      	b.n	8003554 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034d6:	d13f      	bne.n	8003558 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034dc:	e03c      	b.n	8003558 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e6:	d121      	bne.n	800352c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d836      	bhi.n	800355c <DMA_CheckFifoParam+0xd8>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <DMA_CheckFifoParam+0x70>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003505 	.word	0x08003505
 80034f8:	0800350b 	.word	0x0800350b
 80034fc:	08003505 	.word	0x08003505
 8003500:	0800351d 	.word	0x0800351d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
      break;
 8003508:	e02f      	b.n	800356a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d024      	beq.n	8003560 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351a:	e021      	b.n	8003560 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003524:	d11e      	bne.n	8003564 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800352a:	e01b      	b.n	8003564 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d902      	bls.n	8003538 <DMA_CheckFifoParam+0xb4>
 8003532:	2b03      	cmp	r3, #3
 8003534:	d003      	beq.n	800353e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003536:	e018      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	73fb      	strb	r3, [r7, #15]
      break;
 800353c:	e015      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	73fb      	strb	r3, [r7, #15]
      break;
 800354e:	e00b      	b.n	8003568 <DMA_CheckFifoParam+0xe4>
      break;
 8003550:	bf00      	nop
 8003552:	e00a      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 8003554:	bf00      	nop
 8003556:	e008      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 8003558:	bf00      	nop
 800355a:	e006      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 800355c:	bf00      	nop
 800355e:	e004      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 8003560:	bf00      	nop
 8003562:	e002      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;   
 8003564:	bf00      	nop
 8003566:	e000      	b.n	800356a <DMA_CheckFifoParam+0xe6>
      break;
 8003568:	bf00      	nop
    }
  } 
  
  return status; 
 800356a:	7bfb      	ldrb	r3, [r7, #15]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e03b      	b.n	8003602 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 f886 	bl	80076b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6852      	ldr	r2, [r2, #4]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035cc:	f022 0107 	bic.w	r1, r2, #7
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6892      	ldr	r2, [r2, #8]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80035e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	68c9      	ldr	r1, [r1, #12]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af02      	add	r7, sp, #8
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_DMA2D_Start+0x1c>
 8003622:	2302      	movs	r3, #2
 8003624:	e018      	b.n	8003658 <HAL_DMA2D_Start+0x4e>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa97 	bl	8003b74 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d056      	beq.n	800372a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800367c:	f7ff fc92 	bl	8002fa4 <HAL_GetTick>
 8003680:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003682:	e04b      	b.n	800371c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003692:	2b00      	cmp	r3, #0
 8003694:	d023      	beq.n	80036de <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d005      	beq.n	80036ac <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f043 0202 	orr.w	r2, r3, #2
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ba:	f043 0201 	orr.w	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2221      	movs	r2, #33	; 0x21
 80036c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2204      	movs	r2, #4
 80036ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e0a5      	b.n	800382a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e4:	d01a      	beq.n	800371c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80036e6:	f7ff fc5d 	bl	8002fa4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d802      	bhi.n	80036fc <HAL_DMA2D_PollForTransfer+0x9c>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10f      	bne.n	800371c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2203      	movs	r2, #3
 800370c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e086      	b.n	800382a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0ac      	beq.n	8003684 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d061      	beq.n	8003810 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800374c:	f7ff fc2a 	bl	8002fa4 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003752:	e056      	b.n	8003802 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003762:	2b00      	cmp	r3, #0
 8003764:	d02e      	beq.n	80037c4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0308 	and.w	r3, r3, #8
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003774:	f043 0204 	orr.w	r2, r3, #4
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d005      	beq.n	8003792 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a0:	f043 0201 	orr.w	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2229      	movs	r2, #41	; 0x29
 80037ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2204      	movs	r2, #4
 80037b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e032      	b.n	800382a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ca:	d01a      	beq.n	8003802 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80037cc:	f7ff fbea 	bl	8002fa4 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d802      	bhi.n	80037e2 <HAL_DMA2D_PollForTransfer+0x182>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2203      	movs	r2, #3
 80037f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e013      	b.n	800382a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0a1      	beq.n	8003754 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2212      	movs	r2, #18
 8003816:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d026      	beq.n	80038a2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d021      	beq.n	80038a2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6812      	ldr	r2, [r2, #0]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2204      	movs	r2, #4
 8003886:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d026      	beq.n	80038fa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d021      	beq.n	80038fa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038c4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2220      	movs	r2, #32
 80038cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	f043 0202 	orr.w	r2, r3, #2
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2204      	movs	r2, #4
 80038de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	695b      	ldr	r3, [r3, #20]
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d026      	beq.n	8003952 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390a:	2b00      	cmp	r3, #0
 800390c:	d021      	beq.n	8003952 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800391c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2208      	movs	r2, #8
 8003924:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392a:	f043 0204 	orr.w	r2, r3, #4
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00e      	beq.n	8003984 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2204      	movs	r2, #4
 800397c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f853 	bl	8003a2a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d024      	beq.n	80039d8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01f      	beq.n	80039d8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039a6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2202      	movs	r2, #2
 80039ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d01f      	beq.n	8003a22 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01a      	beq.n	8003a22 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039fa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f80e 	bl	8003a3e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA2D_ConfigLayer+0x20>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e077      	b.n	8003b64 <HAL_DMA2D_ConfigLayer+0x110>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	3318      	adds	r3, #24
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <HAL_DMA2D_ConfigLayer+0x11c>)
 8003aa0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b0a      	cmp	r3, #10
 8003aa8:	d003      	beq.n	8003ab2 <HAL_DMA2D_ConfigLayer+0x5e>
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b09      	cmp	r3, #9
 8003ab0:	d107      	bne.n	8003ac2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e005      	b.n	8003ace <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	061b      	lsls	r3, r3, #24
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d11f      	bne.n	8003b14 <HAL_DMA2D_ConfigLayer+0xc0>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	43d2      	mvns	r2, r2
 8003ae2:	4011      	ands	r1, r2
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	6812      	ldr	r2, [r2, #0]
 8003af2:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b0a      	cmp	r3, #10
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA2D_ConfigLayer+0xb0>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d126      	bne.n	8003b52 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68d2      	ldr	r2, [r2, #12]
 8003b0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
 8003b12:	e01e      	b.n	8003b52 <HAL_DMA2D_ConfigLayer+0xfe>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	69d1      	ldr	r1, [r2, #28]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	43d2      	mvns	r2, r2
 8003b22:	4011      	ands	r1, r2
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b0a      	cmp	r3, #10
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA2D_ConfigLayer+0xf0>
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d106      	bne.n	8003b52 <HAL_DMA2D_ConfigLayer+0xfe>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68d2      	ldr	r2, [r2, #12]
 8003b4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b50:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	ff03000f 	.word	0xff03000f

08003b74 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b08b      	sub	sp, #44	; 0x2c
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b8c:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	0410      	lsls	r0, r2, #16
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	4302      	orrs	r2, r0
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bac:	d174      	bne.n	8003c98 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bb4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bbc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bc4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d108      	bne.n	8003be6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	e053      	b.n	8003c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d106      	bne.n	8003bfc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bfa:	e048      	b.n	8003c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d111      	bne.n	8003c28 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	0cdb      	lsrs	r3, r3, #19
 8003c08:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	0a9b      	lsrs	r3, r3, #10
 8003c0e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	02db      	lsls	r3, r3, #11
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	e032      	b.n	8003c8e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d117      	bne.n	8003c60 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	0fdb      	lsrs	r3, r3, #31
 8003c34:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	0cdb      	lsrs	r3, r3, #19
 8003c3a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	0adb      	lsrs	r3, r3, #11
 8003c40:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	029b      	lsls	r3, r3, #10
 8003c50:	431a      	orrs	r2, r3
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	03db      	lsls	r3, r3, #15
 8003c56:	431a      	orrs	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5e:	e016      	b.n	8003c8e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	0f1b      	lsrs	r3, r3, #28
 8003c64:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	0d1b      	lsrs	r3, r3, #20
 8003c6a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	0b1b      	lsrs	r3, r3, #12
 8003c70:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	011a      	lsls	r2, r3, #4
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	431a      	orrs	r2, r3
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	431a      	orrs	r2, r3
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003c96:	e003      	b.n	8003ca0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	60da      	str	r2, [r3, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	372c      	adds	r7, #44	; 0x2c
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	e177      	b.n	8003fb8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc8:	2201      	movs	r2, #1
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	f040 8166 	bne.w	8003fb2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x4a>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b12      	cmp	r3, #18
 8003cf4:	d123      	bne.n	8003d3e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00b      	beq.n	8003d92 <HAL_GPIO_Init+0xe6>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d007      	beq.n	8003d92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d86:	2b11      	cmp	r3, #17
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b12      	cmp	r3, #18
 8003d90:	d130      	bne.n	8003df4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	091b      	lsrs	r3, r3, #4
 8003dde:	f003 0201 	and.w	r2, r3, #1
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80c0 	beq.w	8003fb2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	4a65      	ldr	r2, [pc, #404]	; (8003fcc <HAL_GPIO_Init+0x320>)
 8003e38:	4b64      	ldr	r3, [pc, #400]	; (8003fcc <HAL_GPIO_Init+0x320>)
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e40:	6453      	str	r3, [r2, #68]	; 0x44
 8003e42:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_GPIO_Init+0x320>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e4e:	4a60      	ldr	r2, [pc, #384]	; (8003fd0 <HAL_GPIO_Init+0x324>)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a57      	ldr	r2, [pc, #348]	; (8003fd4 <HAL_GPIO_Init+0x328>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d037      	beq.n	8003eea <HAL_GPIO_Init+0x23e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a56      	ldr	r2, [pc, #344]	; (8003fd8 <HAL_GPIO_Init+0x32c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d031      	beq.n	8003ee6 <HAL_GPIO_Init+0x23a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a55      	ldr	r2, [pc, #340]	; (8003fdc <HAL_GPIO_Init+0x330>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02b      	beq.n	8003ee2 <HAL_GPIO_Init+0x236>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a54      	ldr	r2, [pc, #336]	; (8003fe0 <HAL_GPIO_Init+0x334>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d025      	beq.n	8003ede <HAL_GPIO_Init+0x232>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a53      	ldr	r2, [pc, #332]	; (8003fe4 <HAL_GPIO_Init+0x338>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01f      	beq.n	8003eda <HAL_GPIO_Init+0x22e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_GPIO_Init+0x33c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d019      	beq.n	8003ed6 <HAL_GPIO_Init+0x22a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a51      	ldr	r2, [pc, #324]	; (8003fec <HAL_GPIO_Init+0x340>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d013      	beq.n	8003ed2 <HAL_GPIO_Init+0x226>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <HAL_GPIO_Init+0x344>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d00d      	beq.n	8003ece <HAL_GPIO_Init+0x222>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4f      	ldr	r2, [pc, #316]	; (8003ff4 <HAL_GPIO_Init+0x348>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d007      	beq.n	8003eca <HAL_GPIO_Init+0x21e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4e      	ldr	r2, [pc, #312]	; (8003ff8 <HAL_GPIO_Init+0x34c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_GPIO_Init+0x21a>
 8003ec2:	2309      	movs	r3, #9
 8003ec4:	e012      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ec6:	230a      	movs	r3, #10
 8003ec8:	e010      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	e00e      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ece:	2307      	movs	r3, #7
 8003ed0:	e00c      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e00a      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	e008      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eda:	2304      	movs	r3, #4
 8003edc:	e006      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e004      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e002      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_GPIO_Init+0x240>
 8003eea:	2300      	movs	r3, #0
 8003eec:	69fa      	ldr	r2, [r7, #28]
 8003eee:	f002 0203 	and.w	r2, r2, #3
 8003ef2:	0092      	lsls	r2, r2, #2
 8003ef4:	4093      	lsls	r3, r2
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003efc:	4934      	ldr	r1, [pc, #208]	; (8003fd0 <HAL_GPIO_Init+0x324>)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3302      	adds	r3, #2
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	43db      	mvns	r3, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4013      	ands	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f2e:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f34:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f58:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5e:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f88:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_GPIO_Init+0x350>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	2b0f      	cmp	r3, #15
 8003fbc:	f67f ae84 	bls.w	8003cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fc0:	bf00      	nop
 8003fc2:	3724      	adds	r7, #36	; 0x24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40013800 	.word	0x40013800
 8003fd4:	40020000 	.word	0x40020000
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40021400 	.word	0x40021400
 8003fec:	40021800 	.word	0x40021800
 8003ff0:	40021c00 	.word	0x40021c00
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40022400 	.word	0x40022400
 8003ffc:	40013c00 	.word	0x40013c00

08004000 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	e0da      	b.n	80041d2 <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800401c:	2201      	movs	r2, #1
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	f040 80ca 	bne.w	80041cc <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004038:	4a6b      	ldr	r2, [pc, #428]	; (80041e8 <HAL_GPIO_DeInit+0x1e8>)
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004044:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a63      	ldr	r2, [pc, #396]	; (80041ec <HAL_GPIO_DeInit+0x1ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d037      	beq.n	80040d2 <HAL_GPIO_DeInit+0xd2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a62      	ldr	r2, [pc, #392]	; (80041f0 <HAL_GPIO_DeInit+0x1f0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_GPIO_DeInit+0xce>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a61      	ldr	r2, [pc, #388]	; (80041f4 <HAL_GPIO_DeInit+0x1f4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <HAL_GPIO_DeInit+0xca>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a60      	ldr	r2, [pc, #384]	; (80041f8 <HAL_GPIO_DeInit+0x1f8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d025      	beq.n	80040c6 <HAL_GPIO_DeInit+0xc6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a5f      	ldr	r2, [pc, #380]	; (80041fc <HAL_GPIO_DeInit+0x1fc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <HAL_GPIO_DeInit+0xc2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a5e      	ldr	r2, [pc, #376]	; (8004200 <HAL_GPIO_DeInit+0x200>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_DeInit+0xbe>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a5d      	ldr	r2, [pc, #372]	; (8004204 <HAL_GPIO_DeInit+0x204>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_DeInit+0xba>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a5c      	ldr	r2, [pc, #368]	; (8004208 <HAL_GPIO_DeInit+0x208>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_DeInit+0xb6>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a5b      	ldr	r2, [pc, #364]	; (800420c <HAL_GPIO_DeInit+0x20c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_DeInit+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a5a      	ldr	r2, [pc, #360]	; (8004210 <HAL_GPIO_DeInit+0x210>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_DeInit+0xae>
 80040aa:	2309      	movs	r3, #9
 80040ac:	e012      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040ae:	230a      	movs	r3, #10
 80040b0:	e010      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040b2:	2308      	movs	r3, #8
 80040b4:	e00e      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e00c      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00a      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040be:	2305      	movs	r3, #5
 80040c0:	e008      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e006      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e004      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_GPIO_DeInit+0xd4>
 80040d2:	2300      	movs	r3, #0
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	f002 0203 	and.w	r2, r2, #3
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	fa03 f202 	lsl.w	r2, r3, r2
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d132      	bne.n	800414c <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	220f      	movs	r2, #15
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80040f6:	483c      	ldr	r0, [pc, #240]	; (80041e8 <HAL_GPIO_DeInit+0x1e8>)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	089b      	lsrs	r3, r3, #2
 80040fc:	493a      	ldr	r1, [pc, #232]	; (80041e8 <HAL_GPIO_DeInit+0x1e8>)
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	0892      	lsrs	r2, r2, #2
 8004102:	3202      	adds	r2, #2
 8004104:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	43d2      	mvns	r2, r2
 800410c:	400a      	ands	r2, r1
 800410e:	3302      	adds	r3, #2
 8004110:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004114:	493f      	ldr	r1, [pc, #252]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004116:	4b3f      	ldr	r3, [pc, #252]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43db      	mvns	r3, r3
 800411e:	4013      	ands	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004122:	493c      	ldr	r1, [pc, #240]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004124:	4b3b      	ldr	r3, [pc, #236]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	4013      	ands	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004130:	4938      	ldr	r1, [pc, #224]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004132:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	43db      	mvns	r3, r3
 800413a:	4013      	ands	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800413e:	4935      	ldr	r1, [pc, #212]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004140:	4b34      	ldr	r3, [pc, #208]	; (8004214 <HAL_GPIO_DeInit+0x214>)
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43db      	mvns	r3, r3
 8004148:	4013      	ands	r3, r2
 800414a:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	2103      	movs	r1, #3
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	43db      	mvns	r3, r3
 800415c:	401a      	ands	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	08d9      	lsrs	r1, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3108      	adds	r1, #8
 800416e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	200f      	movs	r0, #15
 800417c:	fa00 f303 	lsl.w	r3, r0, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	4019      	ands	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3208      	adds	r2, #8
 8004188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	2103      	movs	r1, #3
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	401a      	ands	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	2101      	movs	r1, #1
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	401a      	ands	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2103      	movs	r1, #3
 80041c0:	fa01 f303 	lsl.w	r3, r1, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3301      	adds	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	f67f af21 	bls.w	800401c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40013800 	.word	0x40013800
 80041ec:	40020000 	.word	0x40020000
 80041f0:	40020400 	.word	0x40020400
 80041f4:	40020800 	.word	0x40020800
 80041f8:	40020c00 	.word	0x40020c00
 80041fc:	40021000 	.word	0x40021000
 8004200:	40021400 	.word	0x40021400
 8004204:	40021800 	.word	0x40021800
 8004208:	40021c00 	.word	0x40021c00
 800420c:	40022000 	.word	0x40022000
 8004210:	40022400 	.word	0x40022400
 8004214:	40013c00 	.word	0x40013c00

08004218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	4013      	ands	r3, r2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004230:	2301      	movs	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e001      	b.n	800423a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800423a:	7bfb      	ldrb	r3, [r7, #15]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
 8004254:	4613      	mov	r3, r2
 8004256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004258:	787b      	ldrb	r3, [r7, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004264:	e003      	b.n	800426e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e10f      	b.n	80044ae <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f003 fc6e 	bl	8007b84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2224      	movs	r2, #36	; 0x24
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	6812      	ldr	r2, [r2, #0]
 80042ba:	f022 0201 	bic.w	r2, r2, #1
 80042be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c0:	f001 f974 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80042c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a7b      	ldr	r2, [pc, #492]	; (80044b8 <HAL_I2C_Init+0x23c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d807      	bhi.n	80042e0 <HAL_I2C_Init+0x64>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4a7a      	ldr	r2, [pc, #488]	; (80044bc <HAL_I2C_Init+0x240>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bf94      	ite	ls
 80042d8:	2301      	movls	r3, #1
 80042da:	2300      	movhi	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	e006      	b.n	80042ee <HAL_I2C_Init+0x72>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a77      	ldr	r2, [pc, #476]	; (80044c0 <HAL_I2C_Init+0x244>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf94      	ite	ls
 80042e8:	2301      	movls	r3, #1
 80042ea:	2300      	movhi	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e0db      	b.n	80044ae <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <HAL_I2C_Init+0x248>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	6812      	ldr	r2, [r2, #0]
 800430a:	6852      	ldr	r2, [r2, #4]
 800430c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4863      	ldr	r0, [pc, #396]	; (80044b8 <HAL_I2C_Init+0x23c>)
 800432a:	4283      	cmp	r3, r0
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xb8>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xcc>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800433a:	fb00 f303 	mul.w	r3, r0, r3
 800433e:	4862      	ldr	r0, [pc, #392]	; (80044c8 <HAL_I2C_Init+0x24c>)
 8004340:	fba0 0303 	umull	r0, r3, r0, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	430b      	orrs	r3, r1
 800434a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4955      	ldr	r1, [pc, #340]	; (80044b8 <HAL_I2C_Init+0x23c>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d80d      	bhi.n	8004384 <HAL_I2C_Init+0x108>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	2b04      	cmp	r3, #4
 800437e:	bf38      	it	cc
 8004380:	2304      	movcc	r3, #4
 8004382:	e04f      	b.n	8004424 <HAL_I2C_Init+0x1a8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d111      	bne.n	80043b0 <HAL_I2C_Init+0x134>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e5c      	subs	r4, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	440b      	add	r3, r1
 800439a:	fbb4 f3f3 	udiv	r3, r4, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e012      	b.n	80043d6 <HAL_I2C_Init+0x15a>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e5c      	subs	r4, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Init+0x162>
 80043da:	2301      	movs	r3, #1
 80043dc:	e022      	b.n	8004424 <HAL_I2C_Init+0x1a8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <HAL_I2C_Init+0x188>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e5c      	subs	r4, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	440b      	add	r3, r1
 80043f4:	fbb4 f3f3 	udiv	r3, r4, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Init+0x1a8>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e5c      	subs	r4, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb4 f3f3 	udiv	r3, r4, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	4313      	orrs	r3, r2
 8004426:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6812      	ldr	r2, [r2, #0]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	69d0      	ldr	r0, [r2, #28]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6a12      	ldr	r2, [r2, #32]
 800443e:	4302      	orrs	r2, r0
 8004440:	430a      	orrs	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	6908      	ldr	r0, [r1, #16]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	68c9      	ldr	r1, [r1, #12]
 800445e:	4301      	orrs	r1, r0
 8004460:	430b      	orrs	r3, r1
 8004462:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6950      	ldr	r0, [r2, #20]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6992      	ldr	r2, [r2, #24]
 800447a:	4302      	orrs	r2, r0
 800447c:	430a      	orrs	r2, r1
 800447e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	f042 0201 	orr.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	bf00      	nop
 80044b8:	000186a0 	.word	0x000186a0
 80044bc:	001e847f 	.word	0x001e847f
 80044c0:	003d08ff 	.word	0x003d08ff
 80044c4:	431bde83 	.word	0x431bde83
 80044c8:	10624dd3 	.word	0x10624dd3

080044cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d129      	bne.n	8004536 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2224      	movs	r2, #36	; 0x24
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004504:	f022 0210 	bic.w	r2, r2, #16
 8004508:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004532:	2300      	movs	r3, #0
 8004534:	e000      	b.n	8004538 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004536:	2302      	movs	r3, #2
  }
}
 8004538:	4618      	mov	r0, r3
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d12a      	bne.n	80045b4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2224      	movs	r2, #36	; 0x24
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	f022 0201 	bic.w	r2, r2, #1
 8004574:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800457e:	89fb      	ldrh	r3, [r7, #14]
 8004580:	f023 030f 	bic.w	r3, r3, #15
 8004584:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b29a      	uxth	r2, r3
 800458a:	89fb      	ldrh	r3, [r7, #14]
 800458c:	4313      	orrs	r3, r2
 800458e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	89fa      	ldrh	r2, [r7, #14]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
	...

080045c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0bf      	b.n	8004756 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f003 fbb4 	bl	8007d58 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	6992      	ldr	r2, [r2, #24]
 8004602:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004606:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	6991      	ldr	r1, [r2, #24]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6850      	ldr	r0, [r2, #4]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004620:	4310      	orrs	r0, r2
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6912      	ldr	r2, [r2, #16]
 8004626:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004628:	430a      	orrs	r2, r1
 800462a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6899      	ldr	r1, [r3, #8]
 8004636:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004638:	400b      	ands	r3, r1
 800463a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	6891      	ldr	r1, [r2, #8]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6990      	ldr	r0, [r2, #24]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4302      	orrs	r2, r0
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68d9      	ldr	r1, [r3, #12]
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004666:	400b      	ands	r3, r1
 8004668:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	68d1      	ldr	r1, [r2, #12]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6a10      	ldr	r0, [r2, #32]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4302      	orrs	r2, r0
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6919      	ldr	r1, [r3, #16]
 8004692:	4b33      	ldr	r3, [pc, #204]	; (8004760 <HAL_LTDC_Init+0x19c>)
 8004694:	400b      	ands	r3, r1
 8004696:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	6911      	ldr	r1, [r2, #16]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4302      	orrs	r2, r0
 80046b2:	430a      	orrs	r2, r1
 80046b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6959      	ldr	r1, [r3, #20]
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_LTDC_Init+0x19c>)
 80046c2:	400b      	ands	r3, r1
 80046c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6951      	ldr	r1, [r2, #20]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	4302      	orrs	r2, r0
 80046e0:	430a      	orrs	r2, r1
 80046e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6812      	ldr	r2, [r2, #0]
 8004700:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004702:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004712:	68b8      	ldr	r0, [r7, #8]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4302      	orrs	r2, r0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800471e:	4302      	orrs	r2, r0
 8004720:	430a      	orrs	r2, r1
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800472e:	f042 0206 	orr.w	r2, r2, #6
 8004732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	6992      	ldr	r2, [r2, #24]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	f000f800 	.word	0xf000f800

08004764 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004772:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d023      	beq.n	80047ce <HAL_LTDC_IRQHandler+0x6a>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01e      	beq.n	80047ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800479a:	f022 0204 	bic.w	r2, r2, #4
 800479e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2204      	movs	r2, #4
 80047a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f86f 	bl	80048ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d023      	beq.n	8004820 <HAL_LTDC_IRQHandler+0xbc>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d01e      	beq.n	8004820 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047ec:	f022 0202 	bic.w	r2, r2, #2
 80047f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2202      	movs	r2, #2
 80047f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004800:	f043 0202 	orr.w	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2204      	movs	r2, #4
 800480e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f846 	bl	80048ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01b      	beq.n	8004862 <HAL_LTDC_IRQHandler+0xfe>
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d016      	beq.n	8004862 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800483e:	f022 0201 	bic.w	r2, r2, #1
 8004842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2201      	movs	r2, #1
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f82f 	bl	80048c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_LTDC_IRQHandler+0x140>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d016      	beq.n	80048a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004880:	f022 0208 	bic.w	r2, r2, #8
 8004884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2208      	movs	r2, #8
 800488c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f818 	bl	80048d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_LTDC_ConfigLayer+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e02c      	b.n	800495c <HAL_LTDC_ConfigLayer+0x74>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2134      	movs	r1, #52	; 0x34
 8004918:	fb01 f303 	mul.w	r3, r1, r3
 800491c:	4413      	add	r3, r2
 800491e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4614      	mov	r4, r2
 8004926:	461d      	mov	r5, r3
 8004928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800492c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800492e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004934:	682b      	ldr	r3, [r5, #0]
 8004936:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 f83b 	bl	80049b8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2201      	movs	r2, #1
 8004948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bdb0      	pop	{r4, r5, r7, pc}

08004964 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_LTDC_EnableDither+0x16>
 8004976:	2302      	movs	r3, #2
 8004978:	e016      	b.n	80049a8 <HAL_LTDC_EnableDither+0x44>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <HAL_LTDC_EnableDither+0x50>)
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_LTDC_EnableDither+0x50>)
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004994:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	40016800 	.word	0x40016800

080049b8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b089      	sub	sp, #36	; 0x24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d4:	4413      	add	r3, r2
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	01db      	lsls	r3, r3, #7
 80049e4:	4413      	add	r3, r2
 80049e6:	3384      	adds	r3, #132	; 0x84
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	01db      	lsls	r3, r3, #7
 80049f4:	440b      	add	r3, r1
 80049f6:	3384      	adds	r3, #132	; 0x84
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80049fe:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	01db      	lsls	r3, r3, #7
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3384      	adds	r3, #132	; 0x84
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	4413      	add	r3, r2
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a38:	4413      	add	r3, r2
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	01db      	lsls	r3, r3, #7
 8004a48:	4413      	add	r3, r2
 8004a4a:	3384      	adds	r3, #132	; 0x84
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	01db      	lsls	r3, r3, #7
 8004a58:	440b      	add	r3, r1
 8004a5a:	3384      	adds	r3, #132	; 0x84
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004a62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	01db      	lsls	r3, r3, #7
 8004a6e:	4413      	add	r3, r2
 8004a70:	3384      	adds	r3, #132	; 0x84
 8004a72:	4619      	mov	r1, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a82:	4413      	add	r3, r2
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	01db      	lsls	r3, r3, #7
 8004a96:	4413      	add	r3, r2
 8004a98:	3384      	adds	r3, #132	; 0x84
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	01db      	lsls	r3, r3, #7
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3384      	adds	r3, #132	; 0x84
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	4413      	add	r3, r2
 8004abe:	3384      	adds	r3, #132	; 0x84
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	061b      	lsls	r3, r3, #24
 8004ae2:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	01db      	lsls	r3, r3, #7
 8004aee:	4413      	add	r3, r2
 8004af0:	3384      	adds	r3, #132	; 0x84
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	01db      	lsls	r3, r3, #7
 8004afe:	4413      	add	r3, r2
 8004b00:	3384      	adds	r3, #132	; 0x84
 8004b02:	461a      	mov	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	01db      	lsls	r3, r3, #7
 8004b12:	4413      	add	r3, r2
 8004b14:	3384      	adds	r3, #132	; 0x84
 8004b16:	4619      	mov	r1, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	4413      	add	r3, r2
 8004b3a:	3384      	adds	r3, #132	; 0x84
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4619      	mov	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	01db      	lsls	r3, r3, #7
 8004b48:	440b      	add	r3, r1
 8004b4a:	3384      	adds	r3, #132	; 0x84
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	01db      	lsls	r3, r3, #7
 8004b5e:	4413      	add	r3, r2
 8004b60:	3384      	adds	r3, #132	; 0x84
 8004b62:	461a      	mov	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	01db      	lsls	r3, r3, #7
 8004b74:	4413      	add	r3, r2
 8004b76:	3384      	adds	r3, #132	; 0x84
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	01db      	lsls	r3, r3, #7
 8004b84:	440b      	add	r3, r1
 8004b86:	3384      	adds	r3, #132	; 0x84
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b8e:	f023 0307 	bic.w	r3, r3, #7
 8004b92:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	01db      	lsls	r3, r3, #7
 8004b9e:	4413      	add	r3, r2
 8004ba0:	3384      	adds	r3, #132	; 0x84
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	; 0x84
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	; 0x84
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	01db      	lsls	r3, r3, #7
 8004bde:	4413      	add	r3, r2
 8004be0:	3384      	adds	r3, #132	; 0x84
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e01b      	b.n	8004c30 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004c00:	2303      	movs	r3, #3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e014      	b.n	8004c30 <LTDC_SetConfig+0x278>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00b      	beq.n	8004c26 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d007      	beq.n	8004c26 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d003      	beq.n	8004c26 <LTDC_SetConfig+0x26e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	d102      	bne.n	8004c2c <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8004c26:	2302      	movs	r3, #2
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e001      	b.n	8004c30 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	; 0x84
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4619      	mov	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	01db      	lsls	r3, r3, #7
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3384      	adds	r3, #132	; 0x84
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004c54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	01db      	lsls	r3, r3, #7
 8004c60:	4413      	add	r3, r2
 8004c62:	3384      	adds	r3, #132	; 0x84
 8004c64:	4618      	mov	r0, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	041a      	lsls	r2, r3, #16
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6859      	ldr	r1, [r3, #4]
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1acb      	subs	r3, r1, r3
 8004c7c:	69f9      	ldr	r1, [r7, #28]
 8004c7e:	fb01 f303 	mul.w	r3, r1, r3
 8004c82:	3303      	adds	r3, #3
 8004c84:	4313      	orrs	r3, r2
 8004c86:	62c3      	str	r3, [r0, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	01db      	lsls	r3, r3, #7
 8004c92:	4413      	add	r3, r2
 8004c94:	3384      	adds	r3, #132	; 0x84
 8004c96:	461a      	mov	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3384      	adds	r3, #132	; 0x84
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cac:	f023 0307 	bic.w	r3, r3, #7
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	01db      	lsls	r3, r3, #7
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3384      	adds	r3, #132	; 0x84
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	01db      	lsls	r3, r3, #7
 8004cd2:	4413      	add	r3, r2
 8004cd4:	3384      	adds	r3, #132	; 0x84
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	01db      	lsls	r3, r3, #7
 8004ce2:	440b      	add	r3, r1
 8004ce4:	3384      	adds	r3, #132	; 0x84
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	3724      	adds	r7, #36	; 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
	...

08004cfc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6413      	str	r3, [r2, #64]	; 0x40
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_PWREx_EnableOverDrive+0x90>)
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_PWREx_EnableOverDrive+0x94>)
 8004d24:	2201      	movs	r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d28:	f7fe f93c 	bl	8002fa4 <HAL_GetTick>
 8004d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d2e:	e009      	b.n	8004d44 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d30:	f7fe f938 	bl	8002fa4 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3e:	d901      	bls.n	8004d44 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e01f      	b.n	8004d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d44:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d50:	d1ee      	bne.n	8004d30 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7fe f924 	bl	8002fa4 <HAL_GetTick>
 8004d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d5e:	e009      	b.n	8004d74 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d60:	f7fe f920 	bl	8002fa4 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6e:	d901      	bls.n	8004d74 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e007      	b.n	8004d84 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d80:	d1ee      	bne.n	8004d60 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	420e0040 	.word	0x420e0040
 8004d94:	40007000 	.word	0x40007000
 8004d98:	420e0044 	.word	0x420e0044

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e22d      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d075      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dba:	4ba3      	ldr	r3, [pc, #652]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d00c      	beq.n	8004de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dc6:	4ba0      	ldr	r3, [pc, #640]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d112      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd2:	4b9d      	ldr	r3, [pc, #628]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de0:	4b99      	ldr	r3, [pc, #612]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d05b      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x108>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d157      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e208      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d106      	bne.n	8004e10 <HAL_RCC_OscConfig+0x74>
 8004e02:	4a91      	ldr	r2, [pc, #580]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	4b90      	ldr	r3, [pc, #576]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e01d      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e18:	d10c      	bne.n	8004e34 <HAL_RCC_OscConfig+0x98>
 8004e1a:	4a8b      	ldr	r2, [pc, #556]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	4b8a      	ldr	r3, [pc, #552]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4a88      	ldr	r2, [pc, #544]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e28:	4b87      	ldr	r3, [pc, #540]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e30:	6013      	str	r3, [r2, #0]
 8004e32:	e00b      	b.n	8004e4c <HAL_RCC_OscConfig+0xb0>
 8004e34:	4a84      	ldr	r2, [pc, #528]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e36:	4b84      	ldr	r3, [pc, #528]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	4a81      	ldr	r2, [pc, #516]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e42:	4b81      	ldr	r3, [pc, #516]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fe f8a6 	bl	8002fa4 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e5c:	f7fe f8a2 	bl	8002fa4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b64      	cmp	r3, #100	; 0x64
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e1cd      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6e:	4b76      	ldr	r3, [pc, #472]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0xc0>
 8004e7a:	e014      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fe f892 	bl	8002fa4 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fe f88e 	bl	8002fa4 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	; 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e1b9      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e96:	4b6c      	ldr	r3, [pc, #432]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0xe8>
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d063      	beq.n	8004f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004eb2:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00b      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ebe:	4b62      	ldr	r3, [pc, #392]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d11c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eca:	4b5f      	ldr	r3, [pc, #380]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d116      	bne.n	8004f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ed6:	4b5c      	ldr	r3, [pc, #368]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d005      	beq.n	8004eee <HAL_RCC_OscConfig+0x152>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d001      	beq.n	8004eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e18d      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eee:	4956      	ldr	r1, [pc, #344]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ef0:	4b55      	ldr	r3, [pc, #340]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	00db      	lsls	r3, r3, #3
 8004efe:	4313      	orrs	r3, r2
 8004f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f02:	e03a      	b.n	8004f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d020      	beq.n	8004f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f0c:	4b4f      	ldr	r3, [pc, #316]	; (800504c <HAL_RCC_OscConfig+0x2b0>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f12:	f7fe f847 	bl	8002fa4 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f1a:	f7fe f843 	bl	8002fa4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e16e      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f2c:	4b46      	ldr	r3, [pc, #280]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f38:	4943      	ldr	r1, [pc, #268]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004f3a:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	600b      	str	r3, [r1, #0]
 8004f4c:	e015      	b.n	8004f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f4e:	4b3f      	ldr	r3, [pc, #252]	; (800504c <HAL_RCC_OscConfig+0x2b0>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fe f826 	bl	8002fa4 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f5c:	f7fe f822 	bl	8002fa4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e14d      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6e:	4b36      	ldr	r3, [pc, #216]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0308 	and.w	r3, r3, #8
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d030      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f8e:	4b30      	ldr	r3, [pc, #192]	; (8005050 <HAL_RCC_OscConfig+0x2b4>)
 8004f90:	2201      	movs	r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f94:	f7fe f806 	bl	8002fa4 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f9c:	f7fe f802 	bl	8002fa4 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e12d      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0f0      	beq.n	8004f9c <HAL_RCC_OscConfig+0x200>
 8004fba:	e015      	b.n	8004fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fbc:	4b24      	ldr	r3, [pc, #144]	; (8005050 <HAL_RCC_OscConfig+0x2b4>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc2:	f7fd ffef 	bl	8002fa4 <HAL_GetTick>
 8004fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fca:	f7fd ffeb 	bl	8002fa4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e116      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a0 	beq.w	8005136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ffa:	4b13      	ldr	r3, [pc, #76]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005014:	6413      	str	r3, [r2, #64]	; 0x40
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005026:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x2b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d121      	bne.n	8005076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005032:	4a08      	ldr	r2, [pc, #32]	; (8005054 <HAL_RCC_OscConfig+0x2b8>)
 8005034:	4b07      	ldr	r3, [pc, #28]	; (8005054 <HAL_RCC_OscConfig+0x2b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800503c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800503e:	f7fd ffb1 	bl	8002fa4 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	e011      	b.n	800506a <HAL_RCC_OscConfig+0x2ce>
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	42470000 	.word	0x42470000
 8005050:	42470e80 	.word	0x42470e80
 8005054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005058:	f7fd ffa4 	bl	8002fa4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0cf      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506a:	4b6a      	ldr	r3, [pc, #424]	; (8005214 <HAL_RCC_OscConfig+0x478>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d106      	bne.n	800508c <HAL_RCC_OscConfig+0x2f0>
 800507e:	4a66      	ldr	r2, [pc, #408]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005080:	4b65      	ldr	r3, [pc, #404]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	e01c      	b.n	80050c6 <HAL_RCC_OscConfig+0x32a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d10c      	bne.n	80050ae <HAL_RCC_OscConfig+0x312>
 8005094:	4a60      	ldr	r2, [pc, #384]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005096:	4b60      	ldr	r3, [pc, #384]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509a:	f043 0304 	orr.w	r3, r3, #4
 800509e:	6713      	str	r3, [r2, #112]	; 0x70
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050a2:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
 80050ac:	e00b      	b.n	80050c6 <HAL_RCC_OscConfig+0x32a>
 80050ae:	4a5a      	ldr	r2, [pc, #360]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050b0:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ba:	4a57      	ldr	r2, [pc, #348]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050bc:	4b56      	ldr	r3, [pc, #344]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c0:	f023 0304 	bic.w	r3, r3, #4
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d015      	beq.n	80050fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fd ff69 	bl	8002fa4 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fd ff65 	bl	8002fa4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e08e      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ee      	beq.n	80050d6 <HAL_RCC_OscConfig+0x33a>
 80050f8:	e014      	b.n	8005124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fa:	f7fd ff53 	bl	8002fa4 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd ff4f 	bl	8002fa4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e078      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005118:	4b3f      	ldr	r3, [pc, #252]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ee      	bne.n	8005102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4a3b      	ldr	r2, [pc, #236]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 800512c:	4b3a      	ldr	r3, [pc, #232]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d064      	beq.n	8005208 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800513e:	4b36      	ldr	r3, [pc, #216]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
 8005146:	2b08      	cmp	r3, #8
 8005148:	d05c      	beq.n	8005204 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d141      	bne.n	80051d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005152:	4b32      	ldr	r3, [pc, #200]	; (800521c <HAL_RCC_OscConfig+0x480>)
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fd ff24 	bl	8002fa4 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005160:	f7fd ff20 	bl	8002fa4 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e04b      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005172:	4b29      	ldr	r3, [pc, #164]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800517e:	4926      	ldr	r1, [pc, #152]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	019b      	lsls	r3, r3, #6
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	3b01      	subs	r3, #1
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	4313      	orrs	r3, r2
 80051a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051a8:	4b1c      	ldr	r3, [pc, #112]	; (800521c <HAL_RCC_OscConfig+0x480>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ae:	f7fd fef9 	bl	8002fa4 <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b6:	f7fd fef5 	bl	8002fa4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e020      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x41a>
 80051d4:	e018      	b.n	8005208 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d6:	4b11      	ldr	r3, [pc, #68]	; (800521c <HAL_RCC_OscConfig+0x480>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd fee2 	bl	8002fa4 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fede 	bl	8002fa4 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e009      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_RCC_OscConfig+0x47c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f0      	bne.n	80051e4 <HAL_RCC_OscConfig+0x448>
 8005202:	e001      	b.n	8005208 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40007000 	.word	0x40007000
 8005218:	40023800 	.word	0x40023800
 800521c:	42470060 	.word	0x42470060

08005220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0ca      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005234:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d20c      	bcs.n	800525c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b64      	ldr	r3, [pc, #400]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b62      	ldr	r3, [pc, #392]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 020f 	and.w	r2, r3, #15
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0b6      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005274:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	4b58      	ldr	r3, [pc, #352]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800527e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800528c:	4a52      	ldr	r2, [pc, #328]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 800528e:	4b52      	ldr	r3, [pc, #328]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	494f      	ldr	r1, [pc, #316]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 800529a:	4b4f      	ldr	r3, [pc, #316]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d044      	beq.n	8005340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d119      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e07d      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d003      	beq.n	80052de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052de:	4b3e      	ldr	r3, [pc, #248]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06d      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ee:	4b3a      	ldr	r3, [pc, #232]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e065      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052fe:	4936      	ldr	r1, [pc, #216]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005300:	4b35      	ldr	r3, [pc, #212]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f023 0203 	bic.w	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005310:	f7fd fe48 	bl	8002fa4 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	e00a      	b.n	800532e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005318:	f7fd fe44 	bl	8002fa4 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	; 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e04d      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 020c 	and.w	r2, r3, #12
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	429a      	cmp	r2, r3
 800533e:	d1eb      	bne.n	8005318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005340:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 020f 	and.w	r2, r3, #15
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d90c      	bls.n	8005368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b21      	ldr	r3, [pc, #132]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <HAL_RCC_ClockConfig+0x1b4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 020f 	and.w	r2, r3, #15
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e030      	b.n	80053ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005374:	4918      	ldr	r1, [pc, #96]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005392:	4911      	ldr	r1, [pc, #68]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053a6:	f000 f81d 	bl	80053e4 <HAL_RCC_GetSysClockFreq>
 80053aa:	4601      	mov	r1, r0
 80053ac:	4b0a      	ldr	r3, [pc, #40]	; (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	fa21 f303 	lsr.w	r3, r1, r3
 80053be:	4a08      	ldr	r2, [pc, #32]	; (80053e0 <HAL_RCC_ClockConfig+0x1c0>)
 80053c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f006 fa66 	bl	800b894 <HAL_InitTick>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40023c00 	.word	0x40023c00
 80053d8:	40023800 	.word	0x40023800
 80053dc:	0807fe3c 	.word	0x0807fe3c
 80053e0:	2000007c 	.word	0x2000007c

080053e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	b08f      	sub	sp, #60	; 0x3c
 80053ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f0:	2300      	movs	r3, #0
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
 80053f4:	2300      	movs	r3, #0
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053fc:	4b62      	ldr	r3, [pc, #392]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b04      	cmp	r3, #4
 8005406:	d007      	beq.n	8005418 <HAL_RCC_GetSysClockFreq+0x34>
 8005408:	2b08      	cmp	r3, #8
 800540a:	d008      	beq.n	800541e <HAL_RCC_GetSysClockFreq+0x3a>
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 80b2 	bne.w	8005576 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005412:	4b5e      	ldr	r3, [pc, #376]	; (800558c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8005416:	e0b1      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005418:	4b5d      	ldr	r3, [pc, #372]	; (8005590 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800541c:	e0ae      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800541e:	4b5a      	ldr	r3, [pc, #360]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005428:	4b57      	ldr	r3, [pc, #348]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d04e      	beq.n	80054d2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005434:	4b54      	ldr	r3, [pc, #336]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	f04f 0400 	mov.w	r4, #0
 800543e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	ea01 0103 	and.w	r1, r1, r3
 800544a:	ea02 0204 	and.w	r2, r2, r4
 800544e:	460b      	mov	r3, r1
 8005450:	4614      	mov	r4, r2
 8005452:	0160      	lsls	r0, r4, #5
 8005454:	6278      	str	r0, [r7, #36]	; 0x24
 8005456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005458:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800545c:	6278      	str	r0, [r7, #36]	; 0x24
 800545e:	015b      	lsls	r3, r3, #5
 8005460:	623b      	str	r3, [r7, #32]
 8005462:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005466:	1a5b      	subs	r3, r3, r1
 8005468:	eb64 0402 	sbc.w	r4, r4, r2
 800546c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8005470:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8005474:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8005478:	ebb8 0803 	subs.w	r8, r8, r3
 800547c:	eb69 0904 	sbc.w	r9, r9, r4
 8005480:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005484:	61fb      	str	r3, [r7, #28]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800548c:	61fb      	str	r3, [r7, #28]
 800548e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005492:	61bb      	str	r3, [r7, #24]
 8005494:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8005498:	eb18 0801 	adds.w	r8, r8, r1
 800549c:	eb49 0902 	adc.w	r9, r9, r2
 80054a0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80054b8:	4640      	mov	r0, r8
 80054ba:	4649      	mov	r1, r9
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	f04f 0400 	mov.w	r4, #0
 80054c2:	461a      	mov	r2, r3
 80054c4:	4623      	mov	r3, r4
 80054c6:	f7fb fad5 	bl	8000a74 <__aeabi_uldivmod>
 80054ca:	4603      	mov	r3, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
 80054d0:	e043      	b.n	800555a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054d2:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	099b      	lsrs	r3, r3, #6
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	ea01 0103 	and.w	r1, r1, r3
 80054e8:	ea02 0204 	and.w	r2, r2, r4
 80054ec:	460b      	mov	r3, r1
 80054ee:	4614      	mov	r4, r2
 80054f0:	0160      	lsls	r0, r4, #5
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	015b      	lsls	r3, r3, #5
 80054fe:	60bb      	str	r3, [r7, #8]
 8005500:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005504:	1a5b      	subs	r3, r3, r1
 8005506:	eb64 0402 	sbc.w	r4, r4, r2
 800550a:	01a6      	lsls	r6, r4, #6
 800550c:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8005510:	019d      	lsls	r5, r3, #6
 8005512:	1aed      	subs	r5, r5, r3
 8005514:	eb66 0604 	sbc.w	r6, r6, r4
 8005518:	00f3      	lsls	r3, r6, #3
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	00eb      	lsls	r3, r5, #3
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	e897 0060 	ldmia.w	r7, {r5, r6}
 800552c:	186d      	adds	r5, r5, r1
 800552e:	eb46 0602 	adc.w	r6, r6, r2
 8005532:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8005536:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800553a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800553e:	4655      	mov	r5, sl
 8005540:	465e      	mov	r6, fp
 8005542:	4628      	mov	r0, r5
 8005544:	4631      	mov	r1, r6
 8005546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	461a      	mov	r2, r3
 800554e:	4623      	mov	r3, r4
 8005550:	f7fb fa90 	bl	8000a74 <__aeabi_uldivmod>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	0c1b      	lsrs	r3, r3, #16
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	3301      	adds	r3, #1
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800556a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005574:	e002      	b.n	800557c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005578:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800557a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800557e:	4618      	mov	r0, r3
 8005580:	373c      	adds	r7, #60	; 0x3c
 8005582:	46bd      	mov	sp, r7
 8005584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005588:	40023800 	.word	0x40023800
 800558c:	00f42400 	.word	0x00f42400
 8005590:	007a1200 	.word	0x007a1200

08005594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800559a:	681b      	ldr	r3, [r3, #0]
}
 800559c:	4618      	mov	r0, r3
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	2000007c 	.word	0x2000007c

080055ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055b0:	f7ff fff0 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055b4:	4601      	mov	r1, r0
 80055b6:	4b05      	ldr	r3, [pc, #20]	; (80055cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0a9b      	lsrs	r3, r3, #10
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	0807fe4c 	.word	0x0807fe4c

080055d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055d8:	f7ff ffdc 	bl	8005594 <HAL_RCC_GetHCLKFreq>
 80055dc:	4601      	mov	r1, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0b5b      	lsrs	r3, r3, #13
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4a03      	ldr	r2, [pc, #12]	; (80055f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055ea:	5cd3      	ldrb	r3, [r2, r3]
 80055ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	0807fe4c 	.word	0x0807fe4c

080055fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	220f      	movs	r2, #15
 800560a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800560c:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 0203 	and.w	r2, r3, #3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005618:	4b0f      	ldr	r3, [pc, #60]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005624:	4b0c      	ldr	r3, [pc, #48]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005630:	4b09      	ldr	r3, [pc, #36]	; (8005658 <HAL_RCC_GetClockConfig+0x5c>)
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	08db      	lsrs	r3, r3, #3
 8005636:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <HAL_RCC_GetClockConfig+0x60>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 020f 	and.w	r2, r3, #15
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40023800 	.word	0x40023800
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005684:	2b00      	cmp	r3, #0
 8005686:	d061      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005688:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800568e:	f7fd fc89 	bl	8002fa4 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005694:	e008      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005696:	f7fd fc85 	bl	8002fa4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e177      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a8:	4b9c      	ldr	r3, [pc, #624]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80056c0:	4996      	ldr	r1, [pc, #600]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01f      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056e0:	4b8e      	ldr	r3, [pc, #568]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056e6:	0f1b      	lsrs	r3, r3, #28
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80056ee:	498b      	ldr	r1, [pc, #556]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	019a      	lsls	r2, r3, #6
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	061b      	lsls	r3, r3, #24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	071b      	lsls	r3, r3, #28
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005708:	4984      	ldr	r1, [pc, #528]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800570a:	4b84      	ldr	r3, [pc, #528]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800570c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005710:	f023 021f 	bic.w	r2, r3, #31
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	3b01      	subs	r3, #1
 800571a:	4313      	orrs	r3, r2
 800571c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005720:	4b7d      	ldr	r3, [pc, #500]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005722:	2201      	movs	r2, #1
 8005724:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005726:	f7fd fc3d 	bl	8002fa4 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800572e:	f7fd fc39 	bl	8002fa4 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e12b      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005740:	4b76      	ldr	r3, [pc, #472]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0f0      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005760:	2b00      	cmp	r3, #0
 8005762:	d079      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005764:	4b6e      	ldr	r3, [pc, #440]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800576a:	f7fd fc1b 	bl	8002fa4 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005770:	e008      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005772:	f7fd fc17 	bl	8002fa4 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e109      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005784:	4b65      	ldr	r3, [pc, #404]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800578c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005790:	d0ef      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d020      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800579e:	4b5f      	ldr	r3, [pc, #380]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a4:	0f1b      	lsrs	r3, r3, #28
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80057ac:	495b      	ldr	r1, [pc, #364]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	019a      	lsls	r2, r3, #6
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	431a      	orrs	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057c6:	4955      	ldr	r1, [pc, #340]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057c8:	4b54      	ldr	r3, [pc, #336]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01e      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057ec:	4b4b      	ldr	r3, [pc, #300]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	0e1b      	lsrs	r3, r3, #24
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80057fa:	4948      	ldr	r1, [pc, #288]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	019a      	lsls	r2, r3, #6
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	061b      	lsls	r3, r3, #24
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	071b      	lsls	r3, r3, #28
 800580e:	4313      	orrs	r3, r2
 8005810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005814:	4941      	ldr	r1, [pc, #260]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800581c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800582a:	4b3d      	ldr	r3, [pc, #244]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005830:	f7fd fbb8 	bl	8002fa4 <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005838:	f7fd fbb4 	bl	8002fa4 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0a6      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800584a:	4b34      	ldr	r3, [pc, #208]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005852:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005856:	d1ef      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 808d 	beq.w	8005980 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	4a2c      	ldr	r2, [pc, #176]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800586c:	4b2b      	ldr	r3, [pc, #172]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	; 0x40
 8005876:	4b29      	ldr	r3, [pc, #164]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005882:	4a28      	ldr	r2, [pc, #160]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005884:	4b27      	ldr	r3, [pc, #156]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800588e:	f7fd fb89 	bl	8002fa4 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005894:	e008      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fd fb85 	bl	8002fa4 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e077      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d039      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c8:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d032      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058dc:	4b12      	ldr	r3, [pc, #72]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80058de:	2201      	movs	r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058e2:	4b11      	ldr	r3, [pc, #68]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058ee:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11e      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fd fb53 	bl	8002fa4 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005900:	e014      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fd fb4f 	bl	8002fa4 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	4293      	cmp	r3, r2
 8005912:	d90b      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e03f      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8005918:	42470068 	.word	0x42470068
 800591c:	40023800 	.word	0x40023800
 8005920:	42470070 	.word	0x42470070
 8005924:	40007000 	.word	0x40007000
 8005928:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592c:	4b1c      	ldr	r3, [pc, #112]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0e4      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005940:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005944:	d10d      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8005946:	4916      	ldr	r1, [pc, #88]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005948:	4b15      	ldr	r3, [pc, #84]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]
 8005960:	e005      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8005962:	4a0f      	ldr	r2, [pc, #60]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	490c      	ldr	r1, [pc, #48]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005972:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	4313      	orrs	r3, r2
 800597e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0310 	and.w	r3, r3, #16
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800598c:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005994:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40023800 	.word	0x40023800
 80059a4:	424711e0 	.word	0x424711e0

080059a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e025      	b.n	8005a08 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f001 ff69 	bl	80078a8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f001 fcb7 	bl	800735c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	f001 fd22 	bl	8007442 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d101      	bne.n	8005a2c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e018      	b.n	8005a5e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68b9      	ldr	r1, [r7, #8]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fd7f 	bl	8007540 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2205      	movs	r2, #5
 8005a4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005a52:	e003      	b.n	8005a5c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d101      	bne.n	8005a80 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e00e      	b.n	8005a9e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6839      	ldr	r1, [r7, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 fd92 	bl	80075b8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e055      	b.n	8005b64 <HAL_SPI_Init+0xbe>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f005 fe50 	bl	800b778 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	6812      	ldr	r2, [r2, #0]
 8005aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6851      	ldr	r1, [r2, #4]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6892      	ldr	r2, [r2, #8]
 8005afc:	4311      	orrs	r1, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68d2      	ldr	r2, [r2, #12]
 8005b02:	4311      	orrs	r1, r2
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6912      	ldr	r2, [r2, #16]
 8005b08:	4311      	orrs	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6952      	ldr	r2, [r2, #20]
 8005b0e:	4311      	orrs	r1, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6992      	ldr	r2, [r2, #24]
 8005b14:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005b18:	4311      	orrs	r1, r2
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	69d2      	ldr	r2, [r2, #28]
 8005b1e:	4311      	orrs	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6a12      	ldr	r2, [r2, #32]
 8005b24:	4311      	orrs	r1, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6992      	ldr	r2, [r2, #24]
 8005b36:	0c12      	lsrs	r2, r2, #16
 8005b38:	f002 0104 	and.w	r1, r2, #4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b40:	430a      	orrs	r2, r1
 8005b42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	69d2      	ldr	r2, [r2, #28]
 8005b4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e01a      	b.n	8005bb4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f005 fe36 	bl	800b808 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Transmit+0x22>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e11c      	b.n	8005e18 <HAL_SPI_Transmit+0x25c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be6:	f7fd f9dd 	bl	8002fa4 <HAL_GetTick>
 8005bea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005bec:	88fb      	ldrh	r3, [r7, #6]
 8005bee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d002      	beq.n	8005c02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c00:	e101      	b.n	8005e06 <HAL_SPI_Transmit+0x24a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_SPI_Transmit+0x52>
 8005c08:	88fb      	ldrh	r3, [r7, #6]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c12:	e0f8      	b.n	8005e06 <HAL_SPI_Transmit+0x24a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2203      	movs	r2, #3
 8005c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	88fa      	ldrh	r2, [r7, #6]
 8005c2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	88fa      	ldrh	r2, [r7, #6]
 8005c32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5a:	d107      	bne.n	8005c6c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	6812      	ldr	r2, [r2, #0]
 8005c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d007      	beq.n	8005c8a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	6812      	ldr	r2, [r2, #0]
 8005c82:	6812      	ldr	r2, [r2, #0]
 8005c84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c92:	d14b      	bne.n	8005d2c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Transmit+0xe6>
 8005c9c:	8afb      	ldrh	r3, [r7, #22]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d13e      	bne.n	8005d20 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005caa:	8812      	ldrh	r2, [r2, #0]
 8005cac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	1c9a      	adds	r2, r3, #2
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cc6:	e02b      	b.n	8005d20 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d112      	bne.n	8005cfc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cde:	8812      	ldrh	r2, [r2, #0]
 8005ce0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	1c9a      	adds	r2, r3, #2
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cfa:	e011      	b.n	8005d20 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfc:	f7fd f952 	bl	8002fa4 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	1ad2      	subs	r2, r2, r3
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d303      	bcc.n	8005d14 <HAL_SPI_Transmit+0x158>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d12:	d102      	bne.n	8005d1a <HAL_SPI_Transmit+0x15e>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d102      	bne.n	8005d20 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d1e:	e072      	b.n	8005e06 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1ce      	bne.n	8005cc8 <HAL_SPI_Transmit+0x10c>
 8005d2a:	e04c      	b.n	8005dc6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_SPI_Transmit+0x17e>
 8005d34:	8afb      	ldrh	r3, [r7, #22]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d140      	bne.n	8005dbc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	330c      	adds	r3, #12
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d44:	7812      	ldrb	r2, [r2, #0]
 8005d46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d60:	e02c      	b.n	8005dbc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d113      	bne.n	8005d98 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005d7a:	7812      	ldrb	r2, [r2, #0]
 8005d7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d96:	e011      	b.n	8005dbc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d98:	f7fd f904 	bl	8002fa4 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d303      	bcc.n	8005db0 <HAL_SPI_Transmit+0x1f4>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dae:	d102      	bne.n	8005db6 <HAL_SPI_Transmit+0x1fa>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dba:	e024      	b.n	8005e06 <HAL_SPI_Transmit+0x24a>
    while (hspi->TxXferCount > 0U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1cd      	bne.n	8005d62 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	68f8      	ldr	r0, [r7, #12]
 8005dcc:	f000 fb7b 	bl	80064c6 <SPI_EndRxTxTransaction>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10a      	bne.n	8005dfa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	613b      	str	r3, [r7, #16]
 8005df8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_SPI_Transmit+0x24a>
  {
    errorcode = HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b088      	sub	sp, #32
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e3c:	d112      	bne.n	8005e64 <HAL_SPI_Receive+0x44>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10e      	bne.n	8005e64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 f8e6 	bl	800602c <HAL_SPI_TransmitReceive>
 8005e60:	4603      	mov	r3, r0
 8005e62:	e0df      	b.n	8006024 <HAL_SPI_Receive+0x204>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_SPI_Receive+0x52>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0d8      	b.n	8006024 <HAL_SPI_Receive+0x204>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7a:	f7fd f893 	bl	8002fa4 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d002      	beq.n	8005e92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e90:	e0bf      	b.n	8006012 <HAL_SPI_Receive+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <HAL_SPI_Receive+0x7e>
 8005e98:	88fb      	ldrh	r3, [r7, #6]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d102      	bne.n	8005ea4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ea2:	e0b6      	b.n	8006012 <HAL_SPI_Receive+0x1f2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2204      	movs	r2, #4
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	88fa      	ldrh	r2, [r7, #6]
 8005ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	88fa      	ldrh	r2, [r7, #6]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eea:	d107      	bne.n	8005efc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	6812      	ldr	r2, [r2, #0]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005efa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f06:	2b40      	cmp	r3, #64	; 0x40
 8005f08:	d007      	beq.n	8005f1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d161      	bne.n	8005fe6 <HAL_SPI_Receive+0x1c6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005f22:	e02d      	b.n	8005f80 <HAL_SPI_Receive+0x160>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d114      	bne.n	8005f5c <HAL_SPI_Receive+0x13c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	320c      	adds	r2, #12
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f5a:	e011      	b.n	8005f80 <HAL_SPI_Receive+0x160>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f5c:	f7fd f822 	bl	8002fa4 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad2      	subs	r2, r2, r3
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d303      	bcc.n	8005f74 <HAL_SPI_Receive+0x154>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f72:	d102      	bne.n	8005f7a <HAL_SPI_Receive+0x15a>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <HAL_SPI_Receive+0x160>
        {
          errorcode = HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005f7e:	e048      	b.n	8006012 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1cc      	bne.n	8005f24 <HAL_SPI_Receive+0x104>
 8005f8a:	e031      	b.n	8005ff0 <HAL_SPI_Receive+0x1d0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d113      	bne.n	8005fc2 <HAL_SPI_Receive+0x1a2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	68d2      	ldr	r2, [r2, #12]
 8005fa4:	b292      	uxth	r2, r2
 8005fa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc0:	e011      	b.n	8005fe6 <HAL_SPI_Receive+0x1c6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc2:	f7fc ffef 	bl	8002fa4 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d303      	bcc.n	8005fda <HAL_SPI_Receive+0x1ba>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd8:	d102      	bne.n	8005fe0 <HAL_SPI_Receive+0x1c0>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_SPI_Receive+0x1c6>
        {
          errorcode = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005fe4:	e015      	b.n	8006012 <HAL_SPI_Receive+0x1f2>
    while (hspi->RxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1cd      	bne.n	8005f8c <HAL_SPI_Receive+0x16c>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fa31 	bl	800645c <SPI_EndRxTransaction>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Receive+0x1e6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_SPI_Receive+0x1f2>
  {
    errorcode = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08c      	sub	sp, #48	; 0x30
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
 8006038:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800603a:	2301      	movs	r3, #1
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_SPI_TransmitReceive+0x26>
 800604e:	2302      	movs	r3, #2
 8006050:	e188      	b.n	8006364 <HAL_SPI_TransmitReceive+0x338>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800605a:	f7fc ffa3 	bl	8002fa4 <HAL_GetTick>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006078:	2b01      	cmp	r3, #1
 800607a:	d00f      	beq.n	800609c <HAL_SPI_TransmitReceive+0x70>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006082:	d107      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x68>
 800608c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006090:	2b04      	cmp	r3, #4
 8006092:	d003      	beq.n	800609c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006094:	2302      	movs	r3, #2
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800609a:	e159      	b.n	8006350 <HAL_SPI_TransmitReceive+0x324>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x82>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x82>
 80060a8:	887b      	ldrh	r3, [r7, #2]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80060b4:	e14c      	b.n	8006350 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d003      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2205      	movs	r2, #5
 80060c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	887a      	ldrh	r2, [r7, #2]
 80060da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	887a      	ldrh	r2, [r7, #2]
 80060f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d007      	beq.n	800611e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800611c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006126:	d178      	bne.n	800621a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_TransmitReceive+0x10a>
 8006130:	8b7b      	ldrh	r3, [r7, #26]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d166      	bne.n	8006204 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800613e:	8812      	ldrh	r2, [r2, #0]
 8006140:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615a:	e053      	b.n	8006204 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	2b02      	cmp	r3, #2
 8006168:	d11b      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x176>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d016      	beq.n	80061a2 <HAL_SPI_TransmitReceive+0x176>
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	2b01      	cmp	r3, #1
 8006178:	d113      	bne.n	80061a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	1c9a      	adds	r2, r3, #2
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006194:	b29b      	uxth	r3, r3
 8006196:	3b01      	subs	r3, #1
 8006198:	b29a      	uxth	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d119      	bne.n	80061e4 <HAL_SPI_TransmitReceive+0x1b8>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d014      	beq.n	80061e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	68d2      	ldr	r2, [r2, #12]
 80061c4:	b292      	uxth	r2, r2
 80061c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061cc:	1c9a      	adds	r2, r3, #2
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061e0:	2301      	movs	r3, #1
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061e4:	f7fc fede 	bl	8002fa4 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1ad2      	subs	r2, r2, r3
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d307      	bcc.n	8006204 <HAL_SPI_TransmitReceive+0x1d8>
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fa:	d003      	beq.n	8006204 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006202:	e0a5      	b.n	8006350 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1a6      	bne.n	800615c <HAL_SPI_TransmitReceive+0x130>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1a1      	bne.n	800615c <HAL_SPI_TransmitReceive+0x130>
 8006218:	e07c      	b.n	8006314 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_SPI_TransmitReceive+0x1fc>
 8006222:	8b7b      	ldrh	r3, [r7, #26]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d16b      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	330c      	adds	r3, #12
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006232:	7812      	ldrb	r2, [r2, #0]
 8006234:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006244:	b29b      	uxth	r3, r3
 8006246:	3b01      	subs	r3, #1
 8006248:	b29a      	uxth	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800624e:	e057      	b.n	8006300 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b02      	cmp	r3, #2
 800625c:	d11c      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x26c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d017      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x26c>
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d114      	bne.n	8006298 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006278:	7812      	ldrb	r2, [r2, #0]
 800627a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0301 	and.w	r3, r3, #1
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d119      	bne.n	80062da <HAL_SPI_TransmitReceive+0x2ae>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d014      	beq.n	80062da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062d6:	2301      	movs	r3, #1
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062da:	f7fc fe63 	bl	8002fa4 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	1ad2      	subs	r2, r2, r3
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d303      	bcc.n	80062f2 <HAL_SPI_TransmitReceive+0x2c6>
 80062ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f0:	d102      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2cc>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80062fe:	e027      	b.n	8006350 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006304:	b29b      	uxth	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1a2      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x224>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d19d      	bne.n	8006250 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f8d4 	bl	80064c6 <SPI_EndRxTxTransaction>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d006      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2220      	movs	r2, #32
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006330:	e00e      	b.n	8006350 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <HAL_SPI_TransmitReceive+0x324>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006364:	4618      	mov	r0, r3
 8006366:	3730      	adds	r7, #48	; 0x30
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800637a:	b2db      	uxtb	r3, r3
}
 800637c:	4618      	mov	r0, r3
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006398:	e04c      	b.n	8006434 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063a0:	d048      	beq.n	8006434 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063a2:	f7fc fdff 	bl	8002fa4 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d202      	bcs.n	80063b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d13d      	bne.n	8006434 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	6852      	ldr	r2, [r2, #4]
 80063c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063d0:	d111      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063da:	d004      	beq.n	80063e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e4:	d107      	bne.n	80063f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6812      	ldr	r2, [r2, #0]
 80063f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	d10f      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6812      	ldr	r2, [r2, #0]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	6812      	ldr	r2, [r2, #0]
 800641a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e00f      	b.n	8006454 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689a      	ldr	r2, [r3, #8]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	401a      	ands	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	429a      	cmp	r2, r3
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	461a      	mov	r2, r3
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	429a      	cmp	r2, r3
 8006450:	d1a3      	bne.n	800639a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006470:	d111      	bne.n	8006496 <SPI_EndRxTransaction+0x3a>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647a:	d004      	beq.n	8006486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006484:	d107      	bne.n	8006496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	6812      	ldr	r2, [r2, #0]
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006494:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff ff71 	bl	8006388 <SPI_WaitFlagStateUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e000      	b.n	80064be <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff ff53 	bl	8006388 <SPI_WaitFlagStateUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ec:	f043 0220 	orr.w	r2, r3, #32
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e000      	b.n	80064fa <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e01d      	b.n	8006550 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f005 fbd7 	bl	800bcdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2202      	movs	r2, #2
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3304      	adds	r3, #4
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f000 fa3f 	bl	80069c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6812      	ldr	r2, [r2, #0]
 8006568:	68d2      	ldr	r2, [r2, #12]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b06      	cmp	r3, #6
 8006580:	d007      	beq.n	8006592 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f042 0201 	orr.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	68d2      	ldr	r2, [r2, #12]
 80065b2:	f022 0201 	bic.w	r2, r2, #1
 80065b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	f241 1311 	movw	r3, #4369	; 0x1111
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10f      	bne.n	80065e8 <HAL_TIM_Base_Stop_IT+0x48>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	f240 4344 	movw	r3, #1092	; 0x444
 80065d2:	4013      	ands	r3, r2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_Base_Stop_IT+0x48>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6812      	ldr	r2, [r2, #0]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	f022 0201 	bic.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b082      	sub	sp, #8
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d122      	bne.n	8006652 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b02      	cmp	r3, #2
 8006618:	d11b      	bne.n	8006652 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f06f 0202 	mvn.w	r2, #2
 8006622:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f003 0303 	and.w	r3, r3, #3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f9a5 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 800663e:	e005      	b.n	800664c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f997 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f9a8 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b04      	cmp	r3, #4
 800665e:	d122      	bne.n	80066a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d11b      	bne.n	80066a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f06f 0204 	mvn.w	r2, #4
 8006676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f97b 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 8006692:	e005      	b.n	80066a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f96d 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f97e 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b08      	cmp	r3, #8
 80066b2:	d122      	bne.n	80066fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f003 0308 	and.w	r3, r3, #8
 80066be:	2b08      	cmp	r3, #8
 80066c0:	d11b      	bne.n	80066fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f06f 0208 	mvn.w	r2, #8
 80066ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2204      	movs	r2, #4
 80066d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f951 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 80066e6:	e005      	b.n	80066f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f943 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f954 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	d122      	bne.n	800674e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b10      	cmp	r3, #16
 8006714:	d11b      	bne.n	800674e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f06f 0210 	mvn.w	r2, #16
 800671e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2208      	movs	r2, #8
 8006724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	69db      	ldr	r3, [r3, #28]
 800672c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f927 	bl	8006988 <HAL_TIM_IC_CaptureCallback>
 800673a:	e005      	b.n	8006748 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f919 	bl	8006974 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f92a 	bl	800699c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b01      	cmp	r3, #1
 800675a:	d10e      	bne.n	800677a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0201 	mvn.w	r2, #1
 8006772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f002 ff37 	bl	80095e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006784:	2b80      	cmp	r3, #128	; 0x80
 8006786:	d10e      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006792:	2b80      	cmp	r3, #128	; 0x80
 8006794:	d107      	bne.n	80067a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800679e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa98 	bl	8006cd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d10e      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d107      	bne.n	80067d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f8ef 	bl	80069b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d10e      	bne.n	80067fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f06f 0220 	mvn.w	r2, #32
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 fa62 	bl	8006cc2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <HAL_TIM_ConfigClockSource+0x18>
 800681a:	2302      	movs	r3, #2
 800681c:	e0a6      	b.n	800696c <HAL_TIM_ConfigClockSource+0x166>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2202      	movs	r2, #2
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800683c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006844:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d067      	beq.n	8006926 <HAL_TIM_ConfigClockSource+0x120>
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d80b      	bhi.n	8006872 <HAL_TIM_ConfigClockSource+0x6c>
 800685a:	2b10      	cmp	r3, #16
 800685c:	d073      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x140>
 800685e:	2b10      	cmp	r3, #16
 8006860:	d802      	bhi.n	8006868 <HAL_TIM_ConfigClockSource+0x62>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d06f      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006866:	e078      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006868:	2b20      	cmp	r3, #32
 800686a:	d06c      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x140>
 800686c:	2b30      	cmp	r3, #48	; 0x30
 800686e:	d06a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006870:	e073      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006872:	2b70      	cmp	r3, #112	; 0x70
 8006874:	d00d      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x8c>
 8006876:	2b70      	cmp	r3, #112	; 0x70
 8006878:	d804      	bhi.n	8006884 <HAL_TIM_ConfigClockSource+0x7e>
 800687a:	2b50      	cmp	r3, #80	; 0x50
 800687c:	d033      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0xe0>
 800687e:	2b60      	cmp	r3, #96	; 0x60
 8006880:	d041      	beq.n	8006906 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006882:	e06a      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006888:	d066      	beq.n	8006958 <HAL_TIM_ConfigClockSource+0x152>
 800688a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688e:	d017      	beq.n	80068c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006890:	e063      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	6899      	ldr	r1, [r3, #8]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f000 f9a9 	bl	8006bf8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	609a      	str	r2, [r3, #8]
      break;
 80068be:	e04c      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6818      	ldr	r0, [r3, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6899      	ldr	r1, [r3, #8]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685a      	ldr	r2, [r3, #4]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f000 f992 	bl	8006bf8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	6892      	ldr	r2, [r2, #8]
 80068de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e2:	609a      	str	r2, [r3, #8]
      break;
 80068e4:	e039      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	6859      	ldr	r1, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	461a      	mov	r2, r3
 80068f4:	f000 f906 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 f95f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006904:	e029      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	6859      	ldr	r1, [r3, #4]
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	461a      	mov	r2, r3
 8006914:	f000 f925 	bl	8006b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2160      	movs	r1, #96	; 0x60
 800691e:	4618      	mov	r0, r3
 8006920:	f000 f94f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006924:	e019      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	461a      	mov	r2, r3
 8006934:	f000 f8e6 	bl	8006b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	4618      	mov	r0, r3
 8006940:	f000 f93f 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006944:	e009      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f000 f936 	bl	8006bc2 <TIM_ITRx_SetConfig>
      break;
 8006956:	e000      	b.n	800695a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006958:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d013      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d00f      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a3d      	ldr	r2, [pc, #244]	; (8006adc <TIM_Base_SetConfig+0x118>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00b      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a3c      	ldr	r2, [pc, #240]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d007      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a3b      	ldr	r2, [pc, #236]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d003      	beq.n	8006a04 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d108      	bne.n	8006a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2f      	ldr	r2, [pc, #188]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a24:	d027      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <TIM_Base_SetConfig+0x118>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d023      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2b      	ldr	r2, [pc, #172]	; (8006ae0 <TIM_Base_SetConfig+0x11c>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2a      	ldr	r2, [pc, #168]	; (8006ae4 <TIM_Base_SetConfig+0x120>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a29      	ldr	r2, [pc, #164]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d017      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a28      	ldr	r2, [pc, #160]	; (8006aec <TIM_Base_SetConfig+0x128>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <TIM_Base_SetConfig+0x12c>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00f      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a26      	ldr	r2, [pc, #152]	; (8006af4 <TIM_Base_SetConfig+0x130>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d00b      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <TIM_Base_SetConfig+0x134>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d007      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a24      	ldr	r2, [pc, #144]	; (8006afc <TIM_Base_SetConfig+0x138>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d003      	beq.n	8006a76 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a23      	ldr	r2, [pc, #140]	; (8006b00 <TIM_Base_SetConfig+0x13c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d108      	bne.n	8006a88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <TIM_Base_SetConfig+0x114>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d003      	beq.n	8006abc <TIM_Base_SetConfig+0xf8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	; (8006ae8 <TIM_Base_SetConfig+0x124>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d103      	bne.n	8006ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	615a      	str	r2, [r3, #20]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40000400 	.word	0x40000400
 8006ae0:	40000800 	.word	0x40000800
 8006ae4:	40000c00 	.word	0x40000c00
 8006ae8:	40010400 	.word	0x40010400
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800
 8006af8:	40001800 	.word	0x40001800
 8006afc:	40001c00 	.word	0x40001c00
 8006b00:	40002000 	.word	0x40002000

08006b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	f023 0201 	bic.w	r2, r3, #1
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	f023 030a 	bic.w	r3, r3, #10
 8006b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0210 	bic.w	r2, r3, #16
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	031b      	lsls	r3, r3, #12
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b085      	sub	sp, #20
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
 8006bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	f043 0307 	orr.w	r3, r3, #7
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]
}
 8006bec:	bf00      	nop
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	609a      	str	r2, [r3, #8]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e032      	b.n	8006cb6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c88:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3714      	adds	r7, #20
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cde:	bf00      	nop
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e03f      	b.n	8006d7c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d106      	bne.n	8006d16 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f005 f879 	bl	800be08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2224      	movs	r2, #36	; 0x24
 8006d1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	6812      	ldr	r2, [r2, #0]
 8006d26:	68d2      	ldr	r2, [r2, #12]
 8006d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d2c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f90a 	bl	8006f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	6912      	ldr	r2, [r2, #16]
 8006d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d42:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6812      	ldr	r2, [r2, #0]
 8006d4c:	6952      	ldr	r2, [r2, #20]
 8006d4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d52:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	68d2      	ldr	r2, [r2, #12]
 8006d5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d62:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	f040 8082 	bne.w	8006eaa <HAL_UART_Transmit+0x126>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_UART_Transmit+0x2e>
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e07a      	b.n	8006eac <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_UART_Transmit+0x40>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e073      	b.n	8006eac <HAL_UART_Transmit+0x128>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2221      	movs	r2, #33	; 0x21
 8006dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dda:	f7fc f8e3 	bl	8002fa4 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006dec:	e041      	b.n	8006e72 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e04:	d121      	bne.n	8006e4a <HAL_UART_Transmit+0xc6>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2180      	movs	r1, #128	; 0x80
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f84f 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e045      	b.n	8006eac <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t *) pData;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	8812      	ldrh	r2, [r2, #0]
 8006e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e30:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <HAL_UART_Transmit+0xbe>
        {
          pData += 2U;
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3302      	adds	r3, #2
 8006e3e:	60bb      	str	r3, [r7, #8]
 8006e40:	e017      	b.n	8006e72 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData += 1U;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60bb      	str	r3, [r7, #8]
 8006e48:	e013      	b.n	8006e72 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2180      	movs	r1, #128	; 0x80
 8006e54:	68f8      	ldr	r0, [r7, #12]
 8006e56:	f000 f82d 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e023      	b.n	8006eac <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	1c59      	adds	r1, r3, #1
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	6053      	str	r3, [r2, #4]
    while (huart->TxXferCount > 0U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1b8      	bne.n	8006dee <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2200      	movs	r2, #0
 8006e84:	2140      	movs	r1, #64	; 0x40
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f814 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e00a      	b.n	8006eac <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e000      	b.n	8006eac <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8006eaa:	2302      	movs	r3, #2
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec4:	e02c      	b.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ecc:	d028      	beq.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed4:	f7fc f866 	bl	8002fa4 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	1ad2      	subs	r2, r2, r3
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d91d      	bls.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	6812      	ldr	r2, [r2, #0]
 8006eec:	68d2      	ldr	r2, [r2, #12]
 8006eee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ef2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	6812      	ldr	r2, [r2, #0]
 8006efc:	6952      	ldr	r2, [r2, #20]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e00f      	b.n	8006f40 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	401a      	ands	r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	bf0c      	ite	eq
 8006f30:	2301      	moveq	r3, #1
 8006f32:	2300      	movne	r3, #0
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d0c3      	beq.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	6912      	ldr	r2, [r2, #16]
 8006f5a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	68d2      	ldr	r2, [r2, #12]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	689a      	ldr	r2, [r3, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	695b      	ldr	r3, [r3, #20]
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f8c:	f023 030c 	bic.w	r3, r3, #12
 8006f90:	68f9      	ldr	r1, [r7, #12]
 8006f92:	430b      	orrs	r3, r1
 8006f94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	6812      	ldr	r2, [r2, #0]
 8006f9e:	6952      	ldr	r2, [r2, #20]
 8006fa0:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6992      	ldr	r2, [r2, #24]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb4:	f040 80e4 	bne.w	8007180 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4aab      	ldr	r2, [pc, #684]	; (800726c <UART_SetConfig+0x324>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <UART_SetConfig+0x84>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4aaa      	ldr	r2, [pc, #680]	; (8007270 <UART_SetConfig+0x328>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d16c      	bne.n	80070a6 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681c      	ldr	r4, [r3, #0]
 8006fd0:	f7fe fb00 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009a      	lsls	r2, r3, #2
 8006fde:	441a      	add	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fea:	4aa2      	ldr	r2, [pc, #648]	; (8007274 <UART_SetConfig+0x32c>)
 8006fec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	011d      	lsls	r5, r3, #4
 8006ff4:	f7fe faee 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009a      	lsls	r2, r3, #2
 8007002:	441a      	add	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	fbb2 f6f3 	udiv	r6, r2, r3
 800700e:	f7fe fae1 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8007012:	4602      	mov	r2, r0
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009a      	lsls	r2, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	4a92      	ldr	r2, [pc, #584]	; (8007274 <UART_SetConfig+0x32c>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2264      	movs	r2, #100	; 0x64
 8007032:	fb02 f303 	mul.w	r3, r2, r3
 8007036:	1af3      	subs	r3, r6, r3
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	3332      	adds	r3, #50	; 0x32
 800703c:	4a8d      	ldr	r2, [pc, #564]	; (8007274 <UART_SetConfig+0x32c>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800704a:	441d      	add	r5, r3
 800704c:	f7fe fac2 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8007050:	4602      	mov	r2, r0
 8007052:	4613      	mov	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	009a      	lsls	r2, r3, #2
 800705a:	441a      	add	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	fbb2 f6f3 	udiv	r6, r2, r3
 8007066:	f7fe fab5 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 800706a:	4602      	mov	r2, r0
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	4a7c      	ldr	r2, [pc, #496]	; (8007274 <UART_SetConfig+0x32c>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	2264      	movs	r2, #100	; 0x64
 800708a:	fb02 f303 	mul.w	r3, r2, r3
 800708e:	1af3      	subs	r3, r6, r3
 8007090:	00db      	lsls	r3, r3, #3
 8007092:	3332      	adds	r3, #50	; 0x32
 8007094:	4a77      	ldr	r2, [pc, #476]	; (8007274 <UART_SetConfig+0x32c>)
 8007096:	fba2 2303 	umull	r2, r3, r2, r3
 800709a:	095b      	lsrs	r3, r3, #5
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	442b      	add	r3, r5
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	e154      	b.n	8007350 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681c      	ldr	r4, [r3, #0]
 80070aa:	f7fe fa7f 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4613      	mov	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	009a      	lsls	r2, r3, #2
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c4:	4a6b      	ldr	r2, [pc, #428]	; (8007274 <UART_SetConfig+0x32c>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	011d      	lsls	r5, r3, #4
 80070ce:	f7fe fa6d 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009a      	lsls	r2, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80070e8:	f7fe fa60 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4613      	mov	r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	009a      	lsls	r2, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007102:	4a5c      	ldr	r2, [pc, #368]	; (8007274 <UART_SetConfig+0x32c>)
 8007104:	fba2 2303 	umull	r2, r3, r2, r3
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	2264      	movs	r2, #100	; 0x64
 800710c:	fb02 f303 	mul.w	r3, r2, r3
 8007110:	1af3      	subs	r3, r6, r3
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	3332      	adds	r3, #50	; 0x32
 8007116:	4a57      	ldr	r2, [pc, #348]	; (8007274 <UART_SetConfig+0x32c>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007124:	441d      	add	r5, r3
 8007126:	f7fe fa41 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800712a:	4602      	mov	r2, r0
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009a      	lsls	r2, r3, #2
 8007134:	441a      	add	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	005b      	lsls	r3, r3, #1
 800713c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007140:	f7fe fa34 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8007144:	4602      	mov	r2, r0
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009a      	lsls	r2, r3, #2
 800714e:	441a      	add	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	4a46      	ldr	r2, [pc, #280]	; (8007274 <UART_SetConfig+0x32c>)
 800715c:	fba2 2303 	umull	r2, r3, r2, r3
 8007160:	095b      	lsrs	r3, r3, #5
 8007162:	2264      	movs	r2, #100	; 0x64
 8007164:	fb02 f303 	mul.w	r3, r2, r3
 8007168:	1af3      	subs	r3, r6, r3
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	3332      	adds	r3, #50	; 0x32
 800716e:	4a41      	ldr	r2, [pc, #260]	; (8007274 <UART_SetConfig+0x32c>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	442b      	add	r3, r5
 800717c:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800717e:	e0e7      	b.n	8007350 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a39      	ldr	r2, [pc, #228]	; (800726c <UART_SetConfig+0x324>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <UART_SetConfig+0x24c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a38      	ldr	r2, [pc, #224]	; (8007270 <UART_SetConfig+0x328>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d171      	bne.n	8007278 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681c      	ldr	r4, [r3, #0]
 8007198:	f7fe fa1c 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 800719c:	4602      	mov	r2, r0
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009a      	lsls	r2, r3, #2
 80071a6:	441a      	add	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b2:	4a30      	ldr	r2, [pc, #192]	; (8007274 <UART_SetConfig+0x32c>)
 80071b4:	fba2 2303 	umull	r2, r3, r2, r3
 80071b8:	095b      	lsrs	r3, r3, #5
 80071ba:	011d      	lsls	r5, r3, #4
 80071bc:	f7fe fa0a 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 80071c0:	4602      	mov	r2, r0
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009a      	lsls	r2, r3, #2
 80071ca:	441a      	add	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80071d6:	f7fe f9fd 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 80071da:	4602      	mov	r2, r0
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009a      	lsls	r2, r3, #2
 80071e4:	441a      	add	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	4a20      	ldr	r2, [pc, #128]	; (8007274 <UART_SetConfig+0x32c>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	2264      	movs	r2, #100	; 0x64
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	1af3      	subs	r3, r6, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	3332      	adds	r3, #50	; 0x32
 8007204:	4a1b      	ldr	r2, [pc, #108]	; (8007274 <UART_SetConfig+0x32c>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007210:	441d      	add	r5, r3
 8007212:	f7fe f9df 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8007216:	4602      	mov	r2, r0
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009a      	lsls	r2, r3, #2
 8007220:	441a      	add	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	fbb2 f6f3 	udiv	r6, r2, r3
 800722c:	f7fe f9d2 	bl	80055d4 <HAL_RCC_GetPCLK2Freq>
 8007230:	4602      	mov	r2, r0
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009a      	lsls	r2, r3, #2
 800723a:	441a      	add	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	fbb2 f3f3 	udiv	r3, r2, r3
 8007246:	4a0b      	ldr	r2, [pc, #44]	; (8007274 <UART_SetConfig+0x32c>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	095b      	lsrs	r3, r3, #5
 800724e:	2264      	movs	r2, #100	; 0x64
 8007250:	fb02 f303 	mul.w	r3, r2, r3
 8007254:	1af3      	subs	r3, r6, r3
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	3332      	adds	r3, #50	; 0x32
 800725a:	4a06      	ldr	r2, [pc, #24]	; (8007274 <UART_SetConfig+0x32c>)
 800725c:	fba2 2303 	umull	r2, r3, r2, r3
 8007260:	095b      	lsrs	r3, r3, #5
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	442b      	add	r3, r5
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	e071      	b.n	8007350 <UART_SetConfig+0x408>
 800726c:	40011000 	.word	0x40011000
 8007270:	40011400 	.word	0x40011400
 8007274:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681c      	ldr	r4, [r3, #0]
 800727c:	f7fe f996 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8007280:	4602      	mov	r2, r0
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009a      	lsls	r2, r3, #2
 800728a:	441a      	add	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	4a30      	ldr	r2, [pc, #192]	; (8007358 <UART_SetConfig+0x410>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	011d      	lsls	r5, r3, #4
 80072a0:	f7fe f984 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80072a4:	4602      	mov	r2, r0
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009a      	lsls	r2, r3, #2
 80072ae:	441a      	add	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80072ba:	f7fe f977 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80072be:	4602      	mov	r2, r0
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009a      	lsls	r2, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <UART_SetConfig+0x410>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	2264      	movs	r2, #100	; 0x64
 80072de:	fb02 f303 	mul.w	r3, r2, r3
 80072e2:	1af3      	subs	r3, r6, r3
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	3332      	adds	r3, #50	; 0x32
 80072e8:	4a1b      	ldr	r2, [pc, #108]	; (8007358 <UART_SetConfig+0x410>)
 80072ea:	fba2 2303 	umull	r2, r3, r2, r3
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f4:	441d      	add	r5, r3
 80072f6:	f7fe f959 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4613      	mov	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	009a      	lsls	r2, r3, #2
 8007304:	441a      	add	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007310:	f7fe f94c 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8007314:	4602      	mov	r2, r0
 8007316:	4613      	mov	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	4413      	add	r3, r2
 800731c:	009a      	lsls	r2, r3, #2
 800731e:	441a      	add	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	4a0b      	ldr	r2, [pc, #44]	; (8007358 <UART_SetConfig+0x410>)
 800732c:	fba2 2303 	umull	r2, r3, r2, r3
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	2264      	movs	r2, #100	; 0x64
 8007334:	fb02 f303 	mul.w	r3, r2, r3
 8007338:	1af3      	subs	r3, r6, r3
 800733a:	011b      	lsls	r3, r3, #4
 800733c:	3332      	adds	r3, #50	; 0x32
 800733e:	4a06      	ldr	r2, [pc, #24]	; (8007358 <UART_SetConfig+0x410>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	442b      	add	r3, r5
 800734c:	60a3      	str	r3, [r4, #8]
}
 800734e:	e7ff      	b.n	8007350 <UART_SetConfig+0x408>
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007358:	51eb851f 	.word	0x51eb851f

0800735c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d029      	beq.n	80073ca <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007386:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007390:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007396:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800739c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80073a2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80073a8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80073ae:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80073b4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80073ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e034      	b.n	8007434 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80073e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fe:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007408:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800740e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007414:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800741a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007420:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	4313      	orrs	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d02e      	beq.n	80074ba <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007468:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	3b01      	subs	r3, #1
 8007476:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007478:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	3b01      	subs	r3, #1
 8007480:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007482:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	3b01      	subs	r3, #1
 800748a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800748c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	3b01      	subs	r3, #1
 8007494:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007496:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	3b01      	subs	r3, #1
 800749e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80074a0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80074aa:	4313      	orrs	r3, r2
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	609a      	str	r2, [r3, #8]
 80074b8:	e03b      	b.n	8007532 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074ca:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	3b01      	subs	r3, #1
 80074da:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80074dc:	4313      	orrs	r3, r2
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80074f0:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007500:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	3b01      	subs	r3, #1
 8007508:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800750a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007514:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	3b01      	subs	r3, #1
 800751c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800751e:	4313      	orrs	r3, r2
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800755c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	3b01      	subs	r3, #1
 8007564:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007566:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007578:	f7fb fd14 	bl	8002fa4 <HAL_GetTick>
 800757c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800757e:	e010      	b.n	80075a2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007586:	d00c      	beq.n	80075a2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <FMC_SDRAM_SendCommand+0x5e>
 800758e:	f7fb fd09 	bl	8002fa4 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	429a      	cmp	r2, r3
 800759c:	d901      	bls.n	80075a2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e006      	b.n	80075b0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f003 0320 	and.w	r3, r3, #32
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d0e8      	beq.n	8007580 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695a      	ldr	r2, [r3, #20]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
	...

080075e0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <MX_CRC_Init+0x20>)
 80075e6:	4a07      	ldr	r2, [pc, #28]	; (8007604 <MX_CRC_Init+0x24>)
 80075e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80075ea:	4805      	ldr	r0, [pc, #20]	; (8007600 <MX_CRC_Init+0x20>)
 80075ec:	f7fb fde8 	bl	80031c0 <HAL_CRC_Init>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80075f6:	f004 f881 	bl	800b6fc <Error_Handler>
  }

}
 80075fa:	bf00      	nop
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000370 	.word	0x20000370
 8007604:	40023000 	.word	0x40023000

08007608 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007608:	b480      	push	{r7}
 800760a:	b085      	sub	sp, #20
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0b      	ldr	r2, [pc, #44]	; (8007644 <HAL_CRC_MspInit+0x3c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10d      	bne.n	8007636 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
 800761e:	4a0a      	ldr	r2, [pc, #40]	; (8007648 <HAL_CRC_MspInit+0x40>)
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <HAL_CRC_MspInit+0x40>)
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007628:	6313      	str	r3, [r2, #48]	; 0x30
 800762a:	4b07      	ldr	r3, [pc, #28]	; (8007648 <HAL_CRC_MspInit+0x40>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40023000 	.word	0x40023000
 8007648:	40023800 	.word	0x40023800

0800764c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8007650:	4b15      	ldr	r3, [pc, #84]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007652:	4a16      	ldr	r2, [pc, #88]	; (80076ac <MX_DMA2D_Init+0x60>)
 8007654:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007656:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007658:	2200      	movs	r2, #0
 800765a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800765c:	4b12      	ldr	r3, [pc, #72]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 800765e:	2202      	movs	r2, #2
 8007660:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007664:	2200      	movs	r2, #0
 8007666:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8007668:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 800766a:	2200      	movs	r2, #0
 800766c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800766e:	4b0e      	ldr	r3, [pc, #56]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007670:	2202      	movs	r2, #2
 8007672:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007674:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800767a:	4b0b      	ldr	r3, [pc, #44]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 800767c:	2200      	movs	r2, #0
 800767e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007680:	4809      	ldr	r0, [pc, #36]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007682:	f7fb ff79 	bl	8003578 <HAL_DMA2D_Init>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800768c:	f004 f836 	bl	800b6fc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007690:	2101      	movs	r1, #1
 8007692:	4805      	ldr	r0, [pc, #20]	; (80076a8 <MX_DMA2D_Init+0x5c>)
 8007694:	f7fc f9de 	bl	8003a54 <HAL_DMA2D_ConfigLayer>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800769e:	f004 f82d 	bl	800b6fc <Error_Handler>
  }

}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	20000378 	.word	0x20000378
 80076ac:	4002b000 	.word	0x4002b000

080076b0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a0e      	ldr	r2, [pc, #56]	; (80076f8 <HAL_DMA2D_MspInit+0x48>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d115      	bne.n	80076ee <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	4a0d      	ldr	r2, [pc, #52]	; (80076fc <HAL_DMA2D_MspInit+0x4c>)
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <HAL_DMA2D_MspInit+0x4c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <HAL_DMA2D_MspInit+0x4c>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076da:	60fb      	str	r3, [r7, #12]
 80076dc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80076de:	2200      	movs	r2, #0
 80076e0:	2105      	movs	r1, #5
 80076e2:	205a      	movs	r0, #90	; 0x5a
 80076e4:	f7fb fd42 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80076e8:	205a      	movs	r0, #90	; 0x5a
 80076ea:	f7fb fd5b 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	4002b000 	.word	0x4002b000
 80076fc:	40023800 	.word	0x40023800

08007700 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007706:	4b20      	ldr	r3, [pc, #128]	; (8007788 <MX_FMC_Init+0x88>)
 8007708:	4a20      	ldr	r2, [pc, #128]	; (800778c <MX_FMC_Init+0x8c>)
 800770a:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800770c:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <MX_FMC_Init+0x88>)
 800770e:	2201      	movs	r2, #1
 8007710:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <MX_FMC_Init+0x88>)
 8007714:	2200      	movs	r2, #0
 8007716:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007718:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <MX_FMC_Init+0x88>)
 800771a:	2204      	movs	r2, #4
 800771c:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800771e:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <MX_FMC_Init+0x88>)
 8007720:	2210      	movs	r2, #16
 8007722:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007724:	4b18      	ldr	r3, [pc, #96]	; (8007788 <MX_FMC_Init+0x88>)
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <MX_FMC_Init+0x88>)
 800772c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8007730:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <MX_FMC_Init+0x88>)
 8007734:	2200      	movs	r2, #0
 8007736:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <MX_FMC_Init+0x88>)
 800773a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800773e:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8007740:	4b11      	ldr	r3, [pc, #68]	; (8007788 <MX_FMC_Init+0x88>)
 8007742:	2200      	movs	r2, #0
 8007744:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <MX_FMC_Init+0x88>)
 8007748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800774c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800774e:	2302      	movs	r3, #2
 8007750:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007752:	2307      	movs	r3, #7
 8007754:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8007756:	2304      	movs	r3, #4
 8007758:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800775a:	2307      	movs	r3, #7
 800775c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800775e:	2303      	movs	r3, #3
 8007760:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8007762:	2302      	movs	r3, #2
 8007764:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8007766:	2302      	movs	r3, #2
 8007768:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800776a:	1d3b      	adds	r3, r7, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4806      	ldr	r0, [pc, #24]	; (8007788 <MX_FMC_Init+0x88>)
 8007770:	f7fe f91a 	bl	80059a8 <HAL_SDRAM_Init>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <MX_FMC_Init+0x7e>
  {
    Error_Handler( );
 800777a:	f003 ffbf 	bl	800b6fc <Error_Handler>
  }

}
 800777e:	bf00      	nop
 8007780:	3720      	adds	r7, #32
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	200003b8 	.word	0x200003b8
 800778c:	a0000140 	.word	0xa0000140

08007790 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8007796:	4b3c      	ldr	r3, [pc, #240]	; (8007888 <HAL_FMC_MspInit+0xf8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d16f      	bne.n	800787e <HAL_FMC_MspInit+0xee>
    return;
  }
  FMC_Initialized = 1;
 800779e:	4b3a      	ldr	r3, [pc, #232]	; (8007888 <HAL_FMC_MspInit+0xf8>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80077a4:	2300      	movs	r3, #0
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4a38      	ldr	r2, [pc, #224]	; (800788c <HAL_FMC_MspInit+0xfc>)
 80077aa:	4b38      	ldr	r3, [pc, #224]	; (800788c <HAL_FMC_MspInit+0xfc>)
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	f043 0301 	orr.w	r3, r3, #1
 80077b2:	6393      	str	r3, [r2, #56]	; 0x38
 80077b4:	4b35      	ldr	r3, [pc, #212]	; (800788c <HAL_FMC_MspInit+0xfc>)
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 80077c0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80077c4:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin 
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077c6:	2302      	movs	r3, #2
 80077c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ce:	2303      	movs	r3, #3
 80077d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80077d2:	230c      	movs	r3, #12
 80077d4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80077d6:	1d3b      	adds	r3, r7, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	482d      	ldr	r0, [pc, #180]	; (8007890 <HAL_FMC_MspInit+0x100>)
 80077dc:	f7fc fa66 	bl	8003cac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80077e0:	2301      	movs	r3, #1
 80077e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077e4:	2302      	movs	r3, #2
 80077e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077ec:	2303      	movs	r3, #3
 80077ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80077f0:	230c      	movs	r3, #12
 80077f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80077f4:	1d3b      	adds	r3, r7, #4
 80077f6:	4619      	mov	r1, r3
 80077f8:	4826      	ldr	r0, [pc, #152]	; (8007894 <HAL_FMC_MspInit+0x104>)
 80077fa:	f7fc fa57 	bl	8003cac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin 
 80077fe:	f248 1333 	movw	r3, #33075	; 0x8133
 8007802:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007804:	2302      	movs	r3, #2
 8007806:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007808:	2300      	movs	r3, #0
 800780a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800780c:	2303      	movs	r3, #3
 800780e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007810:	230c      	movs	r3, #12
 8007812:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007814:	1d3b      	adds	r3, r7, #4
 8007816:	4619      	mov	r1, r3
 8007818:	481f      	ldr	r0, [pc, #124]	; (8007898 <HAL_FMC_MspInit+0x108>)
 800781a:	f7fc fa47 	bl	8003cac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin 
 800781e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8007822:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin 
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	2302      	movs	r3, #2
 8007826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800782c:	2303      	movs	r3, #3
 800782e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007830:	230c      	movs	r3, #12
 8007832:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007834:	1d3b      	adds	r3, r7, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4818      	ldr	r0, [pc, #96]	; (800789c <HAL_FMC_MspInit+0x10c>)
 800783a:	f7fc fa37 	bl	8003cac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin 
 800783e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8007842:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	2302      	movs	r3, #2
 8007846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800784c:	2303      	movs	r3, #3
 800784e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8007850:	230c      	movs	r3, #12
 8007852:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	4619      	mov	r1, r3
 8007858:	4811      	ldr	r0, [pc, #68]	; (80078a0 <HAL_FMC_MspInit+0x110>)
 800785a:	f7fc fa27 	bl	8003cac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800785e:	2360      	movs	r3, #96	; 0x60
 8007860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007862:	2302      	movs	r3, #2
 8007864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800786a:	2303      	movs	r3, #3
 800786c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800786e:	230c      	movs	r3, #12
 8007870:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007872:	1d3b      	adds	r3, r7, #4
 8007874:	4619      	mov	r1, r3
 8007876:	480b      	ldr	r0, [pc, #44]	; (80078a4 <HAL_FMC_MspInit+0x114>)
 8007878:	f7fc fa18 	bl	8003cac <HAL_GPIO_Init>
 800787c:	e000      	b.n	8007880 <HAL_FMC_MspInit+0xf0>
    return;
 800787e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200002ac 	.word	0x200002ac
 800788c:	40023800 	.word	0x40023800
 8007890:	40021400 	.word	0x40021400
 8007894:	40020800 	.word	0x40020800
 8007898:	40021800 	.word	0x40021800
 800789c:	40021000 	.word	0x40021000
 80078a0:	40020c00 	.word	0x40020c00
 80078a4:	40020400 	.word	0x40020400

080078a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80078b0:	f7ff ff6e 	bl	8007790 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <MX_GFXSIMULATOR_Init>:

/* USER CODE END 0 */

/* GFXSIMULATOR init function */
void MX_GFXSIMULATOR_Init(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0

}
 80078c0:	bf00      	nop
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
	...

080078cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08e      	sub	sp, #56	; 0x38
 80078d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	605a      	str	r2, [r3, #4]
 80078dc:	609a      	str	r2, [r3, #8]
 80078de:	60da      	str	r2, [r3, #12]
 80078e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	623b      	str	r3, [r7, #32]
 80078e6:	4a80      	ldr	r2, [pc, #512]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80078e8:	4b7f      	ldr	r3, [pc, #508]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	f043 0320 	orr.w	r3, r3, #32
 80078f0:	6313      	str	r3, [r2, #48]	; 0x30
 80078f2:	4b7d      	ldr	r3, [pc, #500]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	623b      	str	r3, [r7, #32]
 80078fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80078fe:	2300      	movs	r3, #0
 8007900:	61fb      	str	r3, [r7, #28]
 8007902:	4a79      	ldr	r2, [pc, #484]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007904:	4b78      	ldr	r3, [pc, #480]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800790c:	6313      	str	r3, [r2, #48]	; 0x30
 800790e:	4b76      	ldr	r3, [pc, #472]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	61fb      	str	r3, [r7, #28]
 8007918:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	4a72      	ldr	r2, [pc, #456]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007920:	4b71      	ldr	r3, [pc, #452]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007924:	f043 0304 	orr.w	r3, r3, #4
 8007928:	6313      	str	r3, [r2, #48]	; 0x30
 800792a:	4b6f      	ldr	r3, [pc, #444]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 800792c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]
 800793a:	4a6b      	ldr	r2, [pc, #428]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 800793c:	4b6a      	ldr	r3, [pc, #424]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 800793e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	6313      	str	r3, [r2, #48]	; 0x30
 8007946:	4b68      	ldr	r3, [pc, #416]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	4a64      	ldr	r2, [pc, #400]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007958:	4b63      	ldr	r3, [pc, #396]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 800795a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	6313      	str	r3, [r2, #48]	; 0x30
 8007962:	4b61      	ldr	r3, [pc, #388]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	613b      	str	r3, [r7, #16]
 800796c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	4a5d      	ldr	r2, [pc, #372]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007974:	4b5c      	ldr	r3, [pc, #368]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800797c:	6313      	str	r3, [r2, #48]	; 0x30
 800797e:	4b5a      	ldr	r3, [pc, #360]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800798a:	2300      	movs	r3, #0
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	4a56      	ldr	r2, [pc, #344]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007990:	4b55      	ldr	r3, [pc, #340]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 8007992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007994:	f043 0310 	orr.w	r3, r3, #16
 8007998:	6313      	str	r3, [r2, #48]	; 0x30
 800799a:	4b53      	ldr	r3, [pc, #332]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
 80079aa:	4a4f      	ldr	r2, [pc, #316]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80079ac:	4b4e      	ldr	r3, [pc, #312]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80079ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b0:	f043 0308 	orr.w	r3, r3, #8
 80079b4:	6313      	str	r3, [r2, #48]	; 0x30
 80079b6:	4b4c      	ldr	r3, [pc, #304]	; (8007ae8 <MX_GPIO_Init+0x21c>)
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	f003 0308 	and.w	r3, r3, #8
 80079be:	607b      	str	r3, [r7, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80079c2:	2200      	movs	r2, #0
 80079c4:	2116      	movs	r1, #22
 80079c6:	4849      	ldr	r0, [pc, #292]	; (8007aec <MX_GPIO_Init+0x220>)
 80079c8:	f7fc fc3e 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80079cc:	2200      	movs	r2, #0
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	4847      	ldr	r0, [pc, #284]	; (8007af0 <MX_GPIO_Init+0x224>)
 80079d2:	f7fc fc39 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80079d6:	2200      	movs	r2, #0
 80079d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80079dc:	4845      	ldr	r0, [pc, #276]	; (8007af4 <MX_GPIO_Init+0x228>)
 80079de:	f7fc fc33 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80079e2:	2200      	movs	r2, #0
 80079e4:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80079e8:	4843      	ldr	r0, [pc, #268]	; (8007af8 <MX_GPIO_Init+0x22c>)
 80079ea:	f7fc fc2d 	bl	8004248 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80079ee:	2316      	movs	r3, #22
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079f2:	2301      	movs	r3, #1
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079fa:	2300      	movs	r3, #0
 80079fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a02:	4619      	mov	r1, r3
 8007a04:	4839      	ldr	r0, [pc, #228]	; (8007aec <MX_GPIO_Init+0x220>)
 8007a06:	f7fc f951 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BB_Pin;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BB_GPIO_Port, &GPIO_InitStruct);
 8007a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4834      	ldr	r0, [pc, #208]	; (8007af0 <MX_GPIO_Init+0x224>)
 8007a1e:	f7fc f945 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8007a22:	2380      	movs	r3, #128	; 0x80
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a26:	2301      	movs	r3, #1
 8007a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8007a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a36:	4619      	mov	r1, r3
 8007a38:	482d      	ldr	r0, [pc, #180]	; (8007af0 <MX_GPIO_Init+0x224>)
 8007a3a:	f7fc f937 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8007a3e:	2320      	movs	r3, #32
 8007a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007a42:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <MX_GPIO_Init+0x230>)
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8007a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4826      	ldr	r0, [pc, #152]	; (8007aec <MX_GPIO_Init+0x220>)
 8007a52:	f7fc f92b 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007a56:	2304      	movs	r3, #4
 8007a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a66:	4619      	mov	r1, r3
 8007a68:	4825      	ldr	r0, [pc, #148]	; (8007b00 <MX_GPIO_Init+0x234>)
 8007a6a:	f7fc f91f 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8007a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a80:	4619      	mov	r1, r3
 8007a82:	481c      	ldr	r0, [pc, #112]	; (8007af4 <MX_GPIO_Init+0x228>)
 8007a84:	f7fc f912 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8007a88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a96:	2300      	movs	r3, #0
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	4814      	ldr	r0, [pc, #80]	; (8007af4 <MX_GPIO_Init+0x228>)
 8007aa2:	f7fc f903 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT1_Pin;
 8007aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <MX_GPIO_Init+0x230>)
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT1_GPIO_Port, &GPIO_InitStruct);
 8007ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ab8:	4619      	mov	r1, r3
 8007aba:	480d      	ldr	r0, [pc, #52]	; (8007af0 <MX_GPIO_Init+0x224>)
 8007abc:	f7fc f8f6 	bl	8003cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8007ac0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4807      	ldr	r0, [pc, #28]	; (8007af8 <MX_GPIO_Init+0x22c>)
 8007ada:	f7fc f8e7 	bl	8003cac <HAL_GPIO_Init>

}
 8007ade:	bf00      	nop
 8007ae0:	3738      	adds	r7, #56	; 0x38
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	40020800 	.word	0x40020800
 8007af0:	40020000 	.word	0x40020000
 8007af4:	40020c00 	.word	0x40020c00
 8007af8:	40021800 	.word	0x40021800
 8007afc:	10120000 	.word	0x10120000
 8007b00:	40020400 	.word	0x40020400

08007b04 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b0a:	4a1c      	ldr	r2, [pc, #112]	; (8007b7c <MX_I2C3_Init+0x78>)
 8007b0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b10:	4a1b      	ldr	r2, [pc, #108]	; (8007b80 <MX_I2C3_Init+0x7c>)
 8007b12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b14:	4b18      	ldr	r3, [pc, #96]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007b1a:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b20:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b28:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b34:	4b10      	ldr	r3, [pc, #64]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007b40:	480d      	ldr	r0, [pc, #52]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b42:	f7fc fb9b 	bl	800427c <HAL_I2C_Init>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8007b4c:	f003 fdd6 	bl	800b6fc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b50:	2100      	movs	r1, #0
 8007b52:	4809      	ldr	r0, [pc, #36]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b54:	f7fc fcba 	bl	80044cc <HAL_I2CEx_ConfigAnalogFilter>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8007b5e:	f003 fdcd 	bl	800b6fc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007b62:	2100      	movs	r1, #0
 8007b64:	4804      	ldr	r0, [pc, #16]	; (8007b78 <MX_I2C3_Init+0x74>)
 8007b66:	f7fc fced 	bl	8004544 <HAL_I2CEx_ConfigDigitalFilter>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8007b70:	f003 fdc4 	bl	800b6fc <Error_Handler>
  }

}
 8007b74:	bf00      	nop
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	200003ec 	.word	0x200003ec
 8007b7c:	40005c00 	.word	0x40005c00
 8007b80:	000186a0 	.word	0x000186a0

08007b84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b08a      	sub	sp, #40	; 0x28
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	605a      	str	r2, [r3, #4]
 8007b96:	609a      	str	r2, [r3, #8]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a29      	ldr	r2, [pc, #164]	; (8007c48 <HAL_I2C_MspInit+0xc4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d14b      	bne.n	8007c3e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	4a28      	ldr	r2, [pc, #160]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bac:	4b27      	ldr	r3, [pc, #156]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb0:	f043 0304 	orr.w	r3, r3, #4
 8007bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007bb6:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	613b      	str	r3, [r7, #16]
 8007bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60fb      	str	r3, [r7, #12]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bc8:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8007bd2:	4b1e      	ldr	r3, [pc, #120]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007be4:	2312      	movs	r3, #18
 8007be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007be8:	2301      	movs	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bec:	2303      	movs	r3, #3
 8007bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007bf4:	f107 0314 	add.w	r3, r7, #20
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4815      	ldr	r0, [pc, #84]	; (8007c50 <HAL_I2C_MspInit+0xcc>)
 8007bfc:	f7fc f856 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c06:	2312      	movs	r3, #18
 8007c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007c12:	2304      	movs	r3, #4
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c16:	f107 0314 	add.w	r3, r7, #20
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	480d      	ldr	r0, [pc, #52]	; (8007c54 <HAL_I2C_MspInit+0xd0>)
 8007c1e:	f7fc f845 	bl	8003cac <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007c22:	2300      	movs	r3, #0
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	4a09      	ldr	r2, [pc, #36]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007c28:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c30:	6413      	str	r3, [r2, #64]	; 0x40
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <HAL_I2C_MspInit+0xc8>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c3a:	60bb      	str	r3, [r7, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3728      	adds	r7, #40	; 0x28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	40005c00 	.word	0x40005c00
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	40020800 	.word	0x40020800
 8007c54:	40020000 	.word	0x40020000

08007c58 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	; 0x38
 8007c5c:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007c5e:	1d3b      	adds	r3, r7, #4
 8007c60:	2234      	movs	r2, #52	; 0x34
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f004 f96b 	bl	800bf40 <memset>

  hltdc.Instance = LTDC;
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c6c:	4a39      	ldr	r2, [pc, #228]	; (8007d54 <MX_LTDC_Init+0xfc>)
 8007c6e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007c70:	4b37      	ldr	r3, [pc, #220]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007c7c:	4b34      	ldr	r3, [pc, #208]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007c82:	4b33      	ldr	r3, [pc, #204]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8007c88:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c8a:	2209      	movs	r2, #9
 8007c8c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8007c8e:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007c94:	4b2e      	ldr	r3, [pc, #184]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c96:	221d      	movs	r2, #29
 8007c98:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8007c9a:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007c9c:	2203      	movs	r2, #3
 8007c9e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8007ca0:	4b2b      	ldr	r3, [pc, #172]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007ca2:	f240 120d 	movw	r2, #269	; 0x10d
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8007ca8:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007caa:	f240 1243 	movw	r2, #323	; 0x143
 8007cae:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8007cb0:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cb2:	f240 1217 	movw	r2, #279	; 0x117
 8007cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cba:	f240 1247 	movw	r2, #327	; 0x147
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007cc0:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007cc8:	4b21      	ldr	r3, [pc, #132]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007cd0:	4b1f      	ldr	r3, [pc, #124]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007cd8:	481d      	ldr	r0, [pc, #116]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007cda:	f7fc fc73 	bl	80045c4 <HAL_LTDC_Init>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8007ce4:	f003 fd0a 	bl	800b6fc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8007cec:	23f0      	movs	r3, #240	; 0xf0
 8007cee:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8007cf4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007cf8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8007cfe:	23ff      	movs	r3, #255	; 0xff
 8007d00:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007d0a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007d0c:	2307      	movs	r3, #7
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007d10:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8007d14:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007d16:	23f0      	movs	r3, #240	; 0xf0
 8007d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8007d1a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007d32:	1d3b      	adds	r3, r7, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	4619      	mov	r1, r3
 8007d38:	4805      	ldr	r0, [pc, #20]	; (8007d50 <MX_LTDC_Init+0xf8>)
 8007d3a:	f7fc fdd5 	bl	80048e8 <HAL_LTDC_ConfigLayer>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8007d44:	f003 fcda 	bl	800b6fc <Error_Handler>
  }

}
 8007d48:	bf00      	nop
 8007d4a:	3738      	adds	r7, #56	; 0x38
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000440 	.word	0x20000440
 8007d54:	40016800 	.word	0x40016800

08007d58 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08e      	sub	sp, #56	; 0x38
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	605a      	str	r2, [r3, #4]
 8007d6a:	609a      	str	r2, [r3, #8]
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a7b      	ldr	r2, [pc, #492]	; (8007f64 <HAL_LTDC_MspInit+0x20c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	f040 80f0 	bne.w	8007f5c <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	623b      	str	r3, [r7, #32]
 8007d80:	4a79      	ldr	r2, [pc, #484]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007d82:	4b79      	ldr	r3, [pc, #484]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8007d8c:	4b76      	ldr	r3, [pc, #472]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d94:	623b      	str	r3, [r7, #32]
 8007d96:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007d98:	2300      	movs	r3, #0
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	4a72      	ldr	r2, [pc, #456]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007d9e:	4b72      	ldr	r3, [pc, #456]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	f043 0320 	orr.w	r3, r3, #32
 8007da6:	6313      	str	r3, [r2, #48]	; 0x30
 8007da8:	4b6f      	ldr	r3, [pc, #444]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	f003 0320 	and.w	r3, r3, #32
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db4:	2300      	movs	r3, #0
 8007db6:	61bb      	str	r3, [r7, #24]
 8007db8:	4a6b      	ldr	r2, [pc, #428]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dba:	4b6b      	ldr	r3, [pc, #428]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	f043 0301 	orr.w	r3, r3, #1
 8007dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc4:	4b68      	ldr	r3, [pc, #416]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	61bb      	str	r3, [r7, #24]
 8007dce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	4a64      	ldr	r2, [pc, #400]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dd6:	4b64      	ldr	r3, [pc, #400]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f043 0302 	orr.w	r3, r3, #2
 8007dde:	6313      	str	r3, [r2, #48]	; 0x30
 8007de0:	4b61      	ldr	r3, [pc, #388]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	617b      	str	r3, [r7, #20]
 8007dea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	4a5d      	ldr	r2, [pc, #372]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007df2:	4b5d      	ldr	r3, [pc, #372]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8007dfc:	4b5a      	ldr	r3, [pc, #360]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e04:	613b      	str	r3, [r7, #16]
 8007e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
 8007e0c:	4a56      	ldr	r2, [pc, #344]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e0e:	4b56      	ldr	r3, [pc, #344]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	f043 0304 	orr.w	r3, r3, #4
 8007e16:	6313      	str	r3, [r2, #48]	; 0x30
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1c:	f003 0304 	and.w	r3, r3, #4
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007e24:	2300      	movs	r3, #0
 8007e26:	60bb      	str	r3, [r7, #8]
 8007e28:	4a4f      	ldr	r2, [pc, #316]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e2a:	4b4f      	ldr	r3, [pc, #316]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	f043 0308 	orr.w	r3, r3, #8
 8007e32:	6313      	str	r3, [r2, #48]	; 0x30
 8007e34:	4b4c      	ldr	r3, [pc, #304]	; (8007f68 <HAL_LTDC_MspInit+0x210>)
 8007e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8007e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e46:	2302      	movs	r3, #2
 8007e48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007e52:	230e      	movs	r3, #14
 8007e54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	4843      	ldr	r0, [pc, #268]	; (8007f6c <HAL_LTDC_MspInit+0x214>)
 8007e5e:	f7fb ff25 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin 
 8007e62:	f641 0358 	movw	r3, #6232	; 0x1858
 8007e66:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e70:	2300      	movs	r3, #0
 8007e72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007e74:	230e      	movs	r3, #14
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	483c      	ldr	r0, [pc, #240]	; (8007f70 <HAL_LTDC_MspInit+0x218>)
 8007e80:	f7fb ff14 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8007e84:	2303      	movs	r3, #3
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e90:	2300      	movs	r3, #0
 8007e92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007e94:	2309      	movs	r3, #9
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4835      	ldr	r0, [pc, #212]	; (8007f74 <HAL_LTDC_MspInit+0x21c>)
 8007ea0:	f7fb ff04 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8007ea4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8007ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eaa:	2302      	movs	r3, #2
 8007eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007eb6:	230e      	movs	r3, #14
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	482c      	ldr	r0, [pc, #176]	; (8007f74 <HAL_LTDC_MspInit+0x21c>)
 8007ec2:	f7fb fef3 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8007ec6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8007eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ecc:	2302      	movs	r3, #2
 8007ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007ed8:	230e      	movs	r3, #14
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4825      	ldr	r0, [pc, #148]	; (8007f78 <HAL_LTDC_MspInit+0x220>)
 8007ee4:	f7fb fee2 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|GPIO_PIN_10;
 8007ee8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007efa:	230e      	movs	r3, #14
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f02:	4619      	mov	r1, r3
 8007f04:	481d      	ldr	r0, [pc, #116]	; (8007f7c <HAL_LTDC_MspInit+0x224>)
 8007f06:	f7fb fed1 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|GPIO_PIN_6;
 8007f0a:	2348      	movs	r3, #72	; 0x48
 8007f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f16:	2300      	movs	r3, #0
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007f1a:	230e      	movs	r3, #14
 8007f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f22:	4619      	mov	r1, r3
 8007f24:	4816      	ldr	r0, [pc, #88]	; (8007f80 <HAL_LTDC_MspInit+0x228>)
 8007f26:	f7fb fec1 	bl	8003cac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8007f2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f30:	2302      	movs	r3, #2
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8007f3c:	2309      	movs	r3, #9
 8007f3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f44:	4619      	mov	r1, r3
 8007f46:	480c      	ldr	r0, [pc, #48]	; (8007f78 <HAL_LTDC_MspInit+0x220>)
 8007f48:	f7fb feb0 	bl	8003cac <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2105      	movs	r1, #5
 8007f50:	2058      	movs	r0, #88	; 0x58
 8007f52:	f7fb f90b 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007f56:	2058      	movs	r0, #88	; 0x58
 8007f58:	f7fb f924 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8007f5c:	bf00      	nop
 8007f5e:	3738      	adds	r7, #56	; 0x38
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40016800 	.word	0x40016800
 8007f68:	40023800 	.word	0x40023800
 8007f6c:	40021400 	.word	0x40021400
 8007f70:	40020000 	.word	0x40020000
 8007f74:	40020400 	.word	0x40020400
 8007f78:	40021800 	.word	0x40021800
 8007f7c:	40020800 	.word	0x40020800
 8007f80:	40020c00 	.word	0x40020c00

08007f84 <spi5_sendrecv>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t spi5_sendrecv(uint8_t byte) {
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
	uint8_t answer;

	HAL_SPI_TransmitReceive(&hspi5, &byte, &answer, 1, HAL_MAX_DELAY);
 8007f8e:	f107 020f 	add.w	r2, r7, #15
 8007f92:	1df9      	adds	r1, r7, #7
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4803      	ldr	r0, [pc, #12]	; (8007fac <spi5_sendrecv+0x28>)
 8007f9e:	f7fe f845 	bl	800602c <HAL_SPI_TransmitReceive>

	return answer;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000520 	.word	0x20000520

08007fb0 <SPI5_read>:

uint8_t SPI5_read(uint8_t address) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	71fb      	strb	r3, [r7, #7]
	uint8_t dane;
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	480c      	ldr	r0, [pc, #48]	; (8007ff0 <SPI5_read+0x40>)
 8007fc0:	f7fc f942 	bl	8004248 <HAL_GPIO_WritePin>
	spi5_sendrecv(address | 0x80);
 8007fc4:	79fb      	ldrb	r3, [r7, #7]
 8007fc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff ffd9 	bl	8007f84 <spi5_sendrecv>
	dane = spi5_sendrecv(0xFF);
 8007fd2:	20ff      	movs	r0, #255	; 0xff
 8007fd4:	f7ff ffd6 	bl	8007f84 <spi5_sendrecv>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2102      	movs	r1, #2
 8007fe0:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <SPI5_read+0x40>)
 8007fe2:	f7fc f931 	bl	8004248 <HAL_GPIO_WritePin>

	return dane;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40020800 	.word	0x40020800

08007ff4 <OurL3GD20_Read>:

	//Everything OK
	return 0;
}

void OurL3GD20_Read() {
 8007ff4:	b590      	push	{r4, r7, lr}
 8007ff6:	b087      	sub	sp, #28
 8007ff8:	af00      	add	r7, sp, #0
	float s;
	short temp1, temp2, temp3;

	// Read X axis

	temp1 = (SPI5_read(0x28) | SPI5_read(0x29) << 8);
 8007ffa:	2028      	movs	r0, #40	; 0x28
 8007ffc:	f7ff ffd8 	bl	8007fb0 <SPI5_read>
 8008000:	4603      	mov	r3, r0
 8008002:	b21c      	sxth	r4, r3
 8008004:	2029      	movs	r0, #41	; 0x29
 8008006:	f7ff ffd3 	bl	8007fb0 <SPI5_read>
 800800a:	4603      	mov	r3, r0
 800800c:	021b      	lsls	r3, r3, #8
 800800e:	b21b      	sxth	r3, r3
 8008010:	4323      	orrs	r3, r4
 8008012:	82fb      	strh	r3, [r7, #22]
	temp2 = (SPI5_read(0x2A) | SPI5_read(0x2B) << 8);
 8008014:	202a      	movs	r0, #42	; 0x2a
 8008016:	f7ff ffcb 	bl	8007fb0 <SPI5_read>
 800801a:	4603      	mov	r3, r0
 800801c:	b21c      	sxth	r4, r3
 800801e:	202b      	movs	r0, #43	; 0x2b
 8008020:	f7ff ffc6 	bl	8007fb0 <SPI5_read>
 8008024:	4603      	mov	r3, r0
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	b21b      	sxth	r3, r3
 800802a:	4323      	orrs	r3, r4
 800802c:	82bb      	strh	r3, [r7, #20]
	temp3 = (SPI5_read(0x2C) | SPI5_read(0x2D) << 8);
 800802e:	202c      	movs	r0, #44	; 0x2c
 8008030:	f7ff ffbe 	bl	8007fb0 <SPI5_read>
 8008034:	4603      	mov	r3, r0
 8008036:	b21c      	sxth	r4, r3
 8008038:	202d      	movs	r0, #45	; 0x2d
 800803a:	f7ff ffb9 	bl	8007fb0 <SPI5_read>
 800803e:	4603      	mov	r3, r0
 8008040:	021b      	lsls	r3, r3, #8
 8008042:	b21b      	sxth	r3, r3
 8008044:	4323      	orrs	r3, r4
 8008046:	827b      	strh	r3, [r7, #18]

	// Sensitivity at 250 range = 8.75 mdps/digit
	s = 8.75 * 0.001;
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <OurL3GD20_Read+0xcc>)
 800804a:	60fb      	str	r3, [r7, #12]

	DataNow.OsX = (short) ((float) temp1 * s);
 800804c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008050:	ee07 3a90 	vmov	s15, r3
 8008054:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008058:	edd7 7a03 	vldr	s15, [r7, #12]
 800805c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008064:	edc7 7a01 	vstr	s15, [r7, #4]
 8008068:	88bb      	ldrh	r3, [r7, #4]
 800806a:	b21a      	sxth	r2, r3
 800806c:	4b15      	ldr	r3, [pc, #84]	; (80080c4 <OurL3GD20_Read+0xd0>)
 800806e:	801a      	strh	r2, [r3, #0]
	DataNow.OsY = (short) ((float) temp2 * s);
 8008070:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008074:	ee07 3a90 	vmov	s15, r3
 8008078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800807c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008088:	edc7 7a01 	vstr	s15, [r7, #4]
 800808c:	88bb      	ldrh	r3, [r7, #4]
 800808e:	b21a      	sxth	r2, r3
 8008090:	4b0c      	ldr	r3, [pc, #48]	; (80080c4 <OurL3GD20_Read+0xd0>)
 8008092:	805a      	strh	r2, [r3, #2]
	DataNow.OsZ = (short) ((float) temp3 * s);
 8008094:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008098:	ee07 3a90 	vmov	s15, r3
 800809c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80080a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80080a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80080ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80080b0:	88bb      	ldrh	r3, [r7, #4]
 80080b2:	b21a      	sxth	r2, r3
 80080b4:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <OurL3GD20_Read+0xd0>)
 80080b6:	809a      	strh	r2, [r3, #4]

}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd90      	pop	{r4, r7, pc}
 80080c0:	3c0f5c29 	.word	0x3c0f5c29
 80080c4:	200005d0 	.word	0x200005d0

080080c8 <send_char>:

void send_char(char c) {
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*) &c, 1, 1000);
 80080d2:	1df9      	adds	r1, r7, #7
 80080d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80080d8:	2201      	movs	r2, #1
 80080da:	4803      	ldr	r0, [pc, #12]	; (80080e8 <send_char+0x20>)
 80080dc:	f7fe fe52 	bl	8006d84 <HAL_UART_Transmit>
}
 80080e0:	bf00      	nop
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	2000075c 	.word	0x2000075c

080080ec <__io_putchar>:

int __io_putchar(int ch) {
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	send_char(ch);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7ff ffe5 	bl	80080c8 <send_char>
	return ch;
 80080fe:	687b      	ldr	r3, [r7, #4]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008108:	b5b0      	push	{r4, r5, r7, lr}
 800810a:	b094      	sub	sp, #80	; 0x50
 800810c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800810e:	f7fa ff13 	bl	8002f38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008112:	f001 f9dd 	bl	80094d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008116:	f7ff fbd9 	bl	80078cc <MX_GPIO_Init>
	MX_CRC_Init();
 800811a:	f7ff fa61 	bl	80075e0 <MX_CRC_Init>
	MX_DMA2D_Init();
 800811e:	f7ff fa95 	bl	800764c <MX_DMA2D_Init>
	MX_FMC_Init();
 8008122:	f7ff faed 	bl	8007700 <MX_FMC_Init>
	MX_LTDC_Init();
 8008126:	f7ff fd97 	bl	8007c58 <MX_LTDC_Init>
	MX_SPI5_Init();
 800812a:	f003 faef 	bl	800b70c <MX_SPI5_Init>
	MX_TIM1_Init();
 800812e:	f003 fd3d 	bl	800bbac <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8008132:	f003 fe3f 	bl	800bdb4 <MX_USART1_UART_Init>
	MX_I2C3_Init();
 8008136:	f7ff fce5 	bl	8007b04 <MX_I2C3_Init>
	MX_TIM10_Init();
 800813a:	f003 fd87 	bl	800bc4c <MX_TIM10_Init>
	MX_TIM11_Init();
 800813e:	f003 fda9 	bl	800bc94 <MX_TIM11_Init>
	MX_GFXSIMULATOR_Init();
 8008142:	f7ff fbbb 	bl	80078bc <MX_GFXSIMULATOR_Init>
	/* USER CODE BEGIN 2 */

	__HAL_SPI_ENABLE(&hspi5);
 8008146:	4b97      	ldr	r3, [pc, #604]	; (80083a4 <main+0x29c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a96      	ldr	r2, [pc, #600]	; (80083a4 <main+0x29c>)
 800814c:	6812      	ldr	r2, [r2, #0]
 800814e:	6812      	ldr	r2, [r2, #0]
 8008150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008154:	601a      	str	r2, [r3, #0]

	//Do testu*************
	LicznikPomocniczy = 0;
 8008156:	4b94      	ldr	r3, [pc, #592]	; (80083a8 <main+0x2a0>)
 8008158:	2200      	movs	r2, #0
 800815a:	701a      	strb	r2, [r3, #0]
	LicznikPomocniczyRomberg = 0;
 800815c:	4b93      	ldr	r3, [pc, #588]	; (80083ac <main+0x2a4>)
 800815e:	2200      	movs	r2, #0
 8008160:	701a      	strb	r2, [r3, #0]
	//*********************

	//Poczatkowy stan gry**
	StanGry = Menu;
 8008162:	4b93      	ldr	r3, [pc, #588]	; (80083b0 <main+0x2a8>)
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
	StanMenu = NowaGra;
 8008168:	4b92      	ldr	r3, [pc, #584]	; (80083b4 <main+0x2ac>)
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
	ZmienionoStanMenu = 1;
 800816e:	4b92      	ldr	r3, [pc, #584]	; (80083b8 <main+0x2b0>)
 8008170:	2201      	movs	r2, #1
 8008172:	701a      	strb	r2, [r3, #0]
	ZmienionoStanPoziomow = 1;
 8008174:	4b91      	ldr	r3, [pc, #580]	; (80083bc <main+0x2b4>)
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]
	WybranyPoziom = 0;
 800817a:	4b91      	ldr	r3, [pc, #580]	; (80083c0 <main+0x2b8>)
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
	RozpoczetoNowaGre = 0;
 8008180:	4b90      	ldr	r3, [pc, #576]	; (80083c4 <main+0x2bc>)
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
	CzyGra = 0;
 8008186:	4b90      	ldr	r3, [pc, #576]	; (80083c8 <main+0x2c0>)
 8008188:	2200      	movs	r2, #0
 800818a:	701a      	strb	r2, [r3, #0]
	KontynuowanaGra = 0;
 800818c:	4b8f      	ldr	r3, [pc, #572]	; (80083cc <main+0x2c4>)
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
	Wygrana = 0;
 8008192:	4b8f      	ldr	r3, [pc, #572]	; (80083d0 <main+0x2c8>)
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
	//*********************

	OpoznienieDodatniX = 0;
 8008198:	4b8e      	ldr	r3, [pc, #568]	; (80083d4 <main+0x2cc>)
 800819a:	2200      	movs	r2, #0
 800819c:	701a      	strb	r2, [r3, #0]
	OpoznienieDodatniY = 0;
 800819e:	4b8e      	ldr	r3, [pc, #568]	; (80083d8 <main+0x2d0>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
	OpoznienieUjemnyX = 0;
 80081a4:	4b8d      	ldr	r3, [pc, #564]	; (80083dc <main+0x2d4>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
	OpoznienieUjemnyY = 0;
 80081aa:	4b8d      	ldr	r3, [pc, #564]	; (80083e0 <main+0x2d8>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	701a      	strb	r2, [r3, #0]

	Animacja = 0;
 80081b0:	4b8c      	ldr	r3, [pc, #560]	; (80083e4 <main+0x2dc>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	701a      	strb	r2, [r3, #0]
	Direction = 1;
 80081b6:	4b8c      	ldr	r3, [pc, #560]	; (80083e8 <main+0x2e0>)
 80081b8:	2201      	movs	r2, #1
 80081ba:	701a      	strb	r2, [r3, #0]
	X = 120;
 80081bc:	4b8b      	ldr	r3, [pc, #556]	; (80083ec <main+0x2e4>)
 80081be:	2278      	movs	r2, #120	; 0x78
 80081c0:	801a      	strh	r2, [r3, #0]
	Y = 170;
 80081c2:	4b8b      	ldr	r3, [pc, #556]	; (80083f0 <main+0x2e8>)
 80081c4:	22aa      	movs	r2, #170	; 0xaa
 80081c6:	801a      	strh	r2, [r3, #0]
	dT = 0.001;
 80081c8:	4b8a      	ldr	r3, [pc, #552]	; (80083f4 <main+0x2ec>)
 80081ca:	4a8b      	ldr	r2, [pc, #556]	; (80083f8 <main+0x2f0>)
 80081cc:	601a      	str	r2, [r3, #0]
	fMovedX = 0;
 80081ce:	4b8b      	ldr	r3, [pc, #556]	; (80083fc <main+0x2f4>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
	fMovedY = 0;
 80081d4:	4b8a      	ldr	r3, [pc, #552]	; (8008400 <main+0x2f8>)
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
	ResetTimeX = 0;
 80081da:	4b8a      	ldr	r3, [pc, #552]	; (8008404 <main+0x2fc>)
 80081dc:	2200      	movs	r2, #0
 80081de:	801a      	strh	r2, [r3, #0]
	ResetTimeY = 0;
 80081e0:	4b89      	ldr	r3, [pc, #548]	; (8008408 <main+0x300>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	801a      	strh	r2, [r3, #0]

	BSP_LCD_Init();
 80081e6:	f7f9 fc63 	bl	8001ab0 <BSP_LCD_Init>
	//BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER+1024*1024*4);
	BSP_LCD_LayerDefaultInit(LCD_BACKGROUND_LAYER, LCD_FRAME_BUFFER);
 80081ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7f9 fce0 	bl	8001bb4 <BSP_LCD_LayerDefaultInit>

	BSP_LCD_SelectLayer(LCD_BACKGROUND_LAYER);
 80081f4:	2000      	movs	r0, #0
 80081f6:	f7f9 fd41 	bl	8001c7c <BSP_LCD_SelectLayer>

	BSP_LCD_DisplayOn();
 80081fa:	f7fa fa91 	bl	8002720 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80081fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008202:	f7f9 fd7d 	bl	8001d00 <BSP_LCD_Clear>
//  //*********************************

	//BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
	//BSP_LCD_DisplayStringAtLine(5, (uint8_t*) "Hello");

	HAL_Delay(1000);
 8008206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800820a:	f7fa fed7 	bl	8002fbc <HAL_Delay>
	BSP_LCD_ClearStringLine(5);
 800820e:	2005      	movs	r0, #5
 8008210:	f7f9 fd9e 	bl	8001d50 <BSP_LCD_ClearStringLine>

	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008218:	f7f9 fd72 	bl	8001d00 <BSP_LCD_Clear>
//  BSP_LCD_FillRect(0, 305, 240, 15);
//  BSP_LCD_FillRect(0, 15, 15, 290);
//  BSP_LCD_FillRect(225, 15, 15, 290);
	//*********************************

	if (BSP_GYRO_Init() == GYRO_ERROR) {
 800821c:	f7f9 fbde 	bl	80019dc <BSP_GYRO_Init>
 8008220:	4603      	mov	r3, r0
 8008222:	2b01      	cmp	r3, #1
 8008224:	d106      	bne.n	8008234 <main+0x12c>
		printf("Nie udalo sie polaczyc z zyroskopem");
 8008226:	4879      	ldr	r0, [pc, #484]	; (800840c <main+0x304>)
 8008228:	f003 fe92 	bl	800bf50 <iprintf>
		HAL_Delay(10000);
 800822c:	f242 7010 	movw	r0, #10000	; 0x2710
 8008230:	f7fa fec4 	bl	8002fbc <HAL_Delay>
	}

	czasZmiany = 0;
 8008234:	4b76      	ldr	r3, [pc, #472]	; (8008410 <main+0x308>)
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 800823a:	4876      	ldr	r0, [pc, #472]	; (8008414 <main+0x30c>)
 800823c:	f7fe f98c 	bl	8006558 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim11);
 8008240:	4875      	ldr	r0, [pc, #468]	; (8008418 <main+0x310>)
 8008242:	f7fe f989 	bl	8006558 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (HAL_GetTick() - czasZmiany > 1500) {
 8008246:	f7fa fead 	bl	8002fa4 <HAL_GetTick>
 800824a:	4602      	mov	r2, r0
 800824c:	4b70      	ldr	r3, [pc, #448]	; (8008410 <main+0x308>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1ad3      	subs	r3, r2, r3
 8008252:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008256:	4293      	cmp	r3, r2
 8008258:	d935      	bls.n	80082c6 <main+0x1be>
			if (StanGry == Menu) {
 800825a:	4b55      	ldr	r3, [pc, #340]	; (80083b0 <main+0x2a8>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	2b00      	cmp	r3, #0
 8008262:	d113      	bne.n	800828c <main+0x184>

				StanMenu = (StanMenu + 1) % 3;
 8008264:	4b53      	ldr	r3, [pc, #332]	; (80083b4 <main+0x2ac>)
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b2db      	uxtb	r3, r3
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	4b6b      	ldr	r3, [pc, #428]	; (800841c <main+0x314>)
 800826e:	fb83 3102 	smull	r3, r1, r3, r2
 8008272:	17d3      	asrs	r3, r2, #31
 8008274:	1ac9      	subs	r1, r1, r3
 8008276:	460b      	mov	r3, r1
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	440b      	add	r3, r1
 800827c:	1ad1      	subs	r1, r2, r3
 800827e:	b2ca      	uxtb	r2, r1
 8008280:	4b4c      	ldr	r3, [pc, #304]	; (80083b4 <main+0x2ac>)
 8008282:	701a      	strb	r2, [r3, #0]
				ZmienionoStanMenu = 1;
 8008284:	4b4c      	ldr	r3, [pc, #304]	; (80083b8 <main+0x2b0>)
 8008286:	2201      	movs	r2, #1
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	e017      	b.n	80082bc <main+0x1b4>

			} else if (StanGry == WyborPoziomu) {
 800828c:	4b48      	ldr	r3, [pc, #288]	; (80083b0 <main+0x2a8>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d112      	bne.n	80082bc <main+0x1b4>
				WybranyPoziom = (WybranyPoziom + 1) % 3;
 8008296:	4b4a      	ldr	r3, [pc, #296]	; (80083c0 <main+0x2b8>)
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	4b5f      	ldr	r3, [pc, #380]	; (800841c <main+0x314>)
 80082a0:	fb83 3102 	smull	r3, r1, r3, r2
 80082a4:	17d3      	asrs	r3, r2, #31
 80082a6:	1ac9      	subs	r1, r1, r3
 80082a8:	460b      	mov	r3, r1
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	440b      	add	r3, r1
 80082ae:	1ad1      	subs	r1, r2, r3
 80082b0:	b2ca      	uxtb	r2, r1
 80082b2:	4b43      	ldr	r3, [pc, #268]	; (80083c0 <main+0x2b8>)
 80082b4:	701a      	strb	r2, [r3, #0]
				ZmienionoStanPoziomow = 1;
 80082b6:	4b41      	ldr	r3, [pc, #260]	; (80083bc <main+0x2b4>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]
			}

			czasZmiany = HAL_GetTick();
 80082bc:	f7fa fe72 	bl	8002fa4 <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	4b53      	ldr	r3, [pc, #332]	; (8008410 <main+0x308>)
 80082c4:	601a      	str	r2, [r3, #0]
		}
		//Sprawdzanie stanu przycisku*****************
		OdczytanyStanPrzycisku = HAL_GPIO_ReadPin(BB_GPIO_Port, BB_Pin);
 80082c6:	2101      	movs	r1, #1
 80082c8:	4855      	ldr	r0, [pc, #340]	; (8008420 <main+0x318>)
 80082ca:	f7fb ffa5 	bl	8004218 <HAL_GPIO_ReadPin>
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]

		if (OdczytanyStanPrzycisku != PoprzedniStanPrzycisku) {
 80082d2:	4b54      	ldr	r3, [pc, #336]	; (8008424 <main+0x31c>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	79fa      	ldrb	r2, [r7, #7]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d004      	beq.n	80082e6 <main+0x1de>
			PoprzedniCzasPrzycisku = HAL_GetTick();
 80082dc:	f7fa fe62 	bl	8002fa4 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	4b51      	ldr	r3, [pc, #324]	; (8008428 <main+0x320>)
 80082e4:	601a      	str	r2, [r3, #0]
		}

		if ((HAL_GetTick() - PoprzedniCzasPrzycisku) > 10) {
 80082e6:	f7fa fe5d 	bl	8002fa4 <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4b4e      	ldr	r3, [pc, #312]	; (8008428 <main+0x320>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b0a      	cmp	r3, #10
 80082f4:	f240 80a9 	bls.w	800844a <main+0x342>
			if (OdczytanyStanPrzycisku != StanPrzycisku) {
 80082f8:	4b4c      	ldr	r3, [pc, #304]	; (800842c <main+0x324>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	79fa      	ldrb	r2, [r7, #7]
 80082fe:	429a      	cmp	r2, r3
 8008300:	f000 80a3 	beq.w	800844a <main+0x342>
				StanPrzycisku = OdczytanyStanPrzycisku;
 8008304:	4a49      	ldr	r2, [pc, #292]	; (800842c <main+0x324>)
 8008306:	79fb      	ldrb	r3, [r7, #7]
 8008308:	7013      	strb	r3, [r2, #0]
//                  }
				//}

				//Przetestowac !!!!!!!!!!!!!!!!!
				//Jezeli przytrzymamy przycisk dluzej nastapi przejscie miedzy gra, a menu
				if (StanPrzycisku == GPIO_PIN_SET) {
 800830a:	4b48      	ldr	r3, [pc, #288]	; (800842c <main+0x324>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b01      	cmp	r3, #1
 8008310:	f040 809b 	bne.w	800844a <main+0x342>

					if (StanGry == Menu && StanMenu == NowaGra) {
 8008314:	4b26      	ldr	r3, [pc, #152]	; (80083b0 <main+0x2a8>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10e      	bne.n	800833c <main+0x234>
 800831e:	4b25      	ldr	r3, [pc, #148]	; (80083b4 <main+0x2ac>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d109      	bne.n	800833c <main+0x234>
						StanGry = Gra;
 8008328:	4b21      	ldr	r3, [pc, #132]	; (80083b0 <main+0x2a8>)
 800832a:	2201      	movs	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
						RozpoczetoNowaGre = 1;
 800832e:	4b25      	ldr	r3, [pc, #148]	; (80083c4 <main+0x2bc>)
 8008330:	2201      	movs	r2, #1
 8008332:	701a      	strb	r2, [r3, #0]
						CzyGra = 1;
 8008334:	4b24      	ldr	r3, [pc, #144]	; (80083c8 <main+0x2c0>)
 8008336:	2201      	movs	r2, #1
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e081      	b.n	8008440 <main+0x338>

					} else if (StanGry == Menu && StanMenu == KontynuujGre
 800833c:	4b1c      	ldr	r3, [pc, #112]	; (80083b0 <main+0x2a8>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d110      	bne.n	8008368 <main+0x260>
 8008346:	4b1b      	ldr	r3, [pc, #108]	; (80083b4 <main+0x2ac>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	d10b      	bne.n	8008368 <main+0x260>
							&& CzyGra == 1) {
 8008350:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <main+0x2c0>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d106      	bne.n	8008368 <main+0x260>
						StanGry = Gra;
 800835a:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <main+0x2a8>)
 800835c:	2201      	movs	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
						KontynuowanaGra = 1;
 8008360:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <main+0x2c4>)
 8008362:	2201      	movs	r2, #1
 8008364:	701a      	strb	r2, [r3, #0]
 8008366:	e06b      	b.n	8008440 <main+0x338>
					} else if (StanGry == Menu && StanMenu == ZmienPoziom) {
 8008368:	4b11      	ldr	r3, [pc, #68]	; (80083b0 <main+0x2a8>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10e      	bne.n	8008390 <main+0x288>
 8008372:	4b10      	ldr	r3, [pc, #64]	; (80083b4 <main+0x2ac>)
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b02      	cmp	r3, #2
 800837a:	d109      	bne.n	8008390 <main+0x288>
						StanGry = WyborPoziomu;
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <main+0x2a8>)
 800837e:	2202      	movs	r2, #2
 8008380:	701a      	strb	r2, [r3, #0]
						WybranyPoziom = 0;
 8008382:	4b0f      	ldr	r3, [pc, #60]	; (80083c0 <main+0x2b8>)
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
						ZmienionoStanPoziomow = 1;
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <main+0x2b4>)
 800838a:	2201      	movs	r2, #1
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	e057      	b.n	8008440 <main+0x338>

					} else if (StanGry == WyborPoziomu) {
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <main+0x2a8>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d14a      	bne.n	8008430 <main+0x328>
						StanGry = Menu;
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <main+0x2a8>)
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
 80083a0:	e04e      	b.n	8008440 <main+0x338>
 80083a2:	bf00      	nop
 80083a4:	20000520 	.word	0x20000520
 80083a8:	20000618 	.word	0x20000618
 80083ac:	20000588 	.word	0x20000588
 80083b0:	20000629 	.word	0x20000629
 80083b4:	200005fd 	.word	0x200005fd
 80083b8:	2000062a 	.word	0x2000062a
 80083bc:	200005a3 	.word	0x200005a3
 80083c0:	20000642 	.word	0x20000642
 80083c4:	20000620 	.word	0x20000620
 80083c8:	20000589 	.word	0x20000589
 80083cc:	200004f9 	.word	0x200004f9
 80083d0:	200005fe 	.word	0x200005fe
 80083d4:	20000578 	.word	0x20000578
 80083d8:	200005b0 	.word	0x200005b0
 80083dc:	200005a2 	.word	0x200005a2
 80083e0:	20000604 	.word	0x20000604
 80083e4:	200005fc 	.word	0x200005fc
 80083e8:	200004f8 	.word	0x200004f8
 80083ec:	20000658 	.word	0x20000658
 80083f0:	200005c4 	.word	0x200005c4
 80083f4:	20000598 	.word	0x20000598
 80083f8:	3a83126f 	.word	0x3a83126f
 80083fc:	200005e4 	.word	0x200005e4
 8008400:	20000628 	.word	0x20000628
 8008404:	200005d6 	.word	0x200005d6
 8008408:	20000640 	.word	0x20000640
 800840c:	0800cd58 	.word	0x0800cd58
 8008410:	20000614 	.word	0x20000614
 8008414:	2000069c 	.word	0x2000069c
 8008418:	200006dc 	.word	0x200006dc
 800841c:	55555556 	.word	0x55555556
 8008420:	40020000 	.word	0x40020000
 8008424:	200002b0 	.word	0x200002b0
 8008428:	2000057c 	.word	0x2000057c
 800842c:	20000580 	.word	0x20000580

					} else if (StanGry == Gra) {
 8008430:	4bbe      	ldr	r3, [pc, #760]	; (800872c <main+0x624>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	d102      	bne.n	8008440 <main+0x338>
						StanGry = Menu;
 800843a:	4bbc      	ldr	r3, [pc, #752]	; (800872c <main+0x624>)
 800843c:	2200      	movs	r2, #0
 800843e:	701a      	strb	r2, [r3, #0]
					}

					PoprzedniCzasPrzycisku = HAL_GetTick();
 8008440:	f7fa fdb0 	bl	8002fa4 <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	4bba      	ldr	r3, [pc, #744]	; (8008730 <main+0x628>)
 8008448:	601a      	str	r2, [r3, #0]

				}
			}
		}

		PoprzedniStanPrzycisku = OdczytanyStanPrzycisku;
 800844a:	4aba      	ldr	r2, [pc, #744]	; (8008734 <main+0x62c>)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	7013      	strb	r3, [r2, #0]

		//Koniec sprawdzania stanu przycisku**********

		//Petla gry***********************************

		if (StanGry == Menu)
 8008450:	4bb6      	ldr	r3, [pc, #728]	; (800872c <main+0x624>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d13f      	bne.n	80084da <main+0x3d2>

		{
			X_pri = 0;
 800845a:	4bb7      	ldr	r3, [pc, #732]	; (8008738 <main+0x630>)
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
			V_priX = 0;
 8008460:	4bb6      	ldr	r3, [pc, #728]	; (800873c <main+0x634>)
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]

			X_post = 0;
 8008466:	4bb6      	ldr	r3, [pc, #728]	; (8008740 <main+0x638>)
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
			V_postX = 0;
 800846c:	4bb5      	ldr	r3, [pc, #724]	; (8008744 <main+0x63c>)
 800846e:	2200      	movs	r2, #0
 8008470:	601a      	str	r2, [r3, #0]

			Y_pri = 0;
 8008472:	4bb5      	ldr	r3, [pc, #724]	; (8008748 <main+0x640>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
			V_priY = 0;
 8008478:	4bb4      	ldr	r3, [pc, #720]	; (800874c <main+0x644>)
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]

			Y_post = 0;
 800847e:	4bb4      	ldr	r3, [pc, #720]	; (8008750 <main+0x648>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
			V_postY = 0;
 8008484:	4bb3      	ldr	r3, [pc, #716]	; (8008754 <main+0x64c>)
 8008486:	2200      	movs	r2, #0
 8008488:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim11);
 800848a:	48b3      	ldr	r0, [pc, #716]	; (8008758 <main+0x650>)
 800848c:	f7fe f888 	bl	80065a0 <HAL_TIM_Base_Stop_IT>
			if (ZmienionoStanMenu == 1) {
 8008490:	4bb2      	ldr	r3, [pc, #712]	; (800875c <main+0x654>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b01      	cmp	r3, #1
 8008498:	f47f aed5 	bne.w	8008246 <main+0x13e>
				switch (StanMenu) {
 800849c:	4bb0      	ldr	r3, [pc, #704]	; (8008760 <main+0x658>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d009      	beq.n	80084ba <main+0x3b2>
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d00d      	beq.n	80084c6 <main+0x3be>
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d111      	bne.n	80084d2 <main+0x3ca>
				case NowaGra:
					BSP_LCD_DrawBitmap(0, 0,
 80084ae:	4aad      	ldr	r2, [pc, #692]	; (8008764 <main+0x65c>)
 80084b0:	2100      	movs	r1, #0
 80084b2:	2000      	movs	r0, #0
 80084b4:	f7f9 ffa6 	bl	8002404 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_nowagra);
					break;
 80084b8:	e00b      	b.n	80084d2 <main+0x3ca>

				case KontynuujGre:
					BSP_LCD_DrawBitmap(0, 0,
 80084ba:	4aab      	ldr	r2, [pc, #684]	; (8008768 <main+0x660>)
 80084bc:	2100      	movs	r1, #0
 80084be:	2000      	movs	r0, #0
 80084c0:	f7f9 ffa0 	bl	8002404 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_kontynuuj);
					break;
 80084c4:	e005      	b.n	80084d2 <main+0x3ca>

				case ZmienPoziom:

					BSP_LCD_DrawBitmap(0, 0,
 80084c6:	4aa9      	ldr	r2, [pc, #676]	; (800876c <main+0x664>)
 80084c8:	2100      	movs	r1, #0
 80084ca:	2000      	movs	r0, #0
 80084cc:	f7f9 ff9a 	bl	8002404 <BSP_LCD_DrawBitmap>
							(uint8_t*) image_data_Menu_poziomy);
					break;
 80084d0:	bf00      	nop
				}

				ZmienionoStanMenu = 0;
 80084d2:	4ba2      	ldr	r3, [pc, #648]	; (800875c <main+0x654>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
 80084d8:	e6b5      	b.n	8008246 <main+0x13e>
			}

		} else if (StanGry == WyborPoziomu) {
 80084da:	4b94      	ldr	r3, [pc, #592]	; (800872c <main+0x624>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	f040 80a6 	bne.w	8008632 <main+0x52a>
			if (ZmienionoStanPoziomow == 1) {
 80084e6:	4ba2      	ldr	r3, [pc, #648]	; (8008770 <main+0x668>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	f47f aeaa 	bne.w	8008246 <main+0x13e>
				switch (WybranyPoziom) {
 80084f2:	4ba0      	ldr	r3, [pc, #640]	; (8008774 <main+0x66c>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d032      	beq.n	8008562 <main+0x45a>
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d062      	beq.n	80085c6 <main+0x4be>
 8008500:	2b00      	cmp	r3, #0
 8008502:	d000      	beq.n	8008506 <main+0x3fe>
					BSP_LCD_FillRect(160, 20, 60, 60);
					BSP_LCD_DisplayChar(170, 30, 51);
					break;

				default:
					break;
 8008504:	e091      	b.n	800862a <main+0x522>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008506:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800850a:	f7f9 fbf9 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800850e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8008512:	f7f9 fbc3 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8008516:	233c      	movs	r3, #60	; 0x3c
 8008518:	223c      	movs	r2, #60	; 0x3c
 800851a:	2114      	movs	r1, #20
 800851c:	2014      	movs	r0, #20
 800851e:	f7fa f805 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 8008522:	2231      	movs	r2, #49	; 0x31
 8008524:	211e      	movs	r1, #30
 8008526:	201e      	movs	r0, #30
 8008528:	f7f9 fc76 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800852c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008530:	f7f9 fbb4 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8008534:	233c      	movs	r3, #60	; 0x3c
 8008536:	223c      	movs	r2, #60	; 0x3c
 8008538:	2114      	movs	r1, #20
 800853a:	205a      	movs	r0, #90	; 0x5a
 800853c:	f7f9 fff6 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8008540:	2232      	movs	r2, #50	; 0x32
 8008542:	211e      	movs	r1, #30
 8008544:	2064      	movs	r0, #100	; 0x64
 8008546:	f7f9 fc67 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_FillRect(160, 20, 60, 60);
 800854a:	233c      	movs	r3, #60	; 0x3c
 800854c:	223c      	movs	r2, #60	; 0x3c
 800854e:	2114      	movs	r1, #20
 8008550:	20a0      	movs	r0, #160	; 0xa0
 8008552:	f7f9 ffeb 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 8008556:	2233      	movs	r2, #51	; 0x33
 8008558:	211e      	movs	r1, #30
 800855a:	20aa      	movs	r0, #170	; 0xaa
 800855c:	f7f9 fc5c 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 8008560:	e063      	b.n	800862a <main+0x522>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008566:	f7f9 fbcb 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800856a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800856e:	f7f9 fb95 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 8008572:	233c      	movs	r3, #60	; 0x3c
 8008574:	223c      	movs	r2, #60	; 0x3c
 8008576:	2114      	movs	r1, #20
 8008578:	2014      	movs	r0, #20
 800857a:	f7f9 ffd7 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 800857e:	2231      	movs	r2, #49	; 0x31
 8008580:	211e      	movs	r1, #30
 8008582:	201e      	movs	r0, #30
 8008584:	f7f9 fc48 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008588:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800858c:	f7f9 fb86 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 8008590:	233c      	movs	r3, #60	; 0x3c
 8008592:	223c      	movs	r2, #60	; 0x3c
 8008594:	2114      	movs	r1, #20
 8008596:	205a      	movs	r0, #90	; 0x5a
 8008598:	f7f9 ffc8 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 800859c:	2232      	movs	r2, #50	; 0x32
 800859e:	211e      	movs	r1, #30
 80085a0:	2064      	movs	r0, #100	; 0x64
 80085a2:	f7f9 fc39 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80085a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80085aa:	f7f9 fb77 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 80085ae:	233c      	movs	r3, #60	; 0x3c
 80085b0:	223c      	movs	r2, #60	; 0x3c
 80085b2:	2114      	movs	r1, #20
 80085b4:	20a0      	movs	r0, #160	; 0xa0
 80085b6:	f7f9 ffb9 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 80085ba:	2233      	movs	r2, #51	; 0x33
 80085bc:	211e      	movs	r1, #30
 80085be:	20aa      	movs	r0, #170	; 0xaa
 80085c0:	f7f9 fc2a 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 80085c4:	e031      	b.n	800862a <main+0x522>
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085ca:	f7f9 fb99 	bl	8001d00 <BSP_LCD_Clear>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80085ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80085d2:	f7f9 fb63 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(20, 20, 60, 60);
 80085d6:	233c      	movs	r3, #60	; 0x3c
 80085d8:	223c      	movs	r2, #60	; 0x3c
 80085da:	2114      	movs	r1, #20
 80085dc:	2014      	movs	r0, #20
 80085de:	f7f9 ffa5 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(30, 30, 49);
 80085e2:	2231      	movs	r2, #49	; 0x31
 80085e4:	211e      	movs	r1, #30
 80085e6:	201e      	movs	r0, #30
 80085e8:	f7f9 fc16 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80085ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80085f0:	f7f9 fb54 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(90, 20, 60, 60);
 80085f4:	233c      	movs	r3, #60	; 0x3c
 80085f6:	223c      	movs	r2, #60	; 0x3c
 80085f8:	2114      	movs	r1, #20
 80085fa:	205a      	movs	r0, #90	; 0x5a
 80085fc:	f7f9 ff96 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(100, 30, 50);
 8008600:	2232      	movs	r2, #50	; 0x32
 8008602:	211e      	movs	r1, #30
 8008604:	2064      	movs	r0, #100	; 0x64
 8008606:	f7f9 fc07 	bl	8001e18 <BSP_LCD_DisplayChar>
					BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800860a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 800860e:	f7f9 fb45 	bl	8001c9c <BSP_LCD_SetTextColor>
					BSP_LCD_FillRect(160, 20, 60, 60);
 8008612:	233c      	movs	r3, #60	; 0x3c
 8008614:	223c      	movs	r2, #60	; 0x3c
 8008616:	2114      	movs	r1, #20
 8008618:	20a0      	movs	r0, #160	; 0xa0
 800861a:	f7f9 ff87 	bl	800252c <BSP_LCD_FillRect>
					BSP_LCD_DisplayChar(170, 30, 51);
 800861e:	2233      	movs	r2, #51	; 0x33
 8008620:	211e      	movs	r1, #30
 8008622:	20aa      	movs	r0, #170	; 0xaa
 8008624:	f7f9 fbf8 	bl	8001e18 <BSP_LCD_DisplayChar>
					break;
 8008628:	bf00      	nop
				}

				ZmienionoStanPoziomow = 0;
 800862a:	4b51      	ldr	r3, [pc, #324]	; (8008770 <main+0x668>)
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	e609      	b.n	8008246 <main+0x13e>
			}

		} else if (StanGry == Gra) {
 8008632:	4b3e      	ldr	r3, [pc, #248]	; (800872c <main+0x624>)
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	f47f ae04 	bne.w	8008246 <main+0x13e>
			HAL_TIM_Base_Start_IT(&htim11);
 800863e:	4846      	ldr	r0, [pc, #280]	; (8008758 <main+0x650>)
 8008640:	f7fd ff8a 	bl	8006558 <HAL_TIM_Base_Start_IT>

			if (Wygrana == 1) {
 8008644:	4b4c      	ldr	r3, [pc, #304]	; (8008778 <main+0x670>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b01      	cmp	r3, #1
 800864c:	d148      	bne.n	80086e0 <main+0x5d8>
				HAL_TIM_Base_Stop_IT(&htim11);
 800864e:	4842      	ldr	r0, [pc, #264]	; (8008758 <main+0x650>)
 8008650:	f7fd ffa6 	bl	80065a0 <HAL_TIM_Base_Stop_IT>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008658:	f7f9 fb52 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800865c:	4847      	ldr	r0, [pc, #284]	; (800877c <main+0x674>)
 800865e:	f7f9 fb1d 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_DisplayStringAt(10, 30, (uint8_t*) "WYGRANA",
 8008662:	2301      	movs	r3, #1
 8008664:	4a46      	ldr	r2, [pc, #280]	; (8008780 <main+0x678>)
 8008666:	211e      	movs	r1, #30
 8008668:	200a      	movs	r0, #10
 800866a:	f7f9 fc19 	bl	8001ea0 <BSP_LCD_DisplayStringAt>
						CENTER_MODE);

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800866e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008672:	f7f9 fb13 	bl	8001c9c <BSP_LCD_SetTextColor>

				HAL_Delay(2000);
 8008676:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800867a:	f7fa fc9f 	bl	8002fbc <HAL_Delay>

				WybranyPoziom = (WybranyPoziom + 1) % 3;
 800867e:	4b3d      	ldr	r3, [pc, #244]	; (8008774 <main+0x66c>)
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	b2db      	uxtb	r3, r3
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	4b3f      	ldr	r3, [pc, #252]	; (8008784 <main+0x67c>)
 8008688:	fb83 3102 	smull	r3, r1, r3, r2
 800868c:	17d3      	asrs	r3, r2, #31
 800868e:	1ac9      	subs	r1, r1, r3
 8008690:	460b      	mov	r3, r1
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	440b      	add	r3, r1
 8008696:	1ad1      	subs	r1, r2, r3
 8008698:	b2ca      	uxtb	r2, r1
 800869a:	4b36      	ldr	r3, [pc, #216]	; (8008774 <main+0x66c>)
 800869c:	701a      	strb	r2, [r3, #0]
				RozpoczetoNowaGre = 1;
 800869e:	4b3a      	ldr	r3, [pc, #232]	; (8008788 <main+0x680>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	701a      	strb	r2, [r3, #0]
				Wygrana = 0;
 80086a4:	4b34      	ldr	r3, [pc, #208]	; (8008778 <main+0x670>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
				X_pri = 0;
 80086aa:	4b23      	ldr	r3, [pc, #140]	; (8008738 <main+0x630>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
				V_priX = 0;
 80086b0:	4b22      	ldr	r3, [pc, #136]	; (800873c <main+0x634>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]

				X_post = 0;
 80086b6:	4b22      	ldr	r3, [pc, #136]	; (8008740 <main+0x638>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
				V_postX = 0;
 80086bc:	4b21      	ldr	r3, [pc, #132]	; (8008744 <main+0x63c>)
 80086be:	2200      	movs	r2, #0
 80086c0:	601a      	str	r2, [r3, #0]

				Y_pri = 0;
 80086c2:	4b21      	ldr	r3, [pc, #132]	; (8008748 <main+0x640>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
				V_priY = 0;
 80086c8:	4b20      	ldr	r3, [pc, #128]	; (800874c <main+0x644>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]

				Y_post = 0;
 80086ce:	4b20      	ldr	r3, [pc, #128]	; (8008750 <main+0x648>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	601a      	str	r2, [r3, #0]
				V_postY = 0;
 80086d4:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <main+0x64c>)
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim11);
 80086da:	481f      	ldr	r0, [pc, #124]	; (8008758 <main+0x650>)
 80086dc:	f7fd ff3c 	bl	8006558 <HAL_TIM_Base_Start_IT>
			}

			if (WybranyPoziom == 0 && RozpoczetoNowaGre == 1) {
 80086e0:	4b24      	ldr	r3, [pc, #144]	; (8008774 <main+0x66c>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 815d 	bne.w	80089a6 <main+0x89e>
 80086ec:	4b26      	ldr	r3, [pc, #152]	; (8008788 <main+0x680>)
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	f040 8157 	bne.w	80089a6 <main+0x89e>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 80086f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80086fc:	f7f9 fb00 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008704:	f7f9 faca 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki1; i++) {
 8008708:	2301      	movs	r3, #1
 800870a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800870c:	e0e2      	b.n	80088d4 <main+0x7cc>
					if (PunktySciezki1[i].SasiedniePunkty[0] != 0) {
 800870e:	491f      	ldr	r1, [pc, #124]	; (800878c <main+0x684>)
 8008710:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	00db      	lsls	r3, r3, #3
 800871a:	440b      	add	r3, r1
 800871c:	3308      	adds	r3, #8
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d07d      	beq.n	8008820 <main+0x718>
						for (int j = -6; j < 7; j++) {
 8008724:	f06f 0305 	mvn.w	r3, #5
 8008728:	64bb      	str	r3, [r7, #72]	; 0x48
 800872a:	e076      	b.n	800881a <main+0x712>
 800872c:	20000629 	.word	0x20000629
 8008730:	2000057c 	.word	0x2000057c
 8008734:	200002b0 	.word	0x200002b0
 8008738:	200004f4 	.word	0x200004f4
 800873c:	2000062c 	.word	0x2000062c
 8008740:	20000610 	.word	0x20000610
 8008744:	20000648 	.word	0x20000648
 8008748:	200005dc 	.word	0x200005dc
 800874c:	20000608 	.word	0x20000608
 8008750:	20000654 	.word	0x20000654
 8008754:	200004e8 	.word	0x200004e8
 8008758:	200006dc 	.word	0x200006dc
 800875c:	2000062a 	.word	0x2000062a
 8008760:	200005fd 	.word	0x200005fd
 8008764:	08034064 	.word	0x08034064
 8008768:	0800e844 	.word	0x0800e844
 800876c:	08059884 	.word	0x08059884
 8008770:	200005a3 	.word	0x200005a3
 8008774:	20000642 	.word	0x20000642
 8008778:	200005fe 	.word	0x200005fe
 800877c:	ffff0000 	.word	0xffff0000
 8008780:	0800cd7c 	.word	0x0800cd7c
 8008784:	55555556 	.word	0x55555556
 8008788:	20000620 	.word	0x20000620
 800878c:	0807f0a4 	.word	0x0807f0a4
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008790:	4998      	ldr	r1, [pc, #608]	; (80089f4 <main+0x8ec>)
 8008792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008794:	4613      	mov	r3, r2
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	4413      	add	r3, r2
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	440b      	add	r3, r1
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	3b06      	subs	r3, #6
 80087a2:	b298      	uxth	r0, r3
									PunktySciezki1[i].Y + j,
 80087a4:	4993      	ldr	r1, [pc, #588]	; (80089f4 <main+0x8ec>)
 80087a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	440b      	add	r3, r1
 80087b2:	3302      	adds	r3, #2
 80087b4:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 80087b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	4413      	add	r3, r2
 80087bc:	b29c      	uxth	r4, r3
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].X
 80087be:	498d      	ldr	r1, [pc, #564]	; (80089f4 <main+0x8ec>)
 80087c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087c2:	4613      	mov	r3, r2
 80087c4:	005b      	lsls	r3, r3, #1
 80087c6:	4413      	add	r3, r2
 80087c8:	00db      	lsls	r3, r3, #3
 80087ca:	440b      	add	r3, r1
 80087cc:	3308      	adds	r3, #8
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	4988      	ldr	r1, [pc, #544]	; (80089f4 <main+0x8ec>)
 80087d2:	4613      	mov	r3, r2
 80087d4:	005b      	lsls	r3, r3, #1
 80087d6:	4413      	add	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	440b      	add	r3, r1
 80087dc:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 80087de:	3306      	adds	r3, #6
 80087e0:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].Y
 80087e2:	4984      	ldr	r1, [pc, #528]	; (80089f4 <main+0x8ec>)
 80087e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087e6:	4613      	mov	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4413      	add	r3, r2
 80087ec:	00db      	lsls	r3, r3, #3
 80087ee:	440b      	add	r3, r1
 80087f0:	3308      	adds	r3, #8
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	497f      	ldr	r1, [pc, #508]	; (80089f4 <main+0x8ec>)
 80087f6:	4613      	mov	r3, r2
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4413      	add	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	440b      	add	r3, r1
 8008800:	3302      	adds	r3, #2
 8008802:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008806:	b29b      	uxth	r3, r3
 8008808:	4413      	add	r3, r2
 800880a:	b29b      	uxth	r3, r3
 800880c:	462a      	mov	r2, r5
 800880e:	4621      	mov	r1, r4
 8008810:	f7f9 fc3e 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008816:	3301      	adds	r3, #1
 8008818:	64bb      	str	r3, [r7, #72]	; 0x48
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881c:	2b06      	cmp	r3, #6
 800881e:	ddb7      	ble.n	8008790 <main+0x688>
											+ j);
						}

					}

					if (PunktySciezki1[i].SasiedniePunkty[2] != 0) {
 8008820:	4974      	ldr	r1, [pc, #464]	; (80089f4 <main+0x8ec>)
 8008822:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008824:	4613      	mov	r3, r2
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	4413      	add	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	440b      	add	r3, r1
 800882e:	3310      	adds	r3, #16
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d04b      	beq.n	80088ce <main+0x7c6>
						for (int j = -6; j < 7; j++) {
 8008836:	f06f 0305 	mvn.w	r3, #5
 800883a:	647b      	str	r3, [r7, #68]	; 0x44
 800883c:	e044      	b.n	80088c8 <main+0x7c0>
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 800883e:	496d      	ldr	r1, [pc, #436]	; (80089f4 <main+0x8ec>)
 8008840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008842:	4613      	mov	r3, r2
 8008844:	005b      	lsls	r3, r3, #1
 8008846:	4413      	add	r3, r2
 8008848:	00db      	lsls	r3, r3, #3
 800884a:	440b      	add	r3, r1
 800884c:	881a      	ldrh	r2, [r3, #0]
 800884e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008850:	b29b      	uxth	r3, r3
 8008852:	4413      	add	r3, r2
 8008854:	b298      	uxth	r0, r3
									PunktySciezki1[i].Y - 6,
 8008856:	4967      	ldr	r1, [pc, #412]	; (80089f4 <main+0x8ec>)
 8008858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800885a:	4613      	mov	r3, r2
 800885c:	005b      	lsls	r3, r3, #1
 800885e:	4413      	add	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	440b      	add	r3, r1
 8008864:	3302      	adds	r3, #2
 8008866:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 8008868:	3b06      	subs	r3, #6
 800886a:	b29c      	uxth	r4, r3
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].X
 800886c:	4961      	ldr	r1, [pc, #388]	; (80089f4 <main+0x8ec>)
 800886e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008870:	4613      	mov	r3, r2
 8008872:	005b      	lsls	r3, r3, #1
 8008874:	4413      	add	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	440b      	add	r3, r1
 800887a:	3310      	adds	r3, #16
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	495d      	ldr	r1, [pc, #372]	; (80089f4 <main+0x8ec>)
 8008880:	4613      	mov	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	4413      	add	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	440b      	add	r3, r1
 800888a:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 800888c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888e:	b29b      	uxth	r3, r3
 8008890:	4413      	add	r3, r2
 8008892:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].Y
 8008894:	4957      	ldr	r1, [pc, #348]	; (80089f4 <main+0x8ec>)
 8008896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008898:	4613      	mov	r3, r2
 800889a:	005b      	lsls	r3, r3, #1
 800889c:	4413      	add	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	440b      	add	r3, r1
 80088a2:	3310      	adds	r3, #16
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4953      	ldr	r1, [pc, #332]	; (80089f4 <main+0x8ec>)
 80088a8:	4613      	mov	r3, r2
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	4413      	add	r3, r2
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	440b      	add	r3, r1
 80088b2:	3302      	adds	r3, #2
 80088b4:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 80088b6:	3306      	adds	r3, #6
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	462a      	mov	r2, r5
 80088bc:	4621      	mov	r1, r4
 80088be:	f7f9 fbe7 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 80088c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088c4:	3301      	adds	r3, #1
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
 80088c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ca:	2b06      	cmp	r3, #6
 80088cc:	ddb7      	ble.n	800883e <main+0x736>
				for (uint32_t i = 1; i <= IloscPunktowSciezki1; i++) {
 80088ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d0:	3301      	adds	r3, #1
 80088d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d4:	220b      	movs	r2, #11
 80088d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d8:	4293      	cmp	r3, r2
 80088da:	f67f af18 	bls.w	800870e <main+0x606>
											+ 6);
						}
					}
				}

				PozycjaNaSciezce = 1;
 80088de:	4b46      	ldr	r3, [pc, #280]	; (80089f8 <main+0x8f0>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	601a      	str	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80088e4:	4845      	ldr	r0, [pc, #276]	; (80089fc <main+0x8f4>)
 80088e6:	f7f9 f9d9 	bl	8001c9c <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(PunktySciezki1[PozycjaNaSciezce].X,
 80088ea:	4b43      	ldr	r3, [pc, #268]	; (80089f8 <main+0x8f0>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4941      	ldr	r1, [pc, #260]	; (80089f4 <main+0x8ec>)
 80088f0:	4613      	mov	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	4413      	add	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	440b      	add	r3, r1
 80088fa:	8818      	ldrh	r0, [r3, #0]
 80088fc:	4b3e      	ldr	r3, [pc, #248]	; (80089f8 <main+0x8f0>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	493c      	ldr	r1, [pc, #240]	; (80089f4 <main+0x8ec>)
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	00db      	lsls	r3, r3, #3
 800890a:	440b      	add	r3, r1
 800890c:	3302      	adds	r3, #2
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	2205      	movs	r2, #5
 8008912:	4619      	mov	r1, r3
 8008914:	f7f9 fe64 	bl	80025e0 <BSP_LCD_FillCircle>
						PunktySciezki1[PozycjaNaSciezce].Y, 5);

				X = PunktySciezki1[PozycjaNaSciezce].X;
 8008918:	4b37      	ldr	r3, [pc, #220]	; (80089f8 <main+0x8f0>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	4935      	ldr	r1, [pc, #212]	; (80089f4 <main+0x8ec>)
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	881a      	ldrh	r2, [r3, #0]
 800892a:	4b35      	ldr	r3, [pc, #212]	; (8008a00 <main+0x8f8>)
 800892c:	801a      	strh	r2, [r3, #0]
				Y = PunktySciezki1[PozycjaNaSciezce].Y;
 800892e:	4b32      	ldr	r3, [pc, #200]	; (80089f8 <main+0x8f0>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4930      	ldr	r1, [pc, #192]	; (80089f4 <main+0x8ec>)
 8008934:	4613      	mov	r3, r2
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	4413      	add	r3, r2
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	440b      	add	r3, r1
 800893e:	3302      	adds	r3, #2
 8008940:	881a      	ldrh	r2, [r3, #0]
 8008942:	4b30      	ldr	r3, [pc, #192]	; (8008a04 <main+0x8fc>)
 8008944:	801a      	strh	r2, [r3, #0]

				PoprzednieX = X;
 8008946:	4b2e      	ldr	r3, [pc, #184]	; (8008a00 <main+0x8f8>)
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29a      	uxth	r2, r3
 800894c:	4b2e      	ldr	r3, [pc, #184]	; (8008a08 <main+0x900>)
 800894e:	801a      	strh	r2, [r3, #0]
				PoprzednieY = Y;
 8008950:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <main+0x8fc>)
 8008952:	881b      	ldrh	r3, [r3, #0]
 8008954:	b29a      	uxth	r2, r3
 8008956:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <main+0x904>)
 8008958:	801a      	strh	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800895a:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800895e:	f7f9 f99d 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki1[IloscPunktowSciezki1].X - 6,
 8008962:	220b      	movs	r2, #11
 8008964:	4923      	ldr	r1, [pc, #140]	; (80089f4 <main+0x8ec>)
 8008966:	4613      	mov	r3, r2
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	4413      	add	r3, r2
 800896c:	00db      	lsls	r3, r3, #3
 800896e:	440b      	add	r3, r1
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	3b06      	subs	r3, #6
 8008974:	b298      	uxth	r0, r3
						PunktySciezki1[IloscPunktowSciezki1].Y - 6, 13, 13);
 8008976:	220b      	movs	r2, #11
 8008978:	491e      	ldr	r1, [pc, #120]	; (80089f4 <main+0x8ec>)
 800897a:	4613      	mov	r3, r2
 800897c:	005b      	lsls	r3, r3, #1
 800897e:	4413      	add	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	440b      	add	r3, r1
 8008984:	3302      	adds	r3, #2
 8008986:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki1[IloscPunktowSciezki1].X - 6,
 8008988:	3b06      	subs	r3, #6
 800898a:	b299      	uxth	r1, r3
 800898c:	230d      	movs	r3, #13
 800898e:	220d      	movs	r2, #13
 8008990:	f7f9 fdcc 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008998:	f7f9 f980 	bl	8001c9c <BSP_LCD_SetTextColor>

				RozpoczetoNowaGre = 0;
 800899c:	4b1c      	ldr	r3, [pc, #112]	; (8008a10 <main+0x908>)
 800899e:	2200      	movs	r2, #0
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	f000 bd89 	b.w	80094b8 <main+0x13b0>

			} else if (WybranyPoziom == 1 && RozpoczetoNowaGre == 1) {
 80089a6:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <main+0x90c>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 8140 	bne.w	8008c32 <main+0xb2a>
 80089b2:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <main+0x908>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	f040 813a 	bne.w	8008c32 <main+0xb2a>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 80089be:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80089c2:	f7f9 f99d 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089ca:	f7f9 f967 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki2; i++) {
 80089ce:	2301      	movs	r3, #1
 80089d0:	643b      	str	r3, [r7, #64]	; 0x40
 80089d2:	e0c5      	b.n	8008b60 <main+0xa58>
					if (PunktySciezki2[i].SasiedniePunkty[0] != 0) {
 80089d4:	4910      	ldr	r1, [pc, #64]	; (8008a18 <main+0x910>)
 80089d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089d8:	4613      	mov	r3, r2
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	4413      	add	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	440b      	add	r3, r1
 80089e2:	3308      	adds	r3, #8
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d060      	beq.n	8008aac <main+0x9a4>
						for (int j = -6; j < 7; j++) {
 80089ea:	f06f 0305 	mvn.w	r3, #5
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f0:	e059      	b.n	8008aa6 <main+0x99e>
 80089f2:	bf00      	nop
 80089f4:	0807f0a4 	.word	0x0807f0a4
 80089f8:	200005c8 	.word	0x200005c8
 80089fc:	ffff0000 	.word	0xffff0000
 8008a00:	20000658 	.word	0x20000658
 8008a04:	200005c4 	.word	0x200005c4
 8008a08:	20000644 	.word	0x20000644
 8008a0c:	200005a0 	.word	0x200005a0
 8008a10:	20000620 	.word	0x20000620
 8008a14:	20000642 	.word	0x20000642
 8008a18:	0807f1c4 	.word	0x0807f1c4
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8008a1c:	4998      	ldr	r1, [pc, #608]	; (8008c80 <main+0xb78>)
 8008a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a20:	4613      	mov	r3, r2
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	4413      	add	r3, r2
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	440b      	add	r3, r1
 8008a2a:	881b      	ldrh	r3, [r3, #0]
 8008a2c:	3b06      	subs	r3, #6
 8008a2e:	b298      	uxth	r0, r3
									PunktySciezki2[i].Y + j,
 8008a30:	4993      	ldr	r1, [pc, #588]	; (8008c80 <main+0xb78>)
 8008a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a34:	4613      	mov	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	4413      	add	r3, r2
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	440b      	add	r3, r1
 8008a3e:	3302      	adds	r3, #2
 8008a40:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8008a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4413      	add	r3, r2
 8008a48:	b29c      	uxth	r4, r3
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].X
 8008a4a:	498d      	ldr	r1, [pc, #564]	; (8008c80 <main+0xb78>)
 8008a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	440b      	add	r3, r1
 8008a58:	3308      	adds	r3, #8
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	4988      	ldr	r1, [pc, #544]	; (8008c80 <main+0xb78>)
 8008a5e:	4613      	mov	r3, r2
 8008a60:	005b      	lsls	r3, r3, #1
 8008a62:	4413      	add	r3, r2
 8008a64:	00db      	lsls	r3, r3, #3
 8008a66:	440b      	add	r3, r1
 8008a68:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8008a6a:	3306      	adds	r3, #6
 8008a6c:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].Y
 8008a6e:	4984      	ldr	r1, [pc, #528]	; (8008c80 <main+0xb78>)
 8008a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a72:	4613      	mov	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4413      	add	r3, r2
 8008a78:	00db      	lsls	r3, r3, #3
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	497f      	ldr	r1, [pc, #508]	; (8008c80 <main+0xb78>)
 8008a82:	4613      	mov	r3, r2
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	4413      	add	r3, r2
 8008a88:	00db      	lsls	r3, r3, #3
 8008a8a:	440b      	add	r3, r1
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8008a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4413      	add	r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	462a      	mov	r2, r5
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f7f9 faf8 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	ddb7      	ble.n	8008a1c <main+0x914>
											+ j);
						}

					}

					if (PunktySciezki2[i].SasiedniePunkty[2] != 0) {
 8008aac:	4974      	ldr	r1, [pc, #464]	; (8008c80 <main+0xb78>)
 8008aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	005b      	lsls	r3, r3, #1
 8008ab4:	4413      	add	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	440b      	add	r3, r1
 8008aba:	3310      	adds	r3, #16
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04b      	beq.n	8008b5a <main+0xa52>
						for (int j = -6; j < 7; j++) {
 8008ac2:	f06f 0305 	mvn.w	r3, #5
 8008ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ac8:	e044      	b.n	8008b54 <main+0xa4c>
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 8008aca:	496d      	ldr	r1, [pc, #436]	; (8008c80 <main+0xb78>)
 8008acc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ace:	4613      	mov	r3, r2
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	4413      	add	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	440b      	add	r3, r1
 8008ad8:	881a      	ldrh	r2, [r3, #0]
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	4413      	add	r3, r2
 8008ae0:	b298      	uxth	r0, r3
									PunktySciezki2[i].Y - 6,
 8008ae2:	4967      	ldr	r1, [pc, #412]	; (8008c80 <main+0xb78>)
 8008ae4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	4413      	add	r3, r2
 8008aec:	00db      	lsls	r3, r3, #3
 8008aee:	440b      	add	r3, r1
 8008af0:	3302      	adds	r3, #2
 8008af2:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 8008af4:	3b06      	subs	r3, #6
 8008af6:	b29c      	uxth	r4, r3
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].X
 8008af8:	4961      	ldr	r1, [pc, #388]	; (8008c80 <main+0xb78>)
 8008afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008afc:	4613      	mov	r3, r2
 8008afe:	005b      	lsls	r3, r3, #1
 8008b00:	4413      	add	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	440b      	add	r3, r1
 8008b06:	3310      	adds	r3, #16
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	495d      	ldr	r1, [pc, #372]	; (8008c80 <main+0xb78>)
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	4413      	add	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	440b      	add	r3, r1
 8008b16:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].Y
 8008b20:	4957      	ldr	r1, [pc, #348]	; (8008c80 <main+0xb78>)
 8008b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b24:	4613      	mov	r3, r2
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	4413      	add	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	440b      	add	r3, r1
 8008b2e:	3310      	adds	r3, #16
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4953      	ldr	r1, [pc, #332]	; (8008c80 <main+0xb78>)
 8008b34:	4613      	mov	r3, r2
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	4413      	add	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	440b      	add	r3, r1
 8008b3e:	3302      	adds	r3, #2
 8008b40:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 8008b42:	3306      	adds	r3, #6
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	462a      	mov	r2, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7f9 faa1 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b50:	3301      	adds	r3, #1
 8008b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	ddb7      	ble.n	8008aca <main+0x9c2>
				for (uint32_t i = 1; i <= IloscPunktowSciezki2; i++) {
 8008b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	643b      	str	r3, [r7, #64]	; 0x40
 8008b60:	2238      	movs	r2, #56	; 0x38
 8008b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b64:	4293      	cmp	r3, r2
 8008b66:	f67f af35 	bls.w	80089d4 <main+0x8cc>
											+ 6);
						}
					}
				}

				PozycjaNaSciezce = 1;
 8008b6a:	4b46      	ldr	r3, [pc, #280]	; (8008c84 <main+0xb7c>)
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	601a      	str	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008b70:	4845      	ldr	r0, [pc, #276]	; (8008c88 <main+0xb80>)
 8008b72:	f7f9 f893 	bl	8001c9c <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(PunktySciezki2[PozycjaNaSciezce].X,
 8008b76:	4b43      	ldr	r3, [pc, #268]	; (8008c84 <main+0xb7c>)
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	4941      	ldr	r1, [pc, #260]	; (8008c80 <main+0xb78>)
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	005b      	lsls	r3, r3, #1
 8008b80:	4413      	add	r3, r2
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	440b      	add	r3, r1
 8008b86:	8818      	ldrh	r0, [r3, #0]
 8008b88:	4b3e      	ldr	r3, [pc, #248]	; (8008c84 <main+0xb7c>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	493c      	ldr	r1, [pc, #240]	; (8008c80 <main+0xb78>)
 8008b8e:	4613      	mov	r3, r2
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	4413      	add	r3, r2
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	440b      	add	r3, r1
 8008b98:	3302      	adds	r3, #2
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f7f9 fd1e 	bl	80025e0 <BSP_LCD_FillCircle>
						PunktySciezki2[PozycjaNaSciezce].Y, 5);

				X = PunktySciezki2[PozycjaNaSciezce].X;
 8008ba4:	4b37      	ldr	r3, [pc, #220]	; (8008c84 <main+0xb7c>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4935      	ldr	r1, [pc, #212]	; (8008c80 <main+0xb78>)
 8008baa:	4613      	mov	r3, r2
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	4413      	add	r3, r2
 8008bb0:	00db      	lsls	r3, r3, #3
 8008bb2:	440b      	add	r3, r1
 8008bb4:	881a      	ldrh	r2, [r3, #0]
 8008bb6:	4b35      	ldr	r3, [pc, #212]	; (8008c8c <main+0xb84>)
 8008bb8:	801a      	strh	r2, [r3, #0]
				Y = PunktySciezki2[PozycjaNaSciezce].Y;
 8008bba:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <main+0xb7c>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4930      	ldr	r1, [pc, #192]	; (8008c80 <main+0xb78>)
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	4413      	add	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	440b      	add	r3, r1
 8008bca:	3302      	adds	r3, #2
 8008bcc:	881a      	ldrh	r2, [r3, #0]
 8008bce:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <main+0xb88>)
 8008bd0:	801a      	strh	r2, [r3, #0]

				PoprzednieX = X;
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <main+0xb84>)
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	4b2e      	ldr	r3, [pc, #184]	; (8008c94 <main+0xb8c>)
 8008bda:	801a      	strh	r2, [r3, #0]
				PoprzednieY = Y;
 8008bdc:	4b2c      	ldr	r3, [pc, #176]	; (8008c90 <main+0xb88>)
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	4b2d      	ldr	r3, [pc, #180]	; (8008c98 <main+0xb90>)
 8008be4:	801a      	strh	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8008be6:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8008bea:	f7f9 f857 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki2[IloscPunktowSciezki2].X - 6,
 8008bee:	2238      	movs	r2, #56	; 0x38
 8008bf0:	4923      	ldr	r1, [pc, #140]	; (8008c80 <main+0xb78>)
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	4413      	add	r3, r2
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	440b      	add	r3, r1
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	3b06      	subs	r3, #6
 8008c00:	b298      	uxth	r0, r3
						PunktySciezki2[IloscPunktowSciezki2].Y - 6, 13, 13);
 8008c02:	2238      	movs	r2, #56	; 0x38
 8008c04:	491e      	ldr	r1, [pc, #120]	; (8008c80 <main+0xb78>)
 8008c06:	4613      	mov	r3, r2
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	4413      	add	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	440b      	add	r3, r1
 8008c10:	3302      	adds	r3, #2
 8008c12:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki2[IloscPunktowSciezki2].X - 6,
 8008c14:	3b06      	subs	r3, #6
 8008c16:	b299      	uxth	r1, r3
 8008c18:	230d      	movs	r3, #13
 8008c1a:	220d      	movs	r2, #13
 8008c1c:	f7f9 fc86 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c24:	f7f9 f83a 	bl	8001c9c <BSP_LCD_SetTextColor>

				RozpoczetoNowaGre = 0;
 8008c28:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <main+0xb94>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
 8008c2e:	f000 bc43 	b.w	80094b8 <main+0x13b0>

			} else if (WybranyPoziom == 2 && RozpoczetoNowaGre == 1) {
 8008c32:	4b1b      	ldr	r3, [pc, #108]	; (8008ca0 <main+0xb98>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	f040 813f 	bne.w	8008ebc <main+0xdb4>
 8008c3e:	4b17      	ldr	r3, [pc, #92]	; (8008c9c <main+0xb94>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	f040 8139 	bne.w	8008ebc <main+0xdb4>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008c4a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008c4e:	f7f9 f857 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c56:	f7f9 f821 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki3; i++) {
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c5e:	e0c5      	b.n	8008dec <main+0xce4>
					if (PunktySciezki3[i].SasiedniePunkty[0] != 0) {
 8008c60:	4910      	ldr	r1, [pc, #64]	; (8008ca4 <main+0xb9c>)
 8008c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c64:	4613      	mov	r3, r2
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	4413      	add	r3, r2
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	440b      	add	r3, r1
 8008c6e:	3308      	adds	r3, #8
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d060      	beq.n	8008d38 <main+0xc30>
						for (int j = -6; j < 7; j++) {
 8008c76:	f06f 0305 	mvn.w	r3, #5
 8008c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c7c:	e059      	b.n	8008d32 <main+0xc2a>
 8008c7e:	bf00      	nop
 8008c80:	0807f1c4 	.word	0x0807f1c4
 8008c84:	200005c8 	.word	0x200005c8
 8008c88:	ffff0000 	.word	0xffff0000
 8008c8c:	20000658 	.word	0x20000658
 8008c90:	200005c4 	.word	0x200005c4
 8008c94:	20000644 	.word	0x20000644
 8008c98:	200005a0 	.word	0x200005a0
 8008c9c:	20000620 	.word	0x20000620
 8008ca0:	20000642 	.word	0x20000642
 8008ca4:	0807f71c 	.word	0x0807f71c
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8008ca8:	4997      	ldr	r1, [pc, #604]	; (8008f08 <main+0xe00>)
 8008caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cac:	4613      	mov	r3, r2
 8008cae:	005b      	lsls	r3, r3, #1
 8008cb0:	4413      	add	r3, r2
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	440b      	add	r3, r1
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	3b06      	subs	r3, #6
 8008cba:	b298      	uxth	r0, r3
									PunktySciezki3[i].Y + j,
 8008cbc:	4992      	ldr	r1, [pc, #584]	; (8008f08 <main+0xe00>)
 8008cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	440b      	add	r3, r1
 8008cca:	3302      	adds	r3, #2
 8008ccc:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	b29c      	uxth	r4, r3
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[0]].X
 8008cd6:	498c      	ldr	r1, [pc, #560]	; (8008f08 <main+0xe00>)
 8008cd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cda:	4613      	mov	r3, r2
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	4413      	add	r3, r2
 8008ce0:	00db      	lsls	r3, r3, #3
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	4987      	ldr	r1, [pc, #540]	; (8008f08 <main+0xe00>)
 8008cea:	4613      	mov	r3, r2
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	4413      	add	r3, r2
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	440b      	add	r3, r1
 8008cf4:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8008cf6:	3306      	adds	r3, #6
 8008cf8:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[0]].Y
 8008cfa:	4983      	ldr	r1, [pc, #524]	; (8008f08 <main+0xe00>)
 8008cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cfe:	4613      	mov	r3, r2
 8008d00:	005b      	lsls	r3, r3, #1
 8008d02:	4413      	add	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	440b      	add	r3, r1
 8008d08:	3308      	adds	r3, #8
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	497e      	ldr	r1, [pc, #504]	; (8008f08 <main+0xe00>)
 8008d0e:	4613      	mov	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4413      	add	r3, r2
 8008d14:	00db      	lsls	r3, r3, #3
 8008d16:	440b      	add	r3, r1
 8008d18:	3302      	adds	r3, #2
 8008d1a:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4413      	add	r3, r2
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	462a      	mov	r2, r5
 8008d26:	4621      	mov	r1, r4
 8008d28:	f7f9 f9b2 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	3301      	adds	r3, #1
 8008d30:	633b      	str	r3, [r7, #48]	; 0x30
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	2b06      	cmp	r3, #6
 8008d36:	ddb7      	ble.n	8008ca8 <main+0xba0>
											+ j);
						}

					}

					if (PunktySciezki3[i].SasiedniePunkty[2] != 0) {
 8008d38:	4973      	ldr	r1, [pc, #460]	; (8008f08 <main+0xe00>)
 8008d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	4413      	add	r3, r2
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	440b      	add	r3, r1
 8008d46:	3310      	adds	r3, #16
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d04b      	beq.n	8008de6 <main+0xcde>
						for (int j = -6; j < 7; j++) {
 8008d4e:	f06f 0305 	mvn.w	r3, #5
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d54:	e044      	b.n	8008de0 <main+0xcd8>
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8008d56:	496c      	ldr	r1, [pc, #432]	; (8008f08 <main+0xe00>)
 8008d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	4413      	add	r3, r2
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	440b      	add	r3, r1
 8008d64:	881a      	ldrh	r2, [r3, #0]
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b298      	uxth	r0, r3
									PunktySciezki3[i].Y - 6,
 8008d6e:	4966      	ldr	r1, [pc, #408]	; (8008f08 <main+0xe00>)
 8008d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d72:	4613      	mov	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3302      	adds	r3, #2
 8008d7e:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8008d80:	3b06      	subs	r3, #6
 8008d82:	b29c      	uxth	r4, r3
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[2]].X
 8008d84:	4960      	ldr	r1, [pc, #384]	; (8008f08 <main+0xe00>)
 8008d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d88:	4613      	mov	r3, r2
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	4413      	add	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	440b      	add	r3, r1
 8008d92:	3310      	adds	r3, #16
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	495c      	ldr	r1, [pc, #368]	; (8008f08 <main+0xe00>)
 8008d98:	4613      	mov	r3, r2
 8008d9a:	005b      	lsls	r3, r3, #1
 8008d9c:	4413      	add	r3, r2
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	440b      	add	r3, r1
 8008da2:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[2]].Y
 8008dac:	4956      	ldr	r1, [pc, #344]	; (8008f08 <main+0xe00>)
 8008dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db0:	4613      	mov	r3, r2
 8008db2:	005b      	lsls	r3, r3, #1
 8008db4:	4413      	add	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	440b      	add	r3, r1
 8008dba:	3310      	adds	r3, #16
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4952      	ldr	r1, [pc, #328]	; (8008f08 <main+0xe00>)
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	005b      	lsls	r3, r3, #1
 8008dc4:	4413      	add	r3, r2
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	440b      	add	r3, r1
 8008dca:	3302      	adds	r3, #2
 8008dcc:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8008dce:	3306      	adds	r3, #6
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	462a      	mov	r2, r5
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	f7f9 f95b 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	3301      	adds	r3, #1
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	ddb7      	ble.n	8008d56 <main+0xc4e>
				for (uint32_t i = 1; i <= IloscPunktowSciezki3; i++) {
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de8:	3301      	adds	r3, #1
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
 8008dec:	224b      	movs	r2, #75	; 0x4b
 8008dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df0:	4293      	cmp	r3, r2
 8008df2:	f67f af35 	bls.w	8008c60 <main+0xb58>
											+ 6);
						}
					}
				}

				PozycjaNaSciezce = 1;
 8008df6:	4b45      	ldr	r3, [pc, #276]	; (8008f0c <main+0xe04>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008dfc:	4844      	ldr	r0, [pc, #272]	; (8008f10 <main+0xe08>)
 8008dfe:	f7f8 ff4d 	bl	8001c9c <BSP_LCD_SetTextColor>

				BSP_LCD_FillCircle(PunktySciezki3[PozycjaNaSciezce].X,
 8008e02:	4b42      	ldr	r3, [pc, #264]	; (8008f0c <main+0xe04>)
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	4940      	ldr	r1, [pc, #256]	; (8008f08 <main+0xe00>)
 8008e08:	4613      	mov	r3, r2
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	4413      	add	r3, r2
 8008e0e:	00db      	lsls	r3, r3, #3
 8008e10:	440b      	add	r3, r1
 8008e12:	8818      	ldrh	r0, [r3, #0]
 8008e14:	4b3d      	ldr	r3, [pc, #244]	; (8008f0c <main+0xe04>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	493b      	ldr	r1, [pc, #236]	; (8008f08 <main+0xe00>)
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	005b      	lsls	r3, r3, #1
 8008e1e:	4413      	add	r3, r2
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	440b      	add	r3, r1
 8008e24:	3302      	adds	r3, #2
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	2205      	movs	r2, #5
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f7f9 fbd8 	bl	80025e0 <BSP_LCD_FillCircle>
						PunktySciezki3[PozycjaNaSciezce].Y, 5);

				X = PunktySciezki3[PozycjaNaSciezce].X;
 8008e30:	4b36      	ldr	r3, [pc, #216]	; (8008f0c <main+0xe04>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4934      	ldr	r1, [pc, #208]	; (8008f08 <main+0xe00>)
 8008e36:	4613      	mov	r3, r2
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	4413      	add	r3, r2
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	440b      	add	r3, r1
 8008e40:	881a      	ldrh	r2, [r3, #0]
 8008e42:	4b34      	ldr	r3, [pc, #208]	; (8008f14 <main+0xe0c>)
 8008e44:	801a      	strh	r2, [r3, #0]
				Y = PunktySciezki3[PozycjaNaSciezce].Y;
 8008e46:	4b31      	ldr	r3, [pc, #196]	; (8008f0c <main+0xe04>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	492f      	ldr	r1, [pc, #188]	; (8008f08 <main+0xe00>)
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	4413      	add	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	440b      	add	r3, r1
 8008e56:	3302      	adds	r3, #2
 8008e58:	881a      	ldrh	r2, [r3, #0]
 8008e5a:	4b2f      	ldr	r3, [pc, #188]	; (8008f18 <main+0xe10>)
 8008e5c:	801a      	strh	r2, [r3, #0]

				PoprzednieX = X;
 8008e5e:	4b2d      	ldr	r3, [pc, #180]	; (8008f14 <main+0xe0c>)
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	4b2d      	ldr	r3, [pc, #180]	; (8008f1c <main+0xe14>)
 8008e66:	801a      	strh	r2, [r3, #0]
				PoprzednieY = Y;
 8008e68:	4b2b      	ldr	r3, [pc, #172]	; (8008f18 <main+0xe10>)
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <main+0xe18>)
 8008e70:	801a      	strh	r2, [r3, #0]

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8008e72:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8008e76:	f7f8 ff11 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki3[IloscPunktowSciezki3].X - 6,
 8008e7a:	224b      	movs	r2, #75	; 0x4b
 8008e7c:	4922      	ldr	r1, [pc, #136]	; (8008f08 <main+0xe00>)
 8008e7e:	4613      	mov	r3, r2
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	4413      	add	r3, r2
 8008e84:	00db      	lsls	r3, r3, #3
 8008e86:	440b      	add	r3, r1
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	3b06      	subs	r3, #6
 8008e8c:	b298      	uxth	r0, r3
						PunktySciezki3[IloscPunktowSciezki3].Y - 6, 13, 13);
 8008e8e:	224b      	movs	r2, #75	; 0x4b
 8008e90:	491d      	ldr	r1, [pc, #116]	; (8008f08 <main+0xe00>)
 8008e92:	4613      	mov	r3, r2
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4413      	add	r3, r2
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3302      	adds	r3, #2
 8008e9e:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki3[IloscPunktowSciezki3].X - 6,
 8008ea0:	3b06      	subs	r3, #6
 8008ea2:	b299      	uxth	r1, r3
 8008ea4:	230d      	movs	r3, #13
 8008ea6:	220d      	movs	r2, #13
 8008ea8:	f7f9 fb40 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb0:	f7f8 fef4 	bl	8001c9c <BSP_LCD_SetTextColor>

				RozpoczetoNowaGre = 0;
 8008eb4:	4b1b      	ldr	r3, [pc, #108]	; (8008f24 <main+0xe1c>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	e2fd      	b.n	80094b8 <main+0x13b0>

			} else if (WybranyPoziom == 0 && KontynuowanaGra == 1) {
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <main+0xe20>)
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 8105 	bne.w	80090d2 <main+0xfca>
 8008ec8:	4b18      	ldr	r3, [pc, #96]	; (8008f2c <main+0xe24>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	f040 80ff 	bne.w	80090d2 <main+0xfca>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008ed4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008ed8:	f7f8 ff12 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee0:	f7f8 fedc 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki1; i++) {
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee8:	e0c6      	b.n	8009078 <main+0xf70>
					if (PunktySciezki1[i].SasiedniePunkty[0] != 0) {
 8008eea:	4911      	ldr	r1, [pc, #68]	; (8008f30 <main+0xe28>)
 8008eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eee:	4613      	mov	r3, r2
 8008ef0:	005b      	lsls	r3, r3, #1
 8008ef2:	4413      	add	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	440b      	add	r3, r1
 8008ef8:	3308      	adds	r3, #8
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d061      	beq.n	8008fc4 <main+0xebc>
						for (int j = -6; j < 7; j++) {
 8008f00:	f06f 0305 	mvn.w	r3, #5
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
 8008f06:	e05a      	b.n	8008fbe <main+0xeb6>
 8008f08:	0807f71c 	.word	0x0807f71c
 8008f0c:	200005c8 	.word	0x200005c8
 8008f10:	ffff0000 	.word	0xffff0000
 8008f14:	20000658 	.word	0x20000658
 8008f18:	200005c4 	.word	0x200005c4
 8008f1c:	20000644 	.word	0x20000644
 8008f20:	200005a0 	.word	0x200005a0
 8008f24:	20000620 	.word	0x20000620
 8008f28:	20000642 	.word	0x20000642
 8008f2c:	200004f9 	.word	0x200004f9
 8008f30:	0807f0a4 	.word	0x0807f0a4
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008f34:	49a5      	ldr	r1, [pc, #660]	; (80091cc <main+0x10c4>)
 8008f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f38:	4613      	mov	r3, r2
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	4413      	add	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	440b      	add	r3, r1
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	3b06      	subs	r3, #6
 8008f46:	b298      	uxth	r0, r3
									PunktySciezki1[i].Y + j,
 8008f48:	49a0      	ldr	r1, [pc, #640]	; (80091cc <main+0x10c4>)
 8008f4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	4413      	add	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	440b      	add	r3, r1
 8008f56:	3302      	adds	r3, #2
 8008f58:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	4413      	add	r3, r2
 8008f60:	b29c      	uxth	r4, r3
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].X
 8008f62:	499a      	ldr	r1, [pc, #616]	; (80091cc <main+0x10c4>)
 8008f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f66:	4613      	mov	r3, r2
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4413      	add	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	440b      	add	r3, r1
 8008f70:	3308      	adds	r3, #8
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	4995      	ldr	r1, [pc, #596]	; (80091cc <main+0x10c4>)
 8008f76:	4613      	mov	r3, r2
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	4413      	add	r3, r2
 8008f7c:	00db      	lsls	r3, r3, #3
 8008f7e:	440b      	add	r3, r1
 8008f80:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008f82:	3306      	adds	r3, #6
 8008f84:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[0]].Y
 8008f86:	4991      	ldr	r1, [pc, #580]	; (80091cc <main+0x10c4>)
 8008f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	4413      	add	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	440b      	add	r3, r1
 8008f94:	3308      	adds	r3, #8
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	498c      	ldr	r1, [pc, #560]	; (80091cc <main+0x10c4>)
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	4413      	add	r3, r2
 8008fa0:	00db      	lsls	r3, r3, #3
 8008fa2:	440b      	add	r3, r1
 8008fa4:	3302      	adds	r3, #2
 8008fa6:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X - 6,
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	4413      	add	r3, r2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	f7f9 f86c 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	3301      	adds	r3, #1
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	2b06      	cmp	r3, #6
 8008fc2:	ddb7      	ble.n	8008f34 <main+0xe2c>
											+ j);
						}

					}

					if (PunktySciezki1[i].SasiedniePunkty[2] != 0) {
 8008fc4:	4981      	ldr	r1, [pc, #516]	; (80091cc <main+0x10c4>)
 8008fc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fc8:	4613      	mov	r3, r2
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	4413      	add	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3310      	adds	r3, #16
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d04b      	beq.n	8009072 <main+0xf6a>
						for (int j = -6; j < 7; j++) {
 8008fda:	f06f 0305 	mvn.w	r3, #5
 8008fde:	623b      	str	r3, [r7, #32]
 8008fe0:	e044      	b.n	800906c <main+0xf64>
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 8008fe2:	497a      	ldr	r1, [pc, #488]	; (80091cc <main+0x10c4>)
 8008fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	005b      	lsls	r3, r3, #1
 8008fea:	4413      	add	r3, r2
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	440b      	add	r3, r1
 8008ff0:	881a      	ldrh	r2, [r3, #0]
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	4413      	add	r3, r2
 8008ff8:	b298      	uxth	r0, r3
									PunktySciezki1[i].Y - 6,
 8008ffa:	4974      	ldr	r1, [pc, #464]	; (80091cc <main+0x10c4>)
 8008ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ffe:	4613      	mov	r3, r2
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	4413      	add	r3, r2
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	440b      	add	r3, r1
 8009008:	3302      	adds	r3, #2
 800900a:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 800900c:	3b06      	subs	r3, #6
 800900e:	b29c      	uxth	r4, r3
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].X
 8009010:	496e      	ldr	r1, [pc, #440]	; (80091cc <main+0x10c4>)
 8009012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009014:	4613      	mov	r3, r2
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	4413      	add	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	440b      	add	r3, r1
 800901e:	3310      	adds	r3, #16
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	496a      	ldr	r1, [pc, #424]	; (80091cc <main+0x10c4>)
 8009024:	4613      	mov	r3, r2
 8009026:	005b      	lsls	r3, r3, #1
 8009028:	4413      	add	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	440b      	add	r3, r1
 800902e:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 8009030:	6a3b      	ldr	r3, [r7, #32]
 8009032:	b29b      	uxth	r3, r3
 8009034:	4413      	add	r3, r2
 8009036:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki1[PunktySciezki1[i].SasiedniePunkty[2]].Y
 8009038:	4964      	ldr	r1, [pc, #400]	; (80091cc <main+0x10c4>)
 800903a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800903c:	4613      	mov	r3, r2
 800903e:	005b      	lsls	r3, r3, #1
 8009040:	4413      	add	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	440b      	add	r3, r1
 8009046:	3310      	adds	r3, #16
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	4960      	ldr	r1, [pc, #384]	; (80091cc <main+0x10c4>)
 800904c:	4613      	mov	r3, r2
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	4413      	add	r3, r2
 8009052:	00db      	lsls	r3, r3, #3
 8009054:	440b      	add	r3, r1
 8009056:	3302      	adds	r3, #2
 8009058:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki1[i].X + j,
 800905a:	3306      	adds	r3, #6
 800905c:	b29b      	uxth	r3, r3
 800905e:	462a      	mov	r2, r5
 8009060:	4621      	mov	r1, r4
 8009062:	f7f9 f815 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	3301      	adds	r3, #1
 800906a:	623b      	str	r3, [r7, #32]
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	2b06      	cmp	r3, #6
 8009070:	ddb7      	ble.n	8008fe2 <main+0xeda>
				for (uint32_t i = 1; i <= IloscPunktowSciezki1; i++) {
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	3301      	adds	r3, #1
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
 8009078:	220b      	movs	r2, #11
 800907a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907c:	4293      	cmp	r3, r2
 800907e:	f67f af34 	bls.w	8008eea <main+0xde2>
											+ 6);
						}
					}
				}

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009082:	4853      	ldr	r0, [pc, #332]	; (80091d0 <main+0x10c8>)
 8009084:	f7f8 fe0a 	bl	8001c9c <BSP_LCD_SetTextColor>

				//BSP_LCD_FillCircle(PunktySciezki1[PozycjaNaSciezce].X, PunktySciezki1[PozycjaNaSciezce].Y, 5);

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8009088:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800908c:	f7f8 fe06 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki1[IloscPunktowSciezki1].X - 6,
 8009090:	220b      	movs	r2, #11
 8009092:	494e      	ldr	r1, [pc, #312]	; (80091cc <main+0x10c4>)
 8009094:	4613      	mov	r3, r2
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	4413      	add	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	440b      	add	r3, r1
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	3b06      	subs	r3, #6
 80090a2:	b298      	uxth	r0, r3
						PunktySciezki1[IloscPunktowSciezki1].Y - 6, 13, 13);
 80090a4:	220b      	movs	r2, #11
 80090a6:	4949      	ldr	r1, [pc, #292]	; (80091cc <main+0x10c4>)
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	00db      	lsls	r3, r3, #3
 80090b0:	440b      	add	r3, r1
 80090b2:	3302      	adds	r3, #2
 80090b4:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki1[IloscPunktowSciezki1].X - 6,
 80090b6:	3b06      	subs	r3, #6
 80090b8:	b299      	uxth	r1, r3
 80090ba:	230d      	movs	r3, #13
 80090bc:	220d      	movs	r2, #13
 80090be:	f7f9 fa35 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80090c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c6:	f7f8 fde9 	bl	8001c9c <BSP_LCD_SetTextColor>

				KontynuowanaGra = 0;
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <main+0x10cc>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e1f2      	b.n	80094b8 <main+0x13b0>

			} else if (WybranyPoziom == 1 && KontynuowanaGra == 1) {
 80090d2:	4b41      	ldr	r3, [pc, #260]	; (80091d8 <main+0x10d0>)
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	2b01      	cmp	r3, #1
 80090da:	f040 80f9 	bne.w	80092d0 <main+0x11c8>
 80090de:	4b3d      	ldr	r3, [pc, #244]	; (80091d4 <main+0x10cc>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	f040 80f3 	bne.w	80092d0 <main+0x11c8>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 80090ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80090ee:	f7f8 fe07 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80090f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090f6:	f7f8 fdd1 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki2; i++) {
 80090fa:	2301      	movs	r3, #1
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e0ba      	b.n	8009276 <main+0x116e>
					if (PunktySciezki2[i].SasiedniePunkty[0] != 0) {
 8009100:	4936      	ldr	r1, [pc, #216]	; (80091dc <main+0x10d4>)
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	440b      	add	r3, r1
 800910e:	3308      	adds	r3, #8
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d04b      	beq.n	80091ae <main+0x10a6>
						for (int j = -6; j < 7; j++) {
 8009116:	f06f 0305 	mvn.w	r3, #5
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e044      	b.n	80091a8 <main+0x10a0>
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 800911e:	492f      	ldr	r1, [pc, #188]	; (80091dc <main+0x10d4>)
 8009120:	69fa      	ldr	r2, [r7, #28]
 8009122:	4613      	mov	r3, r2
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	4413      	add	r3, r2
 8009128:	00db      	lsls	r3, r3, #3
 800912a:	440b      	add	r3, r1
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	3b06      	subs	r3, #6
 8009130:	b298      	uxth	r0, r3
									PunktySciezki2[i].Y + j,
 8009132:	492a      	ldr	r1, [pc, #168]	; (80091dc <main+0x10d4>)
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	440b      	add	r3, r1
 8009140:	3302      	adds	r3, #2
 8009142:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	b29b      	uxth	r3, r3
 8009148:	4413      	add	r3, r2
 800914a:	b29c      	uxth	r4, r3
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].X
 800914c:	4923      	ldr	r1, [pc, #140]	; (80091dc <main+0x10d4>)
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	4613      	mov	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	4413      	add	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	440b      	add	r3, r1
 800915a:	3308      	adds	r3, #8
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	491f      	ldr	r1, [pc, #124]	; (80091dc <main+0x10d4>)
 8009160:	4613      	mov	r3, r2
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4413      	add	r3, r2
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	440b      	add	r3, r1
 800916a:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 800916c:	3306      	adds	r3, #6
 800916e:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[0]].Y
 8009170:	491a      	ldr	r1, [pc, #104]	; (80091dc <main+0x10d4>)
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	4613      	mov	r3, r2
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	4413      	add	r3, r2
 800917a:	00db      	lsls	r3, r3, #3
 800917c:	440b      	add	r3, r1
 800917e:	3308      	adds	r3, #8
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4916      	ldr	r1, [pc, #88]	; (80091dc <main+0x10d4>)
 8009184:	4613      	mov	r3, r2
 8009186:	005b      	lsls	r3, r3, #1
 8009188:	4413      	add	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	440b      	add	r3, r1
 800918e:	3302      	adds	r3, #2
 8009190:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X - 6,
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	b29b      	uxth	r3, r3
 8009196:	4413      	add	r3, r2
 8009198:	b29b      	uxth	r3, r3
 800919a:	462a      	mov	r2, r5
 800919c:	4621      	mov	r1, r4
 800919e:	f7f8 ff77 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	3301      	adds	r3, #1
 80091a6:	61bb      	str	r3, [r7, #24]
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	ddb7      	ble.n	800911e <main+0x1016>
											+ j);
						}

					}

					if (PunktySciezki2[i].SasiedniePunkty[2] != 0) {
 80091ae:	490b      	ldr	r1, [pc, #44]	; (80091dc <main+0x10d4>)
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	440b      	add	r3, r1
 80091bc:	3310      	adds	r3, #16
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d055      	beq.n	8009270 <main+0x1168>
						for (int j = -6; j < 7; j++) {
 80091c4:	f06f 0305 	mvn.w	r3, #5
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e04e      	b.n	800926a <main+0x1162>
 80091cc:	0807f0a4 	.word	0x0807f0a4
 80091d0:	ffff0000 	.word	0xffff0000
 80091d4:	200004f9 	.word	0x200004f9
 80091d8:	20000642 	.word	0x20000642
 80091dc:	0807f1c4 	.word	0x0807f1c4
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 80091e0:	49b6      	ldr	r1, [pc, #728]	; (80094bc <main+0x13b4>)
 80091e2:	69fa      	ldr	r2, [r7, #28]
 80091e4:	4613      	mov	r3, r2
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	4413      	add	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	440b      	add	r3, r1
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	4413      	add	r3, r2
 80091f6:	b298      	uxth	r0, r3
									PunktySciezki2[i].Y - 6,
 80091f8:	49b0      	ldr	r1, [pc, #704]	; (80094bc <main+0x13b4>)
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	440b      	add	r3, r1
 8009206:	3302      	adds	r3, #2
 8009208:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 800920a:	3b06      	subs	r3, #6
 800920c:	b29c      	uxth	r4, r3
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].X
 800920e:	49ab      	ldr	r1, [pc, #684]	; (80094bc <main+0x13b4>)
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	4613      	mov	r3, r2
 8009214:	005b      	lsls	r3, r3, #1
 8009216:	4413      	add	r3, r2
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	440b      	add	r3, r1
 800921c:	3310      	adds	r3, #16
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	49a6      	ldr	r1, [pc, #664]	; (80094bc <main+0x13b4>)
 8009222:	4613      	mov	r3, r2
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	4413      	add	r3, r2
 8009228:	00db      	lsls	r3, r3, #3
 800922a:	440b      	add	r3, r1
 800922c:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	b29b      	uxth	r3, r3
 8009232:	4413      	add	r3, r2
 8009234:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki2[PunktySciezki2[i].SasiedniePunkty[2]].Y
 8009236:	49a1      	ldr	r1, [pc, #644]	; (80094bc <main+0x13b4>)
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	4613      	mov	r3, r2
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4413      	add	r3, r2
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	440b      	add	r3, r1
 8009244:	3310      	adds	r3, #16
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	499c      	ldr	r1, [pc, #624]	; (80094bc <main+0x13b4>)
 800924a:	4613      	mov	r3, r2
 800924c:	005b      	lsls	r3, r3, #1
 800924e:	4413      	add	r3, r2
 8009250:	00db      	lsls	r3, r3, #3
 8009252:	440b      	add	r3, r1
 8009254:	3302      	adds	r3, #2
 8009256:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki2[i].X + j,
 8009258:	3306      	adds	r3, #6
 800925a:	b29b      	uxth	r3, r3
 800925c:	462a      	mov	r2, r5
 800925e:	4621      	mov	r1, r4
 8009260:	f7f8 ff16 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	3301      	adds	r3, #1
 8009268:	617b      	str	r3, [r7, #20]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	2b06      	cmp	r3, #6
 800926e:	ddb7      	ble.n	80091e0 <main+0x10d8>
				for (uint32_t i = 1; i <= IloscPunktowSciezki2; i++) {
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3301      	adds	r3, #1
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	2238      	movs	r2, #56	; 0x38
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4293      	cmp	r3, r2
 800927c:	f67f af40 	bls.w	8009100 <main+0xff8>
											+ 6);
						}
					}
				}

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009280:	488f      	ldr	r0, [pc, #572]	; (80094c0 <main+0x13b8>)
 8009282:	f7f8 fd0b 	bl	8001c9c <BSP_LCD_SetTextColor>

				//BSP_LCD_FillCircle(PunktySciezki2[PozycjaNaSciezce].X, PunktySciezki2[PozycjaNaSciezce].Y, 5);

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8009286:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 800928a:	f7f8 fd07 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki2[IloscPunktowSciezki2].X - 6,
 800928e:	2238      	movs	r2, #56	; 0x38
 8009290:	498a      	ldr	r1, [pc, #552]	; (80094bc <main+0x13b4>)
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	440b      	add	r3, r1
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	3b06      	subs	r3, #6
 80092a0:	b298      	uxth	r0, r3
						PunktySciezki2[IloscPunktowSciezki2].Y - 6, 13, 13);
 80092a2:	2238      	movs	r2, #56	; 0x38
 80092a4:	4985      	ldr	r1, [pc, #532]	; (80094bc <main+0x13b4>)
 80092a6:	4613      	mov	r3, r2
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4413      	add	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	440b      	add	r3, r1
 80092b0:	3302      	adds	r3, #2
 80092b2:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki2[IloscPunktowSciezki2].X - 6,
 80092b4:	3b06      	subs	r3, #6
 80092b6:	b299      	uxth	r1, r3
 80092b8:	230d      	movs	r3, #13
 80092ba:	220d      	movs	r2, #13
 80092bc:	f7f9 f936 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092c4:	f7f8 fcea 	bl	8001c9c <BSP_LCD_SetTextColor>

				KontynuowanaGra = 0;
 80092c8:	4b7e      	ldr	r3, [pc, #504]	; (80094c4 <main+0x13bc>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	701a      	strb	r2, [r3, #0]
 80092ce:	e0f3      	b.n	80094b8 <main+0x13b0>

			} else if (WybranyPoziom == 2 && KontynuowanaGra == 1) {
 80092d0:	4b7d      	ldr	r3, [pc, #500]	; (80094c8 <main+0x13c0>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f47e afb5 	bne.w	8008246 <main+0x13e>
 80092dc:	4b79      	ldr	r3, [pc, #484]	; (80094c4 <main+0x13bc>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	f47e afaf 	bne.w	8008246 <main+0x13e>
				BSP_LCD_Clear(LCD_COLOR_BLACK);
 80092e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80092ec:	f7f8 fd08 	bl	8001d00 <BSP_LCD_Clear>
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092f4:	f7f8 fcd2 	bl	8001c9c <BSP_LCD_SetTextColor>

				for (uint32_t i = 1; i <= IloscPunktowSciezki3; i++) {
 80092f8:	2301      	movs	r3, #1
 80092fa:	613b      	str	r3, [r7, #16]
 80092fc:	e0b0      	b.n	8009460 <main+0x1358>
					if (PunktySciezki3[i].SasiedniePunkty[0] != 0) {
 80092fe:	4973      	ldr	r1, [pc, #460]	; (80094cc <main+0x13c4>)
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4613      	mov	r3, r2
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	4413      	add	r3, r2
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	440b      	add	r3, r1
 800930c:	3308      	adds	r3, #8
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d04b      	beq.n	80093ac <main+0x12a4>
						for (int j = -6; j < 7; j++) {
 8009314:	f06f 0305 	mvn.w	r3, #5
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e044      	b.n	80093a6 <main+0x129e>
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 800931c:	496b      	ldr	r1, [pc, #428]	; (80094cc <main+0x13c4>)
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	4613      	mov	r3, r2
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	4413      	add	r3, r2
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	3b06      	subs	r3, #6
 800932e:	b298      	uxth	r0, r3
									PunktySciezki3[i].Y + j,
 8009330:	4966      	ldr	r1, [pc, #408]	; (80094cc <main+0x13c4>)
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4613      	mov	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	4413      	add	r3, r2
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	440b      	add	r3, r1
 800933e:	3302      	adds	r3, #2
 8009340:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	b29b      	uxth	r3, r3
 8009346:	4413      	add	r3, r2
 8009348:	b29c      	uxth	r4, r3
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[0]].X
 800934a:	4960      	ldr	r1, [pc, #384]	; (80094cc <main+0x13c4>)
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	4613      	mov	r3, r2
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	4413      	add	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	440b      	add	r3, r1
 8009358:	3308      	adds	r3, #8
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	495b      	ldr	r1, [pc, #364]	; (80094cc <main+0x13c4>)
 800935e:	4613      	mov	r3, r2
 8009360:	005b      	lsls	r3, r3, #1
 8009362:	4413      	add	r3, r2
 8009364:	00db      	lsls	r3, r3, #3
 8009366:	440b      	add	r3, r1
 8009368:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 800936a:	3306      	adds	r3, #6
 800936c:	b29d      	uxth	r5, r3
											+ 6,
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[0]].Y
 800936e:	4957      	ldr	r1, [pc, #348]	; (80094cc <main+0x13c4>)
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	440b      	add	r3, r1
 800937c:	3308      	adds	r3, #8
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4952      	ldr	r1, [pc, #328]	; (80094cc <main+0x13c4>)
 8009382:	4613      	mov	r3, r2
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	4413      	add	r3, r2
 8009388:	00db      	lsls	r3, r3, #3
 800938a:	440b      	add	r3, r1
 800938c:	3302      	adds	r3, #2
 800938e:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X - 6,
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	b29b      	uxth	r3, r3
 8009394:	4413      	add	r3, r2
 8009396:	b29b      	uxth	r3, r3
 8009398:	462a      	mov	r2, r5
 800939a:	4621      	mov	r1, r4
 800939c:	f7f8 fe78 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	ddb7      	ble.n	800931c <main+0x1214>
											+ j);
						}

					}

					if (PunktySciezki3[i].SasiedniePunkty[2] != 0) {
 80093ac:	4947      	ldr	r1, [pc, #284]	; (80094cc <main+0x13c4>)
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4613      	mov	r3, r2
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	4413      	add	r3, r2
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	440b      	add	r3, r1
 80093ba:	3310      	adds	r3, #16
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d04b      	beq.n	800945a <main+0x1352>
						for (int j = -6; j < 7; j++) {
 80093c2:	f06f 0305 	mvn.w	r3, #5
 80093c6:	60bb      	str	r3, [r7, #8]
 80093c8:	e044      	b.n	8009454 <main+0x134c>
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 80093ca:	4940      	ldr	r1, [pc, #256]	; (80094cc <main+0x13c4>)
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	4613      	mov	r3, r2
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	4413      	add	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	440b      	add	r3, r1
 80093d8:	881a      	ldrh	r2, [r3, #0]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	4413      	add	r3, r2
 80093e0:	b298      	uxth	r0, r3
									PunktySciezki3[i].Y - 6,
 80093e2:	493a      	ldr	r1, [pc, #232]	; (80094cc <main+0x13c4>)
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	4613      	mov	r3, r2
 80093e8:	005b      	lsls	r3, r3, #1
 80093ea:	4413      	add	r3, r2
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	440b      	add	r3, r1
 80093f0:	3302      	adds	r3, #2
 80093f2:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 80093f4:	3b06      	subs	r3, #6
 80093f6:	b29c      	uxth	r4, r3
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[2]].X
 80093f8:	4934      	ldr	r1, [pc, #208]	; (80094cc <main+0x13c4>)
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	4613      	mov	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	440b      	add	r3, r1
 8009406:	3310      	adds	r3, #16
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	4930      	ldr	r1, [pc, #192]	; (80094cc <main+0x13c4>)
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	00db      	lsls	r3, r3, #3
 8009414:	440b      	add	r3, r1
 8009416:	881a      	ldrh	r2, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	b29b      	uxth	r3, r3
 800941c:	4413      	add	r3, r2
 800941e:	b29d      	uxth	r5, r3
											+ j,
									PunktySciezki3[PunktySciezki3[i].SasiedniePunkty[2]].Y
 8009420:	492a      	ldr	r1, [pc, #168]	; (80094cc <main+0x13c4>)
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4613      	mov	r3, r2
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	4413      	add	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	440b      	add	r3, r1
 800942e:	3310      	adds	r3, #16
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	4926      	ldr	r1, [pc, #152]	; (80094cc <main+0x13c4>)
 8009434:	4613      	mov	r3, r2
 8009436:	005b      	lsls	r3, r3, #1
 8009438:	4413      	add	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	440b      	add	r3, r1
 800943e:	3302      	adds	r3, #2
 8009440:	881b      	ldrh	r3, [r3, #0]
							BSP_LCD_DrawLine(PunktySciezki3[i].X + j,
 8009442:	3306      	adds	r3, #6
 8009444:	b29b      	uxth	r3, r3
 8009446:	462a      	mov	r2, r5
 8009448:	4621      	mov	r1, r4
 800944a:	f7f8 fe21 	bl	8002090 <BSP_LCD_DrawLine>
						for (int j = -6; j < 7; j++) {
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	3301      	adds	r3, #1
 8009452:	60bb      	str	r3, [r7, #8]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b06      	cmp	r3, #6
 8009458:	ddb7      	ble.n	80093ca <main+0x12c2>
				for (uint32_t i = 1; i <= IloscPunktowSciezki3; i++) {
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	3301      	adds	r3, #1
 800945e:	613b      	str	r3, [r7, #16]
 8009460:	224b      	movs	r2, #75	; 0x4b
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	4293      	cmp	r3, r2
 8009466:	f67f af4a 	bls.w	80092fe <main+0x11f6>
											+ 6);
						}
					}
				}

				BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800946a:	4815      	ldr	r0, [pc, #84]	; (80094c0 <main+0x13b8>)
 800946c:	f7f8 fc16 	bl	8001c9c <BSP_LCD_SetTextColor>

				//BSP_LCD_FillCircle(PunktySciezki3[PozycjaNaSciezce].X, PunktySciezki3[PozycjaNaSciezce].Y, 5);

				BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 8009470:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8009474:	f7f8 fc12 	bl	8001c9c <BSP_LCD_SetTextColor>
				BSP_LCD_FillRect(PunktySciezki3[IloscPunktowSciezki3].X - 6,
 8009478:	224b      	movs	r2, #75	; 0x4b
 800947a:	4914      	ldr	r1, [pc, #80]	; (80094cc <main+0x13c4>)
 800947c:	4613      	mov	r3, r2
 800947e:	005b      	lsls	r3, r3, #1
 8009480:	4413      	add	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	440b      	add	r3, r1
 8009486:	881b      	ldrh	r3, [r3, #0]
 8009488:	3b06      	subs	r3, #6
 800948a:	b298      	uxth	r0, r3
						PunktySciezki3[IloscPunktowSciezki3].Y - 6, 13, 13);
 800948c:	224b      	movs	r2, #75	; 0x4b
 800948e:	490f      	ldr	r1, [pc, #60]	; (80094cc <main+0x13c4>)
 8009490:	4613      	mov	r3, r2
 8009492:	005b      	lsls	r3, r3, #1
 8009494:	4413      	add	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	440b      	add	r3, r1
 800949a:	3302      	adds	r3, #2
 800949c:	881b      	ldrh	r3, [r3, #0]
				BSP_LCD_FillRect(PunktySciezki3[IloscPunktowSciezki3].X - 6,
 800949e:	3b06      	subs	r3, #6
 80094a0:	b299      	uxth	r1, r3
 80094a2:	230d      	movs	r3, #13
 80094a4:	220d      	movs	r2, #13
 80094a6:	f7f9 f841 	bl	800252c <BSP_LCD_FillRect>

				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ae:	f7f8 fbf5 	bl	8001c9c <BSP_LCD_SetTextColor>

				KontynuowanaGra = 0;
 80094b2:	4b04      	ldr	r3, [pc, #16]	; (80094c4 <main+0x13bc>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
		if (HAL_GetTick() - czasZmiany > 1500) {
 80094b8:	f7fe bec5 	b.w	8008246 <main+0x13e>
 80094bc:	0807f1c4 	.word	0x0807f1c4
 80094c0:	ffff0000 	.word	0xffff0000
 80094c4:	200004f9 	.word	0x200004f9
 80094c8:	20000642 	.word	0x20000642
 80094cc:	0807f71c 	.word	0x0807f71c

080094d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b0a0      	sub	sp, #128	; 0x80
 80094d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80094d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80094da:	2230      	movs	r2, #48	; 0x30
 80094dc:	2100      	movs	r1, #0
 80094de:	4618      	mov	r0, r3
 80094e0:	f002 fd2e 	bl	800bf40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80094e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80094e8:	2200      	movs	r2, #0
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	605a      	str	r2, [r3, #4]
 80094ee:	609a      	str	r2, [r3, #8]
 80094f0:	60da      	str	r2, [r3, #12]
 80094f2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80094f4:	f107 030c 	add.w	r3, r7, #12
 80094f8:	2230      	movs	r2, #48	; 0x30
 80094fa:	2100      	movs	r1, #0
 80094fc:	4618      	mov	r0, r3
 80094fe:	f002 fd1f 	bl	800bf40 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
 8009506:	4a35      	ldr	r2, [pc, #212]	; (80095dc <SystemClock_Config+0x10c>)
 8009508:	4b34      	ldr	r3, [pc, #208]	; (80095dc <SystemClock_Config+0x10c>)
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009510:	6413      	str	r3, [r2, #64]	; 0x40
 8009512:	4b32      	ldr	r3, [pc, #200]	; (80095dc <SystemClock_Config+0x10c>)
 8009514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800951e:	2300      	movs	r3, #0
 8009520:	607b      	str	r3, [r7, #4]
 8009522:	4a2f      	ldr	r2, [pc, #188]	; (80095e0 <SystemClock_Config+0x110>)
 8009524:	4b2e      	ldr	r3, [pc, #184]	; (80095e0 <SystemClock_Config+0x110>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800952c:	6013      	str	r3, [r2, #0]
 800952e:	4b2c      	ldr	r3, [pc, #176]	; (80095e0 <SystemClock_Config+0x110>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009536:	607b      	str	r3, [r7, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800953a:	2301      	movs	r3, #1
 800953c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800953e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009542:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009544:	2302      	movs	r3, #2
 8009546:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800954c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800954e:	2304      	movs	r3, #4
 8009550:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 180;
 8009552:	23b4      	movs	r3, #180	; 0xb4
 8009554:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009556:	2302      	movs	r3, #2
 8009558:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 3;
 800955a:	2303      	movs	r3, #3
 800955c:	67fb      	str	r3, [r7, #124]	; 0x7c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800955e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009562:	4618      	mov	r0, r3
 8009564:	f7fb fc1a 	bl	8004d9c <HAL_RCC_OscConfig>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <SystemClock_Config+0xa2>
		Error_Handler();
 800956e:	f002 f8c5 	bl	800b6fc <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8009572:	f7fb fbc3 	bl	8004cfc <HAL_PWREx_EnableOverDrive>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <SystemClock_Config+0xb0>
		Error_Handler();
 800957c:	f002 f8be 	bl	800b6fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8009580:	230f      	movs	r3, #15
 8009582:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009584:	2302      	movs	r3, #2
 8009586:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009588:	2300      	movs	r3, #0
 800958a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800958c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009590:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009596:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8009598:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800959c:	2105      	movs	r1, #5
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fb fe3e 	bl	8005220 <HAL_RCC_ClockConfig>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d001      	beq.n	80095ae <SystemClock_Config+0xde>
		Error_Handler();
 80095aa:	f002 f8a7 	bl	800b6fc <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80095ae:	2308      	movs	r3, #8
 80095b0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80095b2:	23c0      	movs	r3, #192	; 0xc0
 80095b4:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80095b6:	2302      	movs	r3, #2
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80095ba:	2300      	movs	r3, #0
 80095bc:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80095be:	f107 030c 	add.w	r3, r7, #12
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fc f84c 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <SystemClock_Config+0x102>
		Error_Handler();
 80095ce:	f002 f895 	bl	800b6fc <Error_Handler>
	}
}
 80095d2:	bf00      	nop
 80095d4:	3780      	adds	r7, #128	; 0x80
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800
 80095e0:	40007000 	.word	0x40007000
 80095e4:	00000000 	.word	0x00000000

080095e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80095e8:	b5b0      	push	{r4, r5, r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM10) //Przerwanie pochodzi od timera 10
	{
		;
	}

	if (htim->Instance == TIM11) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a9a      	ldr	r2, [pc, #616]	; (8009860 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	f042 8056 	bne.w	800b6a8 <HAL_TIM_PeriodElapsedCallback+0x20c0>
		OurL3GD20_Read();
 80095fc:	f7fe fcfa 	bl	8007ff4 <OurL3GD20_Read>
		if (DataNow.OsX < 10 && DataNow.OsX > -10) {
 8009600:	4b98      	ldr	r3, [pc, #608]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009602:	881b      	ldrh	r3, [r3, #0]
 8009604:	b21b      	sxth	r3, r3
 8009606:	2b09      	cmp	r3, #9
 8009608:	dc0b      	bgt.n	8009622 <HAL_TIM_PeriodElapsedCallback+0x3a>
 800960a:	4b96      	ldr	r3, [pc, #600]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	b21b      	sxth	r3, r3
 8009610:	f113 0f09 	cmn.w	r3, #9
 8009614:	db05      	blt.n	8009622 <HAL_TIM_PeriodElapsedCallback+0x3a>
			DataNow.OsX = 0;
 8009616:	4b93      	ldr	r3, [pc, #588]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009618:	2200      	movs	r2, #0
 800961a:	801a      	strh	r2, [r3, #0]
			V_postX = 0;
 800961c:	4b92      	ldr	r3, [pc, #584]	; (8009868 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800961e:	2200      	movs	r2, #0
 8009620:	601a      	str	r2, [r3, #0]

		}

		if (DataNow.OsY < 10 && DataNow.OsY > -10) {
 8009622:	4b90      	ldr	r3, [pc, #576]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009624:	885b      	ldrh	r3, [r3, #2]
 8009626:	b21b      	sxth	r3, r3
 8009628:	2b09      	cmp	r3, #9
 800962a:	dc0b      	bgt.n	8009644 <HAL_TIM_PeriodElapsedCallback+0x5c>
 800962c:	4b8d      	ldr	r3, [pc, #564]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800962e:	885b      	ldrh	r3, [r3, #2]
 8009630:	b21b      	sxth	r3, r3
 8009632:	f113 0f09 	cmn.w	r3, #9
 8009636:	db05      	blt.n	8009644 <HAL_TIM_PeriodElapsedCallback+0x5c>
			DataNow.OsY = 0;
 8009638:	4b8a      	ldr	r3, [pc, #552]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800963a:	2200      	movs	r2, #0
 800963c:	805a      	strh	r2, [r3, #2]
			V_postY = 0;
 800963e:	4b8b      	ldr	r3, [pc, #556]	; (800986c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
		}

		if (DataNow.OsZ < 10 && DataNow.OsZ > -10)
 8009644:	4b87      	ldr	r3, [pc, #540]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009646:	889b      	ldrh	r3, [r3, #4]
 8009648:	b21b      	sxth	r3, r3
 800964a:	2b09      	cmp	r3, #9
 800964c:	dc08      	bgt.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x78>
 800964e:	4b85      	ldr	r3, [pc, #532]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009650:	889b      	ldrh	r3, [r3, #4]
 8009652:	b21b      	sxth	r3, r3
 8009654:	f113 0f09 	cmn.w	r3, #9
 8009658:	db02      	blt.n	8009660 <HAL_TIM_PeriodElapsedCallback+0x78>
			DataNow.OsZ = 0;
 800965a:	4b82      	ldr	r3, [pc, #520]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800965c:	2200      	movs	r2, #0
 800965e:	809a      	strh	r2, [r3, #4]

		X_pri = X_post + (int32_t) (0.4 * V_postX);
 8009660:	4b81      	ldr	r3, [pc, #516]	; (8009868 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4618      	mov	r0, r3
 8009666:	f7f6 ff65 	bl	8000534 <__aeabi_i2d>
 800966a:	a377      	add	r3, pc, #476	; (adr r3, 8009848 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800966c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009670:	f7f6 ffc6 	bl	8000600 <__aeabi_dmul>
 8009674:	4603      	mov	r3, r0
 8009676:	460c      	mov	r4, r1
 8009678:	4618      	mov	r0, r3
 800967a:	4621      	mov	r1, r4
 800967c:	f7f7 f9d2 	bl	8000a24 <__aeabi_d2iz>
 8009680:	4602      	mov	r2, r0
 8009682:	4b7b      	ldr	r3, [pc, #492]	; (8009870 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4413      	add	r3, r2
 8009688:	4a7a      	ldr	r2, [pc, #488]	; (8009874 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800968a:	6013      	str	r3, [r2, #0]
		V_priX = V_postX;
 800968c:	4b76      	ldr	r3, [pc, #472]	; (8009868 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a79      	ldr	r2, [pc, #484]	; (8009878 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8009692:	6013      	str	r3, [r2, #0]

		X_post = X_pri + (int32_t) (0.9 * (DataNow.OsX - V_priX) * 0.4);
 8009694:	4b73      	ldr	r3, [pc, #460]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b21b      	sxth	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	4b76      	ldr	r3, [pc, #472]	; (8009878 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f6 ff46 	bl	8000534 <__aeabi_i2d>
 80096a8:	a369      	add	r3, pc, #420	; (adr r3, 8009850 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 ffa7 	bl	8000600 <__aeabi_dmul>
 80096b2:	4603      	mov	r3, r0
 80096b4:	460c      	mov	r4, r1
 80096b6:	4618      	mov	r0, r3
 80096b8:	4621      	mov	r1, r4
 80096ba:	a363      	add	r3, pc, #396	; (adr r3, 8009848 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 ff9e 	bl	8000600 <__aeabi_dmul>
 80096c4:	4603      	mov	r3, r0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4618      	mov	r0, r3
 80096ca:	4621      	mov	r1, r4
 80096cc:	f7f7 f9aa 	bl	8000a24 <__aeabi_d2iz>
 80096d0:	4602      	mov	r2, r0
 80096d2:	4b68      	ldr	r3, [pc, #416]	; (8009874 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4413      	add	r3, r2
 80096d8:	4a65      	ldr	r2, [pc, #404]	; (8009870 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80096da:	6013      	str	r3, [r2, #0]
		V_postX = V_priX + (int32_t) (0.05 * (DataNow.OsX - V_priX));
 80096dc:	4b61      	ldr	r3, [pc, #388]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80096de:	881b      	ldrh	r3, [r3, #0]
 80096e0:	b21b      	sxth	r3, r3
 80096e2:	461a      	mov	r2, r3
 80096e4:	4b64      	ldr	r3, [pc, #400]	; (8009878 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7f6 ff22 	bl	8000534 <__aeabi_i2d>
 80096f0:	a359      	add	r3, pc, #356	; (adr r3, 8009858 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 ff83 	bl	8000600 <__aeabi_dmul>
 80096fa:	4603      	mov	r3, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	4618      	mov	r0, r3
 8009700:	4621      	mov	r1, r4
 8009702:	f7f7 f98f 	bl	8000a24 <__aeabi_d2iz>
 8009706:	4602      	mov	r2, r0
 8009708:	4b5b      	ldr	r3, [pc, #364]	; (8009878 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4413      	add	r3, r2
 800970e:	4a56      	ldr	r2, [pc, #344]	; (8009868 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8009710:	6013      	str	r3, [r2, #0]

		Y_pri = Y_post + (int32_t) (0.4 * V_postY);
 8009712:	4b56      	ldr	r3, [pc, #344]	; (800986c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f7f6 ff0c 	bl	8000534 <__aeabi_i2d>
 800971c:	a34a      	add	r3, pc, #296	; (adr r3, 8009848 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800971e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009722:	f7f6 ff6d 	bl	8000600 <__aeabi_dmul>
 8009726:	4603      	mov	r3, r0
 8009728:	460c      	mov	r4, r1
 800972a:	4618      	mov	r0, r3
 800972c:	4621      	mov	r1, r4
 800972e:	f7f7 f979 	bl	8000a24 <__aeabi_d2iz>
 8009732:	4602      	mov	r2, r0
 8009734:	4b51      	ldr	r3, [pc, #324]	; (800987c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4413      	add	r3, r2
 800973a:	4a51      	ldr	r2, [pc, #324]	; (8009880 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800973c:	6013      	str	r3, [r2, #0]
		V_priY = V_postY;
 800973e:	4b4b      	ldr	r3, [pc, #300]	; (800986c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a50      	ldr	r2, [pc, #320]	; (8009884 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8009744:	6013      	str	r3, [r2, #0]

		Y_post = Y_pri + (int32_t) (0.9 * (DataNow.OsY - V_priY) * 0.4);
 8009746:	4b47      	ldr	r3, [pc, #284]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009748:	885b      	ldrh	r3, [r3, #2]
 800974a:	b21b      	sxth	r3, r3
 800974c:	461a      	mov	r2, r3
 800974e:	4b4d      	ldr	r3, [pc, #308]	; (8009884 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	4618      	mov	r0, r3
 8009756:	f7f6 feed 	bl	8000534 <__aeabi_i2d>
 800975a:	a33d      	add	r3, pc, #244	; (adr r3, 8009850 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 ff4e 	bl	8000600 <__aeabi_dmul>
 8009764:	4603      	mov	r3, r0
 8009766:	460c      	mov	r4, r1
 8009768:	4618      	mov	r0, r3
 800976a:	4621      	mov	r1, r4
 800976c:	a336      	add	r3, pc, #216	; (adr r3, 8009848 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 ff45 	bl	8000600 <__aeabi_dmul>
 8009776:	4603      	mov	r3, r0
 8009778:	460c      	mov	r4, r1
 800977a:	4618      	mov	r0, r3
 800977c:	4621      	mov	r1, r4
 800977e:	f7f7 f951 	bl	8000a24 <__aeabi_d2iz>
 8009782:	4602      	mov	r2, r0
 8009784:	4b3e      	ldr	r3, [pc, #248]	; (8009880 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4413      	add	r3, r2
 800978a:	4a3c      	ldr	r2, [pc, #240]	; (800987c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800978c:	6013      	str	r3, [r2, #0]
		V_postY = V_priY + (int32_t) (0.05 * (DataNow.OsY - V_priY));
 800978e:	4b35      	ldr	r3, [pc, #212]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8009790:	885b      	ldrh	r3, [r3, #2]
 8009792:	b21b      	sxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	4618      	mov	r0, r3
 800979e:	f7f6 fec9 	bl	8000534 <__aeabi_i2d>
 80097a2:	a32d      	add	r3, pc, #180	; (adr r3, 8009858 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80097a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a8:	f7f6 ff2a 	bl	8000600 <__aeabi_dmul>
 80097ac:	4603      	mov	r3, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	4618      	mov	r0, r3
 80097b2:	4621      	mov	r1, r4
 80097b4:	f7f7 f936 	bl	8000a24 <__aeabi_d2iz>
 80097b8:	4602      	mov	r2, r0
 80097ba:	4b32      	ldr	r3, [pc, #200]	; (8009884 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4413      	add	r3, r2
 80097c0:	4a2a      	ldr	r2, [pc, #168]	; (800986c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80097c2:	6013      	str	r3, [r2, #0]

		//To mozna wsumie przy testowaniu wywalic za czesc testowa
		if ((DataNow.OsX >= 25 && DataNow.OsY <= 20)
 80097c4:	4b27      	ldr	r3, [pc, #156]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80097c6:	881b      	ldrh	r3, [r3, #0]
 80097c8:	b21b      	sxth	r3, r3
 80097ca:	2b18      	cmp	r3, #24
 80097cc:	dd04      	ble.n	80097d8 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 80097ce:	4b25      	ldr	r3, [pc, #148]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80097d0:	885b      	ldrh	r3, [r3, #2]
 80097d2:	b21b      	sxth	r3, r3
 80097d4:	2b14      	cmp	r3, #20
 80097d6:	dd0b      	ble.n	80097f0 <HAL_TIM_PeriodElapsedCallback+0x208>
				|| (DataNow.OsX <= -25 && DataNow.OsY >= -20))
 80097d8:	4b22      	ldr	r3, [pc, #136]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b21b      	sxth	r3, r3
 80097de:	f113 0f18 	cmn.w	r3, #24
 80097e2:	da57      	bge.n	8009894 <HAL_TIM_PeriodElapsedCallback+0x2ac>
 80097e4:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80097e6:	885b      	ldrh	r3, [r3, #2]
 80097e8:	b21b      	sxth	r3, r3
 80097ea:	f113 0f14 	cmn.w	r3, #20
 80097ee:	db51      	blt.n	8009894 <HAL_TIM_PeriodElapsedCallback+0x2ac>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 80097f0:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80097f2:	881b      	ldrh	r3, [r3, #0]
 80097f4:	b21b      	sxth	r3, r3
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7f6 fe9c 	bl	8000534 <__aeabi_i2d>
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	4b21      	ldr	r3, [pc, #132]	; (8009888 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b21b      	sxth	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	4b16      	ldr	r3, [pc, #88]	; (8009864 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800980a:	881b      	ldrh	r3, [r3, #0]
 800980c:	b21b      	sxth	r3, r3
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	4618      	mov	r0, r3
 8009812:	f7f6 fe8f 	bl	8000534 <__aeabi_i2d>
 8009816:	f04f 0200 	mov.w	r2, #0
 800981a:	4b1c      	ldr	r3, [pc, #112]	; (800988c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800981c:	f7f6 fef0 	bl	8000600 <__aeabi_dmul>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	4620      	mov	r0, r4
 8009826:	4629      	mov	r1, r5
 8009828:	f7f6 fd38 	bl	800029c <__adddf3>
 800982c:	4603      	mov	r3, r0
 800982e:	460c      	mov	r4, r1
 8009830:	4618      	mov	r0, r3
 8009832:	4621      	mov	r1, r4
 8009834:	f7f7 f8f6 	bl	8000a24 <__aeabi_d2iz>
 8009838:	4602      	mov	r2, r0
			AngleX +=
 800983a:	4b15      	ldr	r3, [pc, #84]	; (8009890 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4413      	add	r3, r2
 8009840:	4a13      	ldr	r2, [pc, #76]	; (8009890 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8009842:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 8009844:	e066      	b.n	8009914 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8009846:	bf00      	nop
 8009848:	9999999a 	.word	0x9999999a
 800984c:	3fd99999 	.word	0x3fd99999
 8009850:	cccccccd 	.word	0xcccccccd
 8009854:	3feccccc 	.word	0x3feccccc
 8009858:	9999999a 	.word	0x9999999a
 800985c:	3fa99999 	.word	0x3fa99999
 8009860:	40014800 	.word	0x40014800
 8009864:	200005d0 	.word	0x200005d0
 8009868:	20000648 	.word	0x20000648
 800986c:	200004e8 	.word	0x200004e8
 8009870:	20000610 	.word	0x20000610
 8009874:	200004f4 	.word	0x200004f4
 8009878:	2000062c 	.word	0x2000062c
 800987c:	20000654 	.word	0x20000654
 8009880:	200005dc 	.word	0x200005dc
 8009884:	20000608 	.word	0x20000608
 8009888:	200004ec 	.word	0x200004ec
 800988c:	3fe00000 	.word	0x3fe00000
 8009890:	200005cc 	.word	0x200005cc
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 8009894:	4b8a      	ldr	r3, [pc, #552]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b21b      	sxth	r3, r3
 800989a:	2b18      	cmp	r3, #24
 800989c:	dd04      	ble.n	80098a8 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 800989e:	4b88      	ldr	r3, [pc, #544]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	2b18      	cmp	r3, #24
 80098a6:	dc0b      	bgt.n	80098c0 <HAL_TIM_PeriodElapsedCallback+0x2d8>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 80098a8:	4b85      	ldr	r3, [pc, #532]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	b21b      	sxth	r3, r3
 80098ae:	f113 0f18 	cmn.w	r3, #24
 80098b2:	da2f      	bge.n	8009914 <HAL_TIM_PeriodElapsedCallback+0x32c>
 80098b4:	4b82      	ldr	r3, [pc, #520]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80098b6:	885b      	ldrh	r3, [r3, #2]
 80098b8:	b21b      	sxth	r3, r3
 80098ba:	f113 0f18 	cmn.w	r3, #24
 80098be:	da29      	bge.n	8009914 <HAL_TIM_PeriodElapsedCallback+0x32c>
			AngleX +=
					(long) (DataNow.OsX + ((DataOld.OsX - DataNow.OsX) * 0.5));
 80098c0:	4b7f      	ldr	r3, [pc, #508]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	b21b      	sxth	r3, r3
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7f6 fe34 	bl	8000534 <__aeabi_i2d>
 80098cc:	4604      	mov	r4, r0
 80098ce:	460d      	mov	r5, r1
 80098d0:	4b7c      	ldr	r3, [pc, #496]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80098d2:	881b      	ldrh	r3, [r3, #0]
 80098d4:	b21b      	sxth	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	4b79      	ldr	r3, [pc, #484]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b21b      	sxth	r3, r3
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7f6 fe27 	bl	8000534 <__aeabi_i2d>
 80098e6:	f04f 0200 	mov.w	r2, #0
 80098ea:	4b77      	ldr	r3, [pc, #476]	; (8009ac8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80098ec:	f7f6 fe88 	bl	8000600 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fcd0 	bl	800029c <__adddf3>
 80098fc:	4603      	mov	r3, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	4618      	mov	r0, r3
 8009902:	4621      	mov	r1, r4
 8009904:	f7f7 f88e 	bl	8000a24 <__aeabi_d2iz>
 8009908:	4602      	mov	r2, r0
			AngleX +=
 800990a:	4b70      	ldr	r3, [pc, #448]	; (8009acc <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4413      	add	r3, r2
 8009910:	4a6e      	ldr	r2, [pc, #440]	; (8009acc <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8009912:	6013      	str	r3, [r2, #0]

		if ((DataNow.OsY >= 25 && DataNow.OsX <= 20)
 8009914:	4b6a      	ldr	r3, [pc, #424]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009916:	885b      	ldrh	r3, [r3, #2]
 8009918:	b21b      	sxth	r3, r3
 800991a:	2b18      	cmp	r3, #24
 800991c:	dd04      	ble.n	8009928 <HAL_TIM_PeriodElapsedCallback+0x340>
 800991e:	4b68      	ldr	r3, [pc, #416]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	b21b      	sxth	r3, r3
 8009924:	2b14      	cmp	r3, #20
 8009926:	dd0b      	ble.n	8009940 <HAL_TIM_PeriodElapsedCallback+0x358>
				|| (DataNow.OsY <= -25 && DataNow.OsX >= -20))
 8009928:	4b65      	ldr	r3, [pc, #404]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800992a:	885b      	ldrh	r3, [r3, #2]
 800992c:	b21b      	sxth	r3, r3
 800992e:	f113 0f18 	cmn.w	r3, #24
 8009932:	da30      	bge.n	8009996 <HAL_TIM_PeriodElapsedCallback+0x3ae>
 8009934:	4b62      	ldr	r3, [pc, #392]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b21b      	sxth	r3, r3
 800993a:	f113 0f14 	cmn.w	r3, #20
 800993e:	db2a      	blt.n	8009996 <HAL_TIM_PeriodElapsedCallback+0x3ae>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8009940:	4b5f      	ldr	r3, [pc, #380]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009942:	885b      	ldrh	r3, [r3, #2]
 8009944:	b21b      	sxth	r3, r3
 8009946:	4618      	mov	r0, r3
 8009948:	f7f6 fdf4 	bl	8000534 <__aeabi_i2d>
 800994c:	4604      	mov	r4, r0
 800994e:	460d      	mov	r5, r1
 8009950:	4b5c      	ldr	r3, [pc, #368]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	b21b      	sxth	r3, r3
 8009956:	461a      	mov	r2, r3
 8009958:	4b59      	ldr	r3, [pc, #356]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800995a:	885b      	ldrh	r3, [r3, #2]
 800995c:	b21b      	sxth	r3, r3
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	4618      	mov	r0, r3
 8009962:	f7f6 fde7 	bl	8000534 <__aeabi_i2d>
 8009966:	f04f 0200 	mov.w	r2, #0
 800996a:	4b57      	ldr	r3, [pc, #348]	; (8009ac8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800996c:	f7f6 fe48 	bl	8000600 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4620      	mov	r0, r4
 8009976:	4629      	mov	r1, r5
 8009978:	f7f6 fc90 	bl	800029c <__adddf3>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4618      	mov	r0, r3
 8009982:	4621      	mov	r1, r4
 8009984:	f7f7 f84e 	bl	8000a24 <__aeabi_d2iz>
 8009988:	4602      	mov	r2, r0
			AngleY +=
 800998a:	4b51      	ldr	r3, [pc, #324]	; (8009ad0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4413      	add	r3, r2
 8009990:	4a4f      	ldr	r2, [pc, #316]	; (8009ad0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8009992:	6013      	str	r3, [r2, #0]
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 8009994:	e03f      	b.n	8009a16 <HAL_TIM_PeriodElapsedCallback+0x42e>
		else if ((DataNow.OsX >= 25 && DataNow.OsY >= 25)
 8009996:	4b4a      	ldr	r3, [pc, #296]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009998:	881b      	ldrh	r3, [r3, #0]
 800999a:	b21b      	sxth	r3, r3
 800999c:	2b18      	cmp	r3, #24
 800999e:	dd04      	ble.n	80099aa <HAL_TIM_PeriodElapsedCallback+0x3c2>
 80099a0:	4b47      	ldr	r3, [pc, #284]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80099a2:	885b      	ldrh	r3, [r3, #2]
 80099a4:	b21b      	sxth	r3, r3
 80099a6:	2b18      	cmp	r3, #24
 80099a8:	dc0b      	bgt.n	80099c2 <HAL_TIM_PeriodElapsedCallback+0x3da>
				|| (DataNow.OsX <= -25 && DataNow.OsY <= -25))
 80099aa:	4b45      	ldr	r3, [pc, #276]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	f113 0f18 	cmn.w	r3, #24
 80099b4:	da2f      	bge.n	8009a16 <HAL_TIM_PeriodElapsedCallback+0x42e>
 80099b6:	4b42      	ldr	r3, [pc, #264]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80099b8:	885b      	ldrh	r3, [r3, #2]
 80099ba:	b21b      	sxth	r3, r3
 80099bc:	f113 0f18 	cmn.w	r3, #24
 80099c0:	da29      	bge.n	8009a16 <HAL_TIM_PeriodElapsedCallback+0x42e>
			AngleY +=
					(long) (DataNow.OsY + ((DataOld.OsY - DataNow.OsY) * 0.5));
 80099c2:	4b3f      	ldr	r3, [pc, #252]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80099c4:	885b      	ldrh	r3, [r3, #2]
 80099c6:	b21b      	sxth	r3, r3
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f6 fdb3 	bl	8000534 <__aeabi_i2d>
 80099ce:	4604      	mov	r4, r0
 80099d0:	460d      	mov	r5, r1
 80099d2:	4b3c      	ldr	r3, [pc, #240]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80099d4:	885b      	ldrh	r3, [r3, #2]
 80099d6:	b21b      	sxth	r3, r3
 80099d8:	461a      	mov	r2, r3
 80099da:	4b39      	ldr	r3, [pc, #228]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80099dc:	885b      	ldrh	r3, [r3, #2]
 80099de:	b21b      	sxth	r3, r3
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f6 fda6 	bl	8000534 <__aeabi_i2d>
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	4b36      	ldr	r3, [pc, #216]	; (8009ac8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 80099ee:	f7f6 fe07 	bl	8000600 <__aeabi_dmul>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7f6 fc4f 	bl	800029c <__adddf3>
 80099fe:	4603      	mov	r3, r0
 8009a00:	460c      	mov	r4, r1
 8009a02:	4618      	mov	r0, r3
 8009a04:	4621      	mov	r1, r4
 8009a06:	f7f7 f80d 	bl	8000a24 <__aeabi_d2iz>
 8009a0a:	4602      	mov	r2, r0
			AngleY +=
 8009a0c:	4b30      	ldr	r3, [pc, #192]	; (8009ad0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4413      	add	r3, r2
 8009a12:	4a2f      	ldr	r2, [pc, #188]	; (8009ad0 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8009a14:	6013      	str	r3, [r2, #0]
		 LicznikPomocniczy = 0;
		 }
		 */
		//koniec
		//Liczenie calki za pomoca metody Romberga
		if (LicznikPomocniczyRomberg == 0) {
 8009a16:	4b2f      	ldr	r3, [pc, #188]	; (8009ad4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d163      	bne.n	8009ae8 <HAL_TIM_PeriodElapsedCallback+0x500>
			DataTempRom[0] = DataOld;
 8009a20:	4b2d      	ldr	r3, [pc, #180]	; (8009ad8 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8009a22:	4a28      	ldr	r2, [pc, #160]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8009a24:	6811      	ldr	r1, [r2, #0]
 8009a26:	6019      	str	r1, [r3, #0]
 8009a28:	8892      	ldrh	r2, [r2, #4]
 8009a2a:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] = (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009a2c:	4b25      	ldr	r3, [pc, #148]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b21b      	sxth	r3, r3
 8009a32:	461a      	mov	r2, r3
 8009a34:	4b22      	ldr	r3, [pc, #136]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009a36:	881b      	ldrh	r3, [r3, #0]
 8009a38:	b21b      	sxth	r3, r3
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7f6 fd79 	bl	8000534 <__aeabi_i2d>
 8009a42:	f04f 0200 	mov.w	r2, #0
 8009a46:	4b20      	ldr	r3, [pc, #128]	; (8009ac8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8009a48:	f7f6 fdda 	bl	8000600 <__aeabi_dmul>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	460c      	mov	r4, r1
 8009a50:	4618      	mov	r0, r3
 8009a52:	4621      	mov	r1, r4
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	4b20      	ldr	r3, [pc, #128]	; (8009adc <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8009a5a:	f7f6 fdd1 	bl	8000600 <__aeabi_dmul>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] = (long) (4
 8009a62:	4618      	mov	r0, r3
 8009a64:	4621      	mov	r1, r4
 8009a66:	f7f6 ffdd 	bl	8000a24 <__aeabi_d2iz>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ae0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 8009a6e:	60da      	str	r2, [r3, #12]
			CalkaPosredniaRomY[3] = (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009a70:	4b14      	ldr	r3, [pc, #80]	; (8009ac4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 8009a72:	885b      	ldrh	r3, [r3, #2]
 8009a74:	b21b      	sxth	r3, r3
 8009a76:	461a      	mov	r2, r3
 8009a78:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 8009a7a:	885b      	ldrh	r3, [r3, #2]
 8009a7c:	b21b      	sxth	r3, r3
 8009a7e:	4413      	add	r3, r2
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7f6 fd57 	bl	8000534 <__aeabi_i2d>
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8009a8c:	f7f6 fdb8 	bl	8000600 <__aeabi_dmul>
 8009a90:	4603      	mov	r3, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	4618      	mov	r0, r3
 8009a96:	4621      	mov	r1, r4
 8009a98:	f04f 0200 	mov.w	r2, #0
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8009a9e:	f7f6 fdaf 	bl	8000600 <__aeabi_dmul>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] = (long) (4
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7f6 ffbb 	bl	8000a24 <__aeabi_d2iz>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b0c      	ldr	r3, [pc, #48]	; (8009ae4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8009ab2:	60da      	str	r2, [r3, #12]

			LicznikPomocniczyRomberg = 1;
 8009ab4:	4b07      	ldr	r3, [pc, #28]	; (8009ad4 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
 8009aba:	f000 bd83 	b.w	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
 8009abe:	bf00      	nop
 8009ac0:	200005d0 	.word	0x200005d0
 8009ac4:	200004ec 	.word	0x200004ec
 8009ac8:	3fe00000 	.word	0x3fe00000
 8009acc:	200005cc 	.word	0x200005cc
 8009ad0:	2000060c 	.word	0x2000060c
 8009ad4:	20000588 	.word	0x20000588
 8009ad8:	200004fc 	.word	0x200004fc
 8009adc:	40100000 	.word	0x40100000
 8009ae0:	200005ec 	.word	0x200005ec
 8009ae4:	200005b4 	.word	0x200005b4

		} else if (LicznikPomocniczyRomberg == 1) {
 8009ae8:	4b79      	ldr	r3, [pc, #484]	; (8009cd0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	f040 8093 	bne.w	8009c1a <HAL_TIM_PeriodElapsedCallback+0x632>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009af4:	4b77      	ldr	r3, [pc, #476]	; (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	461a      	mov	r2, r3
 8009afc:	4b76      	ldr	r3, [pc, #472]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	4413      	add	r3, r2
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7f6 fd15 	bl	8000534 <__aeabi_i2d>
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	4b73      	ldr	r3, [pc, #460]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009b10:	f7f6 fd76 	bl	8000600 <__aeabi_dmul>
 8009b14:	4603      	mov	r3, r0
 8009b16:	460c      	mov	r4, r1
 8009b18:	4618      	mov	r0, r3
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	4b6f      	ldr	r3, [pc, #444]	; (8009ce0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8009b22:	f7f6 fd6d 	bl	8000600 <__aeabi_dmul>
 8009b26:	4603      	mov	r3, r0
 8009b28:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f7f6 ff79 	bl	8000a24 <__aeabi_d2iz>
 8009b32:	4602      	mov	r2, r0
 8009b34:	4b6b      	ldr	r3, [pc, #428]	; (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8009b36:	68db      	ldr	r3, [r3, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	4a6a      	ldr	r2, [pc, #424]	; (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8009b3c:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009b3e:	4b65      	ldr	r3, [pc, #404]	; (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009b40:	885b      	ldrh	r3, [r3, #2]
 8009b42:	b21b      	sxth	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	4b64      	ldr	r3, [pc, #400]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009b48:	885b      	ldrh	r3, [r3, #2]
 8009b4a:	b21b      	sxth	r3, r3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7f6 fcf0 	bl	8000534 <__aeabi_i2d>
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	4b60      	ldr	r3, [pc, #384]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009b5a:	f7f6 fd51 	bl	8000600 <__aeabi_dmul>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	460c      	mov	r4, r1
 8009b62:	4618      	mov	r0, r3
 8009b64:	4621      	mov	r1, r4
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	4b5d      	ldr	r3, [pc, #372]	; (8009ce0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8009b6c:	f7f6 fd48 	bl	8000600 <__aeabi_dmul>
 8009b70:	4603      	mov	r3, r0
 8009b72:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009b74:	4618      	mov	r0, r3
 8009b76:	4621      	mov	r1, r4
 8009b78:	f7f6 ff54 	bl	8000a24 <__aeabi_d2iz>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	4b5a      	ldr	r3, [pc, #360]	; (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	4a58      	ldr	r2, [pc, #352]	; (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8009b86:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] = (long) (8
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 8009b88:	4b58      	ldr	r3, [pc, #352]	; (8009cec <HAL_TIM_PeriodElapsedCallback+0x704>)
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b21b      	sxth	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	4b51      	ldr	r3, [pc, #324]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	b21b      	sxth	r3, r3
 8009b96:	4413      	add	r3, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f6 fccb 	bl	8000534 <__aeabi_i2d>
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	4b4e      	ldr	r3, [pc, #312]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009ba4:	f7f6 fd2c 	bl	8000600 <__aeabi_dmul>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	460c      	mov	r4, r1
 8009bac:	4618      	mov	r0, r3
 8009bae:	4621      	mov	r1, r4
 8009bb0:	f04f 0200 	mov.w	r2, #0
 8009bb4:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8009bb6:	f7f6 fd23 	bl	8000600 <__aeabi_dmul>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] = (long) (8
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f7f6 ff2f 	bl	8000a24 <__aeabi_d2iz>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	4b46      	ldr	r3, [pc, #280]	; (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8009bca:	609a      	str	r2, [r3, #8]
			CalkaPosredniaRomY[2] = (long) (8
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 8009bcc:	4b47      	ldr	r3, [pc, #284]	; (8009cec <HAL_TIM_PeriodElapsedCallback+0x704>)
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	b21b      	sxth	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4b40      	ldr	r3, [pc, #256]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009bd6:	885b      	ldrh	r3, [r3, #2]
 8009bd8:	b21b      	sxth	r3, r3
 8009bda:	4413      	add	r3, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7f6 fca9 	bl	8000534 <__aeabi_i2d>
 8009be2:	f04f 0200 	mov.w	r2, #0
 8009be6:	4b3d      	ldr	r3, [pc, #244]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009be8:	f7f6 fd0a 	bl	8000600 <__aeabi_dmul>
 8009bec:	4603      	mov	r3, r0
 8009bee:	460c      	mov	r4, r1
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	4621      	mov	r1, r4
 8009bf4:	f04f 0200 	mov.w	r2, #0
 8009bf8:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8009bfa:	f7f6 fd01 	bl	8000600 <__aeabi_dmul>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] = (long) (8
 8009c02:	4618      	mov	r0, r3
 8009c04:	4621      	mov	r1, r4
 8009c06:	f7f6 ff0d 	bl	8000a24 <__aeabi_d2iz>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8009c0e:	609a      	str	r2, [r3, #8]

			LicznikPomocniczyRomberg = 2;
 8009c10:	4b2f      	ldr	r3, [pc, #188]	; (8009cd0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009c12:	2202      	movs	r2, #2
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	f000 bcd5 	b.w	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>

		} else if (LicznikPomocniczyRomberg == 2) {
 8009c1a:	4b2d      	ldr	r3, [pc, #180]	; (8009cd0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d167      	bne.n	8009cf4 <HAL_TIM_PeriodElapsedCallback+0x70c>
			DataTempRom[2] = DataOld;
 8009c24:	4b31      	ldr	r3, [pc, #196]	; (8009cec <HAL_TIM_PeriodElapsedCallback+0x704>)
 8009c26:	4a2b      	ldr	r2, [pc, #172]	; (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009c28:	330c      	adds	r3, #12
 8009c2a:	6811      	ldr	r1, [r2, #0]
 8009c2c:	6019      	str	r1, [r3, #0]
 8009c2e:	8892      	ldrh	r2, [r2, #4]
 8009c30:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009c32:	4b28      	ldr	r3, [pc, #160]	; (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009c34:	881b      	ldrh	r3, [r3, #0]
 8009c36:	b21b      	sxth	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	4b27      	ldr	r3, [pc, #156]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009c3c:	881b      	ldrh	r3, [r3, #0]
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	4413      	add	r3, r2
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f6 fc76 	bl	8000534 <__aeabi_i2d>
 8009c48:	f04f 0200 	mov.w	r2, #0
 8009c4c:	4b23      	ldr	r3, [pc, #140]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009c4e:	f7f6 fcd7 	bl	8000600 <__aeabi_dmul>
 8009c52:	4603      	mov	r3, r0
 8009c54:	460c      	mov	r4, r1
 8009c56:	4618      	mov	r0, r3
 8009c58:	4621      	mov	r1, r4
 8009c5a:	f04f 0200 	mov.w	r2, #0
 8009c5e:	4b20      	ldr	r3, [pc, #128]	; (8009ce0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8009c60:	f7f6 fcce 	bl	8000600 <__aeabi_dmul>
 8009c64:	4603      	mov	r3, r0
 8009c66:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	f7f6 feda 	bl	8000a24 <__aeabi_d2iz>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b1c      	ldr	r3, [pc, #112]	; (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	4413      	add	r3, r2
 8009c78:	4a1a      	ldr	r2, [pc, #104]	; (8009ce4 <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8009c7a:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009c7c:	4b15      	ldr	r3, [pc, #84]	; (8009cd4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8009c7e:	885b      	ldrh	r3, [r3, #2]
 8009c80:	b21b      	sxth	r3, r3
 8009c82:	461a      	mov	r2, r3
 8009c84:	4b14      	ldr	r3, [pc, #80]	; (8009cd8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8009c86:	885b      	ldrh	r3, [r3, #2]
 8009c88:	b21b      	sxth	r3, r3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f6 fc51 	bl	8000534 <__aeabi_i2d>
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8009c98:	f7f6 fcb2 	bl	8000600 <__aeabi_dmul>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	4b0d      	ldr	r3, [pc, #52]	; (8009ce0 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8009caa:	f7f6 fca9 	bl	8000600 <__aeabi_dmul>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f7f6 feb5 	bl	8000a24 <__aeabi_d2iz>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	4b0a      	ldr	r3, [pc, #40]	; (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	4a09      	ldr	r2, [pc, #36]	; (8009ce8 <HAL_TIM_PeriodElapsedCallback+0x700>)
 8009cc4:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 3;
 8009cc6:	4b02      	ldr	r3, [pc, #8]	; (8009cd0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8009cc8:	2203      	movs	r2, #3
 8009cca:	701a      	strb	r2, [r3, #0]
 8009ccc:	f000 bc7a 	b.w	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
 8009cd0:	20000588 	.word	0x20000588
 8009cd4:	200004ec 	.word	0x200004ec
 8009cd8:	200005d0 	.word	0x200005d0
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	40100000 	.word	0x40100000
 8009ce4:	200005ec 	.word	0x200005ec
 8009ce8:	200005b4 	.word	0x200005b4
 8009cec:	200004fc 	.word	0x200004fc
 8009cf0:	40200000 	.word	0x40200000

		} else if (LicznikPomocniczyRomberg == 3) {
 8009cf4:	4b9d      	ldr	r3, [pc, #628]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	f040 80dc 	bne.w	8009eb8 <HAL_TIM_PeriodElapsedCallback+0x8d0>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009d00:	4b9b      	ldr	r3, [pc, #620]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	b21b      	sxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	4b9a      	ldr	r3, [pc, #616]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	b21b      	sxth	r3, r3
 8009d0e:	4413      	add	r3, r2
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7f6 fc0f 	bl	8000534 <__aeabi_i2d>
 8009d16:	f04f 0200 	mov.w	r2, #0
 8009d1a:	4b97      	ldr	r3, [pc, #604]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009d1c:	f7f6 fc70 	bl	8000600 <__aeabi_dmul>
 8009d20:	4603      	mov	r3, r0
 8009d22:	460c      	mov	r4, r1
 8009d24:	4618      	mov	r0, r3
 8009d26:	4621      	mov	r1, r4
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	4b93      	ldr	r3, [pc, #588]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8009d2e:	f7f6 fc67 	bl	8000600 <__aeabi_dmul>
 8009d32:	4603      	mov	r3, r0
 8009d34:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009d36:	4618      	mov	r0, r3
 8009d38:	4621      	mov	r1, r4
 8009d3a:	f7f6 fe73 	bl	8000a24 <__aeabi_d2iz>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	4b8f      	ldr	r3, [pc, #572]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	4a8e      	ldr	r2, [pc, #568]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009d48:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009d4a:	4b89      	ldr	r3, [pc, #548]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8009d4c:	885b      	ldrh	r3, [r3, #2]
 8009d4e:	b21b      	sxth	r3, r3
 8009d50:	461a      	mov	r2, r3
 8009d52:	4b88      	ldr	r3, [pc, #544]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009d54:	885b      	ldrh	r3, [r3, #2]
 8009d56:	b21b      	sxth	r3, r3
 8009d58:	4413      	add	r3, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7f6 fbea 	bl	8000534 <__aeabi_i2d>
 8009d60:	f04f 0200 	mov.w	r2, #0
 8009d64:	4b84      	ldr	r3, [pc, #528]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009d66:	f7f6 fc4b 	bl	8000600 <__aeabi_dmul>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	4618      	mov	r0, r3
 8009d70:	4621      	mov	r1, r4
 8009d72:	f04f 0200 	mov.w	r2, #0
 8009d76:	4b81      	ldr	r3, [pc, #516]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8009d78:	f7f6 fc42 	bl	8000600 <__aeabi_dmul>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009d80:	4618      	mov	r0, r3
 8009d82:	4621      	mov	r1, r4
 8009d84:	f7f6 fe4e 	bl	8000a24 <__aeabi_d2iz>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	4b7e      	ldr	r3, [pc, #504]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	4a7c      	ldr	r2, [pc, #496]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009d92:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[2].OsX + DataNow.OsX) * 0.5));
 8009d94:	4b7c      	ldr	r3, [pc, #496]	; (8009f88 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009d96:	899b      	ldrh	r3, [r3, #12]
 8009d98:	b21b      	sxth	r3, r3
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4b75      	ldr	r3, [pc, #468]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b21b      	sxth	r3, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f6 fbc5 	bl	8000534 <__aeabi_i2d>
 8009daa:	f04f 0200 	mov.w	r2, #0
 8009dae:	4b72      	ldr	r3, [pc, #456]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009db0:	f7f6 fc26 	bl	8000600 <__aeabi_dmul>
 8009db4:	4603      	mov	r3, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	4618      	mov	r0, r3
 8009dba:	4621      	mov	r1, r4
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	4b72      	ldr	r3, [pc, #456]	; (8009f8c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009dc2:	f7f6 fc1d 	bl	8000600 <__aeabi_dmul>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 8009dca:	4618      	mov	r0, r3
 8009dcc:	4621      	mov	r1, r4
 8009dce:	f7f6 fe29 	bl	8000a24 <__aeabi_d2iz>
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4b6a      	ldr	r3, [pc, #424]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	4413      	add	r3, r2
 8009dda:	4a69      	ldr	r2, [pc, #420]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009ddc:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[2].OsY + DataNow.OsY) * 0.5));
 8009dde:	4b6a      	ldr	r3, [pc, #424]	; (8009f88 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009de0:	89db      	ldrh	r3, [r3, #14]
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	4b63      	ldr	r3, [pc, #396]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009de8:	885b      	ldrh	r3, [r3, #2]
 8009dea:	b21b      	sxth	r3, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7f6 fba0 	bl	8000534 <__aeabi_i2d>
 8009df4:	f04f 0200 	mov.w	r2, #0
 8009df8:	4b5f      	ldr	r3, [pc, #380]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009dfa:	f7f6 fc01 	bl	8000600 <__aeabi_dmul>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	460c      	mov	r4, r1
 8009e02:	4618      	mov	r0, r3
 8009e04:	4621      	mov	r1, r4
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	4b60      	ldr	r3, [pc, #384]	; (8009f8c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8009e0c:	f7f6 fbf8 	bl	8000600 <__aeabi_dmul>
 8009e10:	4603      	mov	r3, r0
 8009e12:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 8009e14:	4618      	mov	r0, r3
 8009e16:	4621      	mov	r1, r4
 8009e18:	f7f6 fe04 	bl	8000a24 <__aeabi_d2iz>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b59      	ldr	r3, [pc, #356]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	4413      	add	r3, r2
 8009e24:	4a57      	ldr	r2, [pc, #348]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009e26:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] = (long) (16
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 8009e28:	4b57      	ldr	r3, [pc, #348]	; (8009f88 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	461a      	mov	r2, r3
 8009e30:	4b50      	ldr	r3, [pc, #320]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009e32:	881b      	ldrh	r3, [r3, #0]
 8009e34:	b21b      	sxth	r3, r3
 8009e36:	4413      	add	r3, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7f6 fb7b 	bl	8000534 <__aeabi_i2d>
 8009e3e:	f04f 0200 	mov.w	r2, #0
 8009e42:	4b4d      	ldr	r3, [pc, #308]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009e44:	f7f6 fbdc 	bl	8000600 <__aeabi_dmul>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	460c      	mov	r4, r1
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	4621      	mov	r1, r4
 8009e50:	f04f 0200 	mov.w	r2, #0
 8009e54:	4b4e      	ldr	r3, [pc, #312]	; (8009f90 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009e56:	f7f6 fbd3 	bl	8000600 <__aeabi_dmul>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] = (long) (16
 8009e5e:	4618      	mov	r0, r3
 8009e60:	4621      	mov	r1, r4
 8009e62:	f7f6 fddf 	bl	8000a24 <__aeabi_d2iz>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b45      	ldr	r3, [pc, #276]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009e6a:	605a      	str	r2, [r3, #4]
			CalkaPosredniaRomY[1] = (long) (16
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 8009e6c:	4b46      	ldr	r3, [pc, #280]	; (8009f88 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009e6e:	885b      	ldrh	r3, [r3, #2]
 8009e70:	b21b      	sxth	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	4b3f      	ldr	r3, [pc, #252]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009e76:	885b      	ldrh	r3, [r3, #2]
 8009e78:	b21b      	sxth	r3, r3
 8009e7a:	4413      	add	r3, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f7f6 fb59 	bl	8000534 <__aeabi_i2d>
 8009e82:	f04f 0200 	mov.w	r2, #0
 8009e86:	4b3c      	ldr	r3, [pc, #240]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009e88:	f7f6 fbba 	bl	8000600 <__aeabi_dmul>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	460c      	mov	r4, r1
 8009e90:	4618      	mov	r0, r3
 8009e92:	4621      	mov	r1, r4
 8009e94:	f04f 0200 	mov.w	r2, #0
 8009e98:	4b3d      	ldr	r3, [pc, #244]	; (8009f90 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8009e9a:	f7f6 fbb1 	bl	8000600 <__aeabi_dmul>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] = (long) (16
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	f7f6 fdbd 	bl	8000a24 <__aeabi_d2iz>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	4b35      	ldr	r3, [pc, #212]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009eae:	605a      	str	r2, [r3, #4]

			LicznikPomocniczyRomberg = 4;
 8009eb0:	4b2e      	ldr	r3, [pc, #184]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	701a      	strb	r2, [r3, #0]
 8009eb6:	e385      	b.n	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>

		} else if (LicznikPomocniczyRomberg == 4) {
 8009eb8:	4b2c      	ldr	r3, [pc, #176]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d168      	bne.n	8009f94 <HAL_TIM_PeriodElapsedCallback+0x9ac>
			DataTempRom[1] = DataOld;
 8009ec2:	4b31      	ldr	r3, [pc, #196]	; (8009f88 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8009ec4:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8009ec6:	3306      	adds	r3, #6
 8009ec8:	6811      	ldr	r1, [r2, #0]
 8009eca:	6019      	str	r1, [r3, #0]
 8009ecc:	8892      	ldrh	r2, [r2, #4]
 8009ece:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009ed0:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8009ed2:	881b      	ldrh	r3, [r3, #0]
 8009ed4:	b21b      	sxth	r3, r3
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	4b26      	ldr	r3, [pc, #152]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009eda:	881b      	ldrh	r3, [r3, #0]
 8009edc:	b21b      	sxth	r3, r3
 8009ede:	4413      	add	r3, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7f6 fb27 	bl	8000534 <__aeabi_i2d>
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	4b23      	ldr	r3, [pc, #140]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009eec:	f7f6 fb88 	bl	8000600 <__aeabi_dmul>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8009efe:	f7f6 fb7f 	bl	8000600 <__aeabi_dmul>
 8009f02:	4603      	mov	r3, r0
 8009f04:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009f06:	4618      	mov	r0, r3
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f7f6 fd8b 	bl	8000a24 <__aeabi_d2iz>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	4b1b      	ldr	r3, [pc, #108]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	4413      	add	r3, r2
 8009f16:	4a1a      	ldr	r2, [pc, #104]	; (8009f80 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8009f18:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009f1a:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8009f1c:	885b      	ldrh	r3, [r3, #2]
 8009f1e:	b21b      	sxth	r3, r3
 8009f20:	461a      	mov	r2, r3
 8009f22:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8009f24:	885b      	ldrh	r3, [r3, #2]
 8009f26:	b21b      	sxth	r3, r3
 8009f28:	4413      	add	r3, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7f6 fb02 	bl	8000534 <__aeabi_i2d>
 8009f30:	f04f 0200 	mov.w	r2, #0
 8009f34:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8009f36:	f7f6 fb63 	bl	8000600 <__aeabi_dmul>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	4618      	mov	r0, r3
 8009f40:	4621      	mov	r1, r4
 8009f42:	f04f 0200 	mov.w	r2, #0
 8009f46:	4b0d      	ldr	r3, [pc, #52]	; (8009f7c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8009f48:	f7f6 fb5a 	bl	8000600 <__aeabi_dmul>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 8009f50:	4618      	mov	r0, r3
 8009f52:	4621      	mov	r1, r4
 8009f54:	f7f6 fd66 	bl	8000a24 <__aeabi_d2iz>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	4a08      	ldr	r2, [pc, #32]	; (8009f84 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8009f62:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 5;
 8009f64:	4b01      	ldr	r3, [pc, #4]	; (8009f6c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8009f66:	2205      	movs	r2, #5
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	e32b      	b.n	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
 8009f6c:	20000588 	.word	0x20000588
 8009f70:	200004ec 	.word	0x200004ec
 8009f74:	200005d0 	.word	0x200005d0
 8009f78:	3fe00000 	.word	0x3fe00000
 8009f7c:	40100000 	.word	0x40100000
 8009f80:	200005ec 	.word	0x200005ec
 8009f84:	200005b4 	.word	0x200005b4
 8009f88:	200004fc 	.word	0x200004fc
 8009f8c:	40200000 	.word	0x40200000
 8009f90:	40300000 	.word	0x40300000

		} else if (LicznikPomocniczyRomberg == 5) {
 8009f94:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	f040 8098 	bne.w	800a0d0 <HAL_TIM_PeriodElapsedCallback+0xae8>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 8009fa0:	4b79      	ldr	r3, [pc, #484]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8009fa2:	881b      	ldrh	r3, [r3, #0]
 8009fa4:	b21b      	sxth	r3, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4b78      	ldr	r3, [pc, #480]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	b21b      	sxth	r3, r3
 8009fae:	4413      	add	r3, r2
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f7f6 fabf 	bl	8000534 <__aeabi_i2d>
 8009fb6:	f04f 0200 	mov.w	r2, #0
 8009fba:	4b75      	ldr	r3, [pc, #468]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 8009fbc:	f7f6 fb20 	bl	8000600 <__aeabi_dmul>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	4b71      	ldr	r3, [pc, #452]	; (800a194 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 8009fce:	f7f6 fb17 	bl	8000600 <__aeabi_dmul>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	4621      	mov	r1, r4
 8009fda:	f7f6 fd23 	bl	8000a24 <__aeabi_d2iz>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	4b6d      	ldr	r3, [pc, #436]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4a6c      	ldr	r2, [pc, #432]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8009fe8:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 8009fea:	4b67      	ldr	r3, [pc, #412]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8009fec:	885b      	ldrh	r3, [r3, #2]
 8009fee:	b21b      	sxth	r3, r3
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4b66      	ldr	r3, [pc, #408]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8009ff4:	885b      	ldrh	r3, [r3, #2]
 8009ff6:	b21b      	sxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f6 fa9a 	bl	8000534 <__aeabi_i2d>
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	4b62      	ldr	r3, [pc, #392]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800a006:	f7f6 fafb 	bl	8000600 <__aeabi_dmul>
 800a00a:	4603      	mov	r3, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	4618      	mov	r0, r3
 800a010:	4621      	mov	r1, r4
 800a012:	f04f 0200 	mov.w	r2, #0
 800a016:	4b5f      	ldr	r3, [pc, #380]	; (800a194 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 800a018:	f7f6 faf2 	bl	8000600 <__aeabi_dmul>
 800a01c:	4603      	mov	r3, r0
 800a01e:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 800a020:	4618      	mov	r0, r3
 800a022:	4621      	mov	r1, r4
 800a024:	f7f6 fcfe 	bl	8000a24 <__aeabi_d2iz>
 800a028:	4602      	mov	r2, r0
 800a02a:	4b5c      	ldr	r3, [pc, #368]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	4413      	add	r3, r2
 800a030:	4a5a      	ldr	r2, [pc, #360]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a032:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 800a034:	4b5a      	ldr	r3, [pc, #360]	; (800a1a0 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800a036:	88db      	ldrh	r3, [r3, #6]
 800a038:	b21b      	sxth	r3, r3
 800a03a:	461a      	mov	r2, r3
 800a03c:	4b53      	ldr	r3, [pc, #332]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b21b      	sxth	r3, r3
 800a042:	4413      	add	r3, r2
 800a044:	4618      	mov	r0, r3
 800a046:	f7f6 fa75 	bl	8000534 <__aeabi_i2d>
 800a04a:	f04f 0200 	mov.w	r2, #0
 800a04e:	4b50      	ldr	r3, [pc, #320]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800a050:	f7f6 fad6 	bl	8000600 <__aeabi_dmul>
 800a054:	4603      	mov	r3, r0
 800a056:	460c      	mov	r4, r1
 800a058:	4618      	mov	r0, r3
 800a05a:	4621      	mov	r1, r4
 800a05c:	f04f 0200 	mov.w	r2, #0
 800a060:	4b50      	ldr	r3, [pc, #320]	; (800a1a4 <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 800a062:	f7f6 facd 	bl	8000600 <__aeabi_dmul>
 800a066:	4603      	mov	r3, r0
 800a068:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 800a06a:	4618      	mov	r0, r3
 800a06c:	4621      	mov	r1, r4
 800a06e:	f7f6 fcd9 	bl	8000a24 <__aeabi_d2iz>
 800a072:	4602      	mov	r2, r0
 800a074:	4b48      	ldr	r3, [pc, #288]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	4413      	add	r3, r2
 800a07a:	4a47      	ldr	r2, [pc, #284]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 800a07c:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 800a07e:	4b48      	ldr	r3, [pc, #288]	; (800a1a0 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800a080:	891b      	ldrh	r3, [r3, #8]
 800a082:	b21b      	sxth	r3, r3
 800a084:	461a      	mov	r2, r3
 800a086:	4b41      	ldr	r3, [pc, #260]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 800a088:	885b      	ldrh	r3, [r3, #2]
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	4413      	add	r3, r2
 800a08e:	4618      	mov	r0, r3
 800a090:	f7f6 fa50 	bl	8000534 <__aeabi_i2d>
 800a094:	f04f 0200 	mov.w	r2, #0
 800a098:	4b3d      	ldr	r3, [pc, #244]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800a09a:	f7f6 fab1 	bl	8000600 <__aeabi_dmul>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	f04f 0200 	mov.w	r2, #0
 800a0aa:	4b3e      	ldr	r3, [pc, #248]	; (800a1a4 <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 800a0ac:	f7f6 faa8 	bl	8000600 <__aeabi_dmul>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	f7f6 fcb4 	bl	8000a24 <__aeabi_d2iz>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	4b37      	ldr	r3, [pc, #220]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	4a35      	ldr	r2, [pc, #212]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a0c6:	6093      	str	r3, [r2, #8]

			LicznikPomocniczyRomberg = 6;
 800a0c8:	4b2e      	ldr	r3, [pc, #184]	; (800a184 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800a0ca:	2206      	movs	r2, #6
 800a0cc:	701a      	strb	r2, [r3, #0]
 800a0ce:	e279      	b.n	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>

		} else if (LicznikPomocniczyRomberg == 6) {
 800a0d0:	4b2c      	ldr	r3, [pc, #176]	; (800a184 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b06      	cmp	r3, #6
 800a0d8:	d166      	bne.n	800a1a8 <HAL_TIM_PeriodElapsedCallback+0xbc0>
			DataTempRom[3] = DataOld;
 800a0da:	4b31      	ldr	r3, [pc, #196]	; (800a1a0 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800a0dc:	4a2a      	ldr	r2, [pc, #168]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 800a0de:	3312      	adds	r3, #18
 800a0e0:	6811      	ldr	r1, [r2, #0]
 800a0e2:	6019      	str	r1, [r3, #0]
 800a0e4:	8892      	ldrh	r2, [r2, #4]
 800a0e6:	809a      	strh	r2, [r3, #4]

			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 800a0e8:	4b27      	ldr	r3, [pc, #156]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	b21b      	sxth	r3, r3
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4b26      	ldr	r3, [pc, #152]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	b21b      	sxth	r3, r3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7f6 fa1b 	bl	8000534 <__aeabi_i2d>
 800a0fe:	f04f 0200 	mov.w	r2, #0
 800a102:	4b23      	ldr	r3, [pc, #140]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800a104:	f7f6 fa7c 	bl	8000600 <__aeabi_dmul>
 800a108:	4603      	mov	r3, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	4618      	mov	r0, r3
 800a10e:	4621      	mov	r1, r4
 800a110:	f04f 0200 	mov.w	r2, #0
 800a114:	4b1f      	ldr	r3, [pc, #124]	; (800a194 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 800a116:	f7f6 fa73 	bl	8000600 <__aeabi_dmul>
 800a11a:	4603      	mov	r3, r0
 800a11c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 800a11e:	4618      	mov	r0, r3
 800a120:	4621      	mov	r1, r4
 800a122:	f7f6 fc7f 	bl	8000a24 <__aeabi_d2iz>
 800a126:	4602      	mov	r2, r0
 800a128:	4b1b      	ldr	r3, [pc, #108]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	4a1a      	ldr	r2, [pc, #104]	; (800a198 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 800a130:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 800a132:	4b15      	ldr	r3, [pc, #84]	; (800a188 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	b21b      	sxth	r3, r3
 800a138:	461a      	mov	r2, r3
 800a13a:	4b14      	ldr	r3, [pc, #80]	; (800a18c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 800a13c:	885b      	ldrh	r3, [r3, #2]
 800a13e:	b21b      	sxth	r3, r3
 800a140:	4413      	add	r3, r2
 800a142:	4618      	mov	r0, r3
 800a144:	f7f6 f9f6 	bl	8000534 <__aeabi_i2d>
 800a148:	f04f 0200 	mov.w	r2, #0
 800a14c:	4b10      	ldr	r3, [pc, #64]	; (800a190 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800a14e:	f7f6 fa57 	bl	8000600 <__aeabi_dmul>
 800a152:	4603      	mov	r3, r0
 800a154:	460c      	mov	r4, r1
 800a156:	4618      	mov	r0, r3
 800a158:	4621      	mov	r1, r4
 800a15a:	f04f 0200 	mov.w	r2, #0
 800a15e:	4b0d      	ldr	r3, [pc, #52]	; (800a194 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 800a160:	f7f6 fa4e 	bl	8000600 <__aeabi_dmul>
 800a164:	4603      	mov	r3, r0
 800a166:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 800a168:	4618      	mov	r0, r3
 800a16a:	4621      	mov	r1, r4
 800a16c:	f7f6 fc5a 	bl	8000a24 <__aeabi_d2iz>
 800a170:	4602      	mov	r2, r0
 800a172:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	4413      	add	r3, r2
 800a178:	4a08      	ldr	r2, [pc, #32]	; (800a19c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800a17a:	60d3      	str	r3, [r2, #12]

			LicznikPomocniczyRomberg = 7;
 800a17c:	4b01      	ldr	r3, [pc, #4]	; (800a184 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800a17e:	2207      	movs	r2, #7
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	e21f      	b.n	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
 800a184:	20000588 	.word	0x20000588
 800a188:	200004ec 	.word	0x200004ec
 800a18c:	200005d0 	.word	0x200005d0
 800a190:	3fe00000 	.word	0x3fe00000
 800a194:	40100000 	.word	0x40100000
 800a198:	200005ec 	.word	0x200005ec
 800a19c:	200005b4 	.word	0x200005b4
 800a1a0:	200004fc 	.word	0x200004fc
 800a1a4:	40200000 	.word	0x40200000

		} else if (LicznikPomocniczyRomberg == 7) {
 800a1a8:	4bb8      	ldr	r3, [pc, #736]	; (800a48c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	2b07      	cmp	r3, #7
 800a1b0:	f040 8208 	bne.w	800a5c4 <HAL_TIM_PeriodElapsedCallback+0xfdc>
			CalkaPosredniaRomX[3] += (long) (4
					* ((DataOld.OsX + DataNow.OsX) * 0.5));
 800a1b4:	4bb6      	ldr	r3, [pc, #728]	; (800a490 <HAL_TIM_PeriodElapsedCallback+0xea8>)
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b21b      	sxth	r3, r3
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	4bb5      	ldr	r3, [pc, #724]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	b21b      	sxth	r3, r3
 800a1c2:	4413      	add	r3, r2
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7f6 f9b5 	bl	8000534 <__aeabi_i2d>
 800a1ca:	f04f 0200 	mov.w	r2, #0
 800a1ce:	4bb2      	ldr	r3, [pc, #712]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a1d0:	f7f6 fa16 	bl	8000600 <__aeabi_dmul>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	460c      	mov	r4, r1
 800a1d8:	4618      	mov	r0, r3
 800a1da:	4621      	mov	r1, r4
 800a1dc:	f04f 0200 	mov.w	r2, #0
 800a1e0:	4bae      	ldr	r3, [pc, #696]	; (800a49c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 800a1e2:	f7f6 fa0d 	bl	8000600 <__aeabi_dmul>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	460c      	mov	r4, r1
			CalkaPosredniaRomX[3] += (long) (4
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7f6 fc19 	bl	8000a24 <__aeabi_d2iz>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4baa      	ldr	r3, [pc, #680]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	4aa9      	ldr	r2, [pc, #676]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a1fc:	60d3      	str	r3, [r2, #12]
			CalkaPosredniaRomY[3] += (long) (4
					* ((DataOld.OsY + DataNow.OsY) * 0.5));
 800a1fe:	4ba4      	ldr	r3, [pc, #656]	; (800a490 <HAL_TIM_PeriodElapsedCallback+0xea8>)
 800a200:	885b      	ldrh	r3, [r3, #2]
 800a202:	b21b      	sxth	r3, r3
 800a204:	461a      	mov	r2, r3
 800a206:	4ba3      	ldr	r3, [pc, #652]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a208:	885b      	ldrh	r3, [r3, #2]
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	4413      	add	r3, r2
 800a20e:	4618      	mov	r0, r3
 800a210:	f7f6 f990 	bl	8000534 <__aeabi_i2d>
 800a214:	f04f 0200 	mov.w	r2, #0
 800a218:	4b9f      	ldr	r3, [pc, #636]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a21a:	f7f6 f9f1 	bl	8000600 <__aeabi_dmul>
 800a21e:	4603      	mov	r3, r0
 800a220:	460c      	mov	r4, r1
 800a222:	4618      	mov	r0, r3
 800a224:	4621      	mov	r1, r4
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	4b9c      	ldr	r3, [pc, #624]	; (800a49c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 800a22c:	f7f6 f9e8 	bl	8000600 <__aeabi_dmul>
 800a230:	4603      	mov	r3, r0
 800a232:	460c      	mov	r4, r1
			CalkaPosredniaRomY[3] += (long) (4
 800a234:	4618      	mov	r0, r3
 800a236:	4621      	mov	r1, r4
 800a238:	f7f6 fbf4 	bl	8000a24 <__aeabi_d2iz>
 800a23c:	4602      	mov	r2, r0
 800a23e:	4b99      	ldr	r3, [pc, #612]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	4413      	add	r3, r2
 800a244:	4a97      	ldr	r2, [pc, #604]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a246:	60d3      	str	r3, [r2, #12]

			CalkaPosredniaRomX[2] += (long) (8
					* ((DataTempRom[3].OsX + DataNow.OsX) * 0.5));
 800a248:	4b97      	ldr	r3, [pc, #604]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a24a:	8a5b      	ldrh	r3, [r3, #18]
 800a24c:	b21b      	sxth	r3, r3
 800a24e:	461a      	mov	r2, r3
 800a250:	4b90      	ldr	r3, [pc, #576]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b21b      	sxth	r3, r3
 800a256:	4413      	add	r3, r2
 800a258:	4618      	mov	r0, r3
 800a25a:	f7f6 f96b 	bl	8000534 <__aeabi_i2d>
 800a25e:	f04f 0200 	mov.w	r2, #0
 800a262:	4b8d      	ldr	r3, [pc, #564]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a264:	f7f6 f9cc 	bl	8000600 <__aeabi_dmul>
 800a268:	4603      	mov	r3, r0
 800a26a:	460c      	mov	r4, r1
 800a26c:	4618      	mov	r0, r3
 800a26e:	4621      	mov	r1, r4
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	4b8d      	ldr	r3, [pc, #564]	; (800a4ac <HAL_TIM_PeriodElapsedCallback+0xec4>)
 800a276:	f7f6 f9c3 	bl	8000600 <__aeabi_dmul>
 800a27a:	4603      	mov	r3, r0
 800a27c:	460c      	mov	r4, r1
			CalkaPosredniaRomX[2] += (long) (8
 800a27e:	4618      	mov	r0, r3
 800a280:	4621      	mov	r1, r4
 800a282:	f7f6 fbcf 	bl	8000a24 <__aeabi_d2iz>
 800a286:	4602      	mov	r2, r0
 800a288:	4b85      	ldr	r3, [pc, #532]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	4413      	add	r3, r2
 800a28e:	4a84      	ldr	r2, [pc, #528]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a290:	6093      	str	r3, [r2, #8]
			CalkaPosredniaRomY[2] += (long) (8
					* ((DataTempRom[3].OsY + DataNow.OsY) * 0.5));
 800a292:	4b85      	ldr	r3, [pc, #532]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a294:	8a9b      	ldrh	r3, [r3, #20]
 800a296:	b21b      	sxth	r3, r3
 800a298:	461a      	mov	r2, r3
 800a29a:	4b7e      	ldr	r3, [pc, #504]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a29c:	885b      	ldrh	r3, [r3, #2]
 800a29e:	b21b      	sxth	r3, r3
 800a2a0:	4413      	add	r3, r2
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7f6 f946 	bl	8000534 <__aeabi_i2d>
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	4b7a      	ldr	r3, [pc, #488]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a2ae:	f7f6 f9a7 	bl	8000600 <__aeabi_dmul>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	f04f 0200 	mov.w	r2, #0
 800a2be:	4b7b      	ldr	r3, [pc, #492]	; (800a4ac <HAL_TIM_PeriodElapsedCallback+0xec4>)
 800a2c0:	f7f6 f99e 	bl	8000600 <__aeabi_dmul>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	460c      	mov	r4, r1
			CalkaPosredniaRomY[2] += (long) (8
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f7f6 fbaa 	bl	8000a24 <__aeabi_d2iz>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	4b74      	ldr	r3, [pc, #464]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	4a72      	ldr	r2, [pc, #456]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a2da:	6093      	str	r3, [r2, #8]

			CalkaPosredniaRomX[1] += (long) (16
					* ((DataTempRom[1].OsX + DataNow.OsX) * 0.5));
 800a2dc:	4b72      	ldr	r3, [pc, #456]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a2de:	88db      	ldrh	r3, [r3, #6]
 800a2e0:	b21b      	sxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4b6b      	ldr	r3, [pc, #428]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a2e6:	881b      	ldrh	r3, [r3, #0]
 800a2e8:	b21b      	sxth	r3, r3
 800a2ea:	4413      	add	r3, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f6 f921 	bl	8000534 <__aeabi_i2d>
 800a2f2:	f04f 0200 	mov.w	r2, #0
 800a2f6:	4b68      	ldr	r3, [pc, #416]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a2f8:	f7f6 f982 	bl	8000600 <__aeabi_dmul>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	4618      	mov	r0, r3
 800a302:	4621      	mov	r1, r4
 800a304:	f04f 0200 	mov.w	r2, #0
 800a308:	4b69      	ldr	r3, [pc, #420]	; (800a4b0 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 800a30a:	f7f6 f979 	bl	8000600 <__aeabi_dmul>
 800a30e:	4603      	mov	r3, r0
 800a310:	460c      	mov	r4, r1
			CalkaPosredniaRomX[1] += (long) (16
 800a312:	4618      	mov	r0, r3
 800a314:	4621      	mov	r1, r4
 800a316:	f7f6 fb85 	bl	8000a24 <__aeabi_d2iz>
 800a31a:	4602      	mov	r2, r0
 800a31c:	4b60      	ldr	r3, [pc, #384]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	4413      	add	r3, r2
 800a322:	4a5f      	ldr	r2, [pc, #380]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a324:	6053      	str	r3, [r2, #4]
			CalkaPosredniaRomY[1] += (long) (16
					* ((DataTempRom[1].OsY + DataNow.OsY) * 0.5));
 800a326:	4b60      	ldr	r3, [pc, #384]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a328:	891b      	ldrh	r3, [r3, #8]
 800a32a:	b21b      	sxth	r3, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	4b59      	ldr	r3, [pc, #356]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a330:	885b      	ldrh	r3, [r3, #2]
 800a332:	b21b      	sxth	r3, r3
 800a334:	4413      	add	r3, r2
 800a336:	4618      	mov	r0, r3
 800a338:	f7f6 f8fc 	bl	8000534 <__aeabi_i2d>
 800a33c:	f04f 0200 	mov.w	r2, #0
 800a340:	4b55      	ldr	r3, [pc, #340]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a342:	f7f6 f95d 	bl	8000600 <__aeabi_dmul>
 800a346:	4603      	mov	r3, r0
 800a348:	460c      	mov	r4, r1
 800a34a:	4618      	mov	r0, r3
 800a34c:	4621      	mov	r1, r4
 800a34e:	f04f 0200 	mov.w	r2, #0
 800a352:	4b57      	ldr	r3, [pc, #348]	; (800a4b0 <HAL_TIM_PeriodElapsedCallback+0xec8>)
 800a354:	f7f6 f954 	bl	8000600 <__aeabi_dmul>
 800a358:	4603      	mov	r3, r0
 800a35a:	460c      	mov	r4, r1
			CalkaPosredniaRomY[1] += (long) (16
 800a35c:	4618      	mov	r0, r3
 800a35e:	4621      	mov	r1, r4
 800a360:	f7f6 fb60 	bl	8000a24 <__aeabi_d2iz>
 800a364:	4602      	mov	r2, r0
 800a366:	4b4f      	ldr	r3, [pc, #316]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a368:	685b      	ldr	r3, [r3, #4]
 800a36a:	4413      	add	r3, r2
 800a36c:	4a4d      	ldr	r2, [pc, #308]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a36e:	6053      	str	r3, [r2, #4]

			CalkaPosredniaRomX[0] = (long) (32
					* ((DataTempRom[0].OsX + DataNow.OsX) * 0.5));
 800a370:	4b4d      	ldr	r3, [pc, #308]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b21b      	sxth	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	4b46      	ldr	r3, [pc, #280]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	b21b      	sxth	r3, r3
 800a37e:	4413      	add	r3, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7f6 f8d7 	bl	8000534 <__aeabi_i2d>
 800a386:	f04f 0200 	mov.w	r2, #0
 800a38a:	4b43      	ldr	r3, [pc, #268]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a38c:	f7f6 f938 	bl	8000600 <__aeabi_dmul>
 800a390:	4603      	mov	r3, r0
 800a392:	460c      	mov	r4, r1
 800a394:	4618      	mov	r0, r3
 800a396:	4621      	mov	r1, r4
 800a398:	f04f 0200 	mov.w	r2, #0
 800a39c:	4b45      	ldr	r3, [pc, #276]	; (800a4b4 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 800a39e:	f7f6 f92f 	bl	8000600 <__aeabi_dmul>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	460c      	mov	r4, r1
			CalkaPosredniaRomX[0] = (long) (32
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	f7f6 fb3b 	bl	8000a24 <__aeabi_d2iz>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	4b3b      	ldr	r3, [pc, #236]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a3b2:	601a      	str	r2, [r3, #0]
			CalkaPosredniaRomY[0] = (long) (32
					* ((DataTempRom[0].OsY + DataNow.OsY) * 0.5));
 800a3b4:	4b3c      	ldr	r3, [pc, #240]	; (800a4a8 <HAL_TIM_PeriodElapsedCallback+0xec0>)
 800a3b6:	885b      	ldrh	r3, [r3, #2]
 800a3b8:	b21b      	sxth	r3, r3
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	4b35      	ldr	r3, [pc, #212]	; (800a494 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 800a3be:	885b      	ldrh	r3, [r3, #2]
 800a3c0:	b21b      	sxth	r3, r3
 800a3c2:	4413      	add	r3, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f6 f8b5 	bl	8000534 <__aeabi_i2d>
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	4b32      	ldr	r3, [pc, #200]	; (800a498 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 800a3d0:	f7f6 f916 	bl	8000600 <__aeabi_dmul>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	460c      	mov	r4, r1
 800a3d8:	4618      	mov	r0, r3
 800a3da:	4621      	mov	r1, r4
 800a3dc:	f04f 0200 	mov.w	r2, #0
 800a3e0:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <HAL_TIM_PeriodElapsedCallback+0xecc>)
 800a3e2:	f7f6 f90d 	bl	8000600 <__aeabi_dmul>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	460c      	mov	r4, r1
			CalkaPosredniaRomY[0] = (long) (32
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	4621      	mov	r1, r4
 800a3ee:	f7f6 fb19 	bl	8000a24 <__aeabi_d2iz>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	4b2b      	ldr	r3, [pc, #172]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a3f6:	601a      	str	r2, [r3, #0]

			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 800a3f8:	4b29      	ldr	r3, [pc, #164]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a3fa:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomX[1] - CalkaPosredniaRomX[0]) / 3));
 800a3fc:	4b28      	ldr	r3, [pc, #160]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a3fe:	6859      	ldr	r1, [r3, #4]
 800a400:	4b27      	ldr	r3, [pc, #156]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	1acb      	subs	r3, r1, r3
 800a406:	492c      	ldr	r1, [pc, #176]	; (800a4b8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800a408:	fb81 0103 	smull	r0, r1, r1, r3
 800a40c:	17db      	asrs	r3, r3, #31
 800a40e:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[0] = (long) (CalkaPosredniaRomX[1]
 800a410:	4413      	add	r3, r2
 800a412:	4a2a      	ldr	r2, [pc, #168]	; (800a4bc <HAL_TIM_PeriodElapsedCallback+0xed4>)
 800a414:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 800a416:	4b22      	ldr	r3, [pc, #136]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a418:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomX[2] - CalkaPosredniaRomX[1]) / 3));
 800a41a:	4b21      	ldr	r3, [pc, #132]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a41c:	6899      	ldr	r1, [r3, #8]
 800a41e:	4b20      	ldr	r3, [pc, #128]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	1acb      	subs	r3, r1, r3
 800a424:	4924      	ldr	r1, [pc, #144]	; (800a4b8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800a426:	fb81 0103 	smull	r0, r1, r1, r3
 800a42a:	17db      	asrs	r3, r3, #31
 800a42c:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[1] = (long) (CalkaPosredniaRomX[2]
 800a42e:	4413      	add	r3, r2
 800a430:	4a22      	ldr	r2, [pc, #136]	; (800a4bc <HAL_TIM_PeriodElapsedCallback+0xed4>)
 800a432:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 800a434:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a436:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomX[3] - CalkaPosredniaRomX[2]) / 3));
 800a438:	4b19      	ldr	r3, [pc, #100]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a43a:	68d9      	ldr	r1, [r3, #12]
 800a43c:	4b18      	ldr	r3, [pc, #96]	; (800a4a0 <HAL_TIM_PeriodElapsedCallback+0xeb8>)
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	1acb      	subs	r3, r1, r3
 800a442:	491d      	ldr	r1, [pc, #116]	; (800a4b8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800a444:	fb81 0103 	smull	r0, r1, r1, r3
 800a448:	17db      	asrs	r3, r3, #31
 800a44a:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomX[2] = (long) (CalkaPosredniaRomX[3]
 800a44c:	4413      	add	r3, r2
 800a44e:	4a1b      	ldr	r2, [pc, #108]	; (800a4bc <HAL_TIM_PeriodElapsedCallback+0xed4>)
 800a450:	6093      	str	r3, [r2, #8]

			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 800a452:	4b14      	ldr	r3, [pc, #80]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a454:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPosredniaRomY[1] - CalkaPosredniaRomY[0]) / 3));
 800a456:	4b13      	ldr	r3, [pc, #76]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a458:	6859      	ldr	r1, [r3, #4]
 800a45a:	4b12      	ldr	r3, [pc, #72]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	1acb      	subs	r3, r1, r3
 800a460:	4915      	ldr	r1, [pc, #84]	; (800a4b8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800a462:	fb81 0103 	smull	r0, r1, r1, r3
 800a466:	17db      	asrs	r3, r3, #31
 800a468:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[0] = (long) (CalkaPosredniaRomY[1]
 800a46a:	4413      	add	r3, r2
 800a46c:	4a14      	ldr	r2, [pc, #80]	; (800a4c0 <HAL_TIM_PeriodElapsedCallback+0xed8>)
 800a46e:	6013      	str	r3, [r2, #0]
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a472:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPosredniaRomY[2] - CalkaPosredniaRomY[1]) / 3));
 800a474:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a476:	6899      	ldr	r1, [r3, #8]
 800a478:	4b0a      	ldr	r3, [pc, #40]	; (800a4a4 <HAL_TIM_PeriodElapsedCallback+0xebc>)
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	1acb      	subs	r3, r1, r3
 800a47e:	490e      	ldr	r1, [pc, #56]	; (800a4b8 <HAL_TIM_PeriodElapsedCallback+0xed0>)
 800a480:	fb81 0103 	smull	r0, r1, r1, r3
 800a484:	17db      	asrs	r3, r3, #31
 800a486:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[1] = (long) (CalkaPosredniaRomY[2]
 800a488:	4413      	add	r3, r2
 800a48a:	e01b      	b.n	800a4c4 <HAL_TIM_PeriodElapsedCallback+0xedc>
 800a48c:	20000588 	.word	0x20000588
 800a490:	200004ec 	.word	0x200004ec
 800a494:	200005d0 	.word	0x200005d0
 800a498:	3fe00000 	.word	0x3fe00000
 800a49c:	40100000 	.word	0x40100000
 800a4a0:	200005ec 	.word	0x200005ec
 800a4a4:	200005b4 	.word	0x200005b4
 800a4a8:	200004fc 	.word	0x200004fc
 800a4ac:	40200000 	.word	0x40200000
 800a4b0:	40300000 	.word	0x40300000
 800a4b4:	40400000 	.word	0x40400000
 800a4b8:	55555556 	.word	0x55555556
 800a4bc:	200005a4 	.word	0x200005a4
 800a4c0:	2000058c 	.word	0x2000058c
 800a4c4:	4a91      	ldr	r2, [pc, #580]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a4c6:	6053      	str	r3, [r2, #4]
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 800a4c8:	4b91      	ldr	r3, [pc, #580]	; (800a710 <HAL_TIM_PeriodElapsedCallback+0x1128>)
 800a4ca:	68da      	ldr	r2, [r3, #12]
					+ ((CalkaPosredniaRomY[3] - CalkaPosredniaRomY[2]) / 3));
 800a4cc:	4b90      	ldr	r3, [pc, #576]	; (800a710 <HAL_TIM_PeriodElapsedCallback+0x1128>)
 800a4ce:	68d9      	ldr	r1, [r3, #12]
 800a4d0:	4b8f      	ldr	r3, [pc, #572]	; (800a710 <HAL_TIM_PeriodElapsedCallback+0x1128>)
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	1acb      	subs	r3, r1, r3
 800a4d6:	498f      	ldr	r1, [pc, #572]	; (800a714 <HAL_TIM_PeriodElapsedCallback+0x112c>)
 800a4d8:	fb81 0103 	smull	r0, r1, r1, r3
 800a4dc:	17db      	asrs	r3, r3, #31
 800a4de:	1acb      	subs	r3, r1, r3
			CalkaPomocniczaRomY[2] = (long) (CalkaPosredniaRomY[3]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	4a8a      	ldr	r2, [pc, #552]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a4e4:	6093      	str	r3, [r2, #8]

			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 800a4e6:	4b8c      	ldr	r3, [pc, #560]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a4e8:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomX[1] - CalkaPomocniczaRomX[0]) / 15));
 800a4ea:	4b8b      	ldr	r3, [pc, #556]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a4ec:	6859      	ldr	r1, [r3, #4]
 800a4ee:	4b8a      	ldr	r3, [pc, #552]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	1acb      	subs	r3, r1, r3
 800a4f4:	4989      	ldr	r1, [pc, #548]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x1134>)
 800a4f6:	fb81 0103 	smull	r0, r1, r1, r3
 800a4fa:	4419      	add	r1, r3
 800a4fc:	10c9      	asrs	r1, r1, #3
 800a4fe:	17db      	asrs	r3, r3, #31
 800a500:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[0] = (long) (CalkaPomocniczaRomX[1]
 800a502:	4413      	add	r3, r2
 800a504:	4a86      	ldr	r2, [pc, #536]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x1138>)
 800a506:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 800a508:	4b83      	ldr	r3, [pc, #524]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a50a:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomX[2] - CalkaPomocniczaRomX[1]) / 15));
 800a50c:	4b82      	ldr	r3, [pc, #520]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a50e:	6899      	ldr	r1, [r3, #8]
 800a510:	4b81      	ldr	r3, [pc, #516]	; (800a718 <HAL_TIM_PeriodElapsedCallback+0x1130>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	1acb      	subs	r3, r1, r3
 800a516:	4981      	ldr	r1, [pc, #516]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x1134>)
 800a518:	fb81 0103 	smull	r0, r1, r1, r3
 800a51c:	4419      	add	r1, r3
 800a51e:	10c9      	asrs	r1, r1, #3
 800a520:	17db      	asrs	r3, r3, #31
 800a522:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomX[1] = (long) (CalkaPomocniczaRomX[2]
 800a524:	4413      	add	r3, r2
 800a526:	4a7e      	ldr	r2, [pc, #504]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x1138>)
 800a528:	6053      	str	r3, [r2, #4]

			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 800a52a:	4b78      	ldr	r3, [pc, #480]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a52c:	685a      	ldr	r2, [r3, #4]
					+ ((CalkaPomocniczaRomY[1] - CalkaPomocniczaRomY[0]) / 15));
 800a52e:	4b77      	ldr	r3, [pc, #476]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a530:	6859      	ldr	r1, [r3, #4]
 800a532:	4b76      	ldr	r3, [pc, #472]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	1acb      	subs	r3, r1, r3
 800a538:	4978      	ldr	r1, [pc, #480]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x1134>)
 800a53a:	fb81 0103 	smull	r0, r1, r1, r3
 800a53e:	4419      	add	r1, r3
 800a540:	10c9      	asrs	r1, r1, #3
 800a542:	17db      	asrs	r3, r3, #31
 800a544:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[0] = (long) (CalkaPomocniczaRomY[1]
 800a546:	4413      	add	r3, r2
 800a548:	4a76      	ldr	r2, [pc, #472]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x113c>)
 800a54a:	6013      	str	r3, [r2, #0]
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 800a54c:	4b6f      	ldr	r3, [pc, #444]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a54e:	689a      	ldr	r2, [r3, #8]
					+ ((CalkaPomocniczaRomY[2] - CalkaPomocniczaRomY[1]) / 15));
 800a550:	4b6e      	ldr	r3, [pc, #440]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a552:	6899      	ldr	r1, [r3, #8]
 800a554:	4b6d      	ldr	r3, [pc, #436]	; (800a70c <HAL_TIM_PeriodElapsedCallback+0x1124>)
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	1acb      	subs	r3, r1, r3
 800a55a:	4970      	ldr	r1, [pc, #448]	; (800a71c <HAL_TIM_PeriodElapsedCallback+0x1134>)
 800a55c:	fb81 0103 	smull	r0, r1, r1, r3
 800a560:	4419      	add	r1, r3
 800a562:	10c9      	asrs	r1, r1, #3
 800a564:	17db      	asrs	r3, r3, #31
 800a566:	1acb      	subs	r3, r1, r3
			CalkaPomocnicza2RomY[1] = (long) (CalkaPomocniczaRomY[2]
 800a568:	4413      	add	r3, r2
 800a56a:	4a6e      	ldr	r2, [pc, #440]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x113c>)
 800a56c:	6053      	str	r3, [r2, #4]

			CalkaRombX +=
					(long) (CalkaPomocnicza2RomX[1]
 800a56e:	4b6c      	ldr	r3, [pc, #432]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x1138>)
 800a570:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomX[1]
 800a572:	4b6b      	ldr	r3, [pc, #428]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x1138>)
 800a574:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomX[0]) / 63));
 800a576:	4b6a      	ldr	r3, [pc, #424]	; (800a720 <HAL_TIM_PeriodElapsedCallback+0x1138>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	1acb      	subs	r3, r1, r3
 800a57c:	496a      	ldr	r1, [pc, #424]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x1140>)
 800a57e:	fb81 0103 	smull	r0, r1, r1, r3
 800a582:	4419      	add	r1, r3
 800a584:	1149      	asrs	r1, r1, #5
 800a586:	17db      	asrs	r3, r3, #31
 800a588:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomX[1]
 800a58a:	441a      	add	r2, r3
			CalkaRombX +=
 800a58c:	4b67      	ldr	r3, [pc, #412]	; (800a72c <HAL_TIM_PeriodElapsedCallback+0x1144>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4413      	add	r3, r2
 800a592:	4a66      	ldr	r2, [pc, #408]	; (800a72c <HAL_TIM_PeriodElapsedCallback+0x1144>)
 800a594:	6013      	str	r3, [r2, #0]
			CalkaRombY +=
					(long) (CalkaPomocnicza2RomY[1]
 800a596:	4b63      	ldr	r3, [pc, #396]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x113c>)
 800a598:	685a      	ldr	r2, [r3, #4]
							+ ((CalkaPomocnicza2RomY[1]
 800a59a:	4b62      	ldr	r3, [pc, #392]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x113c>)
 800a59c:	6859      	ldr	r1, [r3, #4]
									- CalkaPomocnicza2RomY[0]) / 63));
 800a59e:	4b61      	ldr	r3, [pc, #388]	; (800a724 <HAL_TIM_PeriodElapsedCallback+0x113c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	1acb      	subs	r3, r1, r3
 800a5a4:	4960      	ldr	r1, [pc, #384]	; (800a728 <HAL_TIM_PeriodElapsedCallback+0x1140>)
 800a5a6:	fb81 0103 	smull	r0, r1, r1, r3
 800a5aa:	4419      	add	r1, r3
 800a5ac:	1149      	asrs	r1, r1, #5
 800a5ae:	17db      	asrs	r3, r3, #31
 800a5b0:	1acb      	subs	r3, r1, r3
					(long) (CalkaPomocnicza2RomY[1]
 800a5b2:	441a      	add	r2, r3
			CalkaRombY +=
 800a5b4:	4b5e      	ldr	r3, [pc, #376]	; (800a730 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	4a5d      	ldr	r2, [pc, #372]	; (800a730 <HAL_TIM_PeriodElapsedCallback+0x1148>)
 800a5bc:	6013      	str	r3, [r2, #0]

			LicznikPomocniczyRomberg = 0;
 800a5be:	4b5d      	ldr	r3, [pc, #372]	; (800a734 <HAL_TIM_PeriodElapsedCallback+0x114c>)
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	701a      	strb	r2, [r3, #0]
		}
		//koniec

//*************KONIEC TESTOWEJ CZESCI*****************************************************************************************

		DataOld = DataNow;
 800a5c4:	4b5c      	ldr	r3, [pc, #368]	; (800a738 <HAL_TIM_PeriodElapsedCallback+0x1150>)
 800a5c6:	4a5d      	ldr	r2, [pc, #372]	; (800a73c <HAL_TIM_PeriodElapsedCallback+0x1154>)
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	6019      	str	r1, [r3, #0]
 800a5cc:	8892      	ldrh	r2, [r2, #4]
 800a5ce:	809a      	strh	r2, [r3, #4]
// movement of the ball
		if (Y_post > 5000) //bylo 10000
 800a5d0:	4b5b      	ldr	r3, [pc, #364]	; (800a740 <HAL_TIM_PeriodElapsedCallback+0x1158>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	f340 81f9 	ble.w	800a9d0 <HAL_TIM_PeriodElapsedCallback+0x13e8>
				{
			fMovedX = 1;
 800a5de:	4b59      	ldr	r3, [pc, #356]	; (800a744 <HAL_TIM_PeriodElapsedCallback+0x115c>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 800a5e4:	4b58      	ldr	r3, [pc, #352]	; (800a748 <HAL_TIM_PeriodElapsedCallback+0x1160>)
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	701a      	strb	r2, [r3, #0]

			/*if (X < 215)
			 X += 1;*/

			if (WybranyPoziom == 0) {
 800a5ea:	4b58      	ldr	r3, [pc, #352]	; (800a74c <HAL_TIM_PeriodElapsedCallback+0x1164>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f040 80bb 	bne.w	800a76c <HAL_TIM_PeriodElapsedCallback+0x1184>
				if (PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0] != 0
 800a5f6:	4b56      	ldr	r3, [pc, #344]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	4956      	ldr	r1, [pc, #344]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	4413      	add	r3, r2
 800a602:	00db      	lsls	r3, r3, #3
 800a604:	440b      	add	r3, r1
 800a606:	3308      	adds	r3, #8
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	f000 83b2 	beq.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								< PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].X
 800a610:	4b4f      	ldr	r3, [pc, #316]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	494f      	ldr	r1, [pc, #316]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a616:	4613      	mov	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	440b      	add	r3, r1
 800a620:	3308      	adds	r3, #8
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	494b      	ldr	r1, [pc, #300]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a626:	4613      	mov	r3, r2
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	4413      	add	r3, r2
 800a62c:	00db      	lsls	r3, r3, #3
 800a62e:	440b      	add	r3, r1
 800a630:	881a      	ldrh	r2, [r3, #0]
 800a632:	4b49      	ldr	r3, [pc, #292]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	b29b      	uxth	r3, r3
						&& X
 800a638:	429a      	cmp	r2, r3
 800a63a:	f240 839b 	bls.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].Y) {
 800a63e:	4b44      	ldr	r3, [pc, #272]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	4944      	ldr	r1, [pc, #272]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a644:	4613      	mov	r3, r2
 800a646:	005b      	lsls	r3, r3, #1
 800a648:	4413      	add	r3, r2
 800a64a:	00db      	lsls	r3, r3, #3
 800a64c:	440b      	add	r3, r1
 800a64e:	3308      	adds	r3, #8
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	4940      	ldr	r1, [pc, #256]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a654:	4613      	mov	r3, r2
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	4413      	add	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	440b      	add	r3, r1
 800a65e:	3302      	adds	r3, #2
 800a660:	881a      	ldrh	r2, [r3, #0]
 800a662:	4b3e      	ldr	r3, [pc, #248]	; (800a75c <HAL_TIM_PeriodElapsedCallback+0x1174>)
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29b      	uxth	r3, r3
						&& Y
 800a668:	429a      	cmp	r2, r3
 800a66a:	f040 8383 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieDodatniX > SPOWOLNIENIE_KULKI) {
 800a66e:	4b3c      	ldr	r3, [pc, #240]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	2b05      	cmp	r3, #5
 800a676:	d940      	bls.n	800a6fa <HAL_TIM_PeriodElapsedCallback+0x1112>
						PoprzednieX = X;
 800a678:	4b37      	ldr	r3, [pc, #220]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	4b39      	ldr	r3, [pc, #228]	; (800a764 <HAL_TIM_PeriodElapsedCallback+0x117c>)
 800a680:	801a      	strh	r2, [r3, #0]
						X += 1;
 800a682:	4b35      	ldr	r3, [pc, #212]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	3301      	adds	r3, #1
 800a68a:	b29a      	uxth	r2, r3
 800a68c:	4b32      	ldr	r3, [pc, #200]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800a68e:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].X) {
 800a690:	4b2f      	ldr	r3, [pc, #188]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	492f      	ldr	r1, [pc, #188]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a696:	4613      	mov	r3, r2
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	4413      	add	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	440b      	add	r3, r1
 800a6a0:	3308      	adds	r3, #8
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	492b      	ldr	r1, [pc, #172]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	440b      	add	r3, r1
 800a6b0:	881a      	ldrh	r2, [r3, #0]
 800a6b2:	4b29      	ldr	r3, [pc, #164]	; (800a758 <HAL_TIM_PeriodElapsedCallback+0x1170>)
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29b      	uxth	r3, r3
						if (X
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d11b      	bne.n	800a6f4 <HAL_TIM_PeriodElapsedCallback+0x110c>
							PozycjaNaSciezce =
									PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[0]].NumerPunktu;
 800a6bc:	4b24      	ldr	r3, [pc, #144]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	4924      	ldr	r1, [pc, #144]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	005b      	lsls	r3, r3, #1
 800a6c6:	4413      	add	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	440b      	add	r3, r1
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	4920      	ldr	r1, [pc, #128]	; (800a754 <HAL_TIM_PeriodElapsedCallback+0x116c>)
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	4413      	add	r3, r2
 800a6d8:	00db      	lsls	r3, r3, #3
 800a6da:	440b      	add	r3, r1
 800a6dc:	3304      	adds	r3, #4
 800a6de:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800a6e0:	4a1b      	ldr	r2, [pc, #108]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a6e2:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki1) {
 800a6e4:	4b1a      	ldr	r3, [pc, #104]	; (800a750 <HAL_TIM_PeriodElapsedCallback+0x1168>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	220b      	movs	r2, #11
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d102      	bne.n	800a6f4 <HAL_TIM_PeriodElapsedCallback+0x110c>
								Wygrana = 1;
 800a6ee:	4b1e      	ldr	r3, [pc, #120]	; (800a768 <HAL_TIM_PeriodElapsedCallback+0x1180>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniX = 0;
 800a6f4:	4b1a      	ldr	r3, [pc, #104]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniX += 1;
 800a6fa:	4b19      	ldr	r3, [pc, #100]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	3301      	adds	r3, #1
 800a702:	b2da      	uxtb	r2, r3
 800a704:	4b16      	ldr	r3, [pc, #88]	; (800a760 <HAL_TIM_PeriodElapsedCallback+0x1178>)
 800a706:	701a      	strb	r2, [r3, #0]
 800a708:	e334      	b.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
 800a70a:	bf00      	nop
 800a70c:	2000058c 	.word	0x2000058c
 800a710:	200005b4 	.word	0x200005b4
 800a714:	55555556 	.word	0x55555556
 800a718:	200005a4 	.word	0x200005a4
 800a71c:	88888889 	.word	0x88888889
 800a720:	2000064c 	.word	0x2000064c
 800a724:	20000514 	.word	0x20000514
 800a728:	82082083 	.word	0x82082083
 800a72c:	20000584 	.word	0x20000584
 800a730:	20000624 	.word	0x20000624
 800a734:	20000588 	.word	0x20000588
 800a738:	200004ec 	.word	0x200004ec
 800a73c:	200005d0 	.word	0x200005d0
 800a740:	20000654 	.word	0x20000654
 800a744:	200005e4 	.word	0x200005e4
 800a748:	20000628 	.word	0x20000628
 800a74c:	20000642 	.word	0x20000642
 800a750:	200005c8 	.word	0x200005c8
 800a754:	0807f0a4 	.word	0x0807f0a4
 800a758:	20000658 	.word	0x20000658
 800a75c:	200005c4 	.word	0x200005c4
 800a760:	20000578 	.word	0x20000578
 800a764:	20000644 	.word	0x20000644
 800a768:	200005fe 	.word	0x200005fe
				}

			} else if (WybranyPoziom == 1) {
 800a76c:	4b8f      	ldr	r3, [pc, #572]	; (800a9ac <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b01      	cmp	r3, #1
 800a774:	f040 808a 	bne.w	800a88c <HAL_TIM_PeriodElapsedCallback+0x12a4>
				if (PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0] != 0
 800a778:	4b8d      	ldr	r3, [pc, #564]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	498d      	ldr	r1, [pc, #564]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a77e:	4613      	mov	r3, r2
 800a780:	005b      	lsls	r3, r3, #1
 800a782:	4413      	add	r3, r2
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	440b      	add	r3, r1
 800a788:	3308      	adds	r3, #8
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f000 82f1 	beq.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								< PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].X
 800a792:	4b87      	ldr	r3, [pc, #540]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	4987      	ldr	r1, [pc, #540]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a798:	4613      	mov	r3, r2
 800a79a:	005b      	lsls	r3, r3, #1
 800a79c:	4413      	add	r3, r2
 800a79e:	00db      	lsls	r3, r3, #3
 800a7a0:	440b      	add	r3, r1
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	4983      	ldr	r1, [pc, #524]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	005b      	lsls	r3, r3, #1
 800a7ac:	4413      	add	r3, r2
 800a7ae:	00db      	lsls	r3, r3, #3
 800a7b0:	440b      	add	r3, r1
 800a7b2:	881a      	ldrh	r2, [r3, #0]
 800a7b4:	4b80      	ldr	r3, [pc, #512]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29b      	uxth	r3, r3
						&& X
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	f240 82da 	bls.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].Y) {
 800a7c0:	4b7b      	ldr	r3, [pc, #492]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	497b      	ldr	r1, [pc, #492]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	005b      	lsls	r3, r3, #1
 800a7ca:	4413      	add	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	440b      	add	r3, r1
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	4977      	ldr	r1, [pc, #476]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	00db      	lsls	r3, r3, #3
 800a7de:	440b      	add	r3, r1
 800a7e0:	3302      	adds	r3, #2
 800a7e2:	881a      	ldrh	r2, [r3, #0]
 800a7e4:	4b75      	ldr	r3, [pc, #468]	; (800a9bc <HAL_TIM_PeriodElapsedCallback+0x13d4>)
 800a7e6:	881b      	ldrh	r3, [r3, #0]
 800a7e8:	b29b      	uxth	r3, r3
						&& Y
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	f040 82c2 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieDodatniX > SPOWOLNIENIE_KULKI) {
 800a7f0:	4b73      	ldr	r3, [pc, #460]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b05      	cmp	r3, #5
 800a7f8:	d940      	bls.n	800a87c <HAL_TIM_PeriodElapsedCallback+0x1294>
						PoprzednieX = X;
 800a7fa:	4b6f      	ldr	r3, [pc, #444]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	4b70      	ldr	r3, [pc, #448]	; (800a9c4 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 800a802:	801a      	strh	r2, [r3, #0]
						X += 1;
 800a804:	4b6c      	ldr	r3, [pc, #432]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a806:	881b      	ldrh	r3, [r3, #0]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3301      	adds	r3, #1
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	4b6a      	ldr	r3, [pc, #424]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a810:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].X) {
 800a812:	4b67      	ldr	r3, [pc, #412]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	4967      	ldr	r1, [pc, #412]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a818:	4613      	mov	r3, r2
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	4413      	add	r3, r2
 800a81e:	00db      	lsls	r3, r3, #3
 800a820:	440b      	add	r3, r1
 800a822:	3308      	adds	r3, #8
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4963      	ldr	r1, [pc, #396]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a828:	4613      	mov	r3, r2
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	4413      	add	r3, r2
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	440b      	add	r3, r1
 800a832:	881a      	ldrh	r2, [r3, #0]
 800a834:	4b60      	ldr	r3, [pc, #384]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a836:	881b      	ldrh	r3, [r3, #0]
 800a838:	b29b      	uxth	r3, r3
						if (X
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d11b      	bne.n	800a876 <HAL_TIM_PeriodElapsedCallback+0x128e>
							PozycjaNaSciezce =
									PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[0]].NumerPunktu;
 800a83e:	4b5c      	ldr	r3, [pc, #368]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	495c      	ldr	r1, [pc, #368]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a844:	4613      	mov	r3, r2
 800a846:	005b      	lsls	r3, r3, #1
 800a848:	4413      	add	r3, r2
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	440b      	add	r3, r1
 800a84e:	3308      	adds	r3, #8
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	4958      	ldr	r1, [pc, #352]	; (800a9b4 <HAL_TIM_PeriodElapsedCallback+0x13cc>)
 800a854:	4613      	mov	r3, r2
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	4413      	add	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	440b      	add	r3, r1
 800a85e:	3304      	adds	r3, #4
 800a860:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800a862:	4a53      	ldr	r2, [pc, #332]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a864:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki2) {
 800a866:	4b52      	ldr	r3, [pc, #328]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2238      	movs	r2, #56	; 0x38
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d102      	bne.n	800a876 <HAL_TIM_PeriodElapsedCallback+0x128e>
								Wygrana = 1;
 800a870:	4b55      	ldr	r3, [pc, #340]	; (800a9c8 <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 800a872:	2201      	movs	r2, #1
 800a874:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniX = 0;
 800a876:	4b52      	ldr	r3, [pc, #328]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a878:	2200      	movs	r2, #0
 800a87a:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniX += 1;
 800a87c:	4b50      	ldr	r3, [pc, #320]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	3301      	adds	r3, #1
 800a884:	b2da      	uxtb	r2, r3
 800a886:	4b4e      	ldr	r3, [pc, #312]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a888:	701a      	strb	r2, [r3, #0]
 800a88a:	e273      	b.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
				}

			} else if (WybranyPoziom == 2) {
 800a88c:	4b47      	ldr	r3, [pc, #284]	; (800a9ac <HAL_TIM_PeriodElapsedCallback+0x13c4>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b02      	cmp	r3, #2
 800a894:	f040 826e 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
				if (PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[0] != 0
 800a898:	4b45      	ldr	r3, [pc, #276]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	494b      	ldr	r1, [pc, #300]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a89e:	4613      	mov	r3, r2
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 8261 	beq.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								< PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[0]].X
 800a8b2:	4b3f      	ldr	r3, [pc, #252]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4945      	ldr	r1, [pc, #276]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	005b      	lsls	r3, r3, #1
 800a8bc:	4413      	add	r3, r2
 800a8be:	00db      	lsls	r3, r3, #3
 800a8c0:	440b      	add	r3, r1
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4941      	ldr	r1, [pc, #260]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	005b      	lsls	r3, r3, #1
 800a8cc:	4413      	add	r3, r2
 800a8ce:	00db      	lsls	r3, r3, #3
 800a8d0:	440b      	add	r3, r1
 800a8d2:	881a      	ldrh	r2, [r3, #0]
 800a8d4:	4b38      	ldr	r3, [pc, #224]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	b29b      	uxth	r3, r3
						&& X
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	f240 824a 	bls.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[0]].Y) {
 800a8e0:	4b33      	ldr	r3, [pc, #204]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	4939      	ldr	r1, [pc, #228]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	4413      	add	r3, r2
 800a8ec:	00db      	lsls	r3, r3, #3
 800a8ee:	440b      	add	r3, r1
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	4935      	ldr	r1, [pc, #212]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	005b      	lsls	r3, r3, #1
 800a8fa:	4413      	add	r3, r2
 800a8fc:	00db      	lsls	r3, r3, #3
 800a8fe:	440b      	add	r3, r1
 800a900:	3302      	adds	r3, #2
 800a902:	881a      	ldrh	r2, [r3, #0]
 800a904:	4b2d      	ldr	r3, [pc, #180]	; (800a9bc <HAL_TIM_PeriodElapsedCallback+0x13d4>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b29b      	uxth	r3, r3
						&& Y
 800a90a:	429a      	cmp	r2, r3
 800a90c:	f040 8232 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieDodatniX > SPOWOLNIENIE_KULKI) {
 800a910:	4b2b      	ldr	r3, [pc, #172]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b05      	cmp	r3, #5
 800a918:	d940      	bls.n	800a99c <HAL_TIM_PeriodElapsedCallback+0x13b4>
						PoprzednieX = X;
 800a91a:	4b27      	ldr	r3, [pc, #156]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	4b28      	ldr	r3, [pc, #160]	; (800a9c4 <HAL_TIM_PeriodElapsedCallback+0x13dc>)
 800a922:	801a      	strh	r2, [r3, #0]
						X += 1;
 800a924:	4b24      	ldr	r3, [pc, #144]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	3301      	adds	r3, #1
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	4b22      	ldr	r3, [pc, #136]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a930:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[0]].X) {
 800a932:	4b1f      	ldr	r3, [pc, #124]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4925      	ldr	r1, [pc, #148]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a938:	4613      	mov	r3, r2
 800a93a:	005b      	lsls	r3, r3, #1
 800a93c:	4413      	add	r3, r2
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	440b      	add	r3, r1
 800a942:	3308      	adds	r3, #8
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4921      	ldr	r1, [pc, #132]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a948:	4613      	mov	r3, r2
 800a94a:	005b      	lsls	r3, r3, #1
 800a94c:	4413      	add	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	440b      	add	r3, r1
 800a952:	881a      	ldrh	r2, [r3, #0]
 800a954:	4b18      	ldr	r3, [pc, #96]	; (800a9b8 <HAL_TIM_PeriodElapsedCallback+0x13d0>)
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	b29b      	uxth	r3, r3
						if (X
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d11b      	bne.n	800a996 <HAL_TIM_PeriodElapsedCallback+0x13ae>
							PozycjaNaSciezce =
									PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[0]].NumerPunktu;
 800a95e:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	491a      	ldr	r1, [pc, #104]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a964:	4613      	mov	r3, r2
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	4413      	add	r3, r2
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	440b      	add	r3, r1
 800a96e:	3308      	adds	r3, #8
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	4916      	ldr	r1, [pc, #88]	; (800a9cc <HAL_TIM_PeriodElapsedCallback+0x13e4>)
 800a974:	4613      	mov	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	3304      	adds	r3, #4
 800a980:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800a982:	4a0b      	ldr	r2, [pc, #44]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a984:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki3) {
 800a986:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <HAL_TIM_PeriodElapsedCallback+0x13c8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	224b      	movs	r2, #75	; 0x4b
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d102      	bne.n	800a996 <HAL_TIM_PeriodElapsedCallback+0x13ae>
								Wygrana = 1;
 800a990:	4b0d      	ldr	r3, [pc, #52]	; (800a9c8 <HAL_TIM_PeriodElapsedCallback+0x13e0>)
 800a992:	2201      	movs	r2, #1
 800a994:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniX = 0;
 800a996:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniX += 1;
 800a99c:	4b08      	ldr	r3, [pc, #32]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	4b06      	ldr	r3, [pc, #24]	; (800a9c0 <HAL_TIM_PeriodElapsedCallback+0x13d8>)
 800a9a8:	701a      	strb	r2, [r3, #0]
 800a9aa:	e1e3      	b.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
 800a9ac:	20000642 	.word	0x20000642
 800a9b0:	200005c8 	.word	0x200005c8
 800a9b4:	0807f1c4 	.word	0x0807f1c4
 800a9b8:	20000658 	.word	0x20000658
 800a9bc:	200005c4 	.word	0x200005c4
 800a9c0:	20000578 	.word	0x20000578
 800a9c4:	20000644 	.word	0x20000644
 800a9c8:	200005fe 	.word	0x200005fe
 800a9cc:	0807f71c 	.word	0x0807f71c
				}
			}

		} else if (Y_post < -5000) //bylo -10000
 800a9d0:	4b95      	ldr	r3, [pc, #596]	; (800ac28 <HAL_TIM_PeriodElapsedCallback+0x1640>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a95      	ldr	r2, [pc, #596]	; (800ac2c <HAL_TIM_PeriodElapsedCallback+0x1644>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	f280 81cc 	bge.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
				{
			fMovedX = 1;
 800a9dc:	4b94      	ldr	r3, [pc, #592]	; (800ac30 <HAL_TIM_PeriodElapsedCallback+0x1648>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 800a9e2:	4b94      	ldr	r3, [pc, #592]	; (800ac34 <HAL_TIM_PeriodElapsedCallback+0x164c>)
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	701a      	strb	r2, [r3, #0]

			/*if (X > 25)
			 X -= 1;*/

			if (WybranyPoziom == 0) {
 800a9e8:	4b93      	ldr	r3, [pc, #588]	; (800ac38 <HAL_TIM_PeriodElapsedCallback+0x1650>)
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 808a 	bne.w	800ab08 <HAL_TIM_PeriodElapsedCallback+0x1520>
				if (PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1] != 0
 800a9f4:	4b91      	ldr	r3, [pc, #580]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	4991      	ldr	r1, [pc, #580]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4413      	add	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	440b      	add	r3, r1
 800aa04:	330c      	adds	r3, #12
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 81b3 	beq.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								> PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].X
 800aa0e:	4b8b      	ldr	r3, [pc, #556]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	498b      	ldr	r1, [pc, #556]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aa14:	4613      	mov	r3, r2
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	4413      	add	r3, r2
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	440b      	add	r3, r1
 800aa1e:	330c      	adds	r3, #12
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	4987      	ldr	r1, [pc, #540]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aa24:	4613      	mov	r3, r2
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	4413      	add	r3, r2
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	440b      	add	r3, r1
 800aa2e:	881a      	ldrh	r2, [r3, #0]
 800aa30:	4b84      	ldr	r3, [pc, #528]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	b29b      	uxth	r3, r3
						&& X
 800aa36:	429a      	cmp	r2, r3
 800aa38:	f080 819c 	bcs.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].Y) {
 800aa3c:	4b7f      	ldr	r3, [pc, #508]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	497f      	ldr	r1, [pc, #508]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aa42:	4613      	mov	r3, r2
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	4413      	add	r3, r2
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	440b      	add	r3, r1
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	497b      	ldr	r1, [pc, #492]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aa52:	4613      	mov	r3, r2
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4413      	add	r3, r2
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	440b      	add	r3, r1
 800aa5c:	3302      	adds	r3, #2
 800aa5e:	881a      	ldrh	r2, [r3, #0]
 800aa60:	4b79      	ldr	r3, [pc, #484]	; (800ac48 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
						&& Y
 800aa66:	429a      	cmp	r2, r3
 800aa68:	f040 8184 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieUjemnyX > SPOWOLNIENIE_KULKI) {
 800aa6c:	4b77      	ldr	r3, [pc, #476]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d940      	bls.n	800aaf8 <HAL_TIM_PeriodElapsedCallback+0x1510>
						PoprzednieX = X;
 800aa76:	4b73      	ldr	r3, [pc, #460]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	b29a      	uxth	r2, r3
 800aa7c:	4b74      	ldr	r3, [pc, #464]	; (800ac50 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 800aa7e:	801a      	strh	r2, [r3, #0]
						X -= 1;
 800aa80:	4b70      	ldr	r3, [pc, #448]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	4b6e      	ldr	r3, [pc, #440]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aa8c:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].X) {
 800aa8e:	4b6b      	ldr	r3, [pc, #428]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	496b      	ldr	r1, [pc, #428]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aa94:	4613      	mov	r3, r2
 800aa96:	005b      	lsls	r3, r3, #1
 800aa98:	4413      	add	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	440b      	add	r3, r1
 800aa9e:	330c      	adds	r3, #12
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	4967      	ldr	r1, [pc, #412]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	4413      	add	r3, r2
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	440b      	add	r3, r1
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	4b64      	ldr	r3, [pc, #400]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	b29b      	uxth	r3, r3
						if (X
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d11b      	bne.n	800aaf2 <HAL_TIM_PeriodElapsedCallback+0x150a>
							PozycjaNaSciezce =
									PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[1]].NumerPunktu;
 800aaba:	4b60      	ldr	r3, [pc, #384]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	4960      	ldr	r1, [pc, #384]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aac0:	4613      	mov	r3, r2
 800aac2:	005b      	lsls	r3, r3, #1
 800aac4:	4413      	add	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	440b      	add	r3, r1
 800aaca:	330c      	adds	r3, #12
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	495c      	ldr	r1, [pc, #368]	; (800ac40 <HAL_TIM_PeriodElapsedCallback+0x1658>)
 800aad0:	4613      	mov	r3, r2
 800aad2:	005b      	lsls	r3, r3, #1
 800aad4:	4413      	add	r3, r2
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	440b      	add	r3, r1
 800aada:	3304      	adds	r3, #4
 800aadc:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800aade:	4a57      	ldr	r2, [pc, #348]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aae0:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki1) {
 800aae2:	4b56      	ldr	r3, [pc, #344]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	220b      	movs	r2, #11
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d102      	bne.n	800aaf2 <HAL_TIM_PeriodElapsedCallback+0x150a>
								Wygrana = 1;
 800aaec:	4b59      	ldr	r3, [pc, #356]	; (800ac54 <HAL_TIM_PeriodElapsedCallback+0x166c>)
 800aaee:	2201      	movs	r2, #1
 800aaf0:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieUjemnyX = 0;
 800aaf2:	4b56      	ldr	r3, [pc, #344]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyX += 1;
 800aaf8:	4b54      	ldr	r3, [pc, #336]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	3301      	adds	r3, #1
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	4b52      	ldr	r3, [pc, #328]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800ab04:	701a      	strb	r2, [r3, #0]
 800ab06:	e135      	b.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
				}

			} else if (WybranyPoziom == 1) {
 800ab08:	4b4b      	ldr	r3, [pc, #300]	; (800ac38 <HAL_TIM_PeriodElapsedCallback+0x1650>)
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	f040 80a4 	bne.w	800ac5c <HAL_TIM_PeriodElapsedCallback+0x1674>
				if (PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1] != 0
 800ab14:	4b49      	ldr	r3, [pc, #292]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	494f      	ldr	r1, [pc, #316]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	4413      	add	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	440b      	add	r3, r1
 800ab24:	330c      	adds	r3, #12
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8123 	beq.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								> PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].X
 800ab2e:	4b43      	ldr	r3, [pc, #268]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	4949      	ldr	r1, [pc, #292]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	440b      	add	r3, r1
 800ab3e:	330c      	adds	r3, #12
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	4945      	ldr	r1, [pc, #276]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800ab44:	4613      	mov	r3, r2
 800ab46:	005b      	lsls	r3, r3, #1
 800ab48:	4413      	add	r3, r2
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	440b      	add	r3, r1
 800ab4e:	881a      	ldrh	r2, [r3, #0]
 800ab50:	4b3c      	ldr	r3, [pc, #240]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
						&& X
 800ab56:	429a      	cmp	r2, r3
 800ab58:	f080 810c 	bcs.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].Y) {
 800ab5c:	4b37      	ldr	r3, [pc, #220]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	493d      	ldr	r1, [pc, #244]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800ab62:	4613      	mov	r3, r2
 800ab64:	005b      	lsls	r3, r3, #1
 800ab66:	4413      	add	r3, r2
 800ab68:	00db      	lsls	r3, r3, #3
 800ab6a:	440b      	add	r3, r1
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	4939      	ldr	r1, [pc, #228]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800ab72:	4613      	mov	r3, r2
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	4413      	add	r3, r2
 800ab78:	00db      	lsls	r3, r3, #3
 800ab7a:	440b      	add	r3, r1
 800ab7c:	3302      	adds	r3, #2
 800ab7e:	881a      	ldrh	r2, [r3, #0]
 800ab80:	4b31      	ldr	r3, [pc, #196]	; (800ac48 <HAL_TIM_PeriodElapsedCallback+0x1660>)
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	b29b      	uxth	r3, r3
						&& Y
 800ab86:	429a      	cmp	r2, r3
 800ab88:	f040 80f4 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieUjemnyX > SPOWOLNIENIE_KULKI) {
 800ab8c:	4b2f      	ldr	r3, [pc, #188]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d940      	bls.n	800ac18 <HAL_TIM_PeriodElapsedCallback+0x1630>
						PoprzednieX = X;
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	4b2c      	ldr	r3, [pc, #176]	; (800ac50 <HAL_TIM_PeriodElapsedCallback+0x1668>)
 800ab9e:	801a      	strh	r2, [r3, #0]
						X -= 1;
 800aba0:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	4b26      	ldr	r3, [pc, #152]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800abac:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].X) {
 800abae:	4b23      	ldr	r3, [pc, #140]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4929      	ldr	r1, [pc, #164]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	440b      	add	r3, r1
 800abbe:	330c      	adds	r3, #12
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	4925      	ldr	r1, [pc, #148]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800abc4:	4613      	mov	r3, r2
 800abc6:	005b      	lsls	r3, r3, #1
 800abc8:	4413      	add	r3, r2
 800abca:	00db      	lsls	r3, r3, #3
 800abcc:	440b      	add	r3, r1
 800abce:	881a      	ldrh	r2, [r3, #0]
 800abd0:	4b1c      	ldr	r3, [pc, #112]	; (800ac44 <HAL_TIM_PeriodElapsedCallback+0x165c>)
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	b29b      	uxth	r3, r3
						if (X
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d11b      	bne.n	800ac12 <HAL_TIM_PeriodElapsedCallback+0x162a>
							PozycjaNaSciezce =
									PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[1]].NumerPunktu;
 800abda:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	491e      	ldr	r1, [pc, #120]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800abe0:	4613      	mov	r3, r2
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	4413      	add	r3, r2
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	440b      	add	r3, r1
 800abea:	330c      	adds	r3, #12
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	491a      	ldr	r1, [pc, #104]	; (800ac58 <HAL_TIM_PeriodElapsedCallback+0x1670>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	3304      	adds	r3, #4
 800abfc:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800abfe:	4a0f      	ldr	r2, [pc, #60]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800ac00:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki2) {
 800ac02:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <HAL_TIM_PeriodElapsedCallback+0x1654>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2238      	movs	r2, #56	; 0x38
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d102      	bne.n	800ac12 <HAL_TIM_PeriodElapsedCallback+0x162a>
								Wygrana = 1;
 800ac0c:	4b11      	ldr	r3, [pc, #68]	; (800ac54 <HAL_TIM_PeriodElapsedCallback+0x166c>)
 800ac0e:	2201      	movs	r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]
							}

						}

						OpoznienieUjemnyX = 0;
 800ac12:	4b0e      	ldr	r3, [pc, #56]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyX += 1;
 800ac18:	4b0c      	ldr	r3, [pc, #48]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	3301      	adds	r3, #1
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	4b0a      	ldr	r3, [pc, #40]	; (800ac4c <HAL_TIM_PeriodElapsedCallback+0x1664>)
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e0a5      	b.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
 800ac28:	20000654 	.word	0x20000654
 800ac2c:	ffffec78 	.word	0xffffec78
 800ac30:	200005e4 	.word	0x200005e4
 800ac34:	20000628 	.word	0x20000628
 800ac38:	20000642 	.word	0x20000642
 800ac3c:	200005c8 	.word	0x200005c8
 800ac40:	0807f0a4 	.word	0x0807f0a4
 800ac44:	20000658 	.word	0x20000658
 800ac48:	200005c4 	.word	0x200005c4
 800ac4c:	200005a2 	.word	0x200005a2
 800ac50:	20000644 	.word	0x20000644
 800ac54:	200005fe 	.word	0x200005fe
 800ac58:	0807f1c4 	.word	0x0807f1c4

				}

			} else if (WybranyPoziom == 2) {
 800ac5c:	4b94      	ldr	r3, [pc, #592]	; (800aeb0 <HAL_TIM_PeriodElapsedCallback+0x18c8>)
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	f040 8086 	bne.w	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
				if (PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[1] != 0
 800ac68:	4b92      	ldr	r3, [pc, #584]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	4992      	ldr	r1, [pc, #584]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ac6e:	4613      	mov	r3, r2
 800ac70:	005b      	lsls	r3, r3, #1
 800ac72:	4413      	add	r3, r2
 800ac74:	00db      	lsls	r3, r3, #3
 800ac76:	440b      	add	r3, r1
 800ac78:	330c      	adds	r3, #12
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d079      	beq.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& X
								> PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[1]].X
 800ac80:	4b8c      	ldr	r3, [pc, #560]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	498c      	ldr	r1, [pc, #560]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ac86:	4613      	mov	r3, r2
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	4413      	add	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	440b      	add	r3, r1
 800ac90:	330c      	adds	r3, #12
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	4988      	ldr	r1, [pc, #544]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ac96:	4613      	mov	r3, r2
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	00db      	lsls	r3, r3, #3
 800ac9e:	440b      	add	r3, r1
 800aca0:	881a      	ldrh	r2, [r3, #0]
 800aca2:	4b86      	ldr	r3, [pc, #536]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
						&& X
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d263      	bcs.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
						&& Y
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[1]].Y) {
 800acac:	4b81      	ldr	r3, [pc, #516]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	4981      	ldr	r1, [pc, #516]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800acb2:	4613      	mov	r3, r2
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	4413      	add	r3, r2
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	440b      	add	r3, r1
 800acbc:	330c      	adds	r3, #12
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	497d      	ldr	r1, [pc, #500]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800acc2:	4613      	mov	r3, r2
 800acc4:	005b      	lsls	r3, r3, #1
 800acc6:	4413      	add	r3, r2
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	440b      	add	r3, r1
 800accc:	3302      	adds	r3, #2
 800acce:	881a      	ldrh	r2, [r3, #0]
 800acd0:	4b7b      	ldr	r3, [pc, #492]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
						&& Y
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d14c      	bne.n	800ad74 <HAL_TIM_PeriodElapsedCallback+0x178c>
					if (OpoznienieUjemnyX > SPOWOLNIENIE_KULKI) {
 800acda:	4b7a      	ldr	r3, [pc, #488]	; (800aec4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b05      	cmp	r3, #5
 800ace2:	d940      	bls.n	800ad66 <HAL_TIM_PeriodElapsedCallback+0x177e>
						PoprzednieX = X;
 800ace4:	4b75      	ldr	r3, [pc, #468]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29a      	uxth	r2, r3
 800acea:	4b77      	ldr	r3, [pc, #476]	; (800aec8 <HAL_TIM_PeriodElapsedCallback+0x18e0>)
 800acec:	801a      	strh	r2, [r3, #0]
						X -= 1;
 800acee:	4b73      	ldr	r3, [pc, #460]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	3b01      	subs	r3, #1
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	4b70      	ldr	r3, [pc, #448]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800acfa:	801a      	strh	r2, [r3, #0]
						if (X
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[1]].X) {
 800acfc:	4b6d      	ldr	r3, [pc, #436]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	496d      	ldr	r1, [pc, #436]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ad02:	4613      	mov	r3, r2
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	4413      	add	r3, r2
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	440b      	add	r3, r1
 800ad0c:	330c      	adds	r3, #12
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	4969      	ldr	r1, [pc, #420]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ad12:	4613      	mov	r3, r2
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	4413      	add	r3, r2
 800ad18:	00db      	lsls	r3, r3, #3
 800ad1a:	440b      	add	r3, r1
 800ad1c:	881a      	ldrh	r2, [r3, #0]
 800ad1e:	4b67      	ldr	r3, [pc, #412]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800ad20:	881b      	ldrh	r3, [r3, #0]
 800ad22:	b29b      	uxth	r3, r3
						if (X
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d11b      	bne.n	800ad60 <HAL_TIM_PeriodElapsedCallback+0x1778>
							PozycjaNaSciezce =
									PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[1]].NumerPunktu;
 800ad28:	4b62      	ldr	r3, [pc, #392]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	4962      	ldr	r1, [pc, #392]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ad2e:	4613      	mov	r3, r2
 800ad30:	005b      	lsls	r3, r3, #1
 800ad32:	4413      	add	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	330c      	adds	r3, #12
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	495e      	ldr	r1, [pc, #376]	; (800aeb8 <HAL_TIM_PeriodElapsedCallback+0x18d0>)
 800ad3e:	4613      	mov	r3, r2
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	4413      	add	r3, r2
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	440b      	add	r3, r1
 800ad48:	3304      	adds	r3, #4
 800ad4a:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800ad4c:	4a59      	ldr	r2, [pc, #356]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ad4e:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki3) {
 800ad50:	4b58      	ldr	r3, [pc, #352]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	224b      	movs	r2, #75	; 0x4b
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d102      	bne.n	800ad60 <HAL_TIM_PeriodElapsedCallback+0x1778>
								Wygrana = 1;
 800ad5a:	4b5c      	ldr	r3, [pc, #368]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x18e4>)
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	701a      	strb	r2, [r3, #0]
							}

						}

						OpoznienieUjemnyX = 0;
 800ad60:	4b58      	ldr	r3, [pc, #352]	; (800aec4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyX += 1;
 800ad66:	4b57      	ldr	r3, [pc, #348]	; (800aec4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	4b54      	ldr	r3, [pc, #336]	; (800aec4 <HAL_TIM_PeriodElapsedCallback+0x18dc>)
 800ad72:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (X_post > 5000) //bylo 10000
 800ad74:	4b56      	ldr	r3, [pc, #344]	; (800aed0 <HAL_TIM_PeriodElapsedCallback+0x18e8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	f340 81e7 	ble.w	800b150 <HAL_TIM_PeriodElapsedCallback+0x1b68>
				{
			fMovedX = 1;
 800ad82:	4b54      	ldr	r3, [pc, #336]	; (800aed4 <HAL_TIM_PeriodElapsedCallback+0x18ec>)
 800ad84:	2201      	movs	r2, #1
 800ad86:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 800ad88:	4b53      	ldr	r3, [pc, #332]	; (800aed8 <HAL_TIM_PeriodElapsedCallback+0x18f0>)
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	701a      	strb	r2, [r3, #0]

			/*if (Y < 295)
			 Y += 1;*/

			if (WybranyPoziom == 0) {
 800ad8e:	4b48      	ldr	r3, [pc, #288]	; (800aeb0 <HAL_TIM_PeriodElapsedCallback+0x18c8>)
 800ad90:	781b      	ldrb	r3, [r3, #0]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f040 80a7 	bne.w	800aee8 <HAL_TIM_PeriodElapsedCallback+0x1900>
				if (PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2] != 0
 800ad9a:	4b46      	ldr	r3, [pc, #280]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	494f      	ldr	r1, [pc, #316]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800ada0:	4613      	mov	r3, r2
 800ada2:	005b      	lsls	r3, r3, #1
 800ada4:	4413      	add	r3, r2
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	440b      	add	r3, r1
 800adaa:	3310      	adds	r3, #16
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 83a3 	beq.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								< PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].Y
 800adb4:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	4948      	ldr	r1, [pc, #288]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800adba:	4613      	mov	r3, r2
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	4413      	add	r3, r2
 800adc0:	00db      	lsls	r3, r3, #3
 800adc2:	440b      	add	r3, r1
 800adc4:	3310      	adds	r3, #16
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4944      	ldr	r1, [pc, #272]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800adca:	4613      	mov	r3, r2
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4413      	add	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	440b      	add	r3, r1
 800add4:	3302      	adds	r3, #2
 800add6:	881a      	ldrh	r2, [r3, #0]
 800add8:	4b39      	ldr	r3, [pc, #228]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800adda:	881b      	ldrh	r3, [r3, #0]
 800addc:	b29b      	uxth	r3, r3
						&& Y
 800adde:	429a      	cmp	r2, r3
 800ade0:	f240 838b 	bls.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].X) {
 800ade4:	4b33      	ldr	r3, [pc, #204]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	493c      	ldr	r1, [pc, #240]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800adea:	4613      	mov	r3, r2
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	4413      	add	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	440b      	add	r3, r1
 800adf4:	3310      	adds	r3, #16
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	4938      	ldr	r1, [pc, #224]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800adfa:	4613      	mov	r3, r2
 800adfc:	005b      	lsls	r3, r3, #1
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	440b      	add	r3, r1
 800ae04:	881a      	ldrh	r2, [r3, #0]
 800ae06:	4b2d      	ldr	r3, [pc, #180]	; (800aebc <HAL_TIM_PeriodElapsedCallback+0x18d4>)
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
						&& X
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	f040 8374 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieDodatniY > SPOWOLNIENIE_KULKI) {
 800ae12:	4b33      	ldr	r3, [pc, #204]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b05      	cmp	r3, #5
 800ae1a:	d941      	bls.n	800aea0 <HAL_TIM_PeriodElapsedCallback+0x18b8>
						PoprzednieY = Y;
 800ae1c:	4b28      	ldr	r3, [pc, #160]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	4b30      	ldr	r3, [pc, #192]	; (800aee4 <HAL_TIM_PeriodElapsedCallback+0x18fc>)
 800ae24:	801a      	strh	r2, [r3, #0]
						Y += 1;
 800ae26:	4b26      	ldr	r3, [pc, #152]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800ae28:	881b      	ldrh	r3, [r3, #0]
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	4b23      	ldr	r3, [pc, #140]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800ae32:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].Y) {
 800ae34:	4b1f      	ldr	r3, [pc, #124]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	4928      	ldr	r1, [pc, #160]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	005b      	lsls	r3, r3, #1
 800ae3e:	4413      	add	r3, r2
 800ae40:	00db      	lsls	r3, r3, #3
 800ae42:	440b      	add	r3, r1
 800ae44:	3310      	adds	r3, #16
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4924      	ldr	r1, [pc, #144]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	005b      	lsls	r3, r3, #1
 800ae4e:	4413      	add	r3, r2
 800ae50:	00db      	lsls	r3, r3, #3
 800ae52:	440b      	add	r3, r1
 800ae54:	3302      	adds	r3, #2
 800ae56:	881a      	ldrh	r2, [r3, #0]
 800ae58:	4b19      	ldr	r3, [pc, #100]	; (800aec0 <HAL_TIM_PeriodElapsedCallback+0x18d8>)
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
						if (Y
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d11b      	bne.n	800ae9a <HAL_TIM_PeriodElapsedCallback+0x18b2>
							PozycjaNaSciezce =
									PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[2]].NumerPunktu;
 800ae62:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	491d      	ldr	r1, [pc, #116]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800ae68:	4613      	mov	r3, r2
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	4413      	add	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	440b      	add	r3, r1
 800ae72:	3310      	adds	r3, #16
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	4919      	ldr	r1, [pc, #100]	; (800aedc <HAL_TIM_PeriodElapsedCallback+0x18f4>)
 800ae78:	4613      	mov	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	440b      	add	r3, r1
 800ae82:	3304      	adds	r3, #4
 800ae84:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800ae86:	4a0b      	ldr	r2, [pc, #44]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ae88:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki1) {
 800ae8a:	4b0a      	ldr	r3, [pc, #40]	; (800aeb4 <HAL_TIM_PeriodElapsedCallback+0x18cc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	220b      	movs	r2, #11
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d102      	bne.n	800ae9a <HAL_TIM_PeriodElapsedCallback+0x18b2>
								Wygrana = 1;
 800ae94:	4b0d      	ldr	r3, [pc, #52]	; (800aecc <HAL_TIM_PeriodElapsedCallback+0x18e4>)
 800ae96:	2201      	movs	r2, #1
 800ae98:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniY = 0;
 800ae9a:	4b11      	ldr	r3, [pc, #68]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniY += 1;
 800aea0:	4b0f      	ldr	r3, [pc, #60]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	3301      	adds	r3, #1
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	4b0d      	ldr	r3, [pc, #52]	; (800aee0 <HAL_TIM_PeriodElapsedCallback+0x18f8>)
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	e324      	b.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
 800aeb0:	20000642 	.word	0x20000642
 800aeb4:	200005c8 	.word	0x200005c8
 800aeb8:	0807f71c 	.word	0x0807f71c
 800aebc:	20000658 	.word	0x20000658
 800aec0:	200005c4 	.word	0x200005c4
 800aec4:	200005a2 	.word	0x200005a2
 800aec8:	20000644 	.word	0x20000644
 800aecc:	200005fe 	.word	0x200005fe
 800aed0:	20000610 	.word	0x20000610
 800aed4:	200005e4 	.word	0x200005e4
 800aed8:	20000628 	.word	0x20000628
 800aedc:	0807f0a4 	.word	0x0807f0a4
 800aee0:	200005b0 	.word	0x200005b0
 800aee4:	200005a0 	.word	0x200005a0

				}

			} else if (WybranyPoziom == 1) {
 800aee8:	4b90      	ldr	r3, [pc, #576]	; (800b12c <HAL_TIM_PeriodElapsedCallback+0x1b44>)
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	f040 808b 	bne.w	800b00a <HAL_TIM_PeriodElapsedCallback+0x1a22>
				if (PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2] != 0
 800aef4:	4b8e      	ldr	r3, [pc, #568]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	498e      	ldr	r1, [pc, #568]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800aefa:	4613      	mov	r3, r2
 800aefc:	005b      	lsls	r3, r3, #1
 800aefe:	4413      	add	r3, r2
 800af00:	00db      	lsls	r3, r3, #3
 800af02:	440b      	add	r3, r1
 800af04:	3310      	adds	r3, #16
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 82f6 	beq.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								< PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].Y
 800af0e:	4b88      	ldr	r3, [pc, #544]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4988      	ldr	r1, [pc, #544]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800af14:	4613      	mov	r3, r2
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	4413      	add	r3, r2
 800af1a:	00db      	lsls	r3, r3, #3
 800af1c:	440b      	add	r3, r1
 800af1e:	3310      	adds	r3, #16
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4984      	ldr	r1, [pc, #528]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800af24:	4613      	mov	r3, r2
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	4413      	add	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	440b      	add	r3, r1
 800af2e:	3302      	adds	r3, #2
 800af30:	881a      	ldrh	r2, [r3, #0]
 800af32:	4b81      	ldr	r3, [pc, #516]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b29b      	uxth	r3, r3
						&& Y
 800af38:	429a      	cmp	r2, r3
 800af3a:	f240 82de 	bls.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].X) {
 800af3e:	4b7c      	ldr	r3, [pc, #496]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	497c      	ldr	r1, [pc, #496]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800af44:	4613      	mov	r3, r2
 800af46:	005b      	lsls	r3, r3, #1
 800af48:	4413      	add	r3, r2
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	440b      	add	r3, r1
 800af4e:	3310      	adds	r3, #16
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	4978      	ldr	r1, [pc, #480]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800af54:	4613      	mov	r3, r2
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	4413      	add	r3, r2
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	440b      	add	r3, r1
 800af5e:	881a      	ldrh	r2, [r3, #0]
 800af60:	4b76      	ldr	r3, [pc, #472]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x1b54>)
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	b29b      	uxth	r3, r3
						&& X
 800af66:	429a      	cmp	r2, r3
 800af68:	f040 82c7 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieDodatniY > SPOWOLNIENIE_KULKI) {
 800af6c:	4b74      	ldr	r3, [pc, #464]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b05      	cmp	r3, #5
 800af74:	d941      	bls.n	800affa <HAL_TIM_PeriodElapsedCallback+0x1a12>
						PoprzednieY = Y;
 800af76:	4b70      	ldr	r3, [pc, #448]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b71      	ldr	r3, [pc, #452]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x1b5c>)
 800af7e:	801a      	strh	r2, [r3, #0]
						Y += 1;
 800af80:	4b6d      	ldr	r3, [pc, #436]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800af82:	881b      	ldrh	r3, [r3, #0]
 800af84:	b29b      	uxth	r3, r3
 800af86:	3301      	adds	r3, #1
 800af88:	b29a      	uxth	r2, r3
 800af8a:	4b6b      	ldr	r3, [pc, #428]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800af8c:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].Y) {
 800af8e:	4b68      	ldr	r3, [pc, #416]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4968      	ldr	r1, [pc, #416]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800af94:	4613      	mov	r3, r2
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	4413      	add	r3, r2
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	440b      	add	r3, r1
 800af9e:	3310      	adds	r3, #16
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4964      	ldr	r1, [pc, #400]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800afa4:	4613      	mov	r3, r2
 800afa6:	005b      	lsls	r3, r3, #1
 800afa8:	4413      	add	r3, r2
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	440b      	add	r3, r1
 800afae:	3302      	adds	r3, #2
 800afb0:	881a      	ldrh	r2, [r3, #0]
 800afb2:	4b61      	ldr	r3, [pc, #388]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800afb4:	881b      	ldrh	r3, [r3, #0]
 800afb6:	b29b      	uxth	r3, r3
						if (Y
 800afb8:	429a      	cmp	r2, r3
 800afba:	d11b      	bne.n	800aff4 <HAL_TIM_PeriodElapsedCallback+0x1a0c>
							PozycjaNaSciezce =
									PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[2]].NumerPunktu;
 800afbc:	4b5c      	ldr	r3, [pc, #368]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	495c      	ldr	r1, [pc, #368]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800afc2:	4613      	mov	r3, r2
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	4413      	add	r3, r2
 800afc8:	00db      	lsls	r3, r3, #3
 800afca:	440b      	add	r3, r1
 800afcc:	3310      	adds	r3, #16
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	4958      	ldr	r1, [pc, #352]	; (800b134 <HAL_TIM_PeriodElapsedCallback+0x1b4c>)
 800afd2:	4613      	mov	r3, r2
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	4413      	add	r3, r2
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	440b      	add	r3, r1
 800afdc:	3304      	adds	r3, #4
 800afde:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800afe0:	4a53      	ldr	r2, [pc, #332]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800afe2:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki2) {
 800afe4:	4b52      	ldr	r3, [pc, #328]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2238      	movs	r2, #56	; 0x38
 800afea:	4293      	cmp	r3, r2
 800afec:	d102      	bne.n	800aff4 <HAL_TIM_PeriodElapsedCallback+0x1a0c>
								Wygrana = 1;
 800afee:	4b56      	ldr	r3, [pc, #344]	; (800b148 <HAL_TIM_PeriodElapsedCallback+0x1b60>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniY = 0;
 800aff4:	4b52      	ldr	r3, [pc, #328]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800aff6:	2200      	movs	r2, #0
 800aff8:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniY += 1;
 800affa:	4b51      	ldr	r3, [pc, #324]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	3301      	adds	r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	4b4e      	ldr	r3, [pc, #312]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800b006:	701a      	strb	r2, [r3, #0]
 800b008:	e277      	b.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
				}

			} else if (WybranyPoziom == 2) {
 800b00a:	4b48      	ldr	r3, [pc, #288]	; (800b12c <HAL_TIM_PeriodElapsedCallback+0x1b44>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	f040 8272 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
				if (PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[2] != 0
 800b016:	4b46      	ldr	r3, [pc, #280]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	494c      	ldr	r1, [pc, #304]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b01c:	4613      	mov	r3, r2
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	4413      	add	r3, r2
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	440b      	add	r3, r1
 800b026:	3310      	adds	r3, #16
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 8265 	beq.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								< PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[2]].Y
 800b030:	4b3f      	ldr	r3, [pc, #252]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	4945      	ldr	r1, [pc, #276]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b036:	4613      	mov	r3, r2
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	4413      	add	r3, r2
 800b03c:	00db      	lsls	r3, r3, #3
 800b03e:	440b      	add	r3, r1
 800b040:	3310      	adds	r3, #16
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4941      	ldr	r1, [pc, #260]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b046:	4613      	mov	r3, r2
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	4413      	add	r3, r2
 800b04c:	00db      	lsls	r3, r3, #3
 800b04e:	440b      	add	r3, r1
 800b050:	3302      	adds	r3, #2
 800b052:	881a      	ldrh	r2, [r3, #0]
 800b054:	4b38      	ldr	r3, [pc, #224]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800b056:	881b      	ldrh	r3, [r3, #0]
 800b058:	b29b      	uxth	r3, r3
						&& Y
 800b05a:	429a      	cmp	r2, r3
 800b05c:	f240 824d 	bls.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[2]].X) {
 800b060:	4b33      	ldr	r3, [pc, #204]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	4939      	ldr	r1, [pc, #228]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b066:	4613      	mov	r3, r2
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	4413      	add	r3, r2
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	440b      	add	r3, r1
 800b070:	3310      	adds	r3, #16
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	4935      	ldr	r1, [pc, #212]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b076:	4613      	mov	r3, r2
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	4413      	add	r3, r2
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	440b      	add	r3, r1
 800b080:	881a      	ldrh	r2, [r3, #0]
 800b082:	4b2e      	ldr	r3, [pc, #184]	; (800b13c <HAL_TIM_PeriodElapsedCallback+0x1b54>)
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	b29b      	uxth	r3, r3
						&& X
 800b088:	429a      	cmp	r2, r3
 800b08a:	f040 8236 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieDodatniY > SPOWOLNIENIE_KULKI) {
 800b08e:	4b2c      	ldr	r3, [pc, #176]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b05      	cmp	r3, #5
 800b096:	d941      	bls.n	800b11c <HAL_TIM_PeriodElapsedCallback+0x1b34>
						PoprzednieY = Y;
 800b098:	4b27      	ldr	r3, [pc, #156]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800b09a:	881b      	ldrh	r3, [r3, #0]
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	4b29      	ldr	r3, [pc, #164]	; (800b144 <HAL_TIM_PeriodElapsedCallback+0x1b5c>)
 800b0a0:	801a      	strh	r2, [r3, #0]
						Y += 1;
 800b0a2:	4b25      	ldr	r3, [pc, #148]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800b0a4:	881b      	ldrh	r3, [r3, #0]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	4b22      	ldr	r3, [pc, #136]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800b0ae:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[2]].Y) {
 800b0b0:	4b1f      	ldr	r3, [pc, #124]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	4925      	ldr	r1, [pc, #148]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	440b      	add	r3, r1
 800b0c0:	3310      	adds	r3, #16
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	4921      	ldr	r1, [pc, #132]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	4413      	add	r3, r2
 800b0cc:	00db      	lsls	r3, r3, #3
 800b0ce:	440b      	add	r3, r1
 800b0d0:	3302      	adds	r3, #2
 800b0d2:	881a      	ldrh	r2, [r3, #0]
 800b0d4:	4b18      	ldr	r3, [pc, #96]	; (800b138 <HAL_TIM_PeriodElapsedCallback+0x1b50>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
						if (Y
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d11b      	bne.n	800b116 <HAL_TIM_PeriodElapsedCallback+0x1b2e>
							PozycjaNaSciezce =
									PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[2]].NumerPunktu;
 800b0de:	4b14      	ldr	r3, [pc, #80]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b0e0:	681a      	ldr	r2, [r3, #0]
 800b0e2:	491a      	ldr	r1, [pc, #104]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	005b      	lsls	r3, r3, #1
 800b0e8:	4413      	add	r3, r2
 800b0ea:	00db      	lsls	r3, r3, #3
 800b0ec:	440b      	add	r3, r1
 800b0ee:	3310      	adds	r3, #16
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4916      	ldr	r1, [pc, #88]	; (800b14c <HAL_TIM_PeriodElapsedCallback+0x1b64>)
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	4413      	add	r3, r2
 800b0fa:	00db      	lsls	r3, r3, #3
 800b0fc:	440b      	add	r3, r1
 800b0fe:	3304      	adds	r3, #4
 800b100:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800b102:	4a0b      	ldr	r2, [pc, #44]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b104:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki3) {
 800b106:	4b0a      	ldr	r3, [pc, #40]	; (800b130 <HAL_TIM_PeriodElapsedCallback+0x1b48>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	224b      	movs	r2, #75	; 0x4b
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d102      	bne.n	800b116 <HAL_TIM_PeriodElapsedCallback+0x1b2e>
								Wygrana = 1;
 800b110:	4b0d      	ldr	r3, [pc, #52]	; (800b148 <HAL_TIM_PeriodElapsedCallback+0x1b60>)
 800b112:	2201      	movs	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieDodatniY = 0;
 800b116:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800b118:	2200      	movs	r2, #0
 800b11a:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieDodatniY += 1;
 800b11c:	4b08      	ldr	r3, [pc, #32]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	b2db      	uxtb	r3, r3
 800b122:	3301      	adds	r3, #1
 800b124:	b2da      	uxtb	r2, r3
 800b126:	4b06      	ldr	r3, [pc, #24]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x1b58>)
 800b128:	701a      	strb	r2, [r3, #0]
 800b12a:	e1e6      	b.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
 800b12c:	20000642 	.word	0x20000642
 800b130:	200005c8 	.word	0x200005c8
 800b134:	0807f1c4 	.word	0x0807f1c4
 800b138:	200005c4 	.word	0x200005c4
 800b13c:	20000658 	.word	0x20000658
 800b140:	200005b0 	.word	0x200005b0
 800b144:	200005a0 	.word	0x200005a0
 800b148:	200005fe 	.word	0x200005fe
 800b14c:	0807f71c 	.word	0x0807f71c
				}
			}

		} else if (X_post < -5000) //bylo -10000
 800b150:	4b96      	ldr	r3, [pc, #600]	; (800b3ac <HAL_TIM_PeriodElapsedCallback+0x1dc4>)
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a96      	ldr	r2, [pc, #600]	; (800b3b0 <HAL_TIM_PeriodElapsedCallback+0x1dc8>)
 800b156:	4293      	cmp	r3, r2
 800b158:	f280 81cf 	bge.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
				{
			fMovedX = 1;
 800b15c:	4b95      	ldr	r3, [pc, #596]	; (800b3b4 <HAL_TIM_PeriodElapsedCallback+0x1dcc>)
 800b15e:	2201      	movs	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]
			fMovedY = 1;
 800b162:	4b95      	ldr	r3, [pc, #596]	; (800b3b8 <HAL_TIM_PeriodElapsedCallback+0x1dd0>)
 800b164:	2201      	movs	r2, #1
 800b166:	701a      	strb	r2, [r3, #0]

			/*if (Y > 25)
			 Y -= 1;*/

			if (WybranyPoziom == 0) {
 800b168:	4b94      	ldr	r3, [pc, #592]	; (800b3bc <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 808b 	bne.w	800b28a <HAL_TIM_PeriodElapsedCallback+0x1ca2>
				if (PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3] != 0
 800b174:	4b92      	ldr	r3, [pc, #584]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	4992      	ldr	r1, [pc, #584]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b17a:	4613      	mov	r3, r2
 800b17c:	005b      	lsls	r3, r3, #1
 800b17e:	4413      	add	r3, r2
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	440b      	add	r3, r1
 800b184:	3314      	adds	r3, #20
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 81b6 	beq.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								> PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].Y
 800b18e:	4b8c      	ldr	r3, [pc, #560]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	498c      	ldr	r1, [pc, #560]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b194:	4613      	mov	r3, r2
 800b196:	005b      	lsls	r3, r3, #1
 800b198:	4413      	add	r3, r2
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	440b      	add	r3, r1
 800b19e:	3314      	adds	r3, #20
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	4988      	ldr	r1, [pc, #544]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	4413      	add	r3, r2
 800b1aa:	00db      	lsls	r3, r3, #3
 800b1ac:	440b      	add	r3, r1
 800b1ae:	3302      	adds	r3, #2
 800b1b0:	881a      	ldrh	r2, [r3, #0]
 800b1b2:	4b85      	ldr	r3, [pc, #532]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b1b4:	881b      	ldrh	r3, [r3, #0]
 800b1b6:	b29b      	uxth	r3, r3
						&& Y
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	f080 819e 	bcs.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].X) {
 800b1be:	4b80      	ldr	r3, [pc, #512]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	4980      	ldr	r1, [pc, #512]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	00db      	lsls	r3, r3, #3
 800b1cc:	440b      	add	r3, r1
 800b1ce:	3314      	adds	r3, #20
 800b1d0:	681a      	ldr	r2, [r3, #0]
 800b1d2:	497c      	ldr	r1, [pc, #496]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	005b      	lsls	r3, r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	440b      	add	r3, r1
 800b1de:	881a      	ldrh	r2, [r3, #0]
 800b1e0:	4b7a      	ldr	r3, [pc, #488]	; (800b3cc <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b29b      	uxth	r3, r3
						&& X
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	f040 8187 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieUjemnyY > SPOWOLNIENIE_KULKI) {
 800b1ec:	4b78      	ldr	r3, [pc, #480]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b05      	cmp	r3, #5
 800b1f4:	d941      	bls.n	800b27a <HAL_TIM_PeriodElapsedCallback+0x1c92>
						PoprzednieY = Y;
 800b1f6:	4b74      	ldr	r3, [pc, #464]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	4b75      	ldr	r3, [pc, #468]	; (800b3d4 <HAL_TIM_PeriodElapsedCallback+0x1dec>)
 800b1fe:	801a      	strh	r2, [r3, #0]
						Y -= 1;
 800b200:	4b71      	ldr	r3, [pc, #452]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b202:	881b      	ldrh	r3, [r3, #0]
 800b204:	b29b      	uxth	r3, r3
 800b206:	3b01      	subs	r3, #1
 800b208:	b29a      	uxth	r2, r3
 800b20a:	4b6f      	ldr	r3, [pc, #444]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b20c:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].Y) {
 800b20e:	4b6c      	ldr	r3, [pc, #432]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	496c      	ldr	r1, [pc, #432]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b214:	4613      	mov	r3, r2
 800b216:	005b      	lsls	r3, r3, #1
 800b218:	4413      	add	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	440b      	add	r3, r1
 800b21e:	3314      	adds	r3, #20
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	4968      	ldr	r1, [pc, #416]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b224:	4613      	mov	r3, r2
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	4413      	add	r3, r2
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	440b      	add	r3, r1
 800b22e:	3302      	adds	r3, #2
 800b230:	881a      	ldrh	r2, [r3, #0]
 800b232:	4b65      	ldr	r3, [pc, #404]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b234:	881b      	ldrh	r3, [r3, #0]
 800b236:	b29b      	uxth	r3, r3
						if (Y
 800b238:	429a      	cmp	r2, r3
 800b23a:	d11b      	bne.n	800b274 <HAL_TIM_PeriodElapsedCallback+0x1c8c>
							PozycjaNaSciezce =
									PunktySciezki1[PunktySciezki1[PozycjaNaSciezce].SasiedniePunkty[3]].NumerPunktu;
 800b23c:	4b60      	ldr	r3, [pc, #384]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	4960      	ldr	r1, [pc, #384]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b242:	4613      	mov	r3, r2
 800b244:	005b      	lsls	r3, r3, #1
 800b246:	4413      	add	r3, r2
 800b248:	00db      	lsls	r3, r3, #3
 800b24a:	440b      	add	r3, r1
 800b24c:	3314      	adds	r3, #20
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	495c      	ldr	r1, [pc, #368]	; (800b3c4 <HAL_TIM_PeriodElapsedCallback+0x1ddc>)
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	440b      	add	r3, r1
 800b25c:	3304      	adds	r3, #4
 800b25e:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800b260:	4a57      	ldr	r2, [pc, #348]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b262:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki1) {
 800b264:	4b56      	ldr	r3, [pc, #344]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	220b      	movs	r2, #11
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d102      	bne.n	800b274 <HAL_TIM_PeriodElapsedCallback+0x1c8c>
								Wygrana = 1;
 800b26e:	4b5a      	ldr	r3, [pc, #360]	; (800b3d8 <HAL_TIM_PeriodElapsedCallback+0x1df0>)
 800b270:	2201      	movs	r2, #1
 800b272:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieUjemnyY = 0;
 800b274:	4b56      	ldr	r3, [pc, #344]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b276:	2200      	movs	r2, #0
 800b278:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyY += 1;
 800b27a:	4b55      	ldr	r3, [pc, #340]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b27c:	781b      	ldrb	r3, [r3, #0]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	3301      	adds	r3, #1
 800b282:	b2da      	uxtb	r2, r3
 800b284:	4b52      	ldr	r3, [pc, #328]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b286:	701a      	strb	r2, [r3, #0]
 800b288:	e137      	b.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
				}

			} else if (WybranyPoziom == 1) {
 800b28a:	4b4c      	ldr	r3, [pc, #304]	; (800b3bc <HAL_TIM_PeriodElapsedCallback+0x1dd4>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	f040 80a5 	bne.w	800b3e0 <HAL_TIM_PeriodElapsedCallback+0x1df8>
				if (PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3] != 0
 800b296:	4b4a      	ldr	r3, [pc, #296]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	4950      	ldr	r1, [pc, #320]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b29c:	4613      	mov	r3, r2
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	00db      	lsls	r3, r3, #3
 800b2a4:	440b      	add	r3, r1
 800b2a6:	3314      	adds	r3, #20
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8125 	beq.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								> PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].Y
 800b2b0:	4b43      	ldr	r3, [pc, #268]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	4949      	ldr	r1, [pc, #292]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	4413      	add	r3, r2
 800b2bc:	00db      	lsls	r3, r3, #3
 800b2be:	440b      	add	r3, r1
 800b2c0:	3314      	adds	r3, #20
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	4945      	ldr	r1, [pc, #276]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4413      	add	r3, r2
 800b2cc:	00db      	lsls	r3, r3, #3
 800b2ce:	440b      	add	r3, r1
 800b2d0:	3302      	adds	r3, #2
 800b2d2:	881a      	ldrh	r2, [r3, #0]
 800b2d4:	4b3c      	ldr	r3, [pc, #240]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	b29b      	uxth	r3, r3
						&& Y
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	f080 810d 	bcs.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].X) {
 800b2e0:	4b37      	ldr	r3, [pc, #220]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	493d      	ldr	r1, [pc, #244]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	005b      	lsls	r3, r3, #1
 800b2ea:	4413      	add	r3, r2
 800b2ec:	00db      	lsls	r3, r3, #3
 800b2ee:	440b      	add	r3, r1
 800b2f0:	3314      	adds	r3, #20
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	4939      	ldr	r1, [pc, #228]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	4413      	add	r3, r2
 800b2fc:	00db      	lsls	r3, r3, #3
 800b2fe:	440b      	add	r3, r1
 800b300:	881a      	ldrh	r2, [r3, #0]
 800b302:	4b32      	ldr	r3, [pc, #200]	; (800b3cc <HAL_TIM_PeriodElapsedCallback+0x1de4>)
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
						&& X
 800b308:	429a      	cmp	r2, r3
 800b30a:	f040 80f6 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieUjemnyY > SPOWOLNIENIE_KULKI) {
 800b30e:	4b30      	ldr	r3, [pc, #192]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b05      	cmp	r3, #5
 800b316:	d941      	bls.n	800b39c <HAL_TIM_PeriodElapsedCallback+0x1db4>
						PoprzednieY = Y;
 800b318:	4b2b      	ldr	r3, [pc, #172]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b31a:	881b      	ldrh	r3, [r3, #0]
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	4b2d      	ldr	r3, [pc, #180]	; (800b3d4 <HAL_TIM_PeriodElapsedCallback+0x1dec>)
 800b320:	801a      	strh	r2, [r3, #0]
						Y -= 1;
 800b322:	4b29      	ldr	r3, [pc, #164]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	b29b      	uxth	r3, r3
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	4b26      	ldr	r3, [pc, #152]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b32e:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].Y) {
 800b330:	4b23      	ldr	r3, [pc, #140]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4929      	ldr	r1, [pc, #164]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b336:	4613      	mov	r3, r2
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	4413      	add	r3, r2
 800b33c:	00db      	lsls	r3, r3, #3
 800b33e:	440b      	add	r3, r1
 800b340:	3314      	adds	r3, #20
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	4925      	ldr	r1, [pc, #148]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b346:	4613      	mov	r3, r2
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	4413      	add	r3, r2
 800b34c:	00db      	lsls	r3, r3, #3
 800b34e:	440b      	add	r3, r1
 800b350:	3302      	adds	r3, #2
 800b352:	881a      	ldrh	r2, [r3, #0]
 800b354:	4b1c      	ldr	r3, [pc, #112]	; (800b3c8 <HAL_TIM_PeriodElapsedCallback+0x1de0>)
 800b356:	881b      	ldrh	r3, [r3, #0]
 800b358:	b29b      	uxth	r3, r3
						if (Y
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d11b      	bne.n	800b396 <HAL_TIM_PeriodElapsedCallback+0x1dae>
							PozycjaNaSciezce =
									PunktySciezki2[PunktySciezki2[PozycjaNaSciezce].SasiedniePunkty[3]].NumerPunktu;
 800b35e:	4b18      	ldr	r3, [pc, #96]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	491e      	ldr	r1, [pc, #120]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b364:	4613      	mov	r3, r2
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	4413      	add	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	440b      	add	r3, r1
 800b36e:	3314      	adds	r3, #20
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	491a      	ldr	r1, [pc, #104]	; (800b3dc <HAL_TIM_PeriodElapsedCallback+0x1df4>)
 800b374:	4613      	mov	r3, r2
 800b376:	005b      	lsls	r3, r3, #1
 800b378:	4413      	add	r3, r2
 800b37a:	00db      	lsls	r3, r3, #3
 800b37c:	440b      	add	r3, r1
 800b37e:	3304      	adds	r3, #4
 800b380:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800b382:	4a0f      	ldr	r2, [pc, #60]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b384:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki2) {
 800b386:	4b0e      	ldr	r3, [pc, #56]	; (800b3c0 <HAL_TIM_PeriodElapsedCallback+0x1dd8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2238      	movs	r2, #56	; 0x38
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d102      	bne.n	800b396 <HAL_TIM_PeriodElapsedCallback+0x1dae>
								Wygrana = 1;
 800b390:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <HAL_TIM_PeriodElapsedCallback+0x1df0>)
 800b392:	2201      	movs	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieUjemnyY = 0;
 800b396:	4b0e      	ldr	r3, [pc, #56]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b398:	2200      	movs	r2, #0
 800b39a:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyY += 1;
 800b39c:	4b0c      	ldr	r3, [pc, #48]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	4b0a      	ldr	r3, [pc, #40]	; (800b3d0 <HAL_TIM_PeriodElapsedCallback+0x1de8>)
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e0a6      	b.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
 800b3ac:	20000610 	.word	0x20000610
 800b3b0:	ffffec78 	.word	0xffffec78
 800b3b4:	200005e4 	.word	0x200005e4
 800b3b8:	20000628 	.word	0x20000628
 800b3bc:	20000642 	.word	0x20000642
 800b3c0:	200005c8 	.word	0x200005c8
 800b3c4:	0807f0a4 	.word	0x0807f0a4
 800b3c8:	200005c4 	.word	0x200005c4
 800b3cc:	20000658 	.word	0x20000658
 800b3d0:	20000604 	.word	0x20000604
 800b3d4:	200005a0 	.word	0x200005a0
 800b3d8:	200005fe 	.word	0x200005fe
 800b3dc:	0807f1c4 	.word	0x0807f1c4
				}

			} else if (WybranyPoziom == 2) {
 800b3e0:	4b72      	ldr	r3, [pc, #456]	; (800b5ac <HAL_TIM_PeriodElapsedCallback+0x1fc4>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	f040 8087 	bne.w	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
				if (PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[3] != 0
 800b3ec:	4b70      	ldr	r3, [pc, #448]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	4970      	ldr	r1, [pc, #448]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	005b      	lsls	r3, r3, #1
 800b3f6:	4413      	add	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	440b      	add	r3, r1
 800b3fc:	3314      	adds	r3, #20
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d07a      	beq.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& Y
								> PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[3]].Y
 800b404:	4b6a      	ldr	r3, [pc, #424]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	496a      	ldr	r1, [pc, #424]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	3314      	adds	r3, #20
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	4966      	ldr	r1, [pc, #408]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b41a:	4613      	mov	r3, r2
 800b41c:	005b      	lsls	r3, r3, #1
 800b41e:	4413      	add	r3, r2
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	440b      	add	r3, r1
 800b424:	3302      	adds	r3, #2
 800b426:	881a      	ldrh	r2, [r3, #0]
 800b428:	4b63      	ldr	r3, [pc, #396]	; (800b5b8 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 800b42a:	881b      	ldrh	r3, [r3, #0]
 800b42c:	b29b      	uxth	r3, r3
						&& Y
 800b42e:	429a      	cmp	r2, r3
 800b430:	d263      	bcs.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
						&& X
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[3]].X) {
 800b432:	4b5f      	ldr	r3, [pc, #380]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	495f      	ldr	r1, [pc, #380]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b438:	4613      	mov	r3, r2
 800b43a:	005b      	lsls	r3, r3, #1
 800b43c:	4413      	add	r3, r2
 800b43e:	00db      	lsls	r3, r3, #3
 800b440:	440b      	add	r3, r1
 800b442:	3314      	adds	r3, #20
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	495b      	ldr	r1, [pc, #364]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b448:	4613      	mov	r3, r2
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4413      	add	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	440b      	add	r3, r1
 800b452:	881a      	ldrh	r2, [r3, #0]
 800b454:	4b59      	ldr	r3, [pc, #356]	; (800b5bc <HAL_TIM_PeriodElapsedCallback+0x1fd4>)
 800b456:	881b      	ldrh	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
						&& X
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d14d      	bne.n	800b4fa <HAL_TIM_PeriodElapsedCallback+0x1f12>
					if (OpoznienieUjemnyY > SPOWOLNIENIE_KULKI) {
 800b45e:	4b58      	ldr	r3, [pc, #352]	; (800b5c0 <HAL_TIM_PeriodElapsedCallback+0x1fd8>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	b2db      	uxtb	r3, r3
 800b464:	2b05      	cmp	r3, #5
 800b466:	d941      	bls.n	800b4ec <HAL_TIM_PeriodElapsedCallback+0x1f04>
						PoprzednieY = Y;
 800b468:	4b53      	ldr	r3, [pc, #332]	; (800b5b8 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	4b55      	ldr	r3, [pc, #340]	; (800b5c4 <HAL_TIM_PeriodElapsedCallback+0x1fdc>)
 800b470:	801a      	strh	r2, [r3, #0]
						Y -= 1;
 800b472:	4b51      	ldr	r3, [pc, #324]	; (800b5b8 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 800b474:	881b      	ldrh	r3, [r3, #0]
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	4b4e      	ldr	r3, [pc, #312]	; (800b5b8 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 800b47e:	801a      	strh	r2, [r3, #0]
						if (Y
								== PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[3]].Y) {
 800b480:	4b4b      	ldr	r3, [pc, #300]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b482:	681a      	ldr	r2, [r3, #0]
 800b484:	494b      	ldr	r1, [pc, #300]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b486:	4613      	mov	r3, r2
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	4413      	add	r3, r2
 800b48c:	00db      	lsls	r3, r3, #3
 800b48e:	440b      	add	r3, r1
 800b490:	3314      	adds	r3, #20
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	4947      	ldr	r1, [pc, #284]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b496:	4613      	mov	r3, r2
 800b498:	005b      	lsls	r3, r3, #1
 800b49a:	4413      	add	r3, r2
 800b49c:	00db      	lsls	r3, r3, #3
 800b49e:	440b      	add	r3, r1
 800b4a0:	3302      	adds	r3, #2
 800b4a2:	881a      	ldrh	r2, [r3, #0]
 800b4a4:	4b44      	ldr	r3, [pc, #272]	; (800b5b8 <HAL_TIM_PeriodElapsedCallback+0x1fd0>)
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
						if (Y
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d11b      	bne.n	800b4e6 <HAL_TIM_PeriodElapsedCallback+0x1efe>
							PozycjaNaSciezce =
									PunktySciezki3[PunktySciezki3[PozycjaNaSciezce].SasiedniePunkty[3]].NumerPunktu;
 800b4ae:	4b40      	ldr	r3, [pc, #256]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4940      	ldr	r1, [pc, #256]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	005b      	lsls	r3, r3, #1
 800b4b8:	4413      	add	r3, r2
 800b4ba:	00db      	lsls	r3, r3, #3
 800b4bc:	440b      	add	r3, r1
 800b4be:	3314      	adds	r3, #20
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	493c      	ldr	r1, [pc, #240]	; (800b5b4 <HAL_TIM_PeriodElapsedCallback+0x1fcc>)
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	4413      	add	r3, r2
 800b4ca:	00db      	lsls	r3, r3, #3
 800b4cc:	440b      	add	r3, r1
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	681b      	ldr	r3, [r3, #0]
							PozycjaNaSciezce =
 800b4d2:	4a37      	ldr	r2, [pc, #220]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b4d4:	6013      	str	r3, [r2, #0]

							if (PozycjaNaSciezce == IloscPunktowSciezki3) {
 800b4d6:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <HAL_TIM_PeriodElapsedCallback+0x1fc8>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	224b      	movs	r2, #75	; 0x4b
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d102      	bne.n	800b4e6 <HAL_TIM_PeriodElapsedCallback+0x1efe>
								Wygrana = 1;
 800b4e0:	4b39      	ldr	r3, [pc, #228]	; (800b5c8 <HAL_TIM_PeriodElapsedCallback+0x1fe0>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
							}
						}

						OpoznienieUjemnyY = 0;
 800b4e6:	4b36      	ldr	r3, [pc, #216]	; (800b5c0 <HAL_TIM_PeriodElapsedCallback+0x1fd8>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	701a      	strb	r2, [r3, #0]
					}

					OpoznienieUjemnyY += 1;
 800b4ec:	4b34      	ldr	r3, [pc, #208]	; (800b5c0 <HAL_TIM_PeriodElapsedCallback+0x1fd8>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	4b32      	ldr	r3, [pc, #200]	; (800b5c0 <HAL_TIM_PeriodElapsedCallback+0x1fd8>)
 800b4f8:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if (fMovedY == 1 && (Y_post <= 2500 && Y_post >= -2500) //bylo 10000
 800b4fa:	4b34      	ldr	r3, [pc, #208]	; (800b5cc <HAL_TIM_PeriodElapsedCallback+0x1fe4>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	2b01      	cmp	r3, #1
 800b502:	d10a      	bne.n	800b51a <HAL_TIM_PeriodElapsedCallback+0x1f32>
 800b504:	4b32      	ldr	r3, [pc, #200]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b50c:	4293      	cmp	r3, r2
 800b50e:	dc04      	bgt.n	800b51a <HAL_TIM_PeriodElapsedCallback+0x1f32>
 800b510:	4b2f      	ldr	r3, [pc, #188]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a2f      	ldr	r2, [pc, #188]	; (800b5d4 <HAL_TIM_PeriodElapsedCallback+0x1fec>)
 800b516:	4293      	cmp	r3, r2
 800b518:	da0a      	bge.n	800b530 <HAL_TIM_PeriodElapsedCallback+0x1f48>
		|| (Y_post > 20000 || Y_post < -20000)) {
 800b51a:	4b2d      	ldr	r3, [pc, #180]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b522:	4293      	cmp	r3, r2
 800b524:	dc04      	bgt.n	800b530 <HAL_TIM_PeriodElapsedCallback+0x1f48>
 800b526:	4b2a      	ldr	r3, [pc, #168]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a2b      	ldr	r2, [pc, #172]	; (800b5d8 <HAL_TIM_PeriodElapsedCallback+0x1ff0>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	da07      	bge.n	800b540 <HAL_TIM_PeriodElapsedCallback+0x1f58>
			ResetTimeY += 1;
 800b530:	4b2a      	ldr	r3, [pc, #168]	; (800b5dc <HAL_TIM_PeriodElapsedCallback+0x1ff4>)
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	b29b      	uxth	r3, r3
 800b536:	3301      	adds	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	4b28      	ldr	r3, [pc, #160]	; (800b5dc <HAL_TIM_PeriodElapsedCallback+0x1ff4>)
 800b53c:	801a      	strh	r2, [r3, #0]
 800b53e:	e012      	b.n	800b566 <HAL_TIM_PeriodElapsedCallback+0x1f7e>

		} else if (fMovedY == 1 && (Y_post > 2500 || Y_post < -2500)) //bylo 10000
 800b540:	4b22      	ldr	r3, [pc, #136]	; (800b5cc <HAL_TIM_PeriodElapsedCallback+0x1fe4>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b01      	cmp	r3, #1
 800b548:	d10d      	bne.n	800b566 <HAL_TIM_PeriodElapsedCallback+0x1f7e>
 800b54a:	4b21      	ldr	r3, [pc, #132]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b552:	4293      	cmp	r3, r2
 800b554:	dc04      	bgt.n	800b560 <HAL_TIM_PeriodElapsedCallback+0x1f78>
 800b556:	4b1e      	ldr	r3, [pc, #120]	; (800b5d0 <HAL_TIM_PeriodElapsedCallback+0x1fe8>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1e      	ldr	r2, [pc, #120]	; (800b5d4 <HAL_TIM_PeriodElapsedCallback+0x1fec>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	da02      	bge.n	800b566 <HAL_TIM_PeriodElapsedCallback+0x1f7e>
				{
			ResetTimeY = 0;
 800b560:	4b1e      	ldr	r3, [pc, #120]	; (800b5dc <HAL_TIM_PeriodElapsedCallback+0x1ff4>)
 800b562:	2200      	movs	r2, #0
 800b564:	801a      	strh	r2, [r3, #0]
		}

		if (fMovedX == 1 && (X_post <= 2500 && X_post >= -2500) //bylo 10000
 800b566:	4b1e      	ldr	r3, [pc, #120]	; (800b5e0 <HAL_TIM_PeriodElapsedCallback+0x1ff8>)
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d10a      	bne.n	800b586 <HAL_TIM_PeriodElapsedCallback+0x1f9e>
 800b570:	4b1c      	ldr	r3, [pc, #112]	; (800b5e4 <HAL_TIM_PeriodElapsedCallback+0x1ffc>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b578:	4293      	cmp	r3, r2
 800b57a:	dc04      	bgt.n	800b586 <HAL_TIM_PeriodElapsedCallback+0x1f9e>
 800b57c:	4b19      	ldr	r3, [pc, #100]	; (800b5e4 <HAL_TIM_PeriodElapsedCallback+0x1ffc>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a14      	ldr	r2, [pc, #80]	; (800b5d4 <HAL_TIM_PeriodElapsedCallback+0x1fec>)
 800b582:	4293      	cmp	r3, r2
 800b584:	da0a      	bge.n	800b59c <HAL_TIM_PeriodElapsedCallback+0x1fb4>
		|| (X_post > 20000 || X_post < -20000)) {
 800b586:	4b17      	ldr	r3, [pc, #92]	; (800b5e4 <HAL_TIM_PeriodElapsedCallback+0x1ffc>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800b58e:	4293      	cmp	r3, r2
 800b590:	dc04      	bgt.n	800b59c <HAL_TIM_PeriodElapsedCallback+0x1fb4>
 800b592:	4b14      	ldr	r3, [pc, #80]	; (800b5e4 <HAL_TIM_PeriodElapsedCallback+0x1ffc>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <HAL_TIM_PeriodElapsedCallback+0x1ff0>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	da27      	bge.n	800b5ec <HAL_TIM_PeriodElapsedCallback+0x2004>
			ResetTimeX += 1;
 800b59c:	4b12      	ldr	r3, [pc, #72]	; (800b5e8 <HAL_TIM_PeriodElapsedCallback+0x2000>)
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <HAL_TIM_PeriodElapsedCallback+0x2000>)
 800b5a8:	801a      	strh	r2, [r3, #0]
 800b5aa:	e032      	b.n	800b612 <HAL_TIM_PeriodElapsedCallback+0x202a>
 800b5ac:	20000642 	.word	0x20000642
 800b5b0:	200005c8 	.word	0x200005c8
 800b5b4:	0807f71c 	.word	0x0807f71c
 800b5b8:	200005c4 	.word	0x200005c4
 800b5bc:	20000658 	.word	0x20000658
 800b5c0:	20000604 	.word	0x20000604
 800b5c4:	200005a0 	.word	0x200005a0
 800b5c8:	200005fe 	.word	0x200005fe
 800b5cc:	20000628 	.word	0x20000628
 800b5d0:	20000654 	.word	0x20000654
 800b5d4:	fffff63c 	.word	0xfffff63c
 800b5d8:	ffffb1e0 	.word	0xffffb1e0
 800b5dc:	20000640 	.word	0x20000640
 800b5e0:	200005e4 	.word	0x200005e4
 800b5e4:	20000610 	.word	0x20000610
 800b5e8:	200005d6 	.word	0x200005d6

		} else if (fMovedX == 1 && (X_post > 2500 || X_post < -2500)) //bylo 10000
 800b5ec:	4b34      	ldr	r3, [pc, #208]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x20d8>)
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10d      	bne.n	800b612 <HAL_TIM_PeriodElapsedCallback+0x202a>
 800b5f6:	4b33      	ldr	r3, [pc, #204]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x20dc>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800b5fe:	4293      	cmp	r3, r2
 800b600:	dc04      	bgt.n	800b60c <HAL_TIM_PeriodElapsedCallback+0x2024>
 800b602:	4b30      	ldr	r3, [pc, #192]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x20dc>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a30      	ldr	r2, [pc, #192]	; (800b6c8 <HAL_TIM_PeriodElapsedCallback+0x20e0>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	da02      	bge.n	800b612 <HAL_TIM_PeriodElapsedCallback+0x202a>
				{
			ResetTimeX = 0;
 800b60c:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <HAL_TIM_PeriodElapsedCallback+0x20e4>)
 800b60e:	2200      	movs	r2, #0
 800b610:	801a      	strh	r2, [r3, #0]
		}

		if (ResetTimeX >= 500) {
 800b612:	4b2e      	ldr	r3, [pc, #184]	; (800b6cc <HAL_TIM_PeriodElapsedCallback+0x20e4>)
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b61c:	d308      	bcc.n	800b630 <HAL_TIM_PeriodElapsedCallback+0x2048>
			X_post = 0;
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <HAL_TIM_PeriodElapsedCallback+0x20dc>)
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]

			ResetTimeX = 0;
 800b624:	4b29      	ldr	r3, [pc, #164]	; (800b6cc <HAL_TIM_PeriodElapsedCallback+0x20e4>)
 800b626:	2200      	movs	r2, #0
 800b628:	801a      	strh	r2, [r3, #0]
			fMovedX = 0;
 800b62a:	4b25      	ldr	r3, [pc, #148]	; (800b6c0 <HAL_TIM_PeriodElapsedCallback+0x20d8>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	701a      	strb	r2, [r3, #0]
		}

		if (ResetTimeY >= 500) {
 800b630:	4b27      	ldr	r3, [pc, #156]	; (800b6d0 <HAL_TIM_PeriodElapsedCallback+0x20e8>)
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b63a:	d308      	bcc.n	800b64e <HAL_TIM_PeriodElapsedCallback+0x2066>
			Y_post = 0;
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <HAL_TIM_PeriodElapsedCallback+0x20ec>)
 800b63e:	2200      	movs	r2, #0
 800b640:	601a      	str	r2, [r3, #0]

			ResetTimeY = 0;
 800b642:	4b23      	ldr	r3, [pc, #140]	; (800b6d0 <HAL_TIM_PeriodElapsedCallback+0x20e8>)
 800b644:	2200      	movs	r2, #0
 800b646:	801a      	strh	r2, [r3, #0]
			fMovedY = 0;
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <HAL_TIM_PeriodElapsedCallback+0x20f0>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	701a      	strb	r2, [r3, #0]
		}

		if (StanGry == Gra && RozpoczetoNowaGre == 0) {
 800b64e:	4b23      	ldr	r3, [pc, #140]	; (800b6dc <HAL_TIM_PeriodElapsedCallback+0x20f4>)
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b01      	cmp	r3, #1
 800b656:	d127      	bne.n	800b6a8 <HAL_TIM_PeriodElapsedCallback+0x20c0>
 800b658:	4b21      	ldr	r3, [pc, #132]	; (800b6e0 <HAL_TIM_PeriodElapsedCallback+0x20f8>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d122      	bne.n	800b6a8 <HAL_TIM_PeriodElapsedCallback+0x20c0>
			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b666:	f7f6 fb19 	bl	8001c9c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(PoprzednieX - 6, PoprzednieY - 6, 13, 13);
 800b66a:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <HAL_TIM_PeriodElapsedCallback+0x20fc>)
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	3b06      	subs	r3, #6
 800b672:	b298      	uxth	r0, r3
 800b674:	4b1c      	ldr	r3, [pc, #112]	; (800b6e8 <HAL_TIM_PeriodElapsedCallback+0x2100>)
 800b676:	881b      	ldrh	r3, [r3, #0]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	3b06      	subs	r3, #6
 800b67c:	b299      	uxth	r1, r3
 800b67e:	230d      	movs	r3, #13
 800b680:	220d      	movs	r2, #13
 800b682:	f7f6 ff53 	bl	800252c <BSP_LCD_FillRect>

			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800b686:	4819      	ldr	r0, [pc, #100]	; (800b6ec <HAL_TIM_PeriodElapsedCallback+0x2104>)
 800b688:	f7f6 fb08 	bl	8001c9c <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(X, Y, 5);
 800b68c:	4b18      	ldr	r3, [pc, #96]	; (800b6f0 <HAL_TIM_PeriodElapsedCallback+0x2108>)
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	b298      	uxth	r0, r3
 800b692:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <HAL_TIM_PeriodElapsedCallback+0x210c>)
 800b694:	881b      	ldrh	r3, [r3, #0]
 800b696:	b29b      	uxth	r3, r3
 800b698:	2205      	movs	r2, #5
 800b69a:	4619      	mov	r1, r3
 800b69c:	f7f6 ffa0 	bl	80025e0 <BSP_LCD_FillCircle>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800b6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a4:	f7f6 fafa 	bl	8001c9c <BSP_LCD_SetTextColor>
		}
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a12      	ldr	r2, [pc, #72]	; (800b6f8 <HAL_TIM_PeriodElapsedCallback+0x2110>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d101      	bne.n	800b6b6 <HAL_TIM_PeriodElapsedCallback+0x20ce>
		HAL_IncTick();
 800b6b2:	f7f7 fc63 	bl	8002f7c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	200005e4 	.word	0x200005e4
 800b6c4:	20000610 	.word	0x20000610
 800b6c8:	fffff63c 	.word	0xfffff63c
 800b6cc:	200005d6 	.word	0x200005d6
 800b6d0:	20000640 	.word	0x20000640
 800b6d4:	20000654 	.word	0x20000654
 800b6d8:	20000628 	.word	0x20000628
 800b6dc:	20000629 	.word	0x20000629
 800b6e0:	20000620 	.word	0x20000620
 800b6e4:	20000644 	.word	0x20000644
 800b6e8:	200005a0 	.word	0x200005a0
 800b6ec:	ffff0000 	.word	0xffff0000
 800b6f0:	20000658 	.word	0x20000658
 800b6f4:	200005c4 	.word	0x200005c4
 800b6f8:	40001000 	.word	0x40001000

0800b6fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b700:	bf00      	nop
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
	...

0800b70c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800b710:	4b17      	ldr	r3, [pc, #92]	; (800b770 <MX_SPI5_Init+0x64>)
 800b712:	4a18      	ldr	r2, [pc, #96]	; (800b774 <MX_SPI5_Init+0x68>)
 800b714:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800b716:	4b16      	ldr	r3, [pc, #88]	; (800b770 <MX_SPI5_Init+0x64>)
 800b718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800b71c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800b71e:	4b14      	ldr	r3, [pc, #80]	; (800b770 <MX_SPI5_Init+0x64>)
 800b720:	2200      	movs	r2, #0
 800b722:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800b724:	4b12      	ldr	r3, [pc, #72]	; (800b770 <MX_SPI5_Init+0x64>)
 800b726:	2200      	movs	r2, #0
 800b728:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b72a:	4b11      	ldr	r3, [pc, #68]	; (800b770 <MX_SPI5_Init+0x64>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b730:	4b0f      	ldr	r3, [pc, #60]	; (800b770 <MX_SPI5_Init+0x64>)
 800b732:	2200      	movs	r2, #0
 800b734:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800b736:	4b0e      	ldr	r3, [pc, #56]	; (800b770 <MX_SPI5_Init+0x64>)
 800b738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b73c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800b73e:	4b0c      	ldr	r3, [pc, #48]	; (800b770 <MX_SPI5_Init+0x64>)
 800b740:	2218      	movs	r2, #24
 800b742:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b744:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <MX_SPI5_Init+0x64>)
 800b746:	2200      	movs	r2, #0
 800b748:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800b74a:	4b09      	ldr	r3, [pc, #36]	; (800b770 <MX_SPI5_Init+0x64>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b750:	4b07      	ldr	r3, [pc, #28]	; (800b770 <MX_SPI5_Init+0x64>)
 800b752:	2200      	movs	r2, #0
 800b754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <MX_SPI5_Init+0x64>)
 800b758:	220a      	movs	r2, #10
 800b75a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800b75c:	4804      	ldr	r0, [pc, #16]	; (800b770 <MX_SPI5_Init+0x64>)
 800b75e:	f7fa f9a2 	bl	8005aa6 <HAL_SPI_Init>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d001      	beq.n	800b76c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800b768:	f7ff ffc8 	bl	800b6fc <Error_Handler>
  }

}
 800b76c:	bf00      	nop
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20000520 	.word	0x20000520
 800b774:	40015000 	.word	0x40015000

0800b778 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b08a      	sub	sp, #40	; 0x28
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b780:	f107 0314 	add.w	r3, r7, #20
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	605a      	str	r2, [r3, #4]
 800b78a:	609a      	str	r2, [r3, #8]
 800b78c:	60da      	str	r2, [r3, #12]
 800b78e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a19      	ldr	r2, [pc, #100]	; (800b7fc <HAL_SPI_MspInit+0x84>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d12c      	bne.n	800b7f4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800b79a:	2300      	movs	r3, #0
 800b79c:	613b      	str	r3, [r7, #16]
 800b79e:	4a18      	ldr	r2, [pc, #96]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7a0:	4b17      	ldr	r3, [pc, #92]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b7aa:	4b15      	ldr	r3, [pc, #84]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	60fb      	str	r3, [r7, #12]
 800b7ba:	4a11      	ldr	r2, [pc, #68]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7bc:	4b10      	ldr	r3, [pc, #64]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6313      	str	r3, [r2, #48]	; 0x30
 800b7c6:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <HAL_SPI_MspInit+0x88>)
 800b7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ca:	f003 0320 	and.w	r3, r3, #32
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800b7d2:	f44f 7360 	mov.w	r3, #896	; 0x380
 800b7d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800b7e4:	2305      	movs	r3, #5
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4805      	ldr	r0, [pc, #20]	; (800b804 <HAL_SPI_MspInit+0x8c>)
 800b7f0:	f7f8 fa5c 	bl	8003cac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800b7f4:	bf00      	nop
 800b7f6:	3728      	adds	r7, #40	; 0x28
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	40015000 	.word	0x40015000
 800b800:	40023800 	.word	0x40023800
 800b804:	40021400 	.word	0x40021400

0800b808 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a08      	ldr	r2, [pc, #32]	; (800b838 <HAL_SPI_MspDeInit+0x30>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d10a      	bne.n	800b830 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800b81a:	4a08      	ldr	r2, [pc, #32]	; (800b83c <HAL_SPI_MspDeInit+0x34>)
 800b81c:	4b07      	ldr	r3, [pc, #28]	; (800b83c <HAL_SPI_MspDeInit+0x34>)
 800b81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b820:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b824:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800b826:	f44f 7160 	mov.w	r1, #896	; 0x380
 800b82a:	4805      	ldr	r0, [pc, #20]	; (800b840 <HAL_SPI_MspDeInit+0x38>)
 800b82c:	f7f8 fbe8 	bl	8004000 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
} 
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	40015000 	.word	0x40015000
 800b83c:	40023800 	.word	0x40023800
 800b840:	40021400 	.word	0x40021400

0800b844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b84a:	2300      	movs	r3, #0
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	4a10      	ldr	r2, [pc, #64]	; (800b890 <HAL_MspInit+0x4c>)
 800b850:	4b0f      	ldr	r3, [pc, #60]	; (800b890 <HAL_MspInit+0x4c>)
 800b852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b858:	6453      	str	r3, [r2, #68]	; 0x44
 800b85a:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <HAL_MspInit+0x4c>)
 800b85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b862:	607b      	str	r3, [r7, #4]
 800b864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b866:	2300      	movs	r3, #0
 800b868:	603b      	str	r3, [r7, #0]
 800b86a:	4a09      	ldr	r2, [pc, #36]	; (800b890 <HAL_MspInit+0x4c>)
 800b86c:	4b08      	ldr	r3, [pc, #32]	; (800b890 <HAL_MspInit+0x4c>)
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b874:	6413      	str	r3, [r2, #64]	; 0x40
 800b876:	4b06      	ldr	r3, [pc, #24]	; (800b890 <HAL_MspInit+0x4c>)
 800b878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop
 800b890:	40023800 	.word	0x40023800

0800b894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	; 0x30
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	6879      	ldr	r1, [r7, #4]
 800b8a8:	2036      	movs	r0, #54	; 0x36
 800b8aa:	f7f7 fc5f 	bl	800316c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800b8ae:	2036      	movs	r0, #54	; 0x36
 800b8b0:	f7f7 fc78 	bl	80031a4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	4a1f      	ldr	r2, [pc, #124]	; (800b938 <HAL_InitTick+0xa4>)
 800b8ba:	4b1f      	ldr	r3, [pc, #124]	; (800b938 <HAL_InitTick+0xa4>)
 800b8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8be:	f043 0310 	orr.w	r3, r3, #16
 800b8c2:	6413      	str	r3, [r2, #64]	; 0x40
 800b8c4:	4b1c      	ldr	r3, [pc, #112]	; (800b938 <HAL_InitTick+0xa4>)
 800b8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c8:	f003 0310 	and.w	r3, r3, #16
 800b8cc:	60fb      	str	r3, [r7, #12]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b8d0:	f107 0210 	add.w	r2, r7, #16
 800b8d4:	f107 0314 	add.w	r3, r7, #20
 800b8d8:	4611      	mov	r1, r2
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7f9 fe8e 	bl	80055fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b8e0:	f7f9 fe64 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	005b      	lsls	r3, r3, #1
 800b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	4a13      	ldr	r2, [pc, #76]	; (800b93c <HAL_InitTick+0xa8>)
 800b8ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f2:	0c9b      	lsrs	r3, r3, #18
 800b8f4:	3b01      	subs	r3, #1
 800b8f6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <HAL_InitTick+0xac>)
 800b8fa:	4a12      	ldr	r2, [pc, #72]	; (800b944 <HAL_InitTick+0xb0>)
 800b8fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800b8fe:	4b10      	ldr	r3, [pc, #64]	; (800b940 <HAL_InitTick+0xac>)
 800b900:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b904:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b906:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <HAL_InitTick+0xac>)
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b90c:	4b0c      	ldr	r3, [pc, #48]	; (800b940 <HAL_InitTick+0xac>)
 800b90e:	2200      	movs	r2, #0
 800b910:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <HAL_InitTick+0xac>)
 800b914:	2200      	movs	r2, #0
 800b916:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b918:	4809      	ldr	r0, [pc, #36]	; (800b940 <HAL_InitTick+0xac>)
 800b91a:	f7fa fdf2 	bl	8006502 <HAL_TIM_Base_Init>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d104      	bne.n	800b92e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b924:	4806      	ldr	r0, [pc, #24]	; (800b940 <HAL_InitTick+0xac>)
 800b926:	f7fa fe17 	bl	8006558 <HAL_TIM_Base_Start_IT>
 800b92a:	4603      	mov	r3, r0
 800b92c:	e000      	b.n	800b930 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
}
 800b930:	4618      	mov	r0, r3
 800b932:	3730      	adds	r7, #48	; 0x30
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40023800 	.word	0x40023800
 800b93c:	431bde83 	.word	0x431bde83
 800b940:	2000065c 	.word	0x2000065c
 800b944:	40001000 	.word	0x40001000

0800b948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b948:	b480      	push	{r7}
 800b94a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b94c:	bf00      	nop
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b956:	b480      	push	{r7}
 800b958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b95a:	e7fe      	b.n	800b95a <HardFault_Handler+0x4>

0800b95c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b960:	e7fe      	b.n	800b960 <MemManage_Handler+0x4>

0800b962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b962:	b480      	push	{r7}
 800b964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b966:	e7fe      	b.n	800b966 <BusFault_Handler+0x4>

0800b968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b96c:	e7fe      	b.n	800b96c <UsageFault_Handler+0x4>

0800b96e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b96e:	b480      	push	{r7}
 800b970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b972:	bf00      	nop
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b980:	bf00      	nop
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b98a:	b480      	push	{r7}
 800b98c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b98e:	bf00      	nop
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b99c:	4803      	ldr	r0, [pc, #12]	; (800b9ac <TIM1_UP_TIM10_IRQHandler+0x14>)
 800b99e:	f7fa fe2a 	bl	80065f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800b9a2:	4803      	ldr	r0, [pc, #12]	; (800b9b0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800b9a4:	f7fa fe27 	bl	80065f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800b9a8:	bf00      	nop
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	2000071c 	.word	0x2000071c
 800b9b0:	2000069c 	.word	0x2000069c

0800b9b4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b9b8:	4803      	ldr	r0, [pc, #12]	; (800b9c8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800b9ba:	f7fa fe1c 	bl	80065f6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800b9be:	4803      	ldr	r0, [pc, #12]	; (800b9cc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800b9c0:	f7fa fe19 	bl	80065f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000071c 	.word	0x2000071c
 800b9cc:	200006dc 	.word	0x200006dc

0800b9d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b9d4:	4802      	ldr	r0, [pc, #8]	; (800b9e0 <TIM6_DAC_IRQHandler+0x10>)
 800b9d6:	f7fa fe0e 	bl	80065f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b9da:	bf00      	nop
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	2000065c 	.word	0x2000065c

0800b9e4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b9e8:	4802      	ldr	r0, [pc, #8]	; (800b9f4 <LTDC_IRQHandler+0x10>)
 800b9ea:	f7f8 febb 	bl	8004764 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b9ee:	bf00      	nop
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	20000440 	.word	0x20000440

0800b9f8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b9fc:	4802      	ldr	r0, [pc, #8]	; (800ba08 <DMA2D_IRQHandler+0x10>)
 800b9fe:	f7f7 ff18 	bl	8003832 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800ba02:	bf00      	nop
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20000378 	.word	0x20000378

0800ba0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ba0c:	b590      	push	{r4, r7, lr}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	e00a      	b.n	800ba34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800ba1e:	68bc      	ldr	r4, [r7, #8]
 800ba20:	1c63      	adds	r3, r4, #1
 800ba22:	60bb      	str	r3, [r7, #8]
 800ba24:	f3af 8000 	nop.w
 800ba28:	4603      	mov	r3, r0
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	3301      	adds	r3, #1
 800ba32:	617b      	str	r3, [r7, #20]
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	dbf0      	blt.n	800ba1e <_read+0x12>
	}

return len;
 800ba3c:	687b      	ldr	r3, [r7, #4]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	371c      	adds	r7, #28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd90      	pop	{r4, r7, pc}

0800ba46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b086      	sub	sp, #24
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	60b9      	str	r1, [r7, #8]
 800ba50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba52:	2300      	movs	r3, #0
 800ba54:	617b      	str	r3, [r7, #20]
 800ba56:	e009      	b.n	800ba6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	60ba      	str	r2, [r7, #8]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7fc fb43 	bl	80080ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	dbf1      	blt.n	800ba58 <_write+0x12>
	}
	return len;
 800ba74:	687b      	ldr	r3, [r7, #4]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
	...

0800ba80 <_sbrk>:

caddr_t _sbrk(int incr)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800ba88:	4b11      	ldr	r3, [pc, #68]	; (800bad0 <_sbrk+0x50>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <_sbrk+0x16>
		heap_end = &end;
 800ba90:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <_sbrk+0x50>)
 800ba92:	4a10      	ldr	r2, [pc, #64]	; (800bad4 <_sbrk+0x54>)
 800ba94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ba96:	4b0e      	ldr	r3, [pc, #56]	; (800bad0 <_sbrk+0x50>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ba9c:	4b0c      	ldr	r3, [pc, #48]	; (800bad0 <_sbrk+0x50>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4413      	add	r3, r2
 800baa4:	466a      	mov	r2, sp
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d907      	bls.n	800baba <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800baaa:	f000 fa1f 	bl	800beec <__errno>
 800baae:	4602      	mov	r2, r0
 800bab0:	230c      	movs	r3, #12
 800bab2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800bab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bab8:	e006      	b.n	800bac8 <_sbrk+0x48>
	}

	heap_end += incr;
 800baba:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <_sbrk+0x50>)
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4413      	add	r3, r2
 800bac2:	4a03      	ldr	r2, [pc, #12]	; (800bad0 <_sbrk+0x50>)
 800bac4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800bac6:	68fb      	ldr	r3, [r7, #12]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	200002b4 	.word	0x200002b4
 800bad4:	200007a0 	.word	0x200007a0

0800bad8 <_close>:

int _close(int file)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	return -1;
 800bae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	370c      	adds	r7, #12
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb00:	605a      	str	r2, [r3, #4]
	return 0;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <_isatty>:

int _isatty(int file)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
	return 1;
 800bb18:	2301      	movs	r3, #1
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	370c      	adds	r7, #12
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b085      	sub	sp, #20
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	60f8      	str	r0, [r7, #12]
 800bb2e:	60b9      	str	r1, [r7, #8]
 800bb30:	607a      	str	r2, [r7, #4]
	return 0;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bb44:	4a16      	ldr	r2, [pc, #88]	; (800bba0 <SystemInit+0x60>)
 800bb46:	4b16      	ldr	r3, [pc, #88]	; (800bba0 <SystemInit+0x60>)
 800bb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bb54:	4a13      	ldr	r2, [pc, #76]	; (800bba4 <SystemInit+0x64>)
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <SystemInit+0x64>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f043 0301 	orr.w	r3, r3, #1
 800bb5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bb60:	4b10      	ldr	r3, [pc, #64]	; (800bba4 <SystemInit+0x64>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bb66:	4a0f      	ldr	r2, [pc, #60]	; (800bba4 <SystemInit+0x64>)
 800bb68:	4b0e      	ldr	r3, [pc, #56]	; (800bba4 <SystemInit+0x64>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800bb70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bb76:	4b0b      	ldr	r3, [pc, #44]	; (800bba4 <SystemInit+0x64>)
 800bb78:	4a0b      	ldr	r2, [pc, #44]	; (800bba8 <SystemInit+0x68>)
 800bb7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bb7c:	4a09      	ldr	r2, [pc, #36]	; (800bba4 <SystemInit+0x64>)
 800bb7e:	4b09      	ldr	r3, [pc, #36]	; (800bba4 <SystemInit+0x64>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bb88:	4b06      	ldr	r3, [pc, #24]	; (800bba4 <SystemInit+0x64>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800bb8e:	4b04      	ldr	r3, [pc, #16]	; (800bba0 <SystemInit+0x60>)
 800bb90:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bb94:	609a      	str	r2, [r3, #8]
#endif
}
 800bb96:	bf00      	nop
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	e000ed00 	.word	0xe000ed00
 800bba4:	40023800 	.word	0x40023800
 800bba8:	24003010 	.word	0x24003010

0800bbac <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bbb2:	f107 0308 	add.w	r3, r7, #8
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	601a      	str	r2, [r3, #0]
 800bbba:	605a      	str	r2, [r3, #4]
 800bbbc:	609a      	str	r2, [r3, #8]
 800bbbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbca:	4a1f      	ldr	r2, [pc, #124]	; (800bc48 <MX_TIM1_Init+0x9c>)
 800bbcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800bbce:	4b1d      	ldr	r3, [pc, #116]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bbd4:	4b1b      	ldr	r3, [pc, #108]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800bbda:	4b1a      	ldr	r3, [pc, #104]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bbe0:	4b18      	ldr	r3, [pc, #96]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800bbe6:	4b17      	ldr	r3, [pc, #92]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bbec:	4b15      	ldr	r3, [pc, #84]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800bbf2:	4814      	ldr	r0, [pc, #80]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bbf4:	f7fa fc85 	bl	8006502 <HAL_TIM_Base_Init>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800bbfe:	f7ff fd7d 	bl	800b6fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bc02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bc06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800bc08:	f107 0308 	add.w	r3, r7, #8
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	480d      	ldr	r0, [pc, #52]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bc10:	f7fa fdf9 	bl	8006806 <HAL_TIM_ConfigClockSource>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800bc1a:	f7ff fd6f 	bl	800b6fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bc22:	2300      	movs	r3, #0
 800bc24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800bc26:	463b      	mov	r3, r7
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4806      	ldr	r0, [pc, #24]	; (800bc44 <MX_TIM1_Init+0x98>)
 800bc2c:	f7fb f804 	bl	8006c38 <HAL_TIMEx_MasterConfigSynchronization>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800bc36:	f7ff fd61 	bl	800b6fc <Error_Handler>
  }

}
 800bc3a:	bf00      	nop
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	2000071c 	.word	0x2000071c
 800bc48:	40010000 	.word	0x40010000

0800bc4c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800bc50:	4b0e      	ldr	r3, [pc, #56]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc52:	4a0f      	ldr	r2, [pc, #60]	; (800bc90 <MX_TIM10_Init+0x44>)
 800bc54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 800bc56:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc58:	f242 720f 	movw	r2, #9999	; 0x270f
 800bc5c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 288;
 800bc64:	4b09      	ldr	r3, [pc, #36]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc66:	f44f 7290 	mov.w	r2, #288	; 0x120
 800bc6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bc6c:	4b07      	ldr	r3, [pc, #28]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bc72:	4b06      	ldr	r3, [pc, #24]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc74:	2200      	movs	r2, #0
 800bc76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800bc78:	4804      	ldr	r0, [pc, #16]	; (800bc8c <MX_TIM10_Init+0x40>)
 800bc7a:	f7fa fc42 	bl	8006502 <HAL_TIM_Base_Init>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d001      	beq.n	800bc88 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800bc84:	f7ff fd3a 	bl	800b6fc <Error_Handler>
  }

}
 800bc88:	bf00      	nop
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	2000069c 	.word	0x2000069c
 800bc90:	40014400 	.word	0x40014400

0800bc94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	af00      	add	r7, sp, #0

  htim11.Instance = TIM11;
 800bc98:	4b0e      	ldr	r3, [pc, #56]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bc9a:	4a0f      	ldr	r2, [pc, #60]	; (800bcd8 <MX_TIM11_Init+0x44>)
 800bc9c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 9999;
 800bc9e:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bca0:	f242 720f 	movw	r2, #9999	; 0x270f
 800bca4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bca6:	4b0b      	ldr	r3, [pc, #44]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 71;
 800bcac:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bcae:	2247      	movs	r2, #71	; 0x47
 800bcb0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bcb2:	4b08      	ldr	r3, [pc, #32]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bcb8:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bcba:	2200      	movs	r2, #0
 800bcbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800bcbe:	4805      	ldr	r0, [pc, #20]	; (800bcd4 <MX_TIM11_Init+0x40>)
 800bcc0:	f7fa fc1f 	bl	8006502 <HAL_TIM_Base_Init>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d001      	beq.n	800bcce <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800bcca:	f7ff fd17 	bl	800b6fc <Error_Handler>
  }

}
 800bcce:	bf00      	nop
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200006dc 	.word	0x200006dc
 800bcd8:	40014800 	.word	0x40014800

0800bcdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a2e      	ldr	r2, [pc, #184]	; (800bda4 <HAL_TIM_Base_MspInit+0xc8>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d11e      	bne.n	800bd2c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800bcee:	2300      	movs	r3, #0
 800bcf0:	617b      	str	r3, [r7, #20]
 800bcf2:	4a2d      	ldr	r2, [pc, #180]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bcf4:	4b2c      	ldr	r3, [pc, #176]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bcf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	6453      	str	r3, [r2, #68]	; 0x44
 800bcfe:	4b2a      	ldr	r3, [pc, #168]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd02:	f003 0301 	and.w	r3, r3, #1
 800bd06:	617b      	str	r3, [r7, #20]
 800bd08:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	2019      	movs	r0, #25
 800bd10:	f7f7 fa2c 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800bd14:	2019      	movs	r0, #25
 800bd16:	f7f7 fa45 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	201a      	movs	r0, #26
 800bd20:	f7f7 fa24 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800bd24:	201a      	movs	r0, #26
 800bd26:	f7f7 fa3d 	bl	80031a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800bd2a:	e036      	b.n	800bd9a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM10)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a1e      	ldr	r2, [pc, #120]	; (800bdac <HAL_TIM_Base_MspInit+0xd0>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d116      	bne.n	800bd64 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800bd36:	2300      	movs	r3, #0
 800bd38:	613b      	str	r3, [r7, #16]
 800bd3a:	4a1b      	ldr	r2, [pc, #108]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd44:	6453      	str	r3, [r2, #68]	; 0x44
 800bd46:	4b18      	ldr	r3, [pc, #96]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd4e:	613b      	str	r3, [r7, #16]
 800bd50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800bd52:	2200      	movs	r2, #0
 800bd54:	2100      	movs	r1, #0
 800bd56:	2019      	movs	r0, #25
 800bd58:	f7f7 fa08 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800bd5c:	2019      	movs	r0, #25
 800bd5e:	f7f7 fa21 	bl	80031a4 <HAL_NVIC_EnableIRQ>
}
 800bd62:	e01a      	b.n	800bd9a <HAL_TIM_Base_MspInit+0xbe>
  else if(tim_baseHandle->Instance==TIM11)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	4a11      	ldr	r2, [pc, #68]	; (800bdb0 <HAL_TIM_Base_MspInit+0xd4>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d115      	bne.n	800bd9a <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	4a0d      	ldr	r2, [pc, #52]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd74:	4b0c      	ldr	r3, [pc, #48]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bd7c:	6453      	str	r3, [r2, #68]	; 0x44
 800bd7e:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <HAL_TIM_Base_MspInit+0xcc>)
 800bd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd86:	60fb      	str	r3, [r7, #12]
 800bd88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	201a      	movs	r0, #26
 800bd90:	f7f7 f9ec 	bl	800316c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800bd94:	201a      	movs	r0, #26
 800bd96:	f7f7 fa05 	bl	80031a4 <HAL_NVIC_EnableIRQ>
}
 800bd9a:	bf00      	nop
 800bd9c:	3718      	adds	r7, #24
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	40010000 	.word	0x40010000
 800bda8:	40023800 	.word	0x40023800
 800bdac:	40014400 	.word	0x40014400
 800bdb0:	40014800 	.word	0x40014800

0800bdb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800bdb8:	4b11      	ldr	r3, [pc, #68]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdba:	4a12      	ldr	r2, [pc, #72]	; (800be04 <MX_USART1_UART_Init+0x50>)
 800bdbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800bdbe:	4b10      	ldr	r3, [pc, #64]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800bdc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800bdc6:	4b0e      	ldr	r3, [pc, #56]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800bdcc:	4b0c      	ldr	r3, [pc, #48]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800bdd2:	4b0b      	ldr	r3, [pc, #44]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800bdd8:	4b09      	ldr	r3, [pc, #36]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdda:	220c      	movs	r2, #12
 800bddc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800bdde:	4b08      	ldr	r3, [pc, #32]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bde0:	2200      	movs	r2, #0
 800bde2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800bde4:	4b06      	ldr	r3, [pc, #24]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bde6:	2200      	movs	r2, #0
 800bde8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800bdea:	4805      	ldr	r0, [pc, #20]	; (800be00 <MX_USART1_UART_Init+0x4c>)
 800bdec:	f7fa ff7d 	bl	8006cea <HAL_UART_Init>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d001      	beq.n	800bdfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800bdf6:	f7ff fc81 	bl	800b6fc <Error_Handler>
  }

}
 800bdfa:	bf00      	nop
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	2000075c 	.word	0x2000075c
 800be04:	40011000 	.word	0x40011000

0800be08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be10:	f107 0314 	add.w	r3, r7, #20
 800be14:	2200      	movs	r2, #0
 800be16:	601a      	str	r2, [r3, #0]
 800be18:	605a      	str	r2, [r3, #4]
 800be1a:	609a      	str	r2, [r3, #8]
 800be1c:	60da      	str	r2, [r3, #12]
 800be1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a19      	ldr	r2, [pc, #100]	; (800be8c <HAL_UART_MspInit+0x84>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d12c      	bne.n	800be84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800be2a:	2300      	movs	r3, #0
 800be2c:	613b      	str	r3, [r7, #16]
 800be2e:	4a18      	ldr	r2, [pc, #96]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be30:	4b17      	ldr	r3, [pc, #92]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be34:	f043 0310 	orr.w	r3, r3, #16
 800be38:	6453      	str	r3, [r2, #68]	; 0x44
 800be3a:	4b15      	ldr	r3, [pc, #84]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3e:	f003 0310 	and.w	r3, r3, #16
 800be42:	613b      	str	r3, [r7, #16]
 800be44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	4a11      	ldr	r2, [pc, #68]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be50:	f043 0301 	orr.w	r3, r3, #1
 800be54:	6313      	str	r3, [r2, #48]	; 0x30
 800be56:	4b0e      	ldr	r3, [pc, #56]	; (800be90 <HAL_UART_MspInit+0x88>)
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800be62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800be66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800be68:	2302      	movs	r3, #2
 800be6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800be6c:	2301      	movs	r3, #1
 800be6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800be70:	2303      	movs	r3, #3
 800be72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800be74:	2307      	movs	r3, #7
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800be78:	f107 0314 	add.w	r3, r7, #20
 800be7c:	4619      	mov	r1, r3
 800be7e:	4805      	ldr	r0, [pc, #20]	; (800be94 <HAL_UART_MspInit+0x8c>)
 800be80:	f7f7 ff14 	bl	8003cac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800be84:	bf00      	nop
 800be86:	3728      	adds	r7, #40	; 0x28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	40011000 	.word	0x40011000
 800be90:	40023800 	.word	0x40023800
 800be94:	40020000 	.word	0x40020000

0800be98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800be98:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bed0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800be9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800be9e:	e003      	b.n	800bea8 <LoopCopyDataInit>

0800bea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bea0:	4b0c      	ldr	r3, [pc, #48]	; (800bed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bea6:	3104      	adds	r1, #4

0800bea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bea8:	480b      	ldr	r0, [pc, #44]	; (800bed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800beaa:	4b0c      	ldr	r3, [pc, #48]	; (800bedc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800beac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800beae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800beb0:	d3f6      	bcc.n	800bea0 <CopyDataInit>
  ldr  r2, =_sbss
 800beb2:	4a0b      	ldr	r2, [pc, #44]	; (800bee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800beb4:	e002      	b.n	800bebc <LoopFillZerobss>

0800beb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800beb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800beb8:	f842 3b04 	str.w	r3, [r2], #4

0800bebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bebc:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bec0:	d3f9      	bcc.n	800beb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800bec2:	f7ff fe3d 	bl	800bb40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bec6:	f000 f817 	bl	800bef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800beca:	f7fc f91d 	bl	8008108 <main>
  bx  lr    
 800bece:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800bed0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800bed4:	0807fefc 	.word	0x0807fefc
  ldr  r0, =_sdata
 800bed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bedc:	200000e4 	.word	0x200000e4
  ldr  r2, =_sbss
 800bee0:	200000e4 	.word	0x200000e4
  ldr  r3, = _ebss
 800bee4:	200007a0 	.word	0x200007a0

0800bee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bee8:	e7fe      	b.n	800bee8 <ADC_IRQHandler>
	...

0800beec <__errno>:
 800beec:	4b01      	ldr	r3, [pc, #4]	; (800bef4 <__errno+0x8>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	20000080 	.word	0x20000080

0800bef8 <__libc_init_array>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4e0d      	ldr	r6, [pc, #52]	; (800bf30 <__libc_init_array+0x38>)
 800befc:	4c0d      	ldr	r4, [pc, #52]	; (800bf34 <__libc_init_array+0x3c>)
 800befe:	1ba4      	subs	r4, r4, r6
 800bf00:	10a4      	asrs	r4, r4, #2
 800bf02:	2500      	movs	r5, #0
 800bf04:	42a5      	cmp	r5, r4
 800bf06:	d109      	bne.n	800bf1c <__libc_init_array+0x24>
 800bf08:	4e0b      	ldr	r6, [pc, #44]	; (800bf38 <__libc_init_array+0x40>)
 800bf0a:	4c0c      	ldr	r4, [pc, #48]	; (800bf3c <__libc_init_array+0x44>)
 800bf0c:	f000 ff18 	bl	800cd40 <_init>
 800bf10:	1ba4      	subs	r4, r4, r6
 800bf12:	10a4      	asrs	r4, r4, #2
 800bf14:	2500      	movs	r5, #0
 800bf16:	42a5      	cmp	r5, r4
 800bf18:	d105      	bne.n	800bf26 <__libc_init_array+0x2e>
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf20:	4798      	blx	r3
 800bf22:	3501      	adds	r5, #1
 800bf24:	e7ee      	b.n	800bf04 <__libc_init_array+0xc>
 800bf26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf2a:	4798      	blx	r3
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	e7f2      	b.n	800bf16 <__libc_init_array+0x1e>
 800bf30:	0807fef4 	.word	0x0807fef4
 800bf34:	0807fef4 	.word	0x0807fef4
 800bf38:	0807fef4 	.word	0x0807fef4
 800bf3c:	0807fef8 	.word	0x0807fef8

0800bf40 <memset>:
 800bf40:	4402      	add	r2, r0
 800bf42:	4603      	mov	r3, r0
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d100      	bne.n	800bf4a <memset+0xa>
 800bf48:	4770      	bx	lr
 800bf4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf4e:	e7f9      	b.n	800bf44 <memset+0x4>

0800bf50 <iprintf>:
 800bf50:	b40f      	push	{r0, r1, r2, r3}
 800bf52:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <iprintf+0x2c>)
 800bf54:	b513      	push	{r0, r1, r4, lr}
 800bf56:	681c      	ldr	r4, [r3, #0]
 800bf58:	b124      	cbz	r4, 800bf64 <iprintf+0x14>
 800bf5a:	69a3      	ldr	r3, [r4, #24]
 800bf5c:	b913      	cbnz	r3, 800bf64 <iprintf+0x14>
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f84e 	bl	800c000 <__sinit>
 800bf64:	ab05      	add	r3, sp, #20
 800bf66:	9a04      	ldr	r2, [sp, #16]
 800bf68:	68a1      	ldr	r1, [r4, #8]
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f000 f959 	bl	800c224 <_vfiprintf_r>
 800bf72:	b002      	add	sp, #8
 800bf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf78:	b004      	add	sp, #16
 800bf7a:	4770      	bx	lr
 800bf7c:	20000080 	.word	0x20000080

0800bf80 <_cleanup_r>:
 800bf80:	4901      	ldr	r1, [pc, #4]	; (800bf88 <_cleanup_r+0x8>)
 800bf82:	f000 b8a9 	b.w	800c0d8 <_fwalk_reent>
 800bf86:	bf00      	nop
 800bf88:	0800caf9 	.word	0x0800caf9

0800bf8c <std.isra.0>:
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	b510      	push	{r4, lr}
 800bf90:	4604      	mov	r4, r0
 800bf92:	6003      	str	r3, [r0, #0]
 800bf94:	6043      	str	r3, [r0, #4]
 800bf96:	6083      	str	r3, [r0, #8]
 800bf98:	8181      	strh	r1, [r0, #12]
 800bf9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf9c:	81c2      	strh	r2, [r0, #14]
 800bf9e:	6103      	str	r3, [r0, #16]
 800bfa0:	6143      	str	r3, [r0, #20]
 800bfa2:	6183      	str	r3, [r0, #24]
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	305c      	adds	r0, #92	; 0x5c
 800bfaa:	f7ff ffc9 	bl	800bf40 <memset>
 800bfae:	4b05      	ldr	r3, [pc, #20]	; (800bfc4 <std.isra.0+0x38>)
 800bfb0:	6263      	str	r3, [r4, #36]	; 0x24
 800bfb2:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <std.isra.0+0x3c>)
 800bfb4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bfb6:	4b05      	ldr	r3, [pc, #20]	; (800bfcc <std.isra.0+0x40>)
 800bfb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bfba:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <std.isra.0+0x44>)
 800bfbc:	6224      	str	r4, [r4, #32]
 800bfbe:	6323      	str	r3, [r4, #48]	; 0x30
 800bfc0:	bd10      	pop	{r4, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0800c79d 	.word	0x0800c79d
 800bfc8:	0800c7bf 	.word	0x0800c7bf
 800bfcc:	0800c7f7 	.word	0x0800c7f7
 800bfd0:	0800c81b 	.word	0x0800c81b

0800bfd4 <__sfmoreglue>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	1e4a      	subs	r2, r1, #1
 800bfd8:	2568      	movs	r5, #104	; 0x68
 800bfda:	4355      	muls	r5, r2
 800bfdc:	460e      	mov	r6, r1
 800bfde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfe2:	f000 f897 	bl	800c114 <_malloc_r>
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	b140      	cbz	r0, 800bffc <__sfmoreglue+0x28>
 800bfea:	2100      	movs	r1, #0
 800bfec:	e880 0042 	stmia.w	r0, {r1, r6}
 800bff0:	300c      	adds	r0, #12
 800bff2:	60a0      	str	r0, [r4, #8]
 800bff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bff8:	f7ff ffa2 	bl	800bf40 <memset>
 800bffc:	4620      	mov	r0, r4
 800bffe:	bd70      	pop	{r4, r5, r6, pc}

0800c000 <__sinit>:
 800c000:	6983      	ldr	r3, [r0, #24]
 800c002:	b510      	push	{r4, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	bb33      	cbnz	r3, 800c056 <__sinit+0x56>
 800c008:	6483      	str	r3, [r0, #72]	; 0x48
 800c00a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800c00c:	6503      	str	r3, [r0, #80]	; 0x50
 800c00e:	4b12      	ldr	r3, [pc, #72]	; (800c058 <__sinit+0x58>)
 800c010:	4a12      	ldr	r2, [pc, #72]	; (800c05c <__sinit+0x5c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6282      	str	r2, [r0, #40]	; 0x28
 800c016:	4298      	cmp	r0, r3
 800c018:	bf04      	itt	eq
 800c01a:	2301      	moveq	r3, #1
 800c01c:	6183      	streq	r3, [r0, #24]
 800c01e:	f000 f81f 	bl	800c060 <__sfp>
 800c022:	6060      	str	r0, [r4, #4]
 800c024:	4620      	mov	r0, r4
 800c026:	f000 f81b 	bl	800c060 <__sfp>
 800c02a:	60a0      	str	r0, [r4, #8]
 800c02c:	4620      	mov	r0, r4
 800c02e:	f000 f817 	bl	800c060 <__sfp>
 800c032:	2200      	movs	r2, #0
 800c034:	60e0      	str	r0, [r4, #12]
 800c036:	2104      	movs	r1, #4
 800c038:	6860      	ldr	r0, [r4, #4]
 800c03a:	f7ff ffa7 	bl	800bf8c <std.isra.0>
 800c03e:	2201      	movs	r2, #1
 800c040:	2109      	movs	r1, #9
 800c042:	68a0      	ldr	r0, [r4, #8]
 800c044:	f7ff ffa2 	bl	800bf8c <std.isra.0>
 800c048:	2202      	movs	r2, #2
 800c04a:	2112      	movs	r1, #18
 800c04c:	68e0      	ldr	r0, [r4, #12]
 800c04e:	f7ff ff9d 	bl	800bf8c <std.isra.0>
 800c052:	2301      	movs	r3, #1
 800c054:	61a3      	str	r3, [r4, #24]
 800c056:	bd10      	pop	{r4, pc}
 800c058:	0807fe54 	.word	0x0807fe54
 800c05c:	0800bf81 	.word	0x0800bf81

0800c060 <__sfp>:
 800c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c062:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <__sfp+0x74>)
 800c064:	681e      	ldr	r6, [r3, #0]
 800c066:	69b3      	ldr	r3, [r6, #24]
 800c068:	4607      	mov	r7, r0
 800c06a:	b913      	cbnz	r3, 800c072 <__sfp+0x12>
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7ff ffc7 	bl	800c000 <__sinit>
 800c072:	3648      	adds	r6, #72	; 0x48
 800c074:	68b4      	ldr	r4, [r6, #8]
 800c076:	6873      	ldr	r3, [r6, #4]
 800c078:	3b01      	subs	r3, #1
 800c07a:	d503      	bpl.n	800c084 <__sfp+0x24>
 800c07c:	6833      	ldr	r3, [r6, #0]
 800c07e:	b133      	cbz	r3, 800c08e <__sfp+0x2e>
 800c080:	6836      	ldr	r6, [r6, #0]
 800c082:	e7f7      	b.n	800c074 <__sfp+0x14>
 800c084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c088:	b16d      	cbz	r5, 800c0a6 <__sfp+0x46>
 800c08a:	3468      	adds	r4, #104	; 0x68
 800c08c:	e7f4      	b.n	800c078 <__sfp+0x18>
 800c08e:	2104      	movs	r1, #4
 800c090:	4638      	mov	r0, r7
 800c092:	f7ff ff9f 	bl	800bfd4 <__sfmoreglue>
 800c096:	6030      	str	r0, [r6, #0]
 800c098:	2800      	cmp	r0, #0
 800c09a:	d1f1      	bne.n	800c080 <__sfp+0x20>
 800c09c:	230c      	movs	r3, #12
 800c09e:	603b      	str	r3, [r7, #0]
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0aa:	81e3      	strh	r3, [r4, #14]
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	6665      	str	r5, [r4, #100]	; 0x64
 800c0b2:	6025      	str	r5, [r4, #0]
 800c0b4:	60a5      	str	r5, [r4, #8]
 800c0b6:	6065      	str	r5, [r4, #4]
 800c0b8:	6125      	str	r5, [r4, #16]
 800c0ba:	6165      	str	r5, [r4, #20]
 800c0bc:	61a5      	str	r5, [r4, #24]
 800c0be:	2208      	movs	r2, #8
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0c6:	f7ff ff3b 	bl	800bf40 <memset>
 800c0ca:	6365      	str	r5, [r4, #52]	; 0x34
 800c0cc:	63a5      	str	r5, [r4, #56]	; 0x38
 800c0ce:	64a5      	str	r5, [r4, #72]	; 0x48
 800c0d0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800c0d2:	e7e6      	b.n	800c0a2 <__sfp+0x42>
 800c0d4:	0807fe54 	.word	0x0807fe54

0800c0d8 <_fwalk_reent>:
 800c0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0dc:	4680      	mov	r8, r0
 800c0de:	4689      	mov	r9, r1
 800c0e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c0e4:	2600      	movs	r6, #0
 800c0e6:	b914      	cbnz	r4, 800c0ee <_fwalk_reent+0x16>
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	68a5      	ldr	r5, [r4, #8]
 800c0f0:	6867      	ldr	r7, [r4, #4]
 800c0f2:	3f01      	subs	r7, #1
 800c0f4:	d501      	bpl.n	800c0fa <_fwalk_reent+0x22>
 800c0f6:	6824      	ldr	r4, [r4, #0]
 800c0f8:	e7f5      	b.n	800c0e6 <_fwalk_reent+0xe>
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d907      	bls.n	800c110 <_fwalk_reent+0x38>
 800c100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c104:	3301      	adds	r3, #1
 800c106:	d003      	beq.n	800c110 <_fwalk_reent+0x38>
 800c108:	4629      	mov	r1, r5
 800c10a:	4640      	mov	r0, r8
 800c10c:	47c8      	blx	r9
 800c10e:	4306      	orrs	r6, r0
 800c110:	3568      	adds	r5, #104	; 0x68
 800c112:	e7ee      	b.n	800c0f2 <_fwalk_reent+0x1a>

0800c114 <_malloc_r>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	1ccd      	adds	r5, r1, #3
 800c118:	f025 0503 	bic.w	r5, r5, #3
 800c11c:	3508      	adds	r5, #8
 800c11e:	2d0c      	cmp	r5, #12
 800c120:	bf38      	it	cc
 800c122:	250c      	movcc	r5, #12
 800c124:	2d00      	cmp	r5, #0
 800c126:	4606      	mov	r6, r0
 800c128:	db01      	blt.n	800c12e <_malloc_r+0x1a>
 800c12a:	42a9      	cmp	r1, r5
 800c12c:	d903      	bls.n	800c136 <_malloc_r+0x22>
 800c12e:	230c      	movs	r3, #12
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	2000      	movs	r0, #0
 800c134:	bd70      	pop	{r4, r5, r6, pc}
 800c136:	f000 fd7f 	bl	800cc38 <__malloc_lock>
 800c13a:	4a23      	ldr	r2, [pc, #140]	; (800c1c8 <_malloc_r+0xb4>)
 800c13c:	6814      	ldr	r4, [r2, #0]
 800c13e:	4621      	mov	r1, r4
 800c140:	b991      	cbnz	r1, 800c168 <_malloc_r+0x54>
 800c142:	4c22      	ldr	r4, [pc, #136]	; (800c1cc <_malloc_r+0xb8>)
 800c144:	6823      	ldr	r3, [r4, #0]
 800c146:	b91b      	cbnz	r3, 800c150 <_malloc_r+0x3c>
 800c148:	4630      	mov	r0, r6
 800c14a:	f000 fb17 	bl	800c77c <_sbrk_r>
 800c14e:	6020      	str	r0, [r4, #0]
 800c150:	4629      	mov	r1, r5
 800c152:	4630      	mov	r0, r6
 800c154:	f000 fb12 	bl	800c77c <_sbrk_r>
 800c158:	1c43      	adds	r3, r0, #1
 800c15a:	d126      	bne.n	800c1aa <_malloc_r+0x96>
 800c15c:	230c      	movs	r3, #12
 800c15e:	6033      	str	r3, [r6, #0]
 800c160:	4630      	mov	r0, r6
 800c162:	f000 fd6a 	bl	800cc3a <__malloc_unlock>
 800c166:	e7e4      	b.n	800c132 <_malloc_r+0x1e>
 800c168:	680b      	ldr	r3, [r1, #0]
 800c16a:	1b5b      	subs	r3, r3, r5
 800c16c:	d41a      	bmi.n	800c1a4 <_malloc_r+0x90>
 800c16e:	2b0b      	cmp	r3, #11
 800c170:	d90f      	bls.n	800c192 <_malloc_r+0x7e>
 800c172:	600b      	str	r3, [r1, #0]
 800c174:	50cd      	str	r5, [r1, r3]
 800c176:	18cc      	adds	r4, r1, r3
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 fd5e 	bl	800cc3a <__malloc_unlock>
 800c17e:	f104 000b 	add.w	r0, r4, #11
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	f020 0007 	bic.w	r0, r0, #7
 800c188:	1ac3      	subs	r3, r0, r3
 800c18a:	d01b      	beq.n	800c1c4 <_malloc_r+0xb0>
 800c18c:	425a      	negs	r2, r3
 800c18e:	50e2      	str	r2, [r4, r3]
 800c190:	bd70      	pop	{r4, r5, r6, pc}
 800c192:	428c      	cmp	r4, r1
 800c194:	bf0d      	iteet	eq
 800c196:	6863      	ldreq	r3, [r4, #4]
 800c198:	684b      	ldrne	r3, [r1, #4]
 800c19a:	6063      	strne	r3, [r4, #4]
 800c19c:	6013      	streq	r3, [r2, #0]
 800c19e:	bf18      	it	ne
 800c1a0:	460c      	movne	r4, r1
 800c1a2:	e7e9      	b.n	800c178 <_malloc_r+0x64>
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	6849      	ldr	r1, [r1, #4]
 800c1a8:	e7ca      	b.n	800c140 <_malloc_r+0x2c>
 800c1aa:	1cc4      	adds	r4, r0, #3
 800c1ac:	f024 0403 	bic.w	r4, r4, #3
 800c1b0:	42a0      	cmp	r0, r4
 800c1b2:	d005      	beq.n	800c1c0 <_malloc_r+0xac>
 800c1b4:	1a21      	subs	r1, r4, r0
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f000 fae0 	bl	800c77c <_sbrk_r>
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d0cd      	beq.n	800c15c <_malloc_r+0x48>
 800c1c0:	6025      	str	r5, [r4, #0]
 800c1c2:	e7d9      	b.n	800c178 <_malloc_r+0x64>
 800c1c4:	bd70      	pop	{r4, r5, r6, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200002b8 	.word	0x200002b8
 800c1cc:	200002bc 	.word	0x200002bc

0800c1d0 <__sfputc_r>:
 800c1d0:	6893      	ldr	r3, [r2, #8]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	b410      	push	{r4}
 800c1d8:	6093      	str	r3, [r2, #8]
 800c1da:	da09      	bge.n	800c1f0 <__sfputc_r+0x20>
 800c1dc:	6994      	ldr	r4, [r2, #24]
 800c1de:	42a3      	cmp	r3, r4
 800c1e0:	db02      	blt.n	800c1e8 <__sfputc_r+0x18>
 800c1e2:	b2cb      	uxtb	r3, r1
 800c1e4:	2b0a      	cmp	r3, #10
 800c1e6:	d103      	bne.n	800c1f0 <__sfputc_r+0x20>
 800c1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ec:	f000 bb1a 	b.w	800c824 <__swbuf_r>
 800c1f0:	6813      	ldr	r3, [r2, #0]
 800c1f2:	1c58      	adds	r0, r3, #1
 800c1f4:	6010      	str	r0, [r2, #0]
 800c1f6:	7019      	strb	r1, [r3, #0]
 800c1f8:	b2c8      	uxtb	r0, r1
 800c1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <__sfputs_r>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	4606      	mov	r6, r0
 800c204:	460f      	mov	r7, r1
 800c206:	4614      	mov	r4, r2
 800c208:	18d5      	adds	r5, r2, r3
 800c20a:	42ac      	cmp	r4, r5
 800c20c:	d101      	bne.n	800c212 <__sfputs_r+0x12>
 800c20e:	2000      	movs	r0, #0
 800c210:	e007      	b.n	800c222 <__sfputs_r+0x22>
 800c212:	463a      	mov	r2, r7
 800c214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c218:	4630      	mov	r0, r6
 800c21a:	f7ff ffd9 	bl	800c1d0 <__sfputc_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d1f3      	bne.n	800c20a <__sfputs_r+0xa>
 800c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c224 <_vfiprintf_r>:
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	b09d      	sub	sp, #116	; 0x74
 800c22a:	460c      	mov	r4, r1
 800c22c:	4617      	mov	r7, r2
 800c22e:	9303      	str	r3, [sp, #12]
 800c230:	4606      	mov	r6, r0
 800c232:	b118      	cbz	r0, 800c23c <_vfiprintf_r+0x18>
 800c234:	6983      	ldr	r3, [r0, #24]
 800c236:	b90b      	cbnz	r3, 800c23c <_vfiprintf_r+0x18>
 800c238:	f7ff fee2 	bl	800c000 <__sinit>
 800c23c:	4b7c      	ldr	r3, [pc, #496]	; (800c430 <_vfiprintf_r+0x20c>)
 800c23e:	429c      	cmp	r4, r3
 800c240:	d157      	bne.n	800c2f2 <_vfiprintf_r+0xce>
 800c242:	6874      	ldr	r4, [r6, #4]
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	0718      	lsls	r0, r3, #28
 800c248:	d55d      	bpl.n	800c306 <_vfiprintf_r+0xe2>
 800c24a:	6923      	ldr	r3, [r4, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d05a      	beq.n	800c306 <_vfiprintf_r+0xe2>
 800c250:	2300      	movs	r3, #0
 800c252:	9309      	str	r3, [sp, #36]	; 0x24
 800c254:	2320      	movs	r3, #32
 800c256:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c25a:	2330      	movs	r3, #48	; 0x30
 800c25c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c260:	f04f 0b01 	mov.w	fp, #1
 800c264:	46b8      	mov	r8, r7
 800c266:	4645      	mov	r5, r8
 800c268:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d155      	bne.n	800c31c <_vfiprintf_r+0xf8>
 800c270:	ebb8 0a07 	subs.w	sl, r8, r7
 800c274:	d00b      	beq.n	800c28e <_vfiprintf_r+0x6a>
 800c276:	4653      	mov	r3, sl
 800c278:	463a      	mov	r2, r7
 800c27a:	4621      	mov	r1, r4
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ffbf 	bl	800c200 <__sfputs_r>
 800c282:	3001      	adds	r0, #1
 800c284:	f000 80c4 	beq.w	800c410 <_vfiprintf_r+0x1ec>
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	4453      	add	r3, sl
 800c28c:	9309      	str	r3, [sp, #36]	; 0x24
 800c28e:	f898 3000 	ldrb.w	r3, [r8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80bc 	beq.w	800c410 <_vfiprintf_r+0x1ec>
 800c298:	2300      	movs	r3, #0
 800c29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c29e:	9304      	str	r3, [sp, #16]
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	9205      	str	r2, [sp, #20]
 800c2a4:	9306      	str	r3, [sp, #24]
 800c2a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ac:	2205      	movs	r2, #5
 800c2ae:	7829      	ldrb	r1, [r5, #0]
 800c2b0:	4860      	ldr	r0, [pc, #384]	; (800c434 <_vfiprintf_r+0x210>)
 800c2b2:	f7f3 ff9d 	bl	80001f0 <memchr>
 800c2b6:	f105 0801 	add.w	r8, r5, #1
 800c2ba:	9b04      	ldr	r3, [sp, #16]
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d131      	bne.n	800c324 <_vfiprintf_r+0x100>
 800c2c0:	06d9      	lsls	r1, r3, #27
 800c2c2:	bf44      	itt	mi
 800c2c4:	2220      	movmi	r2, #32
 800c2c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c2ca:	071a      	lsls	r2, r3, #28
 800c2cc:	bf44      	itt	mi
 800c2ce:	222b      	movmi	r2, #43	; 0x2b
 800c2d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c2d4:	782a      	ldrb	r2, [r5, #0]
 800c2d6:	2a2a      	cmp	r2, #42	; 0x2a
 800c2d8:	d02c      	beq.n	800c334 <_vfiprintf_r+0x110>
 800c2da:	9a07      	ldr	r2, [sp, #28]
 800c2dc:	2100      	movs	r1, #0
 800c2de:	200a      	movs	r0, #10
 800c2e0:	46a8      	mov	r8, r5
 800c2e2:	3501      	adds	r5, #1
 800c2e4:	f898 3000 	ldrb.w	r3, [r8]
 800c2e8:	3b30      	subs	r3, #48	; 0x30
 800c2ea:	2b09      	cmp	r3, #9
 800c2ec:	d96d      	bls.n	800c3ca <_vfiprintf_r+0x1a6>
 800c2ee:	b371      	cbz	r1, 800c34e <_vfiprintf_r+0x12a>
 800c2f0:	e026      	b.n	800c340 <_vfiprintf_r+0x11c>
 800c2f2:	4b51      	ldr	r3, [pc, #324]	; (800c438 <_vfiprintf_r+0x214>)
 800c2f4:	429c      	cmp	r4, r3
 800c2f6:	d101      	bne.n	800c2fc <_vfiprintf_r+0xd8>
 800c2f8:	68b4      	ldr	r4, [r6, #8]
 800c2fa:	e7a3      	b.n	800c244 <_vfiprintf_r+0x20>
 800c2fc:	4b4f      	ldr	r3, [pc, #316]	; (800c43c <_vfiprintf_r+0x218>)
 800c2fe:	429c      	cmp	r4, r3
 800c300:	bf08      	it	eq
 800c302:	68f4      	ldreq	r4, [r6, #12]
 800c304:	e79e      	b.n	800c244 <_vfiprintf_r+0x20>
 800c306:	4621      	mov	r1, r4
 800c308:	4630      	mov	r0, r6
 800c30a:	f000 faef 	bl	800c8ec <__swsetup_r>
 800c30e:	2800      	cmp	r0, #0
 800c310:	d09e      	beq.n	800c250 <_vfiprintf_r+0x2c>
 800c312:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c316:	b01d      	add	sp, #116	; 0x74
 800c318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31c:	2b25      	cmp	r3, #37	; 0x25
 800c31e:	d0a7      	beq.n	800c270 <_vfiprintf_r+0x4c>
 800c320:	46a8      	mov	r8, r5
 800c322:	e7a0      	b.n	800c266 <_vfiprintf_r+0x42>
 800c324:	4a43      	ldr	r2, [pc, #268]	; (800c434 <_vfiprintf_r+0x210>)
 800c326:	1a80      	subs	r0, r0, r2
 800c328:	fa0b f000 	lsl.w	r0, fp, r0
 800c32c:	4318      	orrs	r0, r3
 800c32e:	9004      	str	r0, [sp, #16]
 800c330:	4645      	mov	r5, r8
 800c332:	e7bb      	b.n	800c2ac <_vfiprintf_r+0x88>
 800c334:	9a03      	ldr	r2, [sp, #12]
 800c336:	1d11      	adds	r1, r2, #4
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	9103      	str	r1, [sp, #12]
 800c33c:	2a00      	cmp	r2, #0
 800c33e:	db01      	blt.n	800c344 <_vfiprintf_r+0x120>
 800c340:	9207      	str	r2, [sp, #28]
 800c342:	e004      	b.n	800c34e <_vfiprintf_r+0x12a>
 800c344:	4252      	negs	r2, r2
 800c346:	f043 0302 	orr.w	r3, r3, #2
 800c34a:	9207      	str	r2, [sp, #28]
 800c34c:	9304      	str	r3, [sp, #16]
 800c34e:	f898 3000 	ldrb.w	r3, [r8]
 800c352:	2b2e      	cmp	r3, #46	; 0x2e
 800c354:	d110      	bne.n	800c378 <_vfiprintf_r+0x154>
 800c356:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c35a:	2b2a      	cmp	r3, #42	; 0x2a
 800c35c:	f108 0101 	add.w	r1, r8, #1
 800c360:	d137      	bne.n	800c3d2 <_vfiprintf_r+0x1ae>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	1d1a      	adds	r2, r3, #4
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	9203      	str	r2, [sp, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	bfb8      	it	lt
 800c36e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c372:	f108 0802 	add.w	r8, r8, #2
 800c376:	9305      	str	r3, [sp, #20]
 800c378:	4d31      	ldr	r5, [pc, #196]	; (800c440 <_vfiprintf_r+0x21c>)
 800c37a:	f898 1000 	ldrb.w	r1, [r8]
 800c37e:	2203      	movs	r2, #3
 800c380:	4628      	mov	r0, r5
 800c382:	f7f3 ff35 	bl	80001f0 <memchr>
 800c386:	b140      	cbz	r0, 800c39a <_vfiprintf_r+0x176>
 800c388:	2340      	movs	r3, #64	; 0x40
 800c38a:	1b40      	subs	r0, r0, r5
 800c38c:	fa03 f000 	lsl.w	r0, r3, r0
 800c390:	9b04      	ldr	r3, [sp, #16]
 800c392:	4303      	orrs	r3, r0
 800c394:	9304      	str	r3, [sp, #16]
 800c396:	f108 0801 	add.w	r8, r8, #1
 800c39a:	f898 1000 	ldrb.w	r1, [r8]
 800c39e:	4829      	ldr	r0, [pc, #164]	; (800c444 <_vfiprintf_r+0x220>)
 800c3a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	f108 0701 	add.w	r7, r8, #1
 800c3aa:	f7f3 ff21 	bl	80001f0 <memchr>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d034      	beq.n	800c41c <_vfiprintf_r+0x1f8>
 800c3b2:	4b25      	ldr	r3, [pc, #148]	; (800c448 <_vfiprintf_r+0x224>)
 800c3b4:	bb03      	cbnz	r3, 800c3f8 <_vfiprintf_r+0x1d4>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	3307      	adds	r3, #7
 800c3ba:	f023 0307 	bic.w	r3, r3, #7
 800c3be:	3308      	adds	r3, #8
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c4:	444b      	add	r3, r9
 800c3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c8:	e74c      	b.n	800c264 <_vfiprintf_r+0x40>
 800c3ca:	fb00 3202 	mla	r2, r0, r2, r3
 800c3ce:	2101      	movs	r1, #1
 800c3d0:	e786      	b.n	800c2e0 <_vfiprintf_r+0xbc>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	250a      	movs	r5, #10
 800c3da:	4688      	mov	r8, r1
 800c3dc:	3101      	adds	r1, #1
 800c3de:	f898 2000 	ldrb.w	r2, [r8]
 800c3e2:	3a30      	subs	r2, #48	; 0x30
 800c3e4:	2a09      	cmp	r2, #9
 800c3e6:	d903      	bls.n	800c3f0 <_vfiprintf_r+0x1cc>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0c5      	beq.n	800c378 <_vfiprintf_r+0x154>
 800c3ec:	9005      	str	r0, [sp, #20]
 800c3ee:	e7c3      	b.n	800c378 <_vfiprintf_r+0x154>
 800c3f0:	fb05 2000 	mla	r0, r5, r0, r2
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e7f0      	b.n	800c3da <_vfiprintf_r+0x1b6>
 800c3f8:	ab03      	add	r3, sp, #12
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	4b13      	ldr	r3, [pc, #76]	; (800c44c <_vfiprintf_r+0x228>)
 800c400:	a904      	add	r1, sp, #16
 800c402:	4630      	mov	r0, r6
 800c404:	f3af 8000 	nop.w
 800c408:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c40c:	4681      	mov	r9, r0
 800c40e:	d1d8      	bne.n	800c3c2 <_vfiprintf_r+0x19e>
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	065b      	lsls	r3, r3, #25
 800c414:	f53f af7d 	bmi.w	800c312 <_vfiprintf_r+0xee>
 800c418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c41a:	e77c      	b.n	800c316 <_vfiprintf_r+0xf2>
 800c41c:	ab03      	add	r3, sp, #12
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	4622      	mov	r2, r4
 800c422:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <_vfiprintf_r+0x228>)
 800c424:	a904      	add	r1, sp, #16
 800c426:	4630      	mov	r0, r6
 800c428:	f000 f888 	bl	800c53c <_printf_i>
 800c42c:	e7ec      	b.n	800c408 <_vfiprintf_r+0x1e4>
 800c42e:	bf00      	nop
 800c430:	0807fe78 	.word	0x0807fe78
 800c434:	0807feb8 	.word	0x0807feb8
 800c438:	0807fe98 	.word	0x0807fe98
 800c43c:	0807fe58 	.word	0x0807fe58
 800c440:	0807febe 	.word	0x0807febe
 800c444:	0807fec2 	.word	0x0807fec2
 800c448:	00000000 	.word	0x00000000
 800c44c:	0800c201 	.word	0x0800c201

0800c450 <_printf_common>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	4691      	mov	r9, r2
 800c456:	461f      	mov	r7, r3
 800c458:	688a      	ldr	r2, [r1, #8]
 800c45a:	690b      	ldr	r3, [r1, #16]
 800c45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c460:	4293      	cmp	r3, r2
 800c462:	bfb8      	it	lt
 800c464:	4613      	movlt	r3, r2
 800c466:	f8c9 3000 	str.w	r3, [r9]
 800c46a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c46e:	4606      	mov	r6, r0
 800c470:	460c      	mov	r4, r1
 800c472:	b112      	cbz	r2, 800c47a <_printf_common+0x2a>
 800c474:	3301      	adds	r3, #1
 800c476:	f8c9 3000 	str.w	r3, [r9]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	0699      	lsls	r1, r3, #26
 800c47e:	bf42      	ittt	mi
 800c480:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c484:	3302      	addmi	r3, #2
 800c486:	f8c9 3000 	strmi.w	r3, [r9]
 800c48a:	6825      	ldr	r5, [r4, #0]
 800c48c:	f015 0506 	ands.w	r5, r5, #6
 800c490:	d107      	bne.n	800c4a2 <_printf_common+0x52>
 800c492:	f104 0a19 	add.w	sl, r4, #25
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	f8d9 2000 	ldr.w	r2, [r9]
 800c49c:	1a9b      	subs	r3, r3, r2
 800c49e:	429d      	cmp	r5, r3
 800c4a0:	db29      	blt.n	800c4f6 <_printf_common+0xa6>
 800c4a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c4a6:	6822      	ldr	r2, [r4, #0]
 800c4a8:	3300      	adds	r3, #0
 800c4aa:	bf18      	it	ne
 800c4ac:	2301      	movne	r3, #1
 800c4ae:	0692      	lsls	r2, r2, #26
 800c4b0:	d42e      	bmi.n	800c510 <_printf_common+0xc0>
 800c4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	47c0      	blx	r8
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d021      	beq.n	800c504 <_printf_common+0xb4>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	68e5      	ldr	r5, [r4, #12]
 800c4c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c4c8:	f003 0306 	and.w	r3, r3, #6
 800c4cc:	2b04      	cmp	r3, #4
 800c4ce:	bf08      	it	eq
 800c4d0:	1aad      	subeq	r5, r5, r2
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	6922      	ldr	r2, [r4, #16]
 800c4d6:	bf0c      	ite	eq
 800c4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4dc:	2500      	movne	r5, #0
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	bfc4      	itt	gt
 800c4e2:	1a9b      	subgt	r3, r3, r2
 800c4e4:	18ed      	addgt	r5, r5, r3
 800c4e6:	f04f 0900 	mov.w	r9, #0
 800c4ea:	341a      	adds	r4, #26
 800c4ec:	454d      	cmp	r5, r9
 800c4ee:	d11b      	bne.n	800c528 <_printf_common+0xd8>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	47c0      	blx	r8
 800c500:	3001      	adds	r0, #1
 800c502:	d103      	bne.n	800c50c <_printf_common+0xbc>
 800c504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50c:	3501      	adds	r5, #1
 800c50e:	e7c2      	b.n	800c496 <_printf_common+0x46>
 800c510:	18e1      	adds	r1, r4, r3
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	2030      	movs	r0, #48	; 0x30
 800c516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c51a:	4422      	add	r2, r4
 800c51c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c524:	3302      	adds	r3, #2
 800c526:	e7c4      	b.n	800c4b2 <_printf_common+0x62>
 800c528:	2301      	movs	r3, #1
 800c52a:	4622      	mov	r2, r4
 800c52c:	4639      	mov	r1, r7
 800c52e:	4630      	mov	r0, r6
 800c530:	47c0      	blx	r8
 800c532:	3001      	adds	r0, #1
 800c534:	d0e6      	beq.n	800c504 <_printf_common+0xb4>
 800c536:	f109 0901 	add.w	r9, r9, #1
 800c53a:	e7d7      	b.n	800c4ec <_printf_common+0x9c>

0800c53c <_printf_i>:
 800c53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c540:	4617      	mov	r7, r2
 800c542:	7e0a      	ldrb	r2, [r1, #24]
 800c544:	b085      	sub	sp, #20
 800c546:	2a6e      	cmp	r2, #110	; 0x6e
 800c548:	4698      	mov	r8, r3
 800c54a:	4606      	mov	r6, r0
 800c54c:	460c      	mov	r4, r1
 800c54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c550:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c554:	f000 80bc 	beq.w	800c6d0 <_printf_i+0x194>
 800c558:	d81a      	bhi.n	800c590 <_printf_i+0x54>
 800c55a:	2a63      	cmp	r2, #99	; 0x63
 800c55c:	d02e      	beq.n	800c5bc <_printf_i+0x80>
 800c55e:	d80a      	bhi.n	800c576 <_printf_i+0x3a>
 800c560:	2a00      	cmp	r2, #0
 800c562:	f000 80c8 	beq.w	800c6f6 <_printf_i+0x1ba>
 800c566:	2a58      	cmp	r2, #88	; 0x58
 800c568:	f000 808a 	beq.w	800c680 <_printf_i+0x144>
 800c56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c570:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c574:	e02a      	b.n	800c5cc <_printf_i+0x90>
 800c576:	2a64      	cmp	r2, #100	; 0x64
 800c578:	d001      	beq.n	800c57e <_printf_i+0x42>
 800c57a:	2a69      	cmp	r2, #105	; 0x69
 800c57c:	d1f6      	bne.n	800c56c <_printf_i+0x30>
 800c57e:	6821      	ldr	r1, [r4, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c586:	d023      	beq.n	800c5d0 <_printf_i+0x94>
 800c588:	1d11      	adds	r1, r2, #4
 800c58a:	6019      	str	r1, [r3, #0]
 800c58c:	6813      	ldr	r3, [r2, #0]
 800c58e:	e027      	b.n	800c5e0 <_printf_i+0xa4>
 800c590:	2a73      	cmp	r2, #115	; 0x73
 800c592:	f000 80b4 	beq.w	800c6fe <_printf_i+0x1c2>
 800c596:	d808      	bhi.n	800c5aa <_printf_i+0x6e>
 800c598:	2a6f      	cmp	r2, #111	; 0x6f
 800c59a:	d02a      	beq.n	800c5f2 <_printf_i+0xb6>
 800c59c:	2a70      	cmp	r2, #112	; 0x70
 800c59e:	d1e5      	bne.n	800c56c <_printf_i+0x30>
 800c5a0:	680a      	ldr	r2, [r1, #0]
 800c5a2:	f042 0220 	orr.w	r2, r2, #32
 800c5a6:	600a      	str	r2, [r1, #0]
 800c5a8:	e003      	b.n	800c5b2 <_printf_i+0x76>
 800c5aa:	2a75      	cmp	r2, #117	; 0x75
 800c5ac:	d021      	beq.n	800c5f2 <_printf_i+0xb6>
 800c5ae:	2a78      	cmp	r2, #120	; 0x78
 800c5b0:	d1dc      	bne.n	800c56c <_printf_i+0x30>
 800c5b2:	2278      	movs	r2, #120	; 0x78
 800c5b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c5b8:	496e      	ldr	r1, [pc, #440]	; (800c774 <_printf_i+0x238>)
 800c5ba:	e064      	b.n	800c686 <_printf_i+0x14a>
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c5c2:	1d11      	adds	r1, r2, #4
 800c5c4:	6019      	str	r1, [r3, #0]
 800c5c6:	6813      	ldr	r3, [r2, #0]
 800c5c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	e0a3      	b.n	800c718 <_printf_i+0x1dc>
 800c5d0:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c5d4:	f102 0104 	add.w	r1, r2, #4
 800c5d8:	6019      	str	r1, [r3, #0]
 800c5da:	d0d7      	beq.n	800c58c <_printf_i+0x50>
 800c5dc:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	da03      	bge.n	800c5ec <_printf_i+0xb0>
 800c5e4:	222d      	movs	r2, #45	; 0x2d
 800c5e6:	425b      	negs	r3, r3
 800c5e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c5ec:	4962      	ldr	r1, [pc, #392]	; (800c778 <_printf_i+0x23c>)
 800c5ee:	220a      	movs	r2, #10
 800c5f0:	e017      	b.n	800c622 <_printf_i+0xe6>
 800c5f2:	6820      	ldr	r0, [r4, #0]
 800c5f4:	6819      	ldr	r1, [r3, #0]
 800c5f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c5fa:	d003      	beq.n	800c604 <_printf_i+0xc8>
 800c5fc:	1d08      	adds	r0, r1, #4
 800c5fe:	6018      	str	r0, [r3, #0]
 800c600:	680b      	ldr	r3, [r1, #0]
 800c602:	e006      	b.n	800c612 <_printf_i+0xd6>
 800c604:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c608:	f101 0004 	add.w	r0, r1, #4
 800c60c:	6018      	str	r0, [r3, #0]
 800c60e:	d0f7      	beq.n	800c600 <_printf_i+0xc4>
 800c610:	880b      	ldrh	r3, [r1, #0]
 800c612:	4959      	ldr	r1, [pc, #356]	; (800c778 <_printf_i+0x23c>)
 800c614:	2a6f      	cmp	r2, #111	; 0x6f
 800c616:	bf14      	ite	ne
 800c618:	220a      	movne	r2, #10
 800c61a:	2208      	moveq	r2, #8
 800c61c:	2000      	movs	r0, #0
 800c61e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c622:	6865      	ldr	r5, [r4, #4]
 800c624:	60a5      	str	r5, [r4, #8]
 800c626:	2d00      	cmp	r5, #0
 800c628:	f2c0 809c 	blt.w	800c764 <_printf_i+0x228>
 800c62c:	6820      	ldr	r0, [r4, #0]
 800c62e:	f020 0004 	bic.w	r0, r0, #4
 800c632:	6020      	str	r0, [r4, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d13f      	bne.n	800c6b8 <_printf_i+0x17c>
 800c638:	2d00      	cmp	r5, #0
 800c63a:	f040 8095 	bne.w	800c768 <_printf_i+0x22c>
 800c63e:	4675      	mov	r5, lr
 800c640:	2a08      	cmp	r2, #8
 800c642:	d10b      	bne.n	800c65c <_printf_i+0x120>
 800c644:	6823      	ldr	r3, [r4, #0]
 800c646:	07da      	lsls	r2, r3, #31
 800c648:	d508      	bpl.n	800c65c <_printf_i+0x120>
 800c64a:	6923      	ldr	r3, [r4, #16]
 800c64c:	6862      	ldr	r2, [r4, #4]
 800c64e:	429a      	cmp	r2, r3
 800c650:	bfde      	ittt	le
 800c652:	2330      	movle	r3, #48	; 0x30
 800c654:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c658:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c65c:	ebae 0305 	sub.w	r3, lr, r5
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	f8cd 8000 	str.w	r8, [sp]
 800c666:	463b      	mov	r3, r7
 800c668:	aa03      	add	r2, sp, #12
 800c66a:	4621      	mov	r1, r4
 800c66c:	4630      	mov	r0, r6
 800c66e:	f7ff feef 	bl	800c450 <_printf_common>
 800c672:	3001      	adds	r0, #1
 800c674:	d155      	bne.n	800c722 <_printf_i+0x1e6>
 800c676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c67a:	b005      	add	sp, #20
 800c67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c680:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c684:	493c      	ldr	r1, [pc, #240]	; (800c778 <_printf_i+0x23c>)
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	6818      	ldr	r0, [r3, #0]
 800c68a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c68e:	f100 0504 	add.w	r5, r0, #4
 800c692:	601d      	str	r5, [r3, #0]
 800c694:	d001      	beq.n	800c69a <_printf_i+0x15e>
 800c696:	6803      	ldr	r3, [r0, #0]
 800c698:	e002      	b.n	800c6a0 <_printf_i+0x164>
 800c69a:	0655      	lsls	r5, r2, #25
 800c69c:	d5fb      	bpl.n	800c696 <_printf_i+0x15a>
 800c69e:	8803      	ldrh	r3, [r0, #0]
 800c6a0:	07d0      	lsls	r0, r2, #31
 800c6a2:	bf44      	itt	mi
 800c6a4:	f042 0220 	orrmi.w	r2, r2, #32
 800c6a8:	6022      	strmi	r2, [r4, #0]
 800c6aa:	b91b      	cbnz	r3, 800c6b4 <_printf_i+0x178>
 800c6ac:	6822      	ldr	r2, [r4, #0]
 800c6ae:	f022 0220 	bic.w	r2, r2, #32
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	2210      	movs	r2, #16
 800c6b6:	e7b1      	b.n	800c61c <_printf_i+0xe0>
 800c6b8:	4675      	mov	r5, lr
 800c6ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6be:	fb02 3310 	mls	r3, r2, r0, r3
 800c6c2:	5ccb      	ldrb	r3, [r1, r3]
 800c6c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d1f5      	bne.n	800c6ba <_printf_i+0x17e>
 800c6ce:	e7b7      	b.n	800c640 <_printf_i+0x104>
 800c6d0:	6808      	ldr	r0, [r1, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	6949      	ldr	r1, [r1, #20]
 800c6d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c6da:	d004      	beq.n	800c6e6 <_printf_i+0x1aa>
 800c6dc:	1d10      	adds	r0, r2, #4
 800c6de:	6018      	str	r0, [r3, #0]
 800c6e0:	6813      	ldr	r3, [r2, #0]
 800c6e2:	6019      	str	r1, [r3, #0]
 800c6e4:	e007      	b.n	800c6f6 <_printf_i+0x1ba>
 800c6e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c6ea:	f102 0004 	add.w	r0, r2, #4
 800c6ee:	6018      	str	r0, [r3, #0]
 800c6f0:	6813      	ldr	r3, [r2, #0]
 800c6f2:	d0f6      	beq.n	800c6e2 <_printf_i+0x1a6>
 800c6f4:	8019      	strh	r1, [r3, #0]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	6123      	str	r3, [r4, #16]
 800c6fa:	4675      	mov	r5, lr
 800c6fc:	e7b1      	b.n	800c662 <_printf_i+0x126>
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	1d11      	adds	r1, r2, #4
 800c702:	6019      	str	r1, [r3, #0]
 800c704:	6815      	ldr	r5, [r2, #0]
 800c706:	6862      	ldr	r2, [r4, #4]
 800c708:	2100      	movs	r1, #0
 800c70a:	4628      	mov	r0, r5
 800c70c:	f7f3 fd70 	bl	80001f0 <memchr>
 800c710:	b108      	cbz	r0, 800c716 <_printf_i+0x1da>
 800c712:	1b40      	subs	r0, r0, r5
 800c714:	6060      	str	r0, [r4, #4]
 800c716:	6863      	ldr	r3, [r4, #4]
 800c718:	6123      	str	r3, [r4, #16]
 800c71a:	2300      	movs	r3, #0
 800c71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c720:	e79f      	b.n	800c662 <_printf_i+0x126>
 800c722:	6923      	ldr	r3, [r4, #16]
 800c724:	462a      	mov	r2, r5
 800c726:	4639      	mov	r1, r7
 800c728:	4630      	mov	r0, r6
 800c72a:	47c0      	blx	r8
 800c72c:	3001      	adds	r0, #1
 800c72e:	d0a2      	beq.n	800c676 <_printf_i+0x13a>
 800c730:	6823      	ldr	r3, [r4, #0]
 800c732:	079b      	lsls	r3, r3, #30
 800c734:	d507      	bpl.n	800c746 <_printf_i+0x20a>
 800c736:	2500      	movs	r5, #0
 800c738:	f104 0919 	add.w	r9, r4, #25
 800c73c:	68e3      	ldr	r3, [r4, #12]
 800c73e:	9a03      	ldr	r2, [sp, #12]
 800c740:	1a9b      	subs	r3, r3, r2
 800c742:	429d      	cmp	r5, r3
 800c744:	db05      	blt.n	800c752 <_printf_i+0x216>
 800c746:	68e0      	ldr	r0, [r4, #12]
 800c748:	9b03      	ldr	r3, [sp, #12]
 800c74a:	4298      	cmp	r0, r3
 800c74c:	bfb8      	it	lt
 800c74e:	4618      	movlt	r0, r3
 800c750:	e793      	b.n	800c67a <_printf_i+0x13e>
 800c752:	2301      	movs	r3, #1
 800c754:	464a      	mov	r2, r9
 800c756:	4639      	mov	r1, r7
 800c758:	4630      	mov	r0, r6
 800c75a:	47c0      	blx	r8
 800c75c:	3001      	adds	r0, #1
 800c75e:	d08a      	beq.n	800c676 <_printf_i+0x13a>
 800c760:	3501      	adds	r5, #1
 800c762:	e7eb      	b.n	800c73c <_printf_i+0x200>
 800c764:	2b00      	cmp	r3, #0
 800c766:	d1a7      	bne.n	800c6b8 <_printf_i+0x17c>
 800c768:	780b      	ldrb	r3, [r1, #0]
 800c76a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c76e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c772:	e765      	b.n	800c640 <_printf_i+0x104>
 800c774:	0807feda 	.word	0x0807feda
 800c778:	0807fec9 	.word	0x0807fec9

0800c77c <_sbrk_r>:
 800c77c:	b538      	push	{r3, r4, r5, lr}
 800c77e:	4c06      	ldr	r4, [pc, #24]	; (800c798 <_sbrk_r+0x1c>)
 800c780:	2300      	movs	r3, #0
 800c782:	4605      	mov	r5, r0
 800c784:	4608      	mov	r0, r1
 800c786:	6023      	str	r3, [r4, #0]
 800c788:	f7ff f97a 	bl	800ba80 <_sbrk>
 800c78c:	1c43      	adds	r3, r0, #1
 800c78e:	d102      	bne.n	800c796 <_sbrk_r+0x1a>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	b103      	cbz	r3, 800c796 <_sbrk_r+0x1a>
 800c794:	602b      	str	r3, [r5, #0]
 800c796:	bd38      	pop	{r3, r4, r5, pc}
 800c798:	2000079c 	.word	0x2000079c

0800c79c <__sread>:
 800c79c:	b510      	push	{r4, lr}
 800c79e:	460c      	mov	r4, r1
 800c7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7a4:	f000 fa98 	bl	800ccd8 <_read_r>
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	bfab      	itete	ge
 800c7ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c7b0:	181b      	addge	r3, r3, r0
 800c7b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7b6:	bfac      	ite	ge
 800c7b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7ba:	81a3      	strhlt	r3, [r4, #12]
 800c7bc:	bd10      	pop	{r4, pc}

0800c7be <__swrite>:
 800c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	461f      	mov	r7, r3
 800c7c4:	898b      	ldrh	r3, [r1, #12]
 800c7c6:	05db      	lsls	r3, r3, #23
 800c7c8:	4605      	mov	r5, r0
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	4616      	mov	r6, r2
 800c7ce:	d505      	bpl.n	800c7dc <__swrite+0x1e>
 800c7d0:	2302      	movs	r3, #2
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d8:	f000 f9b8 	bl	800cb4c <_lseek_r>
 800c7dc:	89a3      	ldrh	r3, [r4, #12]
 800c7de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7e6:	81a3      	strh	r3, [r4, #12]
 800c7e8:	4632      	mov	r2, r6
 800c7ea:	463b      	mov	r3, r7
 800c7ec:	4628      	mov	r0, r5
 800c7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	f000 b869 	b.w	800c8c8 <_write_r>

0800c7f6 <__sseek>:
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fe:	f000 f9a5 	bl	800cb4c <_lseek_r>
 800c802:	1c43      	adds	r3, r0, #1
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	bf15      	itete	ne
 800c808:	6560      	strne	r0, [r4, #84]	; 0x54
 800c80a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c80e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c812:	81a3      	strheq	r3, [r4, #12]
 800c814:	bf18      	it	ne
 800c816:	81a3      	strhne	r3, [r4, #12]
 800c818:	bd10      	pop	{r4, pc}

0800c81a <__sclose>:
 800c81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81e:	f000 b8d3 	b.w	800c9c8 <_close_r>
	...

0800c824 <__swbuf_r>:
 800c824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c826:	460e      	mov	r6, r1
 800c828:	4614      	mov	r4, r2
 800c82a:	4605      	mov	r5, r0
 800c82c:	b118      	cbz	r0, 800c836 <__swbuf_r+0x12>
 800c82e:	6983      	ldr	r3, [r0, #24]
 800c830:	b90b      	cbnz	r3, 800c836 <__swbuf_r+0x12>
 800c832:	f7ff fbe5 	bl	800c000 <__sinit>
 800c836:	4b21      	ldr	r3, [pc, #132]	; (800c8bc <__swbuf_r+0x98>)
 800c838:	429c      	cmp	r4, r3
 800c83a:	d12a      	bne.n	800c892 <__swbuf_r+0x6e>
 800c83c:	686c      	ldr	r4, [r5, #4]
 800c83e:	69a3      	ldr	r3, [r4, #24]
 800c840:	60a3      	str	r3, [r4, #8]
 800c842:	89a3      	ldrh	r3, [r4, #12]
 800c844:	071a      	lsls	r2, r3, #28
 800c846:	d52e      	bpl.n	800c8a6 <__swbuf_r+0x82>
 800c848:	6923      	ldr	r3, [r4, #16]
 800c84a:	b363      	cbz	r3, 800c8a6 <__swbuf_r+0x82>
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	6820      	ldr	r0, [r4, #0]
 800c850:	1ac0      	subs	r0, r0, r3
 800c852:	6963      	ldr	r3, [r4, #20]
 800c854:	b2f6      	uxtb	r6, r6
 800c856:	4298      	cmp	r0, r3
 800c858:	4637      	mov	r7, r6
 800c85a:	db04      	blt.n	800c866 <__swbuf_r+0x42>
 800c85c:	4621      	mov	r1, r4
 800c85e:	4628      	mov	r0, r5
 800c860:	f000 f94a 	bl	800caf8 <_fflush_r>
 800c864:	bb28      	cbnz	r0, 800c8b2 <__swbuf_r+0x8e>
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	3b01      	subs	r3, #1
 800c86a:	60a3      	str	r3, [r4, #8]
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	6022      	str	r2, [r4, #0]
 800c872:	701e      	strb	r6, [r3, #0]
 800c874:	6963      	ldr	r3, [r4, #20]
 800c876:	3001      	adds	r0, #1
 800c878:	4298      	cmp	r0, r3
 800c87a:	d004      	beq.n	800c886 <__swbuf_r+0x62>
 800c87c:	89a3      	ldrh	r3, [r4, #12]
 800c87e:	07db      	lsls	r3, r3, #31
 800c880:	d519      	bpl.n	800c8b6 <__swbuf_r+0x92>
 800c882:	2e0a      	cmp	r6, #10
 800c884:	d117      	bne.n	800c8b6 <__swbuf_r+0x92>
 800c886:	4621      	mov	r1, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	f000 f935 	bl	800caf8 <_fflush_r>
 800c88e:	b190      	cbz	r0, 800c8b6 <__swbuf_r+0x92>
 800c890:	e00f      	b.n	800c8b2 <__swbuf_r+0x8e>
 800c892:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <__swbuf_r+0x9c>)
 800c894:	429c      	cmp	r4, r3
 800c896:	d101      	bne.n	800c89c <__swbuf_r+0x78>
 800c898:	68ac      	ldr	r4, [r5, #8]
 800c89a:	e7d0      	b.n	800c83e <__swbuf_r+0x1a>
 800c89c:	4b09      	ldr	r3, [pc, #36]	; (800c8c4 <__swbuf_r+0xa0>)
 800c89e:	429c      	cmp	r4, r3
 800c8a0:	bf08      	it	eq
 800c8a2:	68ec      	ldreq	r4, [r5, #12]
 800c8a4:	e7cb      	b.n	800c83e <__swbuf_r+0x1a>
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f000 f81f 	bl	800c8ec <__swsetup_r>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0cc      	beq.n	800c84c <__swbuf_r+0x28>
 800c8b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	0807fe78 	.word	0x0807fe78
 800c8c0:	0807fe98 	.word	0x0807fe98
 800c8c4:	0807fe58 	.word	0x0807fe58

0800c8c8 <_write_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4c07      	ldr	r4, [pc, #28]	; (800c8e8 <_write_r+0x20>)
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	6022      	str	r2, [r4, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f7ff f8b5 	bl	800ba46 <_write>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_write_r+0x1e>
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_write_r+0x1e>
 800c8e4:	602b      	str	r3, [r5, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	2000079c 	.word	0x2000079c

0800c8ec <__swsetup_r>:
 800c8ec:	4b32      	ldr	r3, [pc, #200]	; (800c9b8 <__swsetup_r+0xcc>)
 800c8ee:	b570      	push	{r4, r5, r6, lr}
 800c8f0:	681d      	ldr	r5, [r3, #0]
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	b125      	cbz	r5, 800c902 <__swsetup_r+0x16>
 800c8f8:	69ab      	ldr	r3, [r5, #24]
 800c8fa:	b913      	cbnz	r3, 800c902 <__swsetup_r+0x16>
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f7ff fb7f 	bl	800c000 <__sinit>
 800c902:	4b2e      	ldr	r3, [pc, #184]	; (800c9bc <__swsetup_r+0xd0>)
 800c904:	429c      	cmp	r4, r3
 800c906:	d10f      	bne.n	800c928 <__swsetup_r+0x3c>
 800c908:	686c      	ldr	r4, [r5, #4]
 800c90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c90e:	b29a      	uxth	r2, r3
 800c910:	0715      	lsls	r5, r2, #28
 800c912:	d42c      	bmi.n	800c96e <__swsetup_r+0x82>
 800c914:	06d0      	lsls	r0, r2, #27
 800c916:	d411      	bmi.n	800c93c <__swsetup_r+0x50>
 800c918:	2209      	movs	r2, #9
 800c91a:	6032      	str	r2, [r6, #0]
 800c91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c926:	bd70      	pop	{r4, r5, r6, pc}
 800c928:	4b25      	ldr	r3, [pc, #148]	; (800c9c0 <__swsetup_r+0xd4>)
 800c92a:	429c      	cmp	r4, r3
 800c92c:	d101      	bne.n	800c932 <__swsetup_r+0x46>
 800c92e:	68ac      	ldr	r4, [r5, #8]
 800c930:	e7eb      	b.n	800c90a <__swsetup_r+0x1e>
 800c932:	4b24      	ldr	r3, [pc, #144]	; (800c9c4 <__swsetup_r+0xd8>)
 800c934:	429c      	cmp	r4, r3
 800c936:	bf08      	it	eq
 800c938:	68ec      	ldreq	r4, [r5, #12]
 800c93a:	e7e6      	b.n	800c90a <__swsetup_r+0x1e>
 800c93c:	0751      	lsls	r1, r2, #29
 800c93e:	d512      	bpl.n	800c966 <__swsetup_r+0x7a>
 800c940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c942:	b141      	cbz	r1, 800c956 <__swsetup_r+0x6a>
 800c944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c948:	4299      	cmp	r1, r3
 800c94a:	d002      	beq.n	800c952 <__swsetup_r+0x66>
 800c94c:	4630      	mov	r0, r6
 800c94e:	f000 f975 	bl	800cc3c <_free_r>
 800c952:	2300      	movs	r3, #0
 800c954:	6363      	str	r3, [r4, #52]	; 0x34
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c95c:	81a3      	strh	r3, [r4, #12]
 800c95e:	2300      	movs	r3, #0
 800c960:	6063      	str	r3, [r4, #4]
 800c962:	6923      	ldr	r3, [r4, #16]
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f043 0308 	orr.w	r3, r3, #8
 800c96c:	81a3      	strh	r3, [r4, #12]
 800c96e:	6923      	ldr	r3, [r4, #16]
 800c970:	b94b      	cbnz	r3, 800c986 <__swsetup_r+0x9a>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c97c:	d003      	beq.n	800c986 <__swsetup_r+0x9a>
 800c97e:	4621      	mov	r1, r4
 800c980:	4630      	mov	r0, r6
 800c982:	f000 f919 	bl	800cbb8 <__smakebuf_r>
 800c986:	89a2      	ldrh	r2, [r4, #12]
 800c988:	f012 0301 	ands.w	r3, r2, #1
 800c98c:	d00c      	beq.n	800c9a8 <__swsetup_r+0xbc>
 800c98e:	2300      	movs	r3, #0
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	6963      	ldr	r3, [r4, #20]
 800c994:	425b      	negs	r3, r3
 800c996:	61a3      	str	r3, [r4, #24]
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	b953      	cbnz	r3, 800c9b2 <__swsetup_r+0xc6>
 800c99c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c9a4:	d1ba      	bne.n	800c91c <__swsetup_r+0x30>
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	0792      	lsls	r2, r2, #30
 800c9aa:	bf58      	it	pl
 800c9ac:	6963      	ldrpl	r3, [r4, #20]
 800c9ae:	60a3      	str	r3, [r4, #8]
 800c9b0:	e7f2      	b.n	800c998 <__swsetup_r+0xac>
 800c9b2:	2000      	movs	r0, #0
 800c9b4:	e7f7      	b.n	800c9a6 <__swsetup_r+0xba>
 800c9b6:	bf00      	nop
 800c9b8:	20000080 	.word	0x20000080
 800c9bc:	0807fe78 	.word	0x0807fe78
 800c9c0:	0807fe98 	.word	0x0807fe98
 800c9c4:	0807fe58 	.word	0x0807fe58

0800c9c8 <_close_r>:
 800c9c8:	b538      	push	{r3, r4, r5, lr}
 800c9ca:	4c06      	ldr	r4, [pc, #24]	; (800c9e4 <_close_r+0x1c>)
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	6023      	str	r3, [r4, #0]
 800c9d4:	f7ff f880 	bl	800bad8 <_close>
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	d102      	bne.n	800c9e2 <_close_r+0x1a>
 800c9dc:	6823      	ldr	r3, [r4, #0]
 800c9de:	b103      	cbz	r3, 800c9e2 <_close_r+0x1a>
 800c9e0:	602b      	str	r3, [r5, #0]
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	2000079c 	.word	0x2000079c

0800c9e8 <__sflush_r>:
 800c9e8:	898a      	ldrh	r2, [r1, #12]
 800c9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	0710      	lsls	r0, r2, #28
 800c9f2:	460c      	mov	r4, r1
 800c9f4:	d45a      	bmi.n	800caac <__sflush_r+0xc4>
 800c9f6:	684b      	ldr	r3, [r1, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	dc05      	bgt.n	800ca08 <__sflush_r+0x20>
 800c9fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	dc02      	bgt.n	800ca08 <__sflush_r+0x20>
 800ca02:	2000      	movs	r0, #0
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca0a:	2e00      	cmp	r6, #0
 800ca0c:	d0f9      	beq.n	800ca02 <__sflush_r+0x1a>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ca14:	682f      	ldr	r7, [r5, #0]
 800ca16:	602b      	str	r3, [r5, #0]
 800ca18:	d033      	beq.n	800ca82 <__sflush_r+0x9a>
 800ca1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ca1c:	89a3      	ldrh	r3, [r4, #12]
 800ca1e:	075a      	lsls	r2, r3, #29
 800ca20:	d505      	bpl.n	800ca2e <__sflush_r+0x46>
 800ca22:	6863      	ldr	r3, [r4, #4]
 800ca24:	1ac0      	subs	r0, r0, r3
 800ca26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ca28:	b10b      	cbz	r3, 800ca2e <__sflush_r+0x46>
 800ca2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca2c:	1ac0      	subs	r0, r0, r3
 800ca2e:	2300      	movs	r3, #0
 800ca30:	4602      	mov	r2, r0
 800ca32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca34:	6a21      	ldr	r1, [r4, #32]
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b0      	blx	r6
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	d106      	bne.n	800ca4e <__sflush_r+0x66>
 800ca40:	6829      	ldr	r1, [r5, #0]
 800ca42:	291d      	cmp	r1, #29
 800ca44:	d84b      	bhi.n	800cade <__sflush_r+0xf6>
 800ca46:	4a2b      	ldr	r2, [pc, #172]	; (800caf4 <__sflush_r+0x10c>)
 800ca48:	40ca      	lsrs	r2, r1
 800ca4a:	07d6      	lsls	r6, r2, #31
 800ca4c:	d547      	bpl.n	800cade <__sflush_r+0xf6>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	6062      	str	r2, [r4, #4]
 800ca52:	04d9      	lsls	r1, r3, #19
 800ca54:	6922      	ldr	r2, [r4, #16]
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	d504      	bpl.n	800ca64 <__sflush_r+0x7c>
 800ca5a:	1c42      	adds	r2, r0, #1
 800ca5c:	d101      	bne.n	800ca62 <__sflush_r+0x7a>
 800ca5e:	682b      	ldr	r3, [r5, #0]
 800ca60:	b903      	cbnz	r3, 800ca64 <__sflush_r+0x7c>
 800ca62:	6560      	str	r0, [r4, #84]	; 0x54
 800ca64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca66:	602f      	str	r7, [r5, #0]
 800ca68:	2900      	cmp	r1, #0
 800ca6a:	d0ca      	beq.n	800ca02 <__sflush_r+0x1a>
 800ca6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca70:	4299      	cmp	r1, r3
 800ca72:	d002      	beq.n	800ca7a <__sflush_r+0x92>
 800ca74:	4628      	mov	r0, r5
 800ca76:	f000 f8e1 	bl	800cc3c <_free_r>
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ca7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca82:	6a21      	ldr	r1, [r4, #32]
 800ca84:	2301      	movs	r3, #1
 800ca86:	4628      	mov	r0, r5
 800ca88:	47b0      	blx	r6
 800ca8a:	1c41      	adds	r1, r0, #1
 800ca8c:	d1c6      	bne.n	800ca1c <__sflush_r+0x34>
 800ca8e:	682b      	ldr	r3, [r5, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d0c3      	beq.n	800ca1c <__sflush_r+0x34>
 800ca94:	2b1d      	cmp	r3, #29
 800ca96:	d001      	beq.n	800ca9c <__sflush_r+0xb4>
 800ca98:	2b16      	cmp	r3, #22
 800ca9a:	d101      	bne.n	800caa0 <__sflush_r+0xb8>
 800ca9c:	602f      	str	r7, [r5, #0]
 800ca9e:	e7b0      	b.n	800ca02 <__sflush_r+0x1a>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa6:	81a3      	strh	r3, [r4, #12]
 800caa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caac:	690f      	ldr	r7, [r1, #16]
 800caae:	2f00      	cmp	r7, #0
 800cab0:	d0a7      	beq.n	800ca02 <__sflush_r+0x1a>
 800cab2:	0793      	lsls	r3, r2, #30
 800cab4:	680e      	ldr	r6, [r1, #0]
 800cab6:	bf08      	it	eq
 800cab8:	694b      	ldreq	r3, [r1, #20]
 800caba:	600f      	str	r7, [r1, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2300      	movne	r3, #0
 800cac0:	eba6 0807 	sub.w	r8, r6, r7
 800cac4:	608b      	str	r3, [r1, #8]
 800cac6:	f1b8 0f00 	cmp.w	r8, #0
 800caca:	dd9a      	ble.n	800ca02 <__sflush_r+0x1a>
 800cacc:	4643      	mov	r3, r8
 800cace:	463a      	mov	r2, r7
 800cad0:	6a21      	ldr	r1, [r4, #32]
 800cad2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cad4:	4628      	mov	r0, r5
 800cad6:	47b0      	blx	r6
 800cad8:	2800      	cmp	r0, #0
 800cada:	dc07      	bgt.n	800caec <__sflush_r+0x104>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caec:	4407      	add	r7, r0
 800caee:	eba8 0800 	sub.w	r8, r8, r0
 800caf2:	e7e8      	b.n	800cac6 <__sflush_r+0xde>
 800caf4:	20400001 	.word	0x20400001

0800caf8 <_fflush_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	690b      	ldr	r3, [r1, #16]
 800cafc:	4605      	mov	r5, r0
 800cafe:	460c      	mov	r4, r1
 800cb00:	b1db      	cbz	r3, 800cb3a <_fflush_r+0x42>
 800cb02:	b118      	cbz	r0, 800cb0c <_fflush_r+0x14>
 800cb04:	6983      	ldr	r3, [r0, #24]
 800cb06:	b90b      	cbnz	r3, 800cb0c <_fflush_r+0x14>
 800cb08:	f7ff fa7a 	bl	800c000 <__sinit>
 800cb0c:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <_fflush_r+0x48>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	d109      	bne.n	800cb26 <_fflush_r+0x2e>
 800cb12:	686c      	ldr	r4, [r5, #4]
 800cb14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb18:	b17b      	cbz	r3, 800cb3a <_fflush_r+0x42>
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb22:	f7ff bf61 	b.w	800c9e8 <__sflush_r>
 800cb26:	4b07      	ldr	r3, [pc, #28]	; (800cb44 <_fflush_r+0x4c>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	d101      	bne.n	800cb30 <_fflush_r+0x38>
 800cb2c:	68ac      	ldr	r4, [r5, #8]
 800cb2e:	e7f1      	b.n	800cb14 <_fflush_r+0x1c>
 800cb30:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <_fflush_r+0x50>)
 800cb32:	429c      	cmp	r4, r3
 800cb34:	bf08      	it	eq
 800cb36:	68ec      	ldreq	r4, [r5, #12]
 800cb38:	e7ec      	b.n	800cb14 <_fflush_r+0x1c>
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	bd38      	pop	{r3, r4, r5, pc}
 800cb3e:	bf00      	nop
 800cb40:	0807fe78 	.word	0x0807fe78
 800cb44:	0807fe98 	.word	0x0807fe98
 800cb48:	0807fe58 	.word	0x0807fe58

0800cb4c <_lseek_r>:
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4c07      	ldr	r4, [pc, #28]	; (800cb6c <_lseek_r+0x20>)
 800cb50:	4605      	mov	r5, r0
 800cb52:	4608      	mov	r0, r1
 800cb54:	4611      	mov	r1, r2
 800cb56:	2200      	movs	r2, #0
 800cb58:	6022      	str	r2, [r4, #0]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	f7fe ffe3 	bl	800bb26 <_lseek>
 800cb60:	1c43      	adds	r3, r0, #1
 800cb62:	d102      	bne.n	800cb6a <_lseek_r+0x1e>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	b103      	cbz	r3, 800cb6a <_lseek_r+0x1e>
 800cb68:	602b      	str	r3, [r5, #0]
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}
 800cb6c:	2000079c 	.word	0x2000079c

0800cb70 <__swhatbuf_r>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	460e      	mov	r6, r1
 800cb74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb78:	2900      	cmp	r1, #0
 800cb7a:	b090      	sub	sp, #64	; 0x40
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	461d      	mov	r5, r3
 800cb80:	da07      	bge.n	800cb92 <__swhatbuf_r+0x22>
 800cb82:	2300      	movs	r3, #0
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	89b3      	ldrh	r3, [r6, #12]
 800cb88:	061a      	lsls	r2, r3, #24
 800cb8a:	d410      	bmi.n	800cbae <__swhatbuf_r+0x3e>
 800cb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb90:	e00e      	b.n	800cbb0 <__swhatbuf_r+0x40>
 800cb92:	aa01      	add	r2, sp, #4
 800cb94:	f000 f8b2 	bl	800ccfc <_fstat_r>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	dbf2      	blt.n	800cb82 <__swhatbuf_r+0x12>
 800cb9c:	9a02      	ldr	r2, [sp, #8]
 800cb9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cba6:	425a      	negs	r2, r3
 800cba8:	415a      	adcs	r2, r3
 800cbaa:	602a      	str	r2, [r5, #0]
 800cbac:	e7ee      	b.n	800cb8c <__swhatbuf_r+0x1c>
 800cbae:	2340      	movs	r3, #64	; 0x40
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	b010      	add	sp, #64	; 0x40
 800cbb6:	bd70      	pop	{r4, r5, r6, pc}

0800cbb8 <__smakebuf_r>:
 800cbb8:	898b      	ldrh	r3, [r1, #12]
 800cbba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbbc:	079d      	lsls	r5, r3, #30
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	d507      	bpl.n	800cbd4 <__smakebuf_r+0x1c>
 800cbc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbc8:	6023      	str	r3, [r4, #0]
 800cbca:	6123      	str	r3, [r4, #16]
 800cbcc:	2301      	movs	r3, #1
 800cbce:	6163      	str	r3, [r4, #20]
 800cbd0:	b002      	add	sp, #8
 800cbd2:	bd70      	pop	{r4, r5, r6, pc}
 800cbd4:	ab01      	add	r3, sp, #4
 800cbd6:	466a      	mov	r2, sp
 800cbd8:	f7ff ffca 	bl	800cb70 <__swhatbuf_r>
 800cbdc:	9900      	ldr	r1, [sp, #0]
 800cbde:	4605      	mov	r5, r0
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7ff fa97 	bl	800c114 <_malloc_r>
 800cbe6:	b948      	cbnz	r0, 800cbfc <__smakebuf_r+0x44>
 800cbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbec:	059a      	lsls	r2, r3, #22
 800cbee:	d4ef      	bmi.n	800cbd0 <__smakebuf_r+0x18>
 800cbf0:	f023 0303 	bic.w	r3, r3, #3
 800cbf4:	f043 0302 	orr.w	r3, r3, #2
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	e7e3      	b.n	800cbc4 <__smakebuf_r+0xc>
 800cbfc:	4b0d      	ldr	r3, [pc, #52]	; (800cc34 <__smakebuf_r+0x7c>)
 800cbfe:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	6020      	str	r0, [r4, #0]
 800cc04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc08:	81a3      	strh	r3, [r4, #12]
 800cc0a:	9b00      	ldr	r3, [sp, #0]
 800cc0c:	6163      	str	r3, [r4, #20]
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	6120      	str	r0, [r4, #16]
 800cc12:	b15b      	cbz	r3, 800cc2c <__smakebuf_r+0x74>
 800cc14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f000 f881 	bl	800cd20 <_isatty_r>
 800cc1e:	b128      	cbz	r0, 800cc2c <__smakebuf_r+0x74>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	f023 0303 	bic.w	r3, r3, #3
 800cc26:	f043 0301 	orr.w	r3, r3, #1
 800cc2a:	81a3      	strh	r3, [r4, #12]
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	431d      	orrs	r5, r3
 800cc30:	81a5      	strh	r5, [r4, #12]
 800cc32:	e7cd      	b.n	800cbd0 <__smakebuf_r+0x18>
 800cc34:	0800bf81 	.word	0x0800bf81

0800cc38 <__malloc_lock>:
 800cc38:	4770      	bx	lr

0800cc3a <__malloc_unlock>:
 800cc3a:	4770      	bx	lr

0800cc3c <_free_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4605      	mov	r5, r0
 800cc40:	2900      	cmp	r1, #0
 800cc42:	d045      	beq.n	800ccd0 <_free_r+0x94>
 800cc44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc48:	1f0c      	subs	r4, r1, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	bfb8      	it	lt
 800cc4e:	18e4      	addlt	r4, r4, r3
 800cc50:	f7ff fff2 	bl	800cc38 <__malloc_lock>
 800cc54:	4a1f      	ldr	r2, [pc, #124]	; (800ccd4 <_free_r+0x98>)
 800cc56:	6813      	ldr	r3, [r2, #0]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	b933      	cbnz	r3, 800cc6a <_free_r+0x2e>
 800cc5c:	6063      	str	r3, [r4, #4]
 800cc5e:	6014      	str	r4, [r2, #0]
 800cc60:	4628      	mov	r0, r5
 800cc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc66:	f7ff bfe8 	b.w	800cc3a <__malloc_unlock>
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	d90c      	bls.n	800cc88 <_free_r+0x4c>
 800cc6e:	6821      	ldr	r1, [r4, #0]
 800cc70:	1862      	adds	r2, r4, r1
 800cc72:	4293      	cmp	r3, r2
 800cc74:	bf04      	itt	eq
 800cc76:	681a      	ldreq	r2, [r3, #0]
 800cc78:	685b      	ldreq	r3, [r3, #4]
 800cc7a:	6063      	str	r3, [r4, #4]
 800cc7c:	bf04      	itt	eq
 800cc7e:	1852      	addeq	r2, r2, r1
 800cc80:	6022      	streq	r2, [r4, #0]
 800cc82:	6004      	str	r4, [r0, #0]
 800cc84:	e7ec      	b.n	800cc60 <_free_r+0x24>
 800cc86:	4613      	mov	r3, r2
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	b10a      	cbz	r2, 800cc90 <_free_r+0x54>
 800cc8c:	42a2      	cmp	r2, r4
 800cc8e:	d9fa      	bls.n	800cc86 <_free_r+0x4a>
 800cc90:	6819      	ldr	r1, [r3, #0]
 800cc92:	1858      	adds	r0, r3, r1
 800cc94:	42a0      	cmp	r0, r4
 800cc96:	d10b      	bne.n	800ccb0 <_free_r+0x74>
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	4401      	add	r1, r0
 800cc9c:	1858      	adds	r0, r3, r1
 800cc9e:	4282      	cmp	r2, r0
 800cca0:	6019      	str	r1, [r3, #0]
 800cca2:	d1dd      	bne.n	800cc60 <_free_r+0x24>
 800cca4:	6810      	ldr	r0, [r2, #0]
 800cca6:	6852      	ldr	r2, [r2, #4]
 800cca8:	605a      	str	r2, [r3, #4]
 800ccaa:	4401      	add	r1, r0
 800ccac:	6019      	str	r1, [r3, #0]
 800ccae:	e7d7      	b.n	800cc60 <_free_r+0x24>
 800ccb0:	d902      	bls.n	800ccb8 <_free_r+0x7c>
 800ccb2:	230c      	movs	r3, #12
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	e7d3      	b.n	800cc60 <_free_r+0x24>
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	1821      	adds	r1, r4, r0
 800ccbc:	428a      	cmp	r2, r1
 800ccbe:	bf04      	itt	eq
 800ccc0:	6811      	ldreq	r1, [r2, #0]
 800ccc2:	6852      	ldreq	r2, [r2, #4]
 800ccc4:	6062      	str	r2, [r4, #4]
 800ccc6:	bf04      	itt	eq
 800ccc8:	1809      	addeq	r1, r1, r0
 800ccca:	6021      	streq	r1, [r4, #0]
 800cccc:	605c      	str	r4, [r3, #4]
 800ccce:	e7c7      	b.n	800cc60 <_free_r+0x24>
 800ccd0:	bd38      	pop	{r3, r4, r5, pc}
 800ccd2:	bf00      	nop
 800ccd4:	200002b8 	.word	0x200002b8

0800ccd8 <_read_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	4c07      	ldr	r4, [pc, #28]	; (800ccf8 <_read_r+0x20>)
 800ccdc:	4605      	mov	r5, r0
 800ccde:	4608      	mov	r0, r1
 800cce0:	4611      	mov	r1, r2
 800cce2:	2200      	movs	r2, #0
 800cce4:	6022      	str	r2, [r4, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	f7fe fe90 	bl	800ba0c <_read>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_read_r+0x1e>
 800ccf0:	6823      	ldr	r3, [r4, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_read_r+0x1e>
 800ccf4:	602b      	str	r3, [r5, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	2000079c 	.word	0x2000079c

0800ccfc <_fstat_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4c07      	ldr	r4, [pc, #28]	; (800cd1c <_fstat_r+0x20>)
 800cd00:	2300      	movs	r3, #0
 800cd02:	4605      	mov	r5, r0
 800cd04:	4608      	mov	r0, r1
 800cd06:	4611      	mov	r1, r2
 800cd08:	6023      	str	r3, [r4, #0]
 800cd0a:	f7fe fef1 	bl	800baf0 <_fstat>
 800cd0e:	1c43      	adds	r3, r0, #1
 800cd10:	d102      	bne.n	800cd18 <_fstat_r+0x1c>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	b103      	cbz	r3, 800cd18 <_fstat_r+0x1c>
 800cd16:	602b      	str	r3, [r5, #0]
 800cd18:	bd38      	pop	{r3, r4, r5, pc}
 800cd1a:	bf00      	nop
 800cd1c:	2000079c 	.word	0x2000079c

0800cd20 <_isatty_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4c06      	ldr	r4, [pc, #24]	; (800cd3c <_isatty_r+0x1c>)
 800cd24:	2300      	movs	r3, #0
 800cd26:	4605      	mov	r5, r0
 800cd28:	4608      	mov	r0, r1
 800cd2a:	6023      	str	r3, [r4, #0]
 800cd2c:	f7fe fef0 	bl	800bb10 <_isatty>
 800cd30:	1c43      	adds	r3, r0, #1
 800cd32:	d102      	bne.n	800cd3a <_isatty_r+0x1a>
 800cd34:	6823      	ldr	r3, [r4, #0]
 800cd36:	b103      	cbz	r3, 800cd3a <_isatty_r+0x1a>
 800cd38:	602b      	str	r3, [r5, #0]
 800cd3a:	bd38      	pop	{r3, r4, r5, pc}
 800cd3c:	2000079c 	.word	0x2000079c

0800cd40 <_init>:
 800cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd42:	bf00      	nop
 800cd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd46:	bc08      	pop	{r3}
 800cd48:	469e      	mov	lr, r3
 800cd4a:	4770      	bx	lr

0800cd4c <_fini>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	bf00      	nop
 800cd50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd52:	bc08      	pop	{r3}
 800cd54:	469e      	mov	lr, r3
 800cd56:	4770      	bx	lr
